
final-project-444-new-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099ac  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08009b6c  08009b6c  00019b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d74  08009d74  000203c8  2**0
                  CONTENTS
  4 .ARM          00000008  08009d74  08009d74  00019d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d7c  08009d7c  000203c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d7c  08009d7c  00019d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d80  08009d80  00019d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  08009d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200003c8  0800a14c  000203c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  0800a14c  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a06d  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b05  00000000  00000000  0003a465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003cf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  0003e1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c324  00000000  00000000  0003f338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016693  00000000  00000000  0006b65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109ba0  00000000  00000000  00081cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b88f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005308  00000000  00000000  0018b8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200003c8 	.word	0x200003c8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009b54 	.word	0x08009b54

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200003cc 	.word	0x200003cc
 80001fc:	08009b54 	.word	0x08009b54

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005da:	2300      	movs	r3, #0
 80005dc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005de:	2003      	movs	r0, #3
 80005e0:	f000 f942 	bl	8000868 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 f80d 	bl	8000604 <HAL_InitTick>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d002      	beq.n	80005f6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	e001      	b.n	80005fa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005f6:	f003 fe6b 	bl	80042d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_InitTick+0x6c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d023      	beq.n	8000660 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <HAL_InitTick+0x70>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_InitTick+0x6c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000626:	fbb3 f3f1 	udiv	r3, r3, r1
 800062a:	fbb2 f3f3 	udiv	r3, r2, r3
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f941 	bl	80008b6 <HAL_SYSTICK_Config>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10f      	bne.n	800065a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d809      	bhi.n	8000654 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295
 8000648:	f000 f919 	bl	800087e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800064c:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <HAL_InitTick+0x74>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	e007      	b.n	8000664 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000654:	2301      	movs	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	e004      	b.n	8000664 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	e001      	b.n	8000664 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000004 	.word	0x20000004
 8000674:	200000a4 	.word	0x200000a4
 8000678:	20000000 	.word	0x20000000

0800067c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x20>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_IncTick+0x24>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <HAL_IncTick+0x24>)
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000004 	.word	0x20000004
 80006a0:	200003e4 	.word	0x200003e4

080006a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return uwTick;
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <HAL_GetTick+0x14>)
 80006aa:	681b      	ldr	r3, [r3, #0]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	200003e4 	.word	0x200003e4

080006bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c4:	f7ff ffee 	bl	80006a4 <HAL_GetTick>
 80006c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d4:	d005      	beq.n	80006e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_Delay+0x44>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4413      	add	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006e2:	bf00      	nop
 80006e4:	f7ff ffde 	bl	80006a4 <HAL_GetTick>
 80006e8:	4602      	mov	r2, r0
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d8f7      	bhi.n	80006e4 <HAL_Delay+0x28>
  {
  }
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000004 	.word	0x20000004

08000704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800072c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000736:	4a04      	ldr	r2, [pc, #16]	; (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	60d3      	str	r3, [r2, #12]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <__NVIC_GetPriorityGrouping+0x18>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	f003 0307 	and.w	r3, r3, #7
}
 800075a:	4618      	mov	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db0a      	blt.n	8000792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	b2da      	uxtb	r2, r3
 8000780:	490c      	ldr	r1, [pc, #48]	; (80007b4 <__NVIC_SetPriority+0x4c>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	440b      	add	r3, r1
 800078c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000790:	e00a      	b.n	80007a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4908      	ldr	r1, [pc, #32]	; (80007b8 <__NVIC_SetPriority+0x50>)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 030f 	and.w	r3, r3, #15
 800079e:	3b04      	subs	r3, #4
 80007a0:	0112      	lsls	r2, r2, #4
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	440b      	add	r3, r1
 80007a6:	761a      	strb	r2, [r3, #24]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f1c3 0307 	rsb	r3, r3, #7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	bf28      	it	cs
 80007da:	2304      	movcs	r3, #4
 80007dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2b06      	cmp	r3, #6
 80007e4:	d902      	bls.n	80007ec <NVIC_EncodePriority+0x30>
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3b03      	subs	r3, #3
 80007ea:	e000      	b.n	80007ee <NVIC_EncodePriority+0x32>
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43da      	mvns	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	401a      	ands	r2, r3
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000804:	f04f 31ff 	mov.w	r1, #4294967295
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43d9      	mvns	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	4313      	orrs	r3, r2
         );
}
 8000816:	4618      	mov	r0, r3
 8000818:	3724      	adds	r7, #36	; 0x24
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000834:	d301      	bcc.n	800083a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000836:	2301      	movs	r3, #1
 8000838:	e00f      	b.n	800085a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <SysTick_Config+0x40>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000842:	210f      	movs	r1, #15
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f7ff ff8e 	bl	8000768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <SysTick_Config+0x40>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000852:	4b04      	ldr	r3, [pc, #16]	; (8000864 <SysTick_Config+0x40>)
 8000854:	2207      	movs	r2, #7
 8000856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	e000e010 	.word	0xe000e010

08000868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff47 	bl	8000704 <__NVIC_SetPriorityGrouping>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000890:	f7ff ff5c 	bl	800074c <__NVIC_GetPriorityGrouping>
 8000894:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	6978      	ldr	r0, [r7, #20]
 800089c:	f7ff ff8e 	bl	80007bc <NVIC_EncodePriority>
 80008a0:	4602      	mov	r2, r0
 80008a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff5d 	bl	8000768 <__NVIC_SetPriority>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffb0 	bl	8000824 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008de:	e166      	b.n	8000bae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	2101      	movs	r1, #1
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f000 8158 	beq.w	8000ba8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 0303 	and.w	r3, r3, #3
 8000900:	2b01      	cmp	r3, #1
 8000902:	d005      	beq.n	8000910 <HAL_GPIO_Init+0x40>
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f003 0303 	and.w	r3, r3, #3
 800090c:	2b02      	cmp	r3, #2
 800090e:	d130      	bne.n	8000972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2203      	movs	r2, #3
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000946:	2201      	movs	r2, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	f003 0201 	and.w	r2, r3, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f003 0303 	and.w	r3, r3, #3
 800097a:	2b03      	cmp	r3, #3
 800097c:	d017      	beq.n	80009ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	2203      	movs	r2, #3
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4013      	ands	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	689a      	ldr	r2, [r3, #8]
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f003 0303 	and.w	r3, r3, #3
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d123      	bne.n	8000a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	08da      	lsrs	r2, r3, #3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3208      	adds	r2, #8
 80009c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	220f      	movs	r2, #15
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	691a      	ldr	r2, [r3, #16]
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	f003 0307 	and.w	r3, r3, #7
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	08da      	lsrs	r2, r3, #3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3208      	adds	r2, #8
 80009fc:	6939      	ldr	r1, [r7, #16]
 80009fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f003 0203 	and.w	r2, r3, #3
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 80b2 	beq.w	8000ba8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a44:	4b61      	ldr	r3, [pc, #388]	; (8000bcc <HAL_GPIO_Init+0x2fc>)
 8000a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a48:	4a60      	ldr	r2, [pc, #384]	; (8000bcc <HAL_GPIO_Init+0x2fc>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6613      	str	r3, [r2, #96]	; 0x60
 8000a50:	4b5e      	ldr	r3, [pc, #376]	; (8000bcc <HAL_GPIO_Init+0x2fc>)
 8000a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a5c:	4a5c      	ldr	r2, [pc, #368]	; (8000bd0 <HAL_GPIO_Init+0x300>)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3302      	adds	r3, #2
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	220f      	movs	r2, #15
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a86:	d02b      	beq.n	8000ae0 <HAL_GPIO_Init+0x210>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a52      	ldr	r2, [pc, #328]	; (8000bd4 <HAL_GPIO_Init+0x304>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d025      	beq.n	8000adc <HAL_GPIO_Init+0x20c>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a51      	ldr	r2, [pc, #324]	; (8000bd8 <HAL_GPIO_Init+0x308>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d01f      	beq.n	8000ad8 <HAL_GPIO_Init+0x208>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a50      	ldr	r2, [pc, #320]	; (8000bdc <HAL_GPIO_Init+0x30c>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d019      	beq.n	8000ad4 <HAL_GPIO_Init+0x204>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a4f      	ldr	r2, [pc, #316]	; (8000be0 <HAL_GPIO_Init+0x310>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d013      	beq.n	8000ad0 <HAL_GPIO_Init+0x200>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a4e      	ldr	r2, [pc, #312]	; (8000be4 <HAL_GPIO_Init+0x314>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d00d      	beq.n	8000acc <HAL_GPIO_Init+0x1fc>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a4d      	ldr	r2, [pc, #308]	; (8000be8 <HAL_GPIO_Init+0x318>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d007      	beq.n	8000ac8 <HAL_GPIO_Init+0x1f8>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a4c      	ldr	r2, [pc, #304]	; (8000bec <HAL_GPIO_Init+0x31c>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d101      	bne.n	8000ac4 <HAL_GPIO_Init+0x1f4>
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	e00e      	b.n	8000ae2 <HAL_GPIO_Init+0x212>
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	e00c      	b.n	8000ae2 <HAL_GPIO_Init+0x212>
 8000ac8:	2306      	movs	r3, #6
 8000aca:	e00a      	b.n	8000ae2 <HAL_GPIO_Init+0x212>
 8000acc:	2305      	movs	r3, #5
 8000ace:	e008      	b.n	8000ae2 <HAL_GPIO_Init+0x212>
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	e006      	b.n	8000ae2 <HAL_GPIO_Init+0x212>
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e004      	b.n	8000ae2 <HAL_GPIO_Init+0x212>
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e002      	b.n	8000ae2 <HAL_GPIO_Init+0x212>
 8000adc:	2301      	movs	r3, #1
 8000ade:	e000      	b.n	8000ae2 <HAL_GPIO_Init+0x212>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	f002 0203 	and.w	r2, r2, #3
 8000ae8:	0092      	lsls	r2, r2, #2
 8000aea:	4093      	lsls	r3, r2
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000af2:	4937      	ldr	r1, [pc, #220]	; (8000bd0 <HAL_GPIO_Init+0x300>)
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	3302      	adds	r3, #2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b00:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <HAL_GPIO_Init+0x320>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b24:	4a32      	ldr	r2, [pc, #200]	; (8000bf0 <HAL_GPIO_Init+0x320>)
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b2a:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <HAL_GPIO_Init+0x320>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b4e:	4a28      	ldr	r2, [pc, #160]	; (8000bf0 <HAL_GPIO_Init+0x320>)
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b54:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <HAL_GPIO_Init+0x320>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b78:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <HAL_GPIO_Init+0x320>)
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_GPIO_Init+0x320>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ba2:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <HAL_GPIO_Init+0x320>)
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f47f ae91 	bne.w	80008e0 <HAL_GPIO_Init+0x10>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	371c      	adds	r7, #28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010000 	.word	0x40010000
 8000bd4:	48000400 	.word	0x48000400
 8000bd8:	48000800 	.word	0x48000800
 8000bdc:	48000c00 	.word	0x48000c00
 8000be0:	48001000 	.word	0x48001000
 8000be4:	48001400 	.word	0x48001400
 8000be8:	48001800 	.word	0x48001800
 8000bec:	48001c00 	.word	0x48001c00
 8000bf0:	40010400 	.word	0x40010400

08000bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e081      	b.n	8000d0a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d106      	bne.n	8000c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f003 fb7c 	bl	8004318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2224      	movs	r2, #36	; 0x24
 8000c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 0201 	bic.w	r2, r2, #1
 8000c36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d107      	bne.n	8000c6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	e006      	b.n	8000c7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000c7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d104      	bne.n	8000c8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	6812      	ldr	r2, [r2, #0]
 8000c98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691a      	ldr	r2, [r3, #16]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69d9      	ldr	r1, [r3, #28]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a1a      	ldr	r2, [r3, #32]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0201 	orr.w	r2, r2, #1
 8000cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2220      	movs	r2, #32
 8000cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	460b      	mov	r3, r1
 8000d22:	817b      	strh	r3, [r7, #10]
 8000d24:	4613      	mov	r3, r2
 8000d26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b20      	cmp	r3, #32
 8000d32:	f040 80da 	bne.w	8000eea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d101      	bne.n	8000d44 <HAL_I2C_Master_Transmit+0x30>
 8000d40:	2302      	movs	r3, #2
 8000d42:	e0d3      	b.n	8000eec <HAL_I2C_Master_Transmit+0x1d8>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2201      	movs	r2, #1
 8000d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000d4c:	f7ff fcaa 	bl	80006a4 <HAL_GetTick>
 8000d50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2319      	movs	r3, #25
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f000 f9e6 	bl	8001130 <I2C_WaitOnFlagUntilTimeout>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e0be      	b.n	8000eec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2221      	movs	r2, #33	; 0x21
 8000d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2210      	movs	r2, #16
 8000d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2200      	movs	r2, #0
 8000d82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	893a      	ldrh	r2, [r7, #8]
 8000d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2200      	movs	r2, #0
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	2bff      	cmp	r3, #255	; 0xff
 8000d9e:	d90e      	bls.n	8000dbe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	22ff      	movs	r2, #255	; 0xff
 8000da4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	8979      	ldrh	r1, [r7, #10]
 8000dae:	4b51      	ldr	r3, [pc, #324]	; (8000ef4 <HAL_I2C_Master_Transmit+0x1e0>)
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f000 fbdc 	bl	8001574 <I2C_TransferConfig>
 8000dbc:	e06c      	b.n	8000e98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	8979      	ldrh	r1, [r7, #10]
 8000dd0:	4b48      	ldr	r3, [pc, #288]	; (8000ef4 <HAL_I2C_Master_Transmit+0x1e0>)
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f000 fbcb 	bl	8001574 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000dde:	e05b      	b.n	8000e98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	6a39      	ldr	r1, [r7, #32]
 8000de4:	68f8      	ldr	r0, [r7, #12]
 8000de6:	f000 f9e3 	bl	80011b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e07b      	b.n	8000eec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	3b01      	subs	r3, #1
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d034      	beq.n	8000e98 <HAL_I2C_Master_Transmit+0x184>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d130      	bne.n	8000e98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f000 f975 	bl	8001130 <I2C_WaitOnFlagUntilTimeout>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e04d      	b.n	8000eec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	2bff      	cmp	r3, #255	; 0xff
 8000e58:	d90e      	bls.n	8000e78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	22ff      	movs	r2, #255	; 0xff
 8000e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	8979      	ldrh	r1, [r7, #10]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f000 fb7f 	bl	8001574 <I2C_TransferConfig>
 8000e76:	e00f      	b.n	8000e98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	8979      	ldrh	r1, [r7, #10]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f000 fb6e 	bl	8001574 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d19e      	bne.n	8000de0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	6a39      	ldr	r1, [r7, #32]
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f000 f9c2 	bl	8001230 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e01a      	b.n	8000eec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2220      	movs	r2, #32
 8000ebc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6859      	ldr	r1, [r3, #4]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_I2C_Master_Transmit+0x1e4>)
 8000eca:	400b      	ands	r3, r1
 8000ecc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8000eea:	2302      	movs	r3, #2
  }
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	80002000 	.word	0x80002000
 8000ef8:	fe00e800 	.word	0xfe00e800

08000efc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	461a      	mov	r2, r3
 8000f08:	460b      	mov	r3, r1
 8000f0a:	817b      	strh	r3, [r7, #10]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b20      	cmp	r3, #32
 8000f1a:	f040 80db 	bne.w	80010d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d101      	bne.n	8000f2c <HAL_I2C_Master_Receive+0x30>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e0d4      	b.n	80010d6 <HAL_I2C_Master_Receive+0x1da>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f34:	f7ff fbb6 	bl	80006a4 <HAL_GetTick>
 8000f38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2319      	movs	r3, #25
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f000 f8f2 	bl	8001130 <I2C_WaitOnFlagUntilTimeout>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e0bf      	b.n	80010d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2222      	movs	r2, #34	; 0x22
 8000f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2210      	movs	r2, #16
 8000f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	893a      	ldrh	r2, [r7, #8]
 8000f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	2bff      	cmp	r3, #255	; 0xff
 8000f86:	d90e      	bls.n	8000fa6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	22ff      	movs	r2, #255	; 0xff
 8000f8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	8979      	ldrh	r1, [r7, #10]
 8000f96:	4b52      	ldr	r3, [pc, #328]	; (80010e0 <HAL_I2C_Master_Receive+0x1e4>)
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f000 fae8 	bl	8001574 <I2C_TransferConfig>
 8000fa4:	e06d      	b.n	8001082 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	8979      	ldrh	r1, [r7, #10]
 8000fb8:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <HAL_I2C_Master_Receive+0x1e4>)
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f000 fad7 	bl	8001574 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8000fc6:	e05c      	b.n	8001082 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	6a39      	ldr	r1, [r7, #32]
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f000 f96b 	bl	80012a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e07c      	b.n	80010d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001004:	b29b      	uxth	r3, r3
 8001006:	3b01      	subs	r3, #1
 8001008:	b29a      	uxth	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001012:	b29b      	uxth	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d034      	beq.n	8001082 <HAL_I2C_Master_Receive+0x186>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800101c:	2b00      	cmp	r3, #0
 800101e:	d130      	bne.n	8001082 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	2200      	movs	r2, #0
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 f880 	bl	8001130 <I2C_WaitOnFlagUntilTimeout>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e04d      	b.n	80010d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800103e:	b29b      	uxth	r3, r3
 8001040:	2bff      	cmp	r3, #255	; 0xff
 8001042:	d90e      	bls.n	8001062 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104e:	b2da      	uxtb	r2, r3
 8001050:	8979      	ldrh	r1, [r7, #10]
 8001052:	2300      	movs	r3, #0
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 fa8a 	bl	8001574 <I2C_TransferConfig>
 8001060:	e00f      	b.n	8001082 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001066:	b29a      	uxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001070:	b2da      	uxtb	r2, r3
 8001072:	8979      	ldrh	r1, [r7, #10]
 8001074:	2300      	movs	r3, #0
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 fa79 	bl	8001574 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001086:	b29b      	uxth	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d19d      	bne.n	8000fc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	6a39      	ldr	r1, [r7, #32]
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f000 f8cd 	bl	8001230 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e01a      	b.n	80010d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2220      	movs	r2, #32
 80010a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6859      	ldr	r1, [r3, #4]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_I2C_Master_Receive+0x1e8>)
 80010b4:	400b      	ands	r3, r1
 80010b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2220      	movs	r2, #32
 80010bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e000      	b.n	80010d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80010d4:	2302      	movs	r3, #2
  }
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	80002400 	.word	0x80002400
 80010e4:	fe00e800 	.word	0xfe00e800

080010e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d103      	bne.n	8001106 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b01      	cmp	r3, #1
 8001112:	d007      	beq.n	8001124 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	699a      	ldr	r2, [r3, #24]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0201 	orr.w	r2, r2, #1
 8001122:	619a      	str	r2, [r3, #24]
  }
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	4613      	mov	r3, r2
 800113e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001140:	e022      	b.n	8001188 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d01e      	beq.n	8001188 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800114a:	f7ff faab 	bl	80006a4 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d302      	bcc.n	8001160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d113      	bne.n	8001188 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	f043 0220 	orr.w	r2, r3, #32
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2220      	movs	r2, #32
 8001170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e00f      	b.n	80011a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699a      	ldr	r2, [r3, #24]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4013      	ands	r3, r2
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	429a      	cmp	r2, r3
 8001196:	bf0c      	ite	eq
 8001198:	2301      	moveq	r3, #1
 800119a:	2300      	movne	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d0cd      	beq.n	8001142 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80011bc:	e02c      	b.n	8001218 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 f8ea 	bl	800139c <I2C_IsErrorOccurred>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e02a      	b.n	8001228 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d01e      	beq.n	8001218 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011da:	f7ff fa63 	bl	80006a4 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d302      	bcc.n	80011f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d113      	bne.n	8001218 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	f043 0220 	orr.w	r2, r3, #32
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2220      	movs	r2, #32
 8001200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e007      	b.n	8001228 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b02      	cmp	r3, #2
 8001224:	d1cb      	bne.n	80011be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800123c:	e028      	b.n	8001290 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f8aa 	bl	800139c <I2C_IsErrorOccurred>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e026      	b.n	80012a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001252:	f7ff fa27 	bl	80006a4 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	429a      	cmp	r2, r3
 8001260:	d302      	bcc.n	8001268 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d113      	bne.n	8001290 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	f043 0220 	orr.w	r2, r3, #32
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2220      	movs	r2, #32
 8001278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e007      	b.n	80012a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	2b20      	cmp	r3, #32
 800129c:	d1cf      	bne.n	800123e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80012b4:	e064      	b.n	8001380 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 f86e 	bl	800139c <I2C_IsErrorOccurred>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e062      	b.n	8001390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	2b20      	cmp	r3, #32
 80012d6:	d138      	bne.n	800134a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d105      	bne.n	80012f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e04e      	b.n	8001390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	2b10      	cmp	r3, #16
 80012fe:	d107      	bne.n	8001310 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2210      	movs	r2, #16
 8001306:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2204      	movs	r2, #4
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
 800130e:	e002      	b.n	8001316 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2220      	movs	r2, #32
 800131c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800132a:	400b      	ands	r3, r1
 800132c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2220      	movs	r2, #32
 8001332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e022      	b.n	8001390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800134a:	f7ff f9ab 	bl	80006a4 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	429a      	cmp	r2, r3
 8001358:	d302      	bcc.n	8001360 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10f      	bne.n	8001380 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001364:	f043 0220 	orr.w	r2, r3, #32
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2220      	movs	r2, #32
 8001370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e007      	b.n	8001390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b04      	cmp	r3, #4
 800138c:	d193      	bne.n	80012b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	fe00e800 	.word	0xfe00e800

0800139c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d075      	beq.n	80014b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2210      	movs	r2, #16
 80013ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80013d0:	e056      	b.n	8001480 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d052      	beq.n	8001480 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013da:	f7ff f963 	bl	80006a4 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d302      	bcc.n	80013f0 <I2C_IsErrorOccurred+0x54>
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d147      	bne.n	8001480 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001402:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800140e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001412:	d12e      	bne.n	8001472 <I2C_IsErrorOccurred+0xd6>
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800141a:	d02a      	beq.n	8001472 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800141c:	7cfb      	ldrb	r3, [r7, #19]
 800141e:	2b20      	cmp	r3, #32
 8001420:	d027      	beq.n	8001472 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001430:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001432:	f7ff f937 	bl	80006a4 <HAL_GetTick>
 8001436:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001438:	e01b      	b.n	8001472 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800143a:	f7ff f933 	bl	80006a4 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b19      	cmp	r3, #25
 8001446:	d914      	bls.n	8001472 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	f043 0220 	orr.w	r2, r3, #32
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2220      	movs	r2, #32
 8001458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0320 	and.w	r3, r3, #32
 800147c:	2b20      	cmp	r3, #32
 800147e:	d1dc      	bne.n	800143a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	2b20      	cmp	r3, #32
 800148c:	d003      	beq.n	8001496 <I2C_IsErrorOccurred+0xfa>
 800148e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001492:	2b00      	cmp	r3, #0
 8001494:	d09d      	beq.n	80013d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800149a:	2b00      	cmp	r3, #0
 800149c:	d103      	bne.n	80014a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2220      	movs	r2, #32
 80014a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00b      	beq.n	8001500 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00b      	beq.n	8001522 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001526:	2b00      	cmp	r3, #0
 8001528:	d01c      	beq.n	8001564 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff fddc 	bl	80010e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6859      	ldr	r1, [r3, #4]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <I2C_IsErrorOccurred+0x1d4>)
 800153c:	400b      	ands	r3, r1
 800153e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	431a      	orrs	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2220      	movs	r2, #32
 8001550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001568:	4618      	mov	r0, r3
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	fe00e800 	.word	0xfe00e800

08001574 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	817b      	strh	r3, [r7, #10]
 8001582:	4613      	mov	r3, r2
 8001584:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001586:	897b      	ldrh	r3, [r7, #10]
 8001588:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800158c:	7a7b      	ldrb	r3, [r7, #9]
 800158e:	041b      	lsls	r3, r3, #16
 8001590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001594:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	4313      	orrs	r3, r2
 800159e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	0d5b      	lsrs	r3, r3, #21
 80015ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <I2C_TransferConfig+0x60>)
 80015b4:	430b      	orrs	r3, r1
 80015b6:	43db      	mvns	r3, r3
 80015b8:	ea02 0103 	and.w	r1, r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80015c6:	bf00      	nop
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	03ff63ff 	.word	0x03ff63ff

080015d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b20      	cmp	r3, #32
 80015ec:	d138      	bne.n	8001660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e032      	b.n	8001662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2224      	movs	r2, #36	; 0x24
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800162a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6819      	ldr	r1, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2220      	movs	r2, #32
 8001650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	e000      	b.n	8001662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001660:	2302      	movs	r3, #2
  }
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b20      	cmp	r3, #32
 8001682:	d139      	bne.n	80016f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800168e:	2302      	movs	r3, #2
 8001690:	e033      	b.n	80016fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2224      	movs	r2, #36	; 0x24
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0201 	bic.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2220      	movs	r2, #32
 80016e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e000      	b.n	80016fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016f8:	2302      	movs	r3, #2
  }
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_PWREx_GetVoltageRange+0x3c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001718:	d102      	bne.n	8001720 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800171a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171e:	e00b      	b.n	8001738 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800172e:	d102      	bne.n	8001736 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001734:	e000      	b.n	8001738 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001736:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40007000 	.word	0x40007000

08001748 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d141      	bne.n	80017da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001756:	4b4b      	ldr	r3, [pc, #300]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800175e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001762:	d131      	bne.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001764:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800176a:	4a46      	ldr	r2, [pc, #280]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001774:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800177c:	4a41      	ldr	r2, [pc, #260]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001782:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001784:	4b40      	ldr	r3, [pc, #256]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2232      	movs	r2, #50	; 0x32
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	4a3f      	ldr	r2, [pc, #252]	; (800188c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	0c9b      	lsrs	r3, r3, #18
 8001796:	3301      	adds	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179a:	e002      	b.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3b01      	subs	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a2:	4b38      	ldr	r3, [pc, #224]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ae:	d102      	bne.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f2      	bne.n	800179c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b6:	4b33      	ldr	r3, [pc, #204]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c2:	d158      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e057      	b.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017c8:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ce:	4a2d      	ldr	r2, [pc, #180]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017d8:	e04d      	b.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e0:	d141      	bne.n	8001866 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ee:	d131      	bne.n	8001854 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017f6:	4a23      	ldr	r2, [pc, #140]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001808:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2232      	movs	r2, #50	; 0x32
 8001816:	fb02 f303 	mul.w	r3, r2, r3
 800181a:	4a1c      	ldr	r2, [pc, #112]	; (800188c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800181c:	fba2 2303 	umull	r2, r3, r2, r3
 8001820:	0c9b      	lsrs	r3, r3, #18
 8001822:	3301      	adds	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001826:	e002      	b.n	800182e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3b01      	subs	r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800183a:	d102      	bne.n	8001842 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f2      	bne.n	8001828 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184e:	d112      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e011      	b.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001860:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001864:	e007      	b.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001870:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001874:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40007000 	.word	0x40007000
 8001888:	200000a4 	.word	0x200000a4
 800188c:	431bde83 	.word	0x431bde83

08001890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	f000 bc08 	b.w	80020b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a4:	4b96      	ldr	r3, [pc, #600]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ae:	4b94      	ldr	r3, [pc, #592]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80e4 	beq.w	8001a8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d007      	beq.n	80018dc <HAL_RCC_OscConfig+0x4c>
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	f040 808b 	bne.w	80019ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	f040 8087 	bne.w	80019ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018dc:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_OscConfig+0x64>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e3df      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1a      	ldr	r2, [r3, #32]
 80018f8:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <HAL_RCC_OscConfig+0x7e>
 8001904:	4b7e      	ldr	r3, [pc, #504]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800190c:	e005      	b.n	800191a <HAL_RCC_OscConfig+0x8a>
 800190e:	4b7c      	ldr	r3, [pc, #496]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800191a:	4293      	cmp	r3, r2
 800191c:	d223      	bcs.n	8001966 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fdcc 	bl	80024c0 <RCC_SetFlashLatencyFromMSIRange>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e3c0      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001932:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a72      	ldr	r2, [pc, #456]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001938:	f043 0308 	orr.w	r3, r3, #8
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	496d      	ldr	r1, [pc, #436]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001950:	4b6b      	ldr	r3, [pc, #428]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	4968      	ldr	r1, [pc, #416]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
 8001964:	e025      	b.n	80019b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001966:	4b66      	ldr	r3, [pc, #408]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a65      	ldr	r2, [pc, #404]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	4b63      	ldr	r3, [pc, #396]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4960      	ldr	r1, [pc, #384]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001984:	4b5e      	ldr	r3, [pc, #376]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	495b      	ldr	r1, [pc, #364]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd8c 	bl	80024c0 <RCC_SetFlashLatencyFromMSIRange>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e380      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019b2:	f000 fcc1 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b51      	ldr	r3, [pc, #324]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	4950      	ldr	r1, [pc, #320]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	4a4e      	ldr	r2, [pc, #312]	; (8001b08 <HAL_RCC_OscConfig+0x278>)
 80019d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019d2:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <HAL_RCC_OscConfig+0x27c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fe14 	bl	8000604 <HAL_InitTick>
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d052      	beq.n	8001a8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	e364      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d032      	beq.n	8001a58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019f2:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a42      	ldr	r2, [pc, #264]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019fe:	f7fe fe51 	bl	80006a4 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a06:	f7fe fe4d 	bl	80006a4 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e34d      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a18:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a24:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a35      	ldr	r2, [pc, #212]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4930      	ldr	r1, [pc, #192]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a42:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	492b      	ldr	r1, [pc, #172]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
 8001a56:	e01a      	b.n	8001a8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a58:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a64:	f7fe fe1e 	bl	80006a4 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a6c:	f7fe fe1a 	bl	80006a4 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e31a      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x1dc>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d073      	beq.n	8001b82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_OscConfig+0x21c>
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d10e      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d063      	beq.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d15f      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e2f7      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001acc:	d106      	bne.n	8001adc <HAL_RCC_OscConfig+0x24c>
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e025      	b.n	8001b28 <HAL_RCC_OscConfig+0x298>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae4:	d114      	bne.n	8001b10 <HAL_RCC_OscConfig+0x280>
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a02      	ldr	r2, [pc, #8]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e013      	b.n	8001b28 <HAL_RCC_OscConfig+0x298>
 8001b00:	40021000 	.word	0x40021000
 8001b04:	08009c98 	.word	0x08009c98
 8001b08:	200000a4 	.word	0x200000a4
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	4ba0      	ldr	r3, [pc, #640]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a9f      	ldr	r2, [pc, #636]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b9d      	ldr	r3, [pc, #628]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a9c      	ldr	r2, [pc, #624]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d013      	beq.n	8001b58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7fe fdb8 	bl	80006a4 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7fe fdb4 	bl	80006a4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e2b4      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b4a:	4b92      	ldr	r3, [pc, #584]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x2a8>
 8001b56:	e014      	b.n	8001b82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7fe fda4 	bl	80006a4 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b60:	f7fe fda0 	bl	80006a4 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e2a0      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b72:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x2d0>
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d060      	beq.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x310>
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d119      	bne.n	8001bce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d116      	bne.n	8001bce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba0:	4b7c      	ldr	r3, [pc, #496]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x328>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e27d      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb8:	4b76      	ldr	r3, [pc, #472]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	061b      	lsls	r3, r3, #24
 8001bc6:	4973      	ldr	r1, [pc, #460]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bcc:	e040      	b.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d023      	beq.n	8001c1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd6:	4b6f      	ldr	r3, [pc, #444]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6e      	ldr	r2, [pc, #440]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7fe fd5f 	bl	80006a4 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bea:	f7fe fd5b 	bl	80006a4 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e25b      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bfc:	4b65      	ldr	r3, [pc, #404]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c08:	4b62      	ldr	r3, [pc, #392]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	061b      	lsls	r3, r3, #24
 8001c16:	495f      	ldr	r1, [pc, #380]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
 8001c1c:	e018      	b.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1e:	4b5d      	ldr	r3, [pc, #372]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a5c      	ldr	r2, [pc, #368]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7fe fd3b 	bl	80006a4 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c32:	f7fe fd37 	bl	80006a4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e237      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c44:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d03c      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c64:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6a:	4a4a      	ldr	r2, [pc, #296]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c74:	f7fe fd16 	bl	80006a4 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7fe fd12 	bl	80006a4 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e212      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c8e:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0ef      	beq.n	8001c7c <HAL_RCC_OscConfig+0x3ec>
 8001c9c:	e01b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9e:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca4:	4a3b      	ldr	r2, [pc, #236]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	f023 0301 	bic.w	r3, r3, #1
 8001caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cae:	f7fe fcf9 	bl	80006a4 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb6:	f7fe fcf5 	bl	80006a4 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e1f5      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc8:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1ef      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 80a6 	beq.w	8001e30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ce8:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10d      	bne.n	8001d10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	4a26      	ldr	r2, [pc, #152]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d10:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <HAL_RCC_OscConfig+0x508>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d118      	bne.n	8001d4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_RCC_OscConfig+0x508>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_RCC_OscConfig+0x508>)
 8001d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d28:	f7fe fcbc 	bl	80006a4 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d30:	f7fe fcb8 	bl	80006a4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1b8      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_RCC_OscConfig+0x508>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d108      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4d8>
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d66:	e029      	b.n	8001dbc <HAL_RCC_OscConfig+0x52c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d115      	bne.n	8001d9c <HAL_RCC_OscConfig+0x50c>
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <HAL_RCC_OscConfig+0x504>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d90:	e014      	b.n	8001dbc <HAL_RCC_OscConfig+0x52c>
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	4b9d      	ldr	r3, [pc, #628]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da2:	4a9c      	ldr	r2, [pc, #624]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dac:	4b99      	ldr	r3, [pc, #612]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	4a98      	ldr	r2, [pc, #608]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d016      	beq.n	8001df2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7fe fc6e 	bl	80006a4 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7fe fc6a 	bl	80006a4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e168      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de2:	4b8c      	ldr	r3, [pc, #560]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0ed      	beq.n	8001dcc <HAL_RCC_OscConfig+0x53c>
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df2:	f7fe fc57 	bl	80006a4 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7fe fc53 	bl	80006a4 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e151      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e10:	4b80      	ldr	r3, [pc, #512]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ed      	bne.n	8001dfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e1e:	7ffb      	ldrb	r3, [r7, #31]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e24:	4b7b      	ldr	r3, [pc, #492]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	4a7a      	ldr	r2, [pc, #488]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d03c      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e44:	4b73      	ldr	r3, [pc, #460]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e4a:	4a72      	ldr	r2, [pc, #456]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7fe fc26 	bl	80006a4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e5c:	f7fe fc22 	bl	80006a4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e122      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e6e:	4b69      	ldr	r3, [pc, #420]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ef      	beq.n	8001e5c <HAL_RCC_OscConfig+0x5cc>
 8001e7c:	e01b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e7e:	4b65      	ldr	r3, [pc, #404]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e84:	4a63      	ldr	r2, [pc, #396]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7fe fc09 	bl	80006a4 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e96:	f7fe fc05 	bl	80006a4 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e105      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ea8:	4b5a      	ldr	r3, [pc, #360]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1ef      	bne.n	8001e96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80f9 	beq.w	80020b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	f040 80cf 	bne.w	8002068 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001eca:	4b52      	ldr	r3, [pc, #328]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0203 	and.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d12c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d123      	bne.n	8001f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d11b      	bne.n	8001f38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d113      	bne.n	8001f38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d109      	bne.n	8001f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	085b      	lsrs	r3, r3, #1
 8001f30:	3b01      	subs	r3, #1
 8001f32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d071      	beq.n	800201c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d068      	beq.n	8002010 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f3e:	4b35      	ldr	r3, [pc, #212]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f4a:	4b32      	ldr	r3, [pc, #200]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0ac      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f66:	f7fe fb9d 	bl	80006a4 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe fb99 	bl	80006a4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e099      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4b21      	ldr	r3, [pc, #132]	; (8002018 <HAL_RCC_OscConfig+0x788>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f9c:	3a01      	subs	r2, #1
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	4311      	orrs	r1, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fa6:	0212      	lsls	r2, r2, #8
 8001fa8:	4311      	orrs	r1, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fae:	0852      	lsrs	r2, r2, #1
 8001fb0:	3a01      	subs	r2, #1
 8001fb2:	0552      	lsls	r2, r2, #21
 8001fb4:	4311      	orrs	r1, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fba:	0852      	lsrs	r2, r2, #1
 8001fbc:	3a01      	subs	r2, #1
 8001fbe:	0652      	lsls	r2, r2, #25
 8001fc0:	4311      	orrs	r1, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fc6:	06d2      	lsls	r2, r2, #27
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	4912      	ldr	r1, [pc, #72]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8001fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fe8:	f7fe fb5c 	bl	80006a4 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7fe fb58 	bl	80006a4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e058      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <HAL_RCC_OscConfig+0x784>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800200e:	e050      	b.n	80020b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e04f      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
 8002014:	40021000 	.word	0x40021000
 8002018:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x82c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d144      	bne.n	80020b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_RCC_OscConfig+0x82c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a23      	ldr	r2, [pc, #140]	; (80020bc <HAL_RCC_OscConfig+0x82c>)
 800202e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002032:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_RCC_OscConfig+0x82c>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a20      	ldr	r2, [pc, #128]	; (80020bc <HAL_RCC_OscConfig+0x82c>)
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002040:	f7fe fb30 	bl	80006a4 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe fb2c 	bl	80006a4 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e02c      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_RCC_OscConfig+0x82c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x7b8>
 8002066:	e024      	b.n	80020b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d01f      	beq.n	80020ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_OscConfig+0x82c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <HAL_RCC_OscConfig+0x82c>)
 8002074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207a:	f7fe fb13 	bl	80006a4 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002082:	f7fe fb0f 	bl	80006a4 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e00f      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_OscConfig+0x82c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f0      	bne.n	8002082 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_RCC_OscConfig+0x82c>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	4905      	ldr	r1, [pc, #20]	; (80020bc <HAL_RCC_OscConfig+0x82c>)
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_RCC_OscConfig+0x830>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	60cb      	str	r3, [r1, #12]
 80020ac:	e001      	b.n	80020b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	feeefffc 	.word	0xfeeefffc

080020c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e11d      	b.n	8002318 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020dc:	4b90      	ldr	r3, [pc, #576]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d910      	bls.n	800210c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b8d      	ldr	r3, [pc, #564]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 020f 	bic.w	r2, r3, #15
 80020f2:	498b      	ldr	r1, [pc, #556]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b89      	ldr	r3, [pc, #548]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e105      	b.n	8002318 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d010      	beq.n	800213a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	4b81      	ldr	r3, [pc, #516]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002124:	429a      	cmp	r2, r3
 8002126:	d908      	bls.n	800213a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b7e      	ldr	r3, [pc, #504]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	497b      	ldr	r1, [pc, #492]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d079      	beq.n	800223a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b03      	cmp	r3, #3
 800214c:	d11e      	bne.n	800218c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214e:	4b75      	ldr	r3, [pc, #468]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0dc      	b.n	8002318 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800215e:	f000 fa09 	bl	8002574 <RCC_GetSysClockFreqFromPLLSource>
 8002162:	4603      	mov	r3, r0
 8002164:	4a70      	ldr	r2, [pc, #448]	; (8002328 <HAL_RCC_ClockConfig+0x264>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d946      	bls.n	80021f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800216a:	4b6e      	ldr	r3, [pc, #440]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d140      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002176:	4b6b      	ldr	r3, [pc, #428]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800217e:	4a69      	ldr	r2, [pc, #420]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002184:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e035      	b.n	80021f8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002194:	4b63      	ldr	r3, [pc, #396]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d115      	bne.n	80021cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0b9      	b.n	8002318 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d107      	bne.n	80021bc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ac:	4b5d      	ldr	r3, [pc, #372]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0ad      	b.n	8002318 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021bc:	4b59      	ldr	r3, [pc, #356]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0a5      	b.n	8002318 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80021cc:	f000 f8b4 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a55      	ldr	r2, [pc, #340]	; (8002328 <HAL_RCC_ClockConfig+0x264>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d90f      	bls.n	80021f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80021d8:	4b52      	ldr	r3, [pc, #328]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021e4:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021ec:	4a4d      	ldr	r2, [pc, #308]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80021ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021f8:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f023 0203 	bic.w	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4947      	ldr	r1, [pc, #284]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002206:	4313      	orrs	r3, r2
 8002208:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800220a:	f7fe fa4b 	bl	80006a4 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002210:	e00a      	b.n	8002228 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002212:	f7fe fa47 	bl	80006a4 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e077      	b.n	8002318 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002228:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 020c 	and.w	r2, r3, #12
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	429a      	cmp	r2, r3
 8002238:	d1eb      	bne.n	8002212 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b80      	cmp	r3, #128	; 0x80
 800223e:	d105      	bne.n	800224c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002240:	4b38      	ldr	r3, [pc, #224]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a37      	ldr	r2, [pc, #220]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800224a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002264:	429a      	cmp	r2, r3
 8002266:	d208      	bcs.n	800227a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	492b      	ldr	r1, [pc, #172]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d210      	bcs.n	80022aa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002288:	4b25      	ldr	r3, [pc, #148]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 020f 	bic.w	r2, r3, #15
 8002290:	4923      	ldr	r1, [pc, #140]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e036      	b.n	8002318 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	4918      	ldr	r1, [pc, #96]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d009      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4910      	ldr	r1, [pc, #64]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022e8:	f000 f826 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <HAL_RCC_ClockConfig+0x268>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <HAL_RCC_ClockConfig+0x26c>)
 8002306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f979 	bl	8000604 <HAL_InitTick>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]

  return status;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40022000 	.word	0x40022000
 8002324:	40021000 	.word	0x40021000
 8002328:	04c4b400 	.word	0x04c4b400
 800232c:	08009c98 	.word	0x08009c98
 8002330:	200000a4 	.word	0x200000a4
 8002334:	20000000 	.word	0x20000000

08002338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002346:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002350:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x34>
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d121      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d11e      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800236c:	4b34      	ldr	r3, [pc, #208]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002378:	4b31      	ldr	r3, [pc, #196]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 800237a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e005      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002394:	4a2b      	ldr	r2, [pc, #172]	; (8002444 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10d      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d102      	bne.n	80023b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_RCC_GetSysClockFreq+0x110>)
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	e004      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023bc:	4b23      	ldr	r3, [pc, #140]	; (800244c <HAL_RCC_GetSysClockFreq+0x114>)
 80023be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d134      	bne.n	8002430 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d003      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0xa6>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d003      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0xac>
 80023dc:	e005      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023de:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <HAL_RCC_GetSysClockFreq+0x110>)
 80023e0:	617b      	str	r3, [r7, #20]
      break;
 80023e2:	e005      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_GetSysClockFreq+0x114>)
 80023e6:	617b      	str	r3, [r7, #20]
      break;
 80023e8:	e002      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	617b      	str	r3, [r7, #20]
      break;
 80023ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	3301      	adds	r3, #1
 80023fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	fb03 f202 	mul.w	r2, r3, r2
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	0e5b      	lsrs	r3, r3, #25
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	3301      	adds	r3, #1
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002430:	69bb      	ldr	r3, [r7, #24]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	08009cb0 	.word	0x08009cb0
 8002448:	00f42400 	.word	0x00f42400
 800244c:	007a1200 	.word	0x007a1200

08002450 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_RCC_GetHCLKFreq+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	200000a4 	.word	0x200000a4

08002468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800246c:	f7ff fff0 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4904      	ldr	r1, [pc, #16]	; (8002490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800247e:	5ccb      	ldrb	r3, [r1, r3]
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	08009ca8 	.word	0x08009ca8

08002494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002498:	f7ff ffda 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0adb      	lsrs	r3, r3, #11
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4904      	ldr	r1, [pc, #16]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08009ca8 	.word	0x08009ca8

080024c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024d8:	f7ff f916 	bl	8001708 <HAL_PWREx_GetVoltageRange>
 80024dc:	6178      	str	r0, [r7, #20]
 80024de:	e014      	b.n	800250a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	4a21      	ldr	r2, [pc, #132]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ea:	6593      	str	r3, [r2, #88]	; 0x58
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024f8:	f7ff f906 	bl	8001708 <HAL_PWREx_GetVoltageRange>
 80024fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	4a1a      	ldr	r2, [pc, #104]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002508:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002510:	d10b      	bne.n	800252a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b80      	cmp	r3, #128	; 0x80
 8002516:	d913      	bls.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2ba0      	cmp	r3, #160	; 0xa0
 800251c:	d902      	bls.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800251e:	2302      	movs	r3, #2
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	e00d      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002524:	2301      	movs	r3, #1
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e00a      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b7f      	cmp	r3, #127	; 0x7f
 800252e:	d902      	bls.n	8002536 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002530:	2302      	movs	r3, #2
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	e004      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b70      	cmp	r3, #112	; 0x70
 800253a:	d101      	bne.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800253c:	2301      	movs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 020f 	bic.w	r2, r3, #15
 8002548:	4909      	ldr	r1, [pc, #36]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	429a      	cmp	r2, r3
 800255c:	d001      	beq.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	40022000 	.word	0x40022000

08002574 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d00b      	beq.n	80025a2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d825      	bhi.n	80025dc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d008      	beq.n	80025a8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d11f      	bne.n	80025dc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800259e:	613b      	str	r3, [r7, #16]
    break;
 80025a0:	e01f      	b.n	80025e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80025a2:	4b25      	ldr	r3, [pc, #148]	; (8002638 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80025a4:	613b      	str	r3, [r7, #16]
    break;
 80025a6:	e01c      	b.n	80025e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025a8:	4b21      	ldr	r3, [pc, #132]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025b4:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e005      	b.n	80025d0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025c4:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80025d0:	4a1a      	ldr	r2, [pc, #104]	; (800263c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d8:	613b      	str	r3, [r7, #16]
    break;
 80025da:	e002      	b.n	80025e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
    break;
 80025e0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	3301      	adds	r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	fb03 f202 	mul.w	r2, r3, r2
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	fbb2 f3f3 	udiv	r3, r2, r3
 8002606:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0e5b      	lsrs	r3, r3, #25
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	3301      	adds	r3, #1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002622:	683b      	ldr	r3, [r7, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40021000 	.word	0x40021000
 8002634:	00f42400 	.word	0x00f42400
 8002638:	007a1200 	.word	0x007a1200
 800263c:	08009cb0 	.word	0x08009cb0

08002640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002648:	2300      	movs	r3, #0
 800264a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800264c:	2300      	movs	r3, #0
 800264e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002658:	2b00      	cmp	r3, #0
 800265a:	d040      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d02a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002664:	2b80      	cmp	r3, #128	; 0x80
 8002666:	d825      	bhi.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002668:	2b60      	cmp	r3, #96	; 0x60
 800266a:	d026      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800266c:	2b60      	cmp	r3, #96	; 0x60
 800266e:	d821      	bhi.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d006      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002674:	2b40      	cmp	r3, #64	; 0x40
 8002676:	d81d      	bhi.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800267c:	2b20      	cmp	r3, #32
 800267e:	d010      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002680:	e018      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002682:	4b89      	ldr	r3, [pc, #548]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4a88      	ldr	r2, [pc, #544]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800268e:	e015      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3304      	adds	r3, #4
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fb02 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 800269c:	4603      	mov	r3, r0
 800269e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026a0:	e00c      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3320      	adds	r3, #32
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fbed 	bl	8002e88 <RCCEx_PLLSAI2_Config>
 80026ae:	4603      	mov	r3, r0
 80026b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026b2:	e003      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	74fb      	strb	r3, [r7, #19]
      break;
 80026b8:	e000      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80026ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10b      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026c2:	4b79      	ldr	r3, [pc, #484]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026c8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d0:	4975      	ldr	r1, [pc, #468]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80026d8:	e001      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d047      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f2:	d030      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80026f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f8:	d82a      	bhi.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80026fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026fe:	d02a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002704:	d824      	bhi.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800270a:	d008      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800270c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002710:	d81e      	bhi.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800271a:	d010      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800271c:	e018      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800271e:	4b62      	ldr	r3, [pc, #392]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	4a61      	ldr	r2, [pc, #388]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800272a:	e015      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fab4 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800273c:	e00c      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3320      	adds	r3, #32
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fb9f 	bl	8002e88 <RCCEx_PLLSAI2_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800274e:	e003      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	74fb      	strb	r3, [r7, #19]
      break;
 8002754:	e000      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800275e:	4b52      	ldr	r3, [pc, #328]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002760:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	494e      	ldr	r1, [pc, #312]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002774:	e001      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 809f 	beq.w	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002788:	2300      	movs	r3, #0
 800278a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800278c:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800279c:	2300      	movs	r3, #0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00d      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	4a40      	ldr	r2, [pc, #256]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ac:	6593      	str	r3, [r2, #88]	; 0x58
 80027ae:	4b3e      	ldr	r3, [pc, #248]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ba:	2301      	movs	r3, #1
 80027bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a3a      	ldr	r2, [pc, #232]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027ca:	f7fd ff6b 	bl	80006a4 <HAL_GetTick>
 80027ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027d0:	e009      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7fd ff67 	bl	80006a4 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d902      	bls.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	74fb      	strb	r3, [r7, #19]
        break;
 80027e4:	e005      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027e6:	4b31      	ldr	r3, [pc, #196]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0ef      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d15b      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027f8:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002802:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01f      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	429a      	cmp	r2, r3
 8002814:	d019      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002816:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002820:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002822:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800282a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	4a1b      	ldr	r2, [pc, #108]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800283a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002842:	4a19      	ldr	r2, [pc, #100]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d016      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fd ff26 	bl	80006a4 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285a:	e00b      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fd ff22 	bl	80006a4 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d902      	bls.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	74fb      	strb	r3, [r7, #19]
            break;
 8002872:	e006      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0ec      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002882:	7cfb      	ldrb	r3, [r7, #19]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10c      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002898:	4903      	ldr	r1, [pc, #12]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028a0:	e008      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	74bb      	strb	r3, [r7, #18]
 80028a6:	e005      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028b4:	7c7b      	ldrb	r3, [r7, #17]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d105      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ba:	4ba0      	ldr	r3, [pc, #640]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	4a9f      	ldr	r2, [pc, #636]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028d2:	4b9a      	ldr	r3, [pc, #616]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f023 0203 	bic.w	r2, r3, #3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	4996      	ldr	r1, [pc, #600]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f4:	4b91      	ldr	r3, [pc, #580]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f023 020c 	bic.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	498e      	ldr	r1, [pc, #568]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002916:	4b89      	ldr	r3, [pc, #548]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	4985      	ldr	r1, [pc, #532]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002938:	4b80      	ldr	r3, [pc, #512]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002946:	497d      	ldr	r1, [pc, #500]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800295a:	4b78      	ldr	r3, [pc, #480]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002968:	4974      	ldr	r1, [pc, #464]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800297c:	4b6f      	ldr	r3, [pc, #444]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298a:	496c      	ldr	r1, [pc, #432]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800299e:	4b67      	ldr	r3, [pc, #412]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ac:	4963      	ldr	r1, [pc, #396]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029c0:	4b5e      	ldr	r3, [pc, #376]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ce:	495b      	ldr	r1, [pc, #364]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029e2:	4b56      	ldr	r3, [pc, #344]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	4952      	ldr	r1, [pc, #328]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a04:	4b4d      	ldr	r3, [pc, #308]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	494a      	ldr	r1, [pc, #296]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a26:	4b45      	ldr	r3, [pc, #276]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	4941      	ldr	r1, [pc, #260]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a48:	4b3c      	ldr	r3, [pc, #240]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a4e:	f023 0203 	bic.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a56:	4939      	ldr	r1, [pc, #228]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d028      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a78:	4930      	ldr	r1, [pc, #192]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a88:	d106      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a94:	60d3      	str	r3, [r2, #12]
 8002a96:	e011      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f8f9 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ab2:	7cfb      	ldrb	r3, [r7, #19]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d04d      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ad0:	d108      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ad4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ad8:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ade:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002ae2:	e012      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aea:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002af0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b02:	490e      	ldr	r1, [pc, #56]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b12:	d106      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a08      	ldr	r2, [pc, #32]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b1e:	60d3      	str	r3, [r2, #12]
 8002b20:	e020      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b2a:	d109      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a02      	ldr	r2, [pc, #8]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	60d3      	str	r3, [r2, #12]
 8002b38:	e014      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 f8a5 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b5a:	7cfb      	ldrb	r3, [r7, #19]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d028      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b70:	4b4a      	ldr	r3, [pc, #296]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b7e:	4947      	ldr	r1, [pc, #284]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b90:	4b42      	ldr	r3, [pc, #264]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a41      	ldr	r2, [pc, #260]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9a:	60d3      	str	r3, [r2, #12]
 8002b9c:	e011      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ba2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ba6:	d10c      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	2101      	movs	r1, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f876 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01e      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bce:	4b33      	ldr	r3, [pc, #204]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bde:	492f      	ldr	r1, [pc, #188]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f851 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00b      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c1e:	f023 0204 	bic.w	r2, r3, #4
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c28:	491c      	ldr	r1, [pc, #112]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00b      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c42:	f023 0218 	bic.w	r2, r3, #24
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	4913      	ldr	r1, [pc, #76]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d017      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c70:	490a      	ldr	r1, [pc, #40]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c82:	d105      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c90:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cae:	4b72      	ldr	r3, [pc, #456]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00e      	beq.n	8002cd8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cba:	4b6f      	ldr	r3, [pc, #444]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0203 	and.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d103      	bne.n	8002cd2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d142      	bne.n	8002d58 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
 8002cd6:	e03f      	b.n	8002d58 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d018      	beq.n	8002d12 <RCCEx_PLLSAI1_Config+0x72>
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d825      	bhi.n	8002d30 <RCCEx_PLLSAI1_Config+0x90>
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d002      	beq.n	8002cee <RCCEx_PLLSAI1_Config+0x4e>
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d009      	beq.n	8002d00 <RCCEx_PLLSAI1_Config+0x60>
 8002cec:	e020      	b.n	8002d30 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cee:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11d      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfe:	e01a      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d00:	4b5d      	ldr	r3, [pc, #372]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d116      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e013      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d12:	4b59      	ldr	r3, [pc, #356]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d1e:	4b56      	ldr	r3, [pc, #344]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d2e:	e006      	b.n	8002d3e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      break;
 8002d34:	e004      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d108      	bne.n	8002d58 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002d46:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f023 0203 	bic.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4949      	ldr	r1, [pc, #292]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 8086 	bne.w	8002e6c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d60:	4b45      	ldr	r3, [pc, #276]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a44      	ldr	r2, [pc, #272]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6c:	f7fd fc9a 	bl	80006a4 <HAL_GetTick>
 8002d70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d72:	e009      	b.n	8002d88 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d74:	f7fd fc96 	bl	80006a4 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d902      	bls.n	8002d88 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	73fb      	strb	r3, [r7, #15]
        break;
 8002d86:	e005      	b.n	8002d94 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d88:	4b3b      	ldr	r3, [pc, #236]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ef      	bne.n	8002d74 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d168      	bne.n	8002e6c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d113      	bne.n	8002dc8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da0:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6892      	ldr	r2, [r2, #8]
 8002dac:	0211      	lsls	r1, r2, #8
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68d2      	ldr	r2, [r2, #12]
 8002db2:	06d2      	lsls	r2, r2, #27
 8002db4:	4311      	orrs	r1, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6852      	ldr	r2, [r2, #4]
 8002dba:	3a01      	subs	r2, #1
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	492d      	ldr	r1, [pc, #180]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	610b      	str	r3, [r1, #16]
 8002dc6:	e02d      	b.n	8002e24 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d115      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dce:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6892      	ldr	r2, [r2, #8]
 8002dda:	0211      	lsls	r1, r2, #8
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6912      	ldr	r2, [r2, #16]
 8002de0:	0852      	lsrs	r2, r2, #1
 8002de2:	3a01      	subs	r2, #1
 8002de4:	0552      	lsls	r2, r2, #21
 8002de6:	4311      	orrs	r1, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6852      	ldr	r2, [r2, #4]
 8002dec:	3a01      	subs	r2, #1
 8002dee:	0112      	lsls	r2, r2, #4
 8002df0:	430a      	orrs	r2, r1
 8002df2:	4921      	ldr	r1, [pc, #132]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	610b      	str	r3, [r1, #16]
 8002df8:	e014      	b.n	8002e24 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dfa:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6892      	ldr	r2, [r2, #8]
 8002e06:	0211      	lsls	r1, r2, #8
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6952      	ldr	r2, [r2, #20]
 8002e0c:	0852      	lsrs	r2, r2, #1
 8002e0e:	3a01      	subs	r2, #1
 8002e10:	0652      	lsls	r2, r2, #25
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6852      	ldr	r2, [r2, #4]
 8002e18:	3a01      	subs	r2, #1
 8002e1a:	0112      	lsls	r2, r2, #4
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	4916      	ldr	r1, [pc, #88]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e24:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fd fc38 	bl	80006a4 <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e36:	e009      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e38:	f7fd fc34 	bl	80006a4 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d902      	bls.n	8002e4c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	73fb      	strb	r3, [r7, #15]
          break;
 8002e4a:	e005      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ef      	beq.n	8002e38 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	4904      	ldr	r1, [pc, #16]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	07ff800f 	.word	0x07ff800f
 8002e80:	ff9f800f 	.word	0xff9f800f
 8002e84:	f9ff800f 	.word	0xf9ff800f

08002e88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e96:	4b72      	ldr	r3, [pc, #456]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00e      	beq.n	8002ec0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ea2:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0203 	and.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d103      	bne.n	8002eba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d142      	bne.n	8002f40 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	e03f      	b.n	8002f40 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d018      	beq.n	8002efa <RCCEx_PLLSAI2_Config+0x72>
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d825      	bhi.n	8002f18 <RCCEx_PLLSAI2_Config+0x90>
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d002      	beq.n	8002ed6 <RCCEx_PLLSAI2_Config+0x4e>
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d009      	beq.n	8002ee8 <RCCEx_PLLSAI2_Config+0x60>
 8002ed4:	e020      	b.n	8002f18 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ed6:	4b62      	ldr	r3, [pc, #392]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11d      	bne.n	8002f1e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee6:	e01a      	b.n	8002f1e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ee8:	4b5d      	ldr	r3, [pc, #372]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d116      	bne.n	8002f22 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef8:	e013      	b.n	8002f22 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002efa:	4b59      	ldr	r3, [pc, #356]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10f      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f06:	4b56      	ldr	r3, [pc, #344]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f16:	e006      	b.n	8002f26 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1c:	e004      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f023 0203 	bic.w	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4949      	ldr	r1, [pc, #292]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 8086 	bne.w	8003054 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f48:	4b45      	ldr	r3, [pc, #276]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a44      	ldr	r2, [pc, #272]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f54:	f7fd fba6 	bl	80006a4 <HAL_GetTick>
 8002f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f5a:	e009      	b.n	8002f70 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f5c:	f7fd fba2 	bl	80006a4 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d902      	bls.n	8002f70 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f6e:	e005      	b.n	8002f7c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ef      	bne.n	8002f5c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d168      	bne.n	8003054 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d113      	bne.n	8002fb0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f88:	4b35      	ldr	r3, [pc, #212]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	4b35      	ldr	r3, [pc, #212]	; (8003064 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6892      	ldr	r2, [r2, #8]
 8002f94:	0211      	lsls	r1, r2, #8
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68d2      	ldr	r2, [r2, #12]
 8002f9a:	06d2      	lsls	r2, r2, #27
 8002f9c:	4311      	orrs	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6852      	ldr	r2, [r2, #4]
 8002fa2:	3a01      	subs	r2, #1
 8002fa4:	0112      	lsls	r2, r2, #4
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	492d      	ldr	r1, [pc, #180]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	614b      	str	r3, [r1, #20]
 8002fae:	e02d      	b.n	800300c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d115      	bne.n	8002fe2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6892      	ldr	r2, [r2, #8]
 8002fc2:	0211      	lsls	r1, r2, #8
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6912      	ldr	r2, [r2, #16]
 8002fc8:	0852      	lsrs	r2, r2, #1
 8002fca:	3a01      	subs	r2, #1
 8002fcc:	0552      	lsls	r2, r2, #21
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6852      	ldr	r2, [r2, #4]
 8002fd4:	3a01      	subs	r2, #1
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	4921      	ldr	r1, [pc, #132]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	614b      	str	r3, [r1, #20]
 8002fe0:	e014      	b.n	800300c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fe2:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	4b21      	ldr	r3, [pc, #132]	; (800306c <RCCEx_PLLSAI2_Config+0x1e4>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6892      	ldr	r2, [r2, #8]
 8002fee:	0211      	lsls	r1, r2, #8
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6952      	ldr	r2, [r2, #20]
 8002ff4:	0852      	lsrs	r2, r2, #1
 8002ff6:	3a01      	subs	r2, #1
 8002ff8:	0652      	lsls	r2, r2, #25
 8002ffa:	4311      	orrs	r1, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6852      	ldr	r2, [r2, #4]
 8003000:	3a01      	subs	r2, #1
 8003002:	0112      	lsls	r2, r2, #4
 8003004:	430a      	orrs	r2, r1
 8003006:	4916      	ldr	r1, [pc, #88]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003008:	4313      	orrs	r3, r2
 800300a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a13      	ldr	r2, [pc, #76]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fd fb44 	bl	80006a4 <HAL_GetTick>
 800301c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800301e:	e009      	b.n	8003034 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003020:	f7fd fb40 	bl	80006a4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d902      	bls.n	8003034 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	73fb      	strb	r3, [r7, #15]
          break;
 8003032:	e005      	b.n	8003040 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ef      	beq.n	8003020 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	4904      	ldr	r1, [pc, #16]	; (8003060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	07ff800f 	.word	0x07ff800f
 8003068:	ff9f800f 	.word	0xff9f800f
 800306c:	f9ff800f 	.word	0xf9ff800f

08003070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e042      	b.n	8003108 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f001 f99d 	bl	80043d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2224      	movs	r2, #36	; 0x24
 800309e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f8c4 	bl	8003240 <UART_SetConfig>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e022      	b.n	8003108 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fbb4 	bl	8003838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fc3b 	bl	800397c <UART_CheckIdleState>
 8003106:	4603      	mov	r3, r0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	; 0x28
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003126:	2b20      	cmp	r3, #32
 8003128:	f040 8084 	bne.w	8003234 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_UART_Transmit+0x28>
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e07c      	b.n	8003236 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_UART_Transmit+0x3a>
 8003146:	2302      	movs	r3, #2
 8003148:	e075      	b.n	8003236 <HAL_UART_Transmit+0x126>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2221      	movs	r2, #33	; 0x21
 800315e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003162:	f7fd fa9f 	bl	80006a4 <HAL_GetTick>
 8003166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003180:	d108      	bne.n	8003194 <HAL_UART_Transmit+0x84>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	e003      	b.n	800319c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80031a4:	e02d      	b.n	8003202 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2200      	movs	r2, #0
 80031ae:	2180      	movs	r1, #128	; 0x80
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fc2e 	bl	8003a12 <UART_WaitOnFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e03a      	b.n	8003236 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10b      	bne.n	80031de <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	881a      	ldrh	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d2:	b292      	uxth	r2, r2
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	3302      	adds	r3, #2
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	e008      	b.n	80031f0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b292      	uxth	r2, r2
 80031e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1cb      	bne.n	80031a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2200      	movs	r2, #0
 8003216:	2140      	movs	r1, #64	; 0x40
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fbfa 	bl	8003a12 <UART_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e006      	b.n	8003236 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003244:	b08c      	sub	sp, #48	; 0x30
 8003246:	af00      	add	r7, sp, #0
 8003248:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	431a      	orrs	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	431a      	orrs	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	4313      	orrs	r3, r2
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4baa      	ldr	r3, [pc, #680]	; (8003518 <UART_SetConfig+0x2d8>)
 8003270:	4013      	ands	r3, r2
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003278:	430b      	orrs	r3, r1
 800327a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a9f      	ldr	r2, [pc, #636]	; (800351c <UART_SetConfig+0x2dc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d004      	beq.n	80032ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a8:	4313      	orrs	r3, r2
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80032b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	f023 010f 	bic.w	r1, r3, #15
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a90      	ldr	r2, [pc, #576]	; (8003520 <UART_SetConfig+0x2e0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d125      	bne.n	8003330 <UART_SetConfig+0xf0>
 80032e4:	4b8f      	ldr	r3, [pc, #572]	; (8003524 <UART_SetConfig+0x2e4>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d81a      	bhi.n	8003328 <UART_SetConfig+0xe8>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <UART_SetConfig+0xb8>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	08003309 	.word	0x08003309
 80032fc:	08003319 	.word	0x08003319
 8003300:	08003311 	.word	0x08003311
 8003304:	08003321 	.word	0x08003321
 8003308:	2301      	movs	r3, #1
 800330a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800330e:	e116      	b.n	800353e <UART_SetConfig+0x2fe>
 8003310:	2302      	movs	r3, #2
 8003312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003316:	e112      	b.n	800353e <UART_SetConfig+0x2fe>
 8003318:	2304      	movs	r3, #4
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800331e:	e10e      	b.n	800353e <UART_SetConfig+0x2fe>
 8003320:	2308      	movs	r3, #8
 8003322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003326:	e10a      	b.n	800353e <UART_SetConfig+0x2fe>
 8003328:	2310      	movs	r3, #16
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800332e:	e106      	b.n	800353e <UART_SetConfig+0x2fe>
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a7c      	ldr	r2, [pc, #496]	; (8003528 <UART_SetConfig+0x2e8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d138      	bne.n	80033ac <UART_SetConfig+0x16c>
 800333a:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <UART_SetConfig+0x2e4>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b0c      	cmp	r3, #12
 8003346:	d82d      	bhi.n	80033a4 <UART_SetConfig+0x164>
 8003348:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <UART_SetConfig+0x110>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003385 	.word	0x08003385
 8003354:	080033a5 	.word	0x080033a5
 8003358:	080033a5 	.word	0x080033a5
 800335c:	080033a5 	.word	0x080033a5
 8003360:	08003395 	.word	0x08003395
 8003364:	080033a5 	.word	0x080033a5
 8003368:	080033a5 	.word	0x080033a5
 800336c:	080033a5 	.word	0x080033a5
 8003370:	0800338d 	.word	0x0800338d
 8003374:	080033a5 	.word	0x080033a5
 8003378:	080033a5 	.word	0x080033a5
 800337c:	080033a5 	.word	0x080033a5
 8003380:	0800339d 	.word	0x0800339d
 8003384:	2300      	movs	r3, #0
 8003386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800338a:	e0d8      	b.n	800353e <UART_SetConfig+0x2fe>
 800338c:	2302      	movs	r3, #2
 800338e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003392:	e0d4      	b.n	800353e <UART_SetConfig+0x2fe>
 8003394:	2304      	movs	r3, #4
 8003396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800339a:	e0d0      	b.n	800353e <UART_SetConfig+0x2fe>
 800339c:	2308      	movs	r3, #8
 800339e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033a2:	e0cc      	b.n	800353e <UART_SetConfig+0x2fe>
 80033a4:	2310      	movs	r3, #16
 80033a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033aa:	e0c8      	b.n	800353e <UART_SetConfig+0x2fe>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5e      	ldr	r2, [pc, #376]	; (800352c <UART_SetConfig+0x2ec>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d125      	bne.n	8003402 <UART_SetConfig+0x1c2>
 80033b6:	4b5b      	ldr	r3, [pc, #364]	; (8003524 <UART_SetConfig+0x2e4>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033c0:	2b30      	cmp	r3, #48	; 0x30
 80033c2:	d016      	beq.n	80033f2 <UART_SetConfig+0x1b2>
 80033c4:	2b30      	cmp	r3, #48	; 0x30
 80033c6:	d818      	bhi.n	80033fa <UART_SetConfig+0x1ba>
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d00a      	beq.n	80033e2 <UART_SetConfig+0x1a2>
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d814      	bhi.n	80033fa <UART_SetConfig+0x1ba>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <UART_SetConfig+0x19a>
 80033d4:	2b10      	cmp	r3, #16
 80033d6:	d008      	beq.n	80033ea <UART_SetConfig+0x1aa>
 80033d8:	e00f      	b.n	80033fa <UART_SetConfig+0x1ba>
 80033da:	2300      	movs	r3, #0
 80033dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033e0:	e0ad      	b.n	800353e <UART_SetConfig+0x2fe>
 80033e2:	2302      	movs	r3, #2
 80033e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033e8:	e0a9      	b.n	800353e <UART_SetConfig+0x2fe>
 80033ea:	2304      	movs	r3, #4
 80033ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033f0:	e0a5      	b.n	800353e <UART_SetConfig+0x2fe>
 80033f2:	2308      	movs	r3, #8
 80033f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033f8:	e0a1      	b.n	800353e <UART_SetConfig+0x2fe>
 80033fa:	2310      	movs	r3, #16
 80033fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003400:	e09d      	b.n	800353e <UART_SetConfig+0x2fe>
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a4a      	ldr	r2, [pc, #296]	; (8003530 <UART_SetConfig+0x2f0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d125      	bne.n	8003458 <UART_SetConfig+0x218>
 800340c:	4b45      	ldr	r3, [pc, #276]	; (8003524 <UART_SetConfig+0x2e4>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003416:	2bc0      	cmp	r3, #192	; 0xc0
 8003418:	d016      	beq.n	8003448 <UART_SetConfig+0x208>
 800341a:	2bc0      	cmp	r3, #192	; 0xc0
 800341c:	d818      	bhi.n	8003450 <UART_SetConfig+0x210>
 800341e:	2b80      	cmp	r3, #128	; 0x80
 8003420:	d00a      	beq.n	8003438 <UART_SetConfig+0x1f8>
 8003422:	2b80      	cmp	r3, #128	; 0x80
 8003424:	d814      	bhi.n	8003450 <UART_SetConfig+0x210>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <UART_SetConfig+0x1f0>
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d008      	beq.n	8003440 <UART_SetConfig+0x200>
 800342e:	e00f      	b.n	8003450 <UART_SetConfig+0x210>
 8003430:	2300      	movs	r3, #0
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003436:	e082      	b.n	800353e <UART_SetConfig+0x2fe>
 8003438:	2302      	movs	r3, #2
 800343a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800343e:	e07e      	b.n	800353e <UART_SetConfig+0x2fe>
 8003440:	2304      	movs	r3, #4
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003446:	e07a      	b.n	800353e <UART_SetConfig+0x2fe>
 8003448:	2308      	movs	r3, #8
 800344a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800344e:	e076      	b.n	800353e <UART_SetConfig+0x2fe>
 8003450:	2310      	movs	r3, #16
 8003452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003456:	e072      	b.n	800353e <UART_SetConfig+0x2fe>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a35      	ldr	r2, [pc, #212]	; (8003534 <UART_SetConfig+0x2f4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d12a      	bne.n	80034b8 <UART_SetConfig+0x278>
 8003462:	4b30      	ldr	r3, [pc, #192]	; (8003524 <UART_SetConfig+0x2e4>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003470:	d01a      	beq.n	80034a8 <UART_SetConfig+0x268>
 8003472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003476:	d81b      	bhi.n	80034b0 <UART_SetConfig+0x270>
 8003478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800347c:	d00c      	beq.n	8003498 <UART_SetConfig+0x258>
 800347e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003482:	d815      	bhi.n	80034b0 <UART_SetConfig+0x270>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <UART_SetConfig+0x250>
 8003488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348c:	d008      	beq.n	80034a0 <UART_SetConfig+0x260>
 800348e:	e00f      	b.n	80034b0 <UART_SetConfig+0x270>
 8003490:	2300      	movs	r3, #0
 8003492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003496:	e052      	b.n	800353e <UART_SetConfig+0x2fe>
 8003498:	2302      	movs	r3, #2
 800349a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800349e:	e04e      	b.n	800353e <UART_SetConfig+0x2fe>
 80034a0:	2304      	movs	r3, #4
 80034a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034a6:	e04a      	b.n	800353e <UART_SetConfig+0x2fe>
 80034a8:	2308      	movs	r3, #8
 80034aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ae:	e046      	b.n	800353e <UART_SetConfig+0x2fe>
 80034b0:	2310      	movs	r3, #16
 80034b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b6:	e042      	b.n	800353e <UART_SetConfig+0x2fe>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a17      	ldr	r2, [pc, #92]	; (800351c <UART_SetConfig+0x2dc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d13a      	bne.n	8003538 <UART_SetConfig+0x2f8>
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <UART_SetConfig+0x2e4>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034d0:	d01a      	beq.n	8003508 <UART_SetConfig+0x2c8>
 80034d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034d6:	d81b      	bhi.n	8003510 <UART_SetConfig+0x2d0>
 80034d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034dc:	d00c      	beq.n	80034f8 <UART_SetConfig+0x2b8>
 80034de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e2:	d815      	bhi.n	8003510 <UART_SetConfig+0x2d0>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <UART_SetConfig+0x2b0>
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ec:	d008      	beq.n	8003500 <UART_SetConfig+0x2c0>
 80034ee:	e00f      	b.n	8003510 <UART_SetConfig+0x2d0>
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f6:	e022      	b.n	800353e <UART_SetConfig+0x2fe>
 80034f8:	2302      	movs	r3, #2
 80034fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034fe:	e01e      	b.n	800353e <UART_SetConfig+0x2fe>
 8003500:	2304      	movs	r3, #4
 8003502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003506:	e01a      	b.n	800353e <UART_SetConfig+0x2fe>
 8003508:	2308      	movs	r3, #8
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800350e:	e016      	b.n	800353e <UART_SetConfig+0x2fe>
 8003510:	2310      	movs	r3, #16
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003516:	e012      	b.n	800353e <UART_SetConfig+0x2fe>
 8003518:	cfff69f3 	.word	0xcfff69f3
 800351c:	40008000 	.word	0x40008000
 8003520:	40013800 	.word	0x40013800
 8003524:	40021000 	.word	0x40021000
 8003528:	40004400 	.word	0x40004400
 800352c:	40004800 	.word	0x40004800
 8003530:	40004c00 	.word	0x40004c00
 8003534:	40005000 	.word	0x40005000
 8003538:	2310      	movs	r3, #16
 800353a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4aae      	ldr	r2, [pc, #696]	; (80037fc <UART_SetConfig+0x5bc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	f040 8097 	bne.w	8003678 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800354a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800354e:	2b08      	cmp	r3, #8
 8003550:	d823      	bhi.n	800359a <UART_SetConfig+0x35a>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <UART_SetConfig+0x318>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	0800357d 	.word	0x0800357d
 800355c:	0800359b 	.word	0x0800359b
 8003560:	08003585 	.word	0x08003585
 8003564:	0800359b 	.word	0x0800359b
 8003568:	0800358b 	.word	0x0800358b
 800356c:	0800359b 	.word	0x0800359b
 8003570:	0800359b 	.word	0x0800359b
 8003574:	0800359b 	.word	0x0800359b
 8003578:	08003593 	.word	0x08003593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800357c:	f7fe ff74 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003582:	e010      	b.n	80035a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003584:	4b9e      	ldr	r3, [pc, #632]	; (8003800 <UART_SetConfig+0x5c0>)
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003588:	e00d      	b.n	80035a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358a:	f7fe fed5 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 800358e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003590:	e009      	b.n	80035a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003598:	e005      	b.n	80035a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80035a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8130 	beq.w	800380e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	4a94      	ldr	r2, [pc, #592]	; (8003804 <UART_SetConfig+0x5c4>)
 80035b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035b8:	461a      	mov	r2, r3
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d305      	bcc.n	80035de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d903      	bls.n	80035e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035e4:	e113      	b.n	800380e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	2200      	movs	r2, #0
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	60fa      	str	r2, [r7, #12]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	4a84      	ldr	r2, [pc, #528]	; (8003804 <UART_SetConfig+0x5c4>)
 80035f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2200      	movs	r2, #0
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003604:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003608:	f7fc fe62 	bl	80002d0 <__aeabi_uldivmod>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	020b      	lsls	r3, r1, #8
 800361e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003622:	0202      	lsls	r2, r0, #8
 8003624:	6979      	ldr	r1, [r7, #20]
 8003626:	6849      	ldr	r1, [r1, #4]
 8003628:	0849      	lsrs	r1, r1, #1
 800362a:	2000      	movs	r0, #0
 800362c:	460c      	mov	r4, r1
 800362e:	4605      	mov	r5, r0
 8003630:	eb12 0804 	adds.w	r8, r2, r4
 8003634:	eb43 0905 	adc.w	r9, r3, r5
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	469a      	mov	sl, r3
 8003640:	4693      	mov	fp, r2
 8003642:	4652      	mov	r2, sl
 8003644:	465b      	mov	r3, fp
 8003646:	4640      	mov	r0, r8
 8003648:	4649      	mov	r1, r9
 800364a:	f7fc fe41 	bl	80002d0 <__aeabi_uldivmod>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4613      	mov	r3, r2
 8003654:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800365c:	d308      	bcc.n	8003670 <UART_SetConfig+0x430>
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003664:	d204      	bcs.n	8003670 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6a3a      	ldr	r2, [r7, #32]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	e0ce      	b.n	800380e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003676:	e0ca      	b.n	800380e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003680:	d166      	bne.n	8003750 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003686:	2b08      	cmp	r3, #8
 8003688:	d827      	bhi.n	80036da <UART_SetConfig+0x49a>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <UART_SetConfig+0x450>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	080036b5 	.word	0x080036b5
 8003694:	080036bd 	.word	0x080036bd
 8003698:	080036c5 	.word	0x080036c5
 800369c:	080036db 	.word	0x080036db
 80036a0:	080036cb 	.word	0x080036cb
 80036a4:	080036db 	.word	0x080036db
 80036a8:	080036db 	.word	0x080036db
 80036ac:	080036db 	.word	0x080036db
 80036b0:	080036d3 	.word	0x080036d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b4:	f7fe fed8 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 80036b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036ba:	e014      	b.n	80036e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036bc:	f7fe feea 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036c2:	e010      	b.n	80036e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c4:	4b4e      	ldr	r3, [pc, #312]	; (8003800 <UART_SetConfig+0x5c0>)
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036c8:	e00d      	b.n	80036e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ca:	f7fe fe35 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80036ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036d0:	e009      	b.n	80036e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036d8:	e005      	b.n	80036e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8090 	beq.w	800380e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	4a44      	ldr	r2, [pc, #272]	; (8003804 <UART_SetConfig+0x5c4>)
 80036f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003700:	005a      	lsls	r2, r3, #1
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	085b      	lsrs	r3, r3, #1
 8003708:	441a      	add	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003712:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	2b0f      	cmp	r3, #15
 8003718:	d916      	bls.n	8003748 <UART_SetConfig+0x508>
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003720:	d212      	bcs.n	8003748 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	b29b      	uxth	r3, r3
 8003726:	f023 030f 	bic.w	r3, r3, #15
 800372a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	b29b      	uxth	r3, r3
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	b29a      	uxth	r2, r3
 8003738:	8bfb      	ldrh	r3, [r7, #30]
 800373a:	4313      	orrs	r3, r2
 800373c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	8bfa      	ldrh	r2, [r7, #30]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	e062      	b.n	800380e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800374e:	e05e      	b.n	800380e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003750:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003754:	2b08      	cmp	r3, #8
 8003756:	d828      	bhi.n	80037aa <UART_SetConfig+0x56a>
 8003758:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <UART_SetConfig+0x520>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	08003785 	.word	0x08003785
 8003764:	0800378d 	.word	0x0800378d
 8003768:	08003795 	.word	0x08003795
 800376c:	080037ab 	.word	0x080037ab
 8003770:	0800379b 	.word	0x0800379b
 8003774:	080037ab 	.word	0x080037ab
 8003778:	080037ab 	.word	0x080037ab
 800377c:	080037ab 	.word	0x080037ab
 8003780:	080037a3 	.word	0x080037a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003784:	f7fe fe70 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800378a:	e014      	b.n	80037b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800378c:	f7fe fe82 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 8003790:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003792:	e010      	b.n	80037b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003794:	4b1a      	ldr	r3, [pc, #104]	; (8003800 <UART_SetConfig+0x5c0>)
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003798:	e00d      	b.n	80037b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800379a:	f7fe fdcd 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 800379e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037a0:	e009      	b.n	80037b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037a8:	e005      	b.n	80037b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037b4:	bf00      	nop
    }

    if (pclk != 0U)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d028      	beq.n	800380e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	4a10      	ldr	r2, [pc, #64]	; (8003804 <UART_SetConfig+0x5c4>)
 80037c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037c6:	461a      	mov	r2, r3
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	441a      	add	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	2b0f      	cmp	r3, #15
 80037e4:	d910      	bls.n	8003808 <UART_SetConfig+0x5c8>
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ec:	d20c      	bcs.n	8003808 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60da      	str	r2, [r3, #12]
 80037f8:	e009      	b.n	800380e <UART_SetConfig+0x5ce>
 80037fa:	bf00      	nop
 80037fc:	40008000 	.word	0x40008000
 8003800:	00f42400 	.word	0x00f42400
 8003804:	08009c70 	.word	0x08009c70
      }
      else
      {
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2201      	movs	r2, #1
 8003812:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2201      	movs	r2, #1
 800381a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2200      	movs	r2, #0
 8003822:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2200      	movs	r2, #0
 8003828:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800382a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800382e:	4618      	mov	r0, r3
 8003830:	3730      	adds	r7, #48	; 0x30
 8003832:	46bd      	mov	sp, r7
 8003834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01a      	beq.n	800394e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003936:	d10a      	bne.n	800394e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800398c:	f7fc fe8a 	bl	80006a4 <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b08      	cmp	r3, #8
 800399e:	d10e      	bne.n	80039be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f82f 	bl	8003a12 <UART_WaitOnFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e025      	b.n	8003a0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d10e      	bne.n	80039ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f819 	bl	8003a12 <UART_WaitOnFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e00f      	b.n	8003a0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b09c      	sub	sp, #112	; 0x70
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a22:	e0a9      	b.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	f000 80a5 	beq.w	8003b78 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7fc fe39 	bl	80006a4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d140      	bne.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a58:	667b      	str	r3, [r7, #100]	; 0x64
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e6      	bne.n	8003a44 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3308      	adds	r3, #8
 8003a94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a96:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e5      	bne.n	8003a76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e069      	b.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d051      	beq.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae2:	d149      	bne.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e6      	bne.n	8003aee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3308      	adds	r3, #8
 8003b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b40:	623a      	str	r2, [r7, #32]
 8003b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	69f9      	ldr	r1, [r7, #28]
 8003b46:	6a3a      	ldr	r2, [r7, #32]
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e5      	bne.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e010      	b.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	f43f af46 	beq.w	8003a24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3770      	adds	r7, #112	; 0x70
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e027      	b.n	8003c08 <HAL_UARTEx_DisableFifoMode+0x66>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	; 0x24
 8003bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003be6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e02d      	b.n	8003c88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f84f 	bl	8003d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e02d      	b.n	8003d04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2224      	movs	r2, #36	; 0x24
 8003cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0201 	bic.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f811 	bl	8003d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d108      	bne.n	8003d2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d2c:	e031      	b.n	8003d92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d2e:	2308      	movs	r3, #8
 8003d30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d32:	2308      	movs	r3, #8
 8003d34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	0e5b      	lsrs	r3, r3, #25
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	0f5b      	lsrs	r3, r3, #29
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d56:	7bbb      	ldrb	r3, [r7, #14]
 8003d58:	7b3a      	ldrb	r2, [r7, #12]
 8003d5a:	4911      	ldr	r1, [pc, #68]	; (8003da0 <UARTEx_SetNbDataToProcess+0x94>)
 8003d5c:	5c8a      	ldrb	r2, [r1, r2]
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d62:	7b3a      	ldrb	r2, [r7, #12]
 8003d64:	490f      	ldr	r1, [pc, #60]	; (8003da4 <UARTEx_SetNbDataToProcess+0x98>)
 8003d66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d68:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	7b7a      	ldrb	r2, [r7, #13]
 8003d78:	4909      	ldr	r1, [pc, #36]	; (8003da0 <UARTEx_SetNbDataToProcess+0x94>)
 8003d7a:	5c8a      	ldrb	r2, [r1, r2]
 8003d7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d80:	7b7a      	ldrb	r2, [r7, #13]
 8003d82:	4908      	ldr	r1, [pc, #32]	; (8003da4 <UARTEx_SetNbDataToProcess+0x98>)
 8003d84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d86:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	08009c88 	.word	0x08009c88
 8003da4:	08009c90 	.word	0x08009c90

08003da8 <findIndexByElement>:

/*
Find the index of an array in an array of char array 
*/
int findIndexByElement(char **arr, int size, char *elem)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
    // for debugging purposes
    char *b = elem;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < size; i++)
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	e011      	b.n	8003de2 <findIndexByElement+0x3a>
    {
        char *a = arr[i];
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	617b      	str	r3, [r7, #20]
        if (strcmp(a, b) == 0)
 8003dca:	69b9      	ldr	r1, [r7, #24]
 8003dcc:	6978      	ldr	r0, [r7, #20]
 8003dce:	f7fc fa17 	bl	8000200 <strcmp>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <findIndexByElement+0x34>
        {
            return i;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	e008      	b.n	8003dee <findIndexByElement+0x46>
    for (int i = 0; i < size; i++)
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	3301      	adds	r3, #1
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	dbe9      	blt.n	8003dbe <findIndexByElement+0x16>
        }
    }
    return -1; // element does not exist
 8003dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <convertMorseToText>:
int size: size of the morse code array (mArr)

Note: Ideally, buff and mArr have the same size.
*/
void convertMorseToText(char **mArr, char *buff, int size)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e02d      	b.n	8003e66 <convertMorseToText+0x6e>
    {
        int idx = findIndexByElement(alphabeticalMorse, 26, mArr[i]);
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4413      	add	r3, r2
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	211a      	movs	r1, #26
 8003e18:	4817      	ldr	r0, [pc, #92]	; (8003e78 <convertMorseToText+0x80>)
 8003e1a:	f7ff ffc5 	bl	8003da8 <findIndexByElement>
 8003e1e:	61b8      	str	r0, [r7, #24]
        if (idx == -1) {
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e26:	d113      	bne.n	8003e50 <convertMorseToText+0x58>
            int idx = findIndexByElement(numericalMorse, 10, mArr[i]);
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	210a      	movs	r1, #10
 8003e36:	4811      	ldr	r0, [pc, #68]	; (8003e7c <convertMorseToText+0x84>)
 8003e38:	f7ff ffb6 	bl	8003da8 <findIndexByElement>
 8003e3c:	6178      	str	r0, [r7, #20]
            buff[i] = '0' + idx;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	440b      	add	r3, r1
 8003e48:	3230      	adds	r2, #48	; 0x30
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	e007      	b.n	8003e60 <convertMorseToText+0x68>
        } else{
            buff[i] = 'a' + idx;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	440b      	add	r3, r1
 8003e5a:	3261      	adds	r2, #97	; 0x61
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	3301      	adds	r3, #1
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	dbcd      	blt.n	8003e0a <convertMorseToText+0x12>
        }
    }
}
 8003e6e:	bf00      	nop
 8003e70:	bf00      	nop
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000008 	.word	0x20000008
 8003e7c:	20000070 	.word	0x20000070

08003e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e86:	f7fc fba5 	bl	80005d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e8a:	f000 f893 	bl	8003fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e8e:	f000 f96f 	bl	8004170 <MX_GPIO_Init>
  MX_I2C2_Init();
 8003e92:	f000 f8e1 	bl	8004058 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8003e96:	f000 f91f 	bl	80040d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  pMyDevice->I2cHandle = &hi2c2;
 8003e9a:	4b3a      	ldr	r3, [pc, #232]	; (8003f84 <main+0x104>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a3a      	ldr	r2, [pc, #232]	; (8003f88 <main+0x108>)
 8003ea0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  pMyDevice->I2cDevAddr      = 0x52;
 8003ea4:	4b37      	ldr	r3, [pc, #220]	; (8003f84 <main+0x104>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2252      	movs	r2, #82	; 0x52
 8003eaa:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
  pMyDevice->comms_type      =  1;
 8003eae:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <main+0x104>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
  pMyDevice->comms_speed_khz =  400;
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <main+0x104>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003ec0:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
  VL53L0X_ResetDevice(&MyDevice);
 8003ec4:	4831      	ldr	r0, [pc, #196]	; (8003f8c <main+0x10c>)
 8003ec6:	f000 fe73 	bl	8004bb0 <VL53L0X_ResetDevice>
  status = VL53L0X_DataInit(&MyDevice);
 8003eca:	4830      	ldr	r0, [pc, #192]	; (8003f8c <main+0x10c>)
 8003ecc:	f000 fb66 	bl	800459c <VL53L0X_DataInit>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4b2e      	ldr	r3, [pc, #184]	; (8003f90 <main+0x110>)
 8003ed6:	701a      	strb	r2, [r3, #0]
  status = VL53L0X_StaticInit(pMyDevice);
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <main+0x104>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fce3 	bl	80048a8 <VL53L0X_StaticInit>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <main+0x110>)
 8003ee8:	701a      	strb	r2, [r3, #0]
  status = VL53L0X_PerformRefCalibration(pMyDevice,
 8003eea:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <main+0x104>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <main+0x114>)
 8003ef0:	4929      	ldr	r1, [pc, #164]	; (8003f98 <main+0x118>)
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 fbc4 	bl	8005680 <VL53L0X_PerformRefCalibration>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b24      	ldr	r3, [pc, #144]	; (8003f90 <main+0x110>)
 8003efe:	701a      	strb	r2, [r3, #0]
          		&VhvSettings, &PhaseCal);
  status = VL53L0X_PerformRefSpadManagement(pMyDevice,
 8003f00:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <main+0x104>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a25      	ldr	r2, [pc, #148]	; (8003f9c <main+0x11c>)
 8003f06:	4926      	ldr	r1, [pc, #152]	; (8003fa0 <main+0x120>)
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f002 f8d3 	bl	80060b4 <VL53L0X_PerformRefSpadManagement>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b1f      	ldr	r3, [pc, #124]	; (8003f90 <main+0x110>)
 8003f14:	701a      	strb	r2, [r3, #0]
          		&refSpadCount, &isApertureSpads);
  status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8003f16:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <main+0x104>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 ff45 	bl	8004dac <VL53L0X_SetDeviceMode>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <main+0x110>)
 8003f28:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	char* array[1];
	read_char_morse();
 8003f2a:	f000 f95b 	bl	80041e4 <read_char_morse>
	array[0] = morse;
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <main+0x124>)
 8003f30:	603b      	str	r3, [r7, #0]
	convertMorseToText(array, ascii_char, 1);
 8003f32:	1d39      	adds	r1, r7, #4
 8003f34:	463b      	mov	r3, r7
 8003f36:	2201      	movs	r2, #1
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff5d 	bl	8003df8 <convertMorseToText>
	ascii_char[1]='\0';
 8003f3e:	2300      	movs	r3, #0
 8003f40:	717b      	strb	r3, [r7, #5]
	snprintf(output, sizeof(output), "%s\n", ascii_char);
 8003f42:	1d3b      	adds	r3, r7, #4
 8003f44:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <main+0x128>)
 8003f46:	2132      	movs	r1, #50	; 0x32
 8003f48:	4818      	ldr	r0, [pc, #96]	; (8003fac <main+0x12c>)
 8003f4a:	f005 f987 	bl	800925c <sniprintf>
	HAL_UART_Transmit(&huart1, output, strlen(output), 100);
 8003f4e:	4817      	ldr	r0, [pc, #92]	; (8003fac <main+0x12c>)
 8003f50:	f7fc f960 	bl	8000214 <strlen>
 8003f54:	4603      	mov	r3, r0
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	2364      	movs	r3, #100	; 0x64
 8003f5a:	4914      	ldr	r1, [pc, #80]	; (8003fac <main+0x12c>)
 8003f5c:	4814      	ldr	r0, [pc, #80]	; (8003fb0 <main+0x130>)
 8003f5e:	f7ff f8d7 	bl	8003110 <HAL_UART_Transmit>
	snprintf(output, sizeof(output), "%s\n", morse);
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <main+0x124>)
 8003f64:	4a10      	ldr	r2, [pc, #64]	; (8003fa8 <main+0x128>)
 8003f66:	2132      	movs	r1, #50	; 0x32
 8003f68:	4810      	ldr	r0, [pc, #64]	; (8003fac <main+0x12c>)
 8003f6a:	f005 f977 	bl	800925c <sniprintf>
	HAL_UART_Transmit(&huart1, output, strlen(output), 100);
 8003f6e:	480f      	ldr	r0, [pc, #60]	; (8003fac <main+0x12c>)
 8003f70:	f7fc f950 	bl	8000214 <strlen>
 8003f74:	4603      	mov	r3, r0
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	2364      	movs	r3, #100	; 0x64
 8003f7a:	490c      	ldr	r1, [pc, #48]	; (8003fac <main+0x12c>)
 8003f7c:	480c      	ldr	r0, [pc, #48]	; (8003fb0 <main+0x130>)
 8003f7e:	f7ff f8c7 	bl	8003110 <HAL_UART_Transmit>
  {
 8003f82:	e7d2      	b.n	8003f2a <main+0xaa>
 8003f84:	20000098 	.word	0x20000098
 8003f88:	200003e8 	.word	0x200003e8
 8003f8c:	20000500 	.word	0x20000500
 8003f90:	200006b4 	.word	0x200006b4
 8003f94:	200006b6 	.word	0x200006b6
 8003f98:	200006b5 	.word	0x200006b5
 8003f9c:	200006bc 	.word	0x200006bc
 8003fa0:	200006b8 	.word	0x200006b8
 8003fa4:	200006dc 	.word	0x200006dc
 8003fa8:	08009c54 	.word	0x08009c54
 8003fac:	200004cc 	.word	0x200004cc
 8003fb0:	2000043c 	.word	0x2000043c

08003fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b096      	sub	sp, #88	; 0x58
 8003fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fba:	f107 0314 	add.w	r3, r7, #20
 8003fbe:	2244      	movs	r2, #68	; 0x44
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f005 f942 	bl	800924c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fc8:	463b      	mov	r3, r7
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	605a      	str	r2, [r3, #4]
 8003fd0:	609a      	str	r2, [r3, #8]
 8003fd2:	60da      	str	r2, [r3, #12]
 8003fd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003fd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003fda:	f7fd fbb5 	bl	8001748 <HAL_PWREx_ControlVoltageScaling>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003fe4:	f000 f96e 	bl	80042c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003fe8:	2310      	movs	r3, #16
 8003fea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003fec:	2301      	movs	r3, #1
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003ff4:	2360      	movs	r3, #96	; 0x60
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004000:	2301      	movs	r3, #1
 8004002:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004004:	2328      	movs	r3, #40	; 0x28
 8004006:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004008:	2302      	movs	r3, #2
 800400a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800400c:	2302      	movs	r3, #2
 800400e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004010:	2302      	movs	r3, #2
 8004012:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	4618      	mov	r0, r3
 800401a:	f7fd fc39 	bl	8001890 <HAL_RCC_OscConfig>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8004024:	f000 f94e 	bl	80042c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004028:	230f      	movs	r3, #15
 800402a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800402c:	2303      	movs	r3, #3
 800402e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800403c:	463b      	mov	r3, r7
 800403e:	2103      	movs	r1, #3
 8004040:	4618      	mov	r0, r3
 8004042:	f7fe f83f 	bl	80020c4 <HAL_RCC_ClockConfig>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800404c:	f000 f93a 	bl	80042c4 <Error_Handler>
  }
}
 8004050:	bf00      	nop
 8004052:	3758      	adds	r7, #88	; 0x58
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800405c:	4b1b      	ldr	r3, [pc, #108]	; (80040cc <MX_I2C2_Init+0x74>)
 800405e:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <MX_I2C2_Init+0x78>)
 8004060:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <MX_I2C2_Init+0x74>)
 8004064:	4a1b      	ldr	r2, [pc, #108]	; (80040d4 <MX_I2C2_Init+0x7c>)
 8004066:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004068:	4b18      	ldr	r3, [pc, #96]	; (80040cc <MX_I2C2_Init+0x74>)
 800406a:	2200      	movs	r2, #0
 800406c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <MX_I2C2_Init+0x74>)
 8004070:	2201      	movs	r2, #1
 8004072:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004074:	4b15      	ldr	r3, [pc, #84]	; (80040cc <MX_I2C2_Init+0x74>)
 8004076:	2200      	movs	r2, #0
 8004078:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <MX_I2C2_Init+0x74>)
 800407c:	2200      	movs	r2, #0
 800407e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004080:	4b12      	ldr	r3, [pc, #72]	; (80040cc <MX_I2C2_Init+0x74>)
 8004082:	2200      	movs	r2, #0
 8004084:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <MX_I2C2_Init+0x74>)
 8004088:	2200      	movs	r2, #0
 800408a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <MX_I2C2_Init+0x74>)
 800408e:	2200      	movs	r2, #0
 8004090:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004092:	480e      	ldr	r0, [pc, #56]	; (80040cc <MX_I2C2_Init+0x74>)
 8004094:	f7fc fdae 	bl	8000bf4 <HAL_I2C_Init>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800409e:	f000 f911 	bl	80042c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040a2:	2100      	movs	r1, #0
 80040a4:	4809      	ldr	r0, [pc, #36]	; (80040cc <MX_I2C2_Init+0x74>)
 80040a6:	f7fd fa97 	bl	80015d8 <HAL_I2CEx_ConfigAnalogFilter>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80040b0:	f000 f908 	bl	80042c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80040b4:	2100      	movs	r1, #0
 80040b6:	4805      	ldr	r0, [pc, #20]	; (80040cc <MX_I2C2_Init+0x74>)
 80040b8:	f7fd fad9 	bl	800166e <HAL_I2CEx_ConfigDigitalFilter>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80040c2:	f000 f8ff 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	200003e8 	.word	0x200003e8
 80040d0:	40005800 	.word	0x40005800
 80040d4:	10909cec 	.word	0x10909cec

080040d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040dc:	4b22      	ldr	r3, [pc, #136]	; (8004168 <MX_USART1_UART_Init+0x90>)
 80040de:	4a23      	ldr	r2, [pc, #140]	; (800416c <MX_USART1_UART_Init+0x94>)
 80040e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80040e2:	4b21      	ldr	r3, [pc, #132]	; (8004168 <MX_USART1_UART_Init+0x90>)
 80040e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040ea:	4b1f      	ldr	r3, [pc, #124]	; (8004168 <MX_USART1_UART_Init+0x90>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <MX_USART1_UART_Init+0x90>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80040f6:	4b1c      	ldr	r3, [pc, #112]	; (8004168 <MX_USART1_UART_Init+0x90>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040fc:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <MX_USART1_UART_Init+0x90>)
 80040fe:	220c      	movs	r2, #12
 8004100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004102:	4b19      	ldr	r3, [pc, #100]	; (8004168 <MX_USART1_UART_Init+0x90>)
 8004104:	2200      	movs	r2, #0
 8004106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004108:	4b17      	ldr	r3, [pc, #92]	; (8004168 <MX_USART1_UART_Init+0x90>)
 800410a:	2200      	movs	r2, #0
 800410c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800410e:	4b16      	ldr	r3, [pc, #88]	; (8004168 <MX_USART1_UART_Init+0x90>)
 8004110:	2200      	movs	r2, #0
 8004112:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004114:	4b14      	ldr	r3, [pc, #80]	; (8004168 <MX_USART1_UART_Init+0x90>)
 8004116:	2200      	movs	r2, #0
 8004118:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800411a:	4b13      	ldr	r3, [pc, #76]	; (8004168 <MX_USART1_UART_Init+0x90>)
 800411c:	2200      	movs	r2, #0
 800411e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004120:	4811      	ldr	r0, [pc, #68]	; (8004168 <MX_USART1_UART_Init+0x90>)
 8004122:	f7fe ffa5 	bl	8003070 <HAL_UART_Init>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800412c:	f000 f8ca 	bl	80042c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004130:	2100      	movs	r1, #0
 8004132:	480d      	ldr	r0, [pc, #52]	; (8004168 <MX_USART1_UART_Init+0x90>)
 8004134:	f7ff fd6e 	bl	8003c14 <HAL_UARTEx_SetTxFifoThreshold>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800413e:	f000 f8c1 	bl	80042c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004142:	2100      	movs	r1, #0
 8004144:	4808      	ldr	r0, [pc, #32]	; (8004168 <MX_USART1_UART_Init+0x90>)
 8004146:	f7ff fda3 	bl	8003c90 <HAL_UARTEx_SetRxFifoThreshold>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004150:	f000 f8b8 	bl	80042c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004154:	4804      	ldr	r0, [pc, #16]	; (8004168 <MX_USART1_UART_Init+0x90>)
 8004156:	f7ff fd24 	bl	8003ba2 <HAL_UARTEx_DisableFifoMode>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004160:	f000 f8b0 	bl	80042c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004164:	bf00      	nop
 8004166:	bd80      	pop	{r7, pc}
 8004168:	2000043c 	.word	0x2000043c
 800416c:	40013800 	.word	0x40013800

08004170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004176:	f107 030c 	add.w	r3, r7, #12
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	609a      	str	r2, [r3, #8]
 8004182:	60da      	str	r2, [r3, #12]
 8004184:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <MX_GPIO_Init+0x6c>)
 8004188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418a:	4a14      	ldr	r2, [pc, #80]	; (80041dc <MX_GPIO_Init+0x6c>)
 800418c:	f043 0304 	orr.w	r3, r3, #4
 8004190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <MX_GPIO_Init+0x6c>)
 8004194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800419e:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <MX_GPIO_Init+0x6c>)
 80041a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a2:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <MX_GPIO_Init+0x6c>)
 80041a4:	f043 0302 	orr.w	r3, r3, #2
 80041a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <MX_GPIO_Init+0x6c>)
 80041ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	607b      	str	r3, [r7, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BLUEBUTTON_Pin */
  GPIO_InitStruct.Pin = BLUEBUTTON_Pin;
 80041b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80041c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUEBUTTON_GPIO_Port, &GPIO_InitStruct);
 80041c6:	f107 030c 	add.w	r3, r7, #12
 80041ca:	4619      	mov	r1, r3
 80041cc:	4804      	ldr	r0, [pc, #16]	; (80041e0 <MX_GPIO_Init+0x70>)
 80041ce:	f7fc fb7f 	bl	80008d0 <HAL_GPIO_Init>

}
 80041d2:	bf00      	nop
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
 80041e0:	48000800 	.word	0x48000800

080041e4 <read_char_morse>:
    VL53L0X_GetPalErrorString(status, buffer);
    printf("API Status: %i : %s\n", status, buffer);
}

void read_char_morse() // reads a single ascii character (multiple morse codes)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
	int mode = 0; // 0=not started reading. 1=reading(waiting for hand to leave sensor). 2=waiting for additional morse code
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
	int i = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
	int counter = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
	while(1)
	{
		  status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice, &rangeData);
 80041f6:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <read_char_morse+0xc8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	492d      	ldr	r1, [pc, #180]	; (80042b0 <read_char_morse+0xcc>)
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 fd6d 	bl	8005cdc <VL53L0X_PerformSingleRangingMeasurement>
 8004202:	4603      	mov	r3, r0
 8004204:	461a      	mov	r2, r3
 8004206:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <read_char_morse+0xd0>)
 8004208:	701a      	strb	r2, [r3, #0]
		  distance_output = pRangeData->RangeMilliMeter;
 800420a:	4b2b      	ldr	r3, [pc, #172]	; (80042b8 <read_char_morse+0xd4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	891a      	ldrh	r2, [r3, #8]
 8004210:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <read_char_morse+0xd8>)
 8004212:	801a      	strh	r2, [r3, #0]
		  if (distance_output>THRES_DISTANCE)
 8004214:	4b29      	ldr	r3, [pc, #164]	; (80042bc <read_char_morse+0xd8>)
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	2b64      	cmp	r3, #100	; 0x64
 800421a:	d924      	bls.n	8004266 <read_char_morse+0x82>
		  {
			  if (mode==1){
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d112      	bne.n	8004248 <read_char_morse+0x64>
				  mode = 2;
 8004222:	2302      	movs	r3, #2
 8004224:	60fb      	str	r3, [r7, #12]
				  morse[i] = (counter>=DURATION_THRES) ? '-' : '.';
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b07      	cmp	r3, #7
 800422a:	dd01      	ble.n	8004230 <read_char_morse+0x4c>
 800422c:	212d      	movs	r1, #45	; 0x2d
 800422e:	e000      	b.n	8004232 <read_char_morse+0x4e>
 8004230:	212e      	movs	r1, #46	; 0x2e
 8004232:	4a23      	ldr	r2, [pc, #140]	; (80042c0 <read_char_morse+0xdc>)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4413      	add	r3, r2
 8004238:	460a      	mov	r2, r1
 800423a:	701a      	strb	r2, [r3, #0]
				  i++;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	3301      	adds	r3, #1
 8004240:	60bb      	str	r3, [r7, #8]
				  counter = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	e028      	b.n	800429a <read_char_morse+0xb6>
			  } else if (mode==2){
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d125      	bne.n	800429a <read_char_morse+0xb6>
				  counter++;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3301      	adds	r3, #1
 8004252:	607b      	str	r3, [r7, #4]
				  if (counter>14){
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b0e      	cmp	r3, #14
 8004258:	dd1f      	ble.n	800429a <read_char_morse+0xb6>
					  morse[i]='\0';
 800425a:	4a19      	ldr	r2, [pc, #100]	; (80042c0 <read_char_morse+0xdc>)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4413      	add	r3, r2
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
					  break;
 8004264:	e01d      	b.n	80042a2 <read_char_morse+0xbe>
				  }
			  }


		  } else  if (distance_output<THRES_DISTANCE && (mode==0||mode==2)) {
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <read_char_morse+0xd8>)
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	2b63      	cmp	r3, #99	; 0x63
 800426c:	d80b      	bhi.n	8004286 <read_char_morse+0xa2>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <read_char_morse+0x96>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d105      	bne.n	8004286 <read_char_morse+0xa2>
			  counter++;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3301      	adds	r3, #1
 800427e:	607b      	str	r3, [r7, #4]
			  mode = 1;
 8004280:	2301      	movs	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	e009      	b.n	800429a <read_char_morse+0xb6>
		  } else if (distance_output<THRES_DISTANCE && mode==1) {
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <read_char_morse+0xd8>)
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	2b63      	cmp	r3, #99	; 0x63
 800428c:	d805      	bhi.n	800429a <read_char_morse+0xb6>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d102      	bne.n	800429a <read_char_morse+0xb6>
			  counter++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3301      	adds	r3, #1
 8004298:	607b      	str	r3, [r7, #4]
		  }
		  HAL_Delay(WAITTIME);
 800429a:	2001      	movs	r0, #1
 800429c:	f7fc fa0e 	bl	80006bc <HAL_Delay>
		  status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice, &rangeData);
 80042a0:	e7a9      	b.n	80041f6 <read_char_morse+0x12>
	}



}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000098 	.word	0x20000098
 80042b0:	200006c0 	.word	0x200006c0
 80042b4:	200006b4 	.word	0x200006b4
 80042b8:	2000009c 	.word	0x2000009c
 80042bc:	200000a0 	.word	0x200000a0
 80042c0:	200006dc 	.word	0x200006dc

080042c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80042c8:	b672      	cpsid	i
}
 80042ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042cc:	e7fe      	b.n	80042cc <Error_Handler+0x8>
	...

080042d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d6:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <HAL_MspInit+0x44>)
 80042d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042da:	4a0e      	ldr	r2, [pc, #56]	; (8004314 <HAL_MspInit+0x44>)
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	6613      	str	r3, [r2, #96]	; 0x60
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <HAL_MspInit+0x44>)
 80042e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <HAL_MspInit+0x44>)
 80042f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f2:	4a08      	ldr	r2, [pc, #32]	; (8004314 <HAL_MspInit+0x44>)
 80042f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f8:	6593      	str	r3, [r2, #88]	; 0x58
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_MspInit+0x44>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000

08004318 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b0ae      	sub	sp, #184	; 0xb8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004320:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004330:	f107 0310 	add.w	r3, r7, #16
 8004334:	2294      	movs	r2, #148	; 0x94
 8004336:	2100      	movs	r1, #0
 8004338:	4618      	mov	r0, r3
 800433a:	f004 ff87 	bl	800924c <memset>
  if(hi2c->Instance==I2C2)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a21      	ldr	r2, [pc, #132]	; (80043c8 <HAL_I2C_MspInit+0xb0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d13b      	bne.n	80043c0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800434c:	2300      	movs	r3, #0
 800434e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004350:	f107 0310 	add.w	r3, r7, #16
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe f973 	bl	8002640 <HAL_RCCEx_PeriphCLKConfig>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004360:	f7ff ffb0 	bl	80042c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004364:	4b19      	ldr	r3, [pc, #100]	; (80043cc <HAL_I2C_MspInit+0xb4>)
 8004366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004368:	4a18      	ldr	r2, [pc, #96]	; (80043cc <HAL_I2C_MspInit+0xb4>)
 800436a:	f043 0302 	orr.w	r3, r3, #2
 800436e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004370:	4b16      	ldr	r3, [pc, #88]	; (80043cc <HAL_I2C_MspInit+0xb4>)
 8004372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800437c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004384:	2312      	movs	r3, #18
 8004386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438a:	2300      	movs	r3, #0
 800438c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004390:	2303      	movs	r3, #3
 8004392:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004396:	2304      	movs	r3, #4
 8004398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800439c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043a0:	4619      	mov	r1, r3
 80043a2:	480b      	ldr	r0, [pc, #44]	; (80043d0 <HAL_I2C_MspInit+0xb8>)
 80043a4:	f7fc fa94 	bl	80008d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80043a8:	4b08      	ldr	r3, [pc, #32]	; (80043cc <HAL_I2C_MspInit+0xb4>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	4a07      	ldr	r2, [pc, #28]	; (80043cc <HAL_I2C_MspInit+0xb4>)
 80043ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043b2:	6593      	str	r3, [r2, #88]	; 0x58
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_I2C_MspInit+0xb4>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80043c0:	bf00      	nop
 80043c2:	37b8      	adds	r7, #184	; 0xb8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40005800 	.word	0x40005800
 80043cc:	40021000 	.word	0x40021000
 80043d0:	48000400 	.word	0x48000400

080043d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b0ae      	sub	sp, #184	; 0xb8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043ec:	f107 0310 	add.w	r3, r7, #16
 80043f0:	2294      	movs	r2, #148	; 0x94
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f004 ff29 	bl	800924c <memset>
  if(huart->Instance==USART1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a21      	ldr	r2, [pc, #132]	; (8004484 <HAL_UART_MspInit+0xb0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d13a      	bne.n	800447a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004404:	2301      	movs	r3, #1
 8004406:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004408:	2300      	movs	r3, #0
 800440a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800440c:	f107 0310 	add.w	r3, r7, #16
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe f915 	bl	8002640 <HAL_RCCEx_PeriphCLKConfig>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800441c:	f7ff ff52 	bl	80042c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <HAL_UART_MspInit+0xb4>)
 8004422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004424:	4a18      	ldr	r2, [pc, #96]	; (8004488 <HAL_UART_MspInit+0xb4>)
 8004426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800442a:	6613      	str	r3, [r2, #96]	; 0x60
 800442c:	4b16      	ldr	r3, [pc, #88]	; (8004488 <HAL_UART_MspInit+0xb4>)
 800442e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004438:	4b13      	ldr	r3, [pc, #76]	; (8004488 <HAL_UART_MspInit+0xb4>)
 800443a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443c:	4a12      	ldr	r2, [pc, #72]	; (8004488 <HAL_UART_MspInit+0xb4>)
 800443e:	f043 0302 	orr.w	r3, r3, #2
 8004442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004444:	4b10      	ldr	r3, [pc, #64]	; (8004488 <HAL_UART_MspInit+0xb4>)
 8004446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004450:	23c0      	movs	r3, #192	; 0xc0
 8004452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004456:	2302      	movs	r3, #2
 8004458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445c:	2300      	movs	r3, #0
 800445e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004462:	2303      	movs	r3, #3
 8004464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004468:	2307      	movs	r3, #7
 800446a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800446e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004472:	4619      	mov	r1, r3
 8004474:	4805      	ldr	r0, [pc, #20]	; (800448c <HAL_UART_MspInit+0xb8>)
 8004476:	f7fc fa2b 	bl	80008d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800447a:	bf00      	nop
 800447c:	37b8      	adds	r7, #184	; 0xb8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40013800 	.word	0x40013800
 8004488:	40021000 	.word	0x40021000
 800448c:	48000400 	.word	0x48000400

08004490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004494:	e7fe      	b.n	8004494 <NMI_Handler+0x4>

08004496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004496:	b480      	push	{r7}
 8004498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800449a:	e7fe      	b.n	800449a <HardFault_Handler+0x4>

0800449c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044a0:	e7fe      	b.n	80044a0 <MemManage_Handler+0x4>

080044a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044a2:	b480      	push	{r7}
 80044a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044a6:	e7fe      	b.n	80044a6 <BusFault_Handler+0x4>

080044a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044ac:	e7fe      	b.n	80044ac <UsageFault_Handler+0x4>

080044ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044b2:	bf00      	nop
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044ca:	b480      	push	{r7}
 80044cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044ce:	bf00      	nop
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044dc:	f7fc f8ce 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044ec:	4a14      	ldr	r2, [pc, #80]	; (8004540 <_sbrk+0x5c>)
 80044ee:	4b15      	ldr	r3, [pc, #84]	; (8004544 <_sbrk+0x60>)
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044f8:	4b13      	ldr	r3, [pc, #76]	; (8004548 <_sbrk+0x64>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d102      	bne.n	8004506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004500:	4b11      	ldr	r3, [pc, #68]	; (8004548 <_sbrk+0x64>)
 8004502:	4a12      	ldr	r2, [pc, #72]	; (800454c <_sbrk+0x68>)
 8004504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <_sbrk+0x64>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	429a      	cmp	r2, r3
 8004512:	d207      	bcs.n	8004524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004514:	f004 fe62 	bl	80091dc <__errno>
 8004518:	4603      	mov	r3, r0
 800451a:	220c      	movs	r2, #12
 800451c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800451e:	f04f 33ff 	mov.w	r3, #4294967295
 8004522:	e009      	b.n	8004538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004524:	4b08      	ldr	r3, [pc, #32]	; (8004548 <_sbrk+0x64>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <_sbrk+0x64>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	4a05      	ldr	r2, [pc, #20]	; (8004548 <_sbrk+0x64>)
 8004534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004536:	68fb      	ldr	r3, [r7, #12]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	200a0000 	.word	0x200a0000
 8004544:	00000400 	.word	0x00000400
 8004548:	200006e4 	.word	0x200006e4
 800454c:	20000738 	.word	0x20000738

08004550 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <SystemInit+0x20>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	4a05      	ldr	r2, [pc, #20]	; (8004570 <SystemInit+0x20>)
 800455c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	e000ed00 	.word	0xe000ed00

08004574 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004582:	6839      	ldr	r1, [r7, #0]
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f001 fdaa 	bl	80060de <VL53L0X_get_offset_calibration_data_micro_meter>
 800458a:	4603      	mov	r3, r0
 800458c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800458e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b0a4      	sub	sp, #144	; 0x90
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80045aa:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d107      	bne.n	80045c2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80045b2:	2200      	movs	r2, #0
 80045b4:	2188      	movs	r1, #136	; 0x88
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f004 fcb6 	bl	8008f28 <VL53L0X_WrByte>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045d0:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4aae      	ldr	r2, [pc, #696]	; (8004890 <VL53L0X_DataInit+0x2f4>)
 80045d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80045e2:	f107 0310 	add.w	r3, r7, #16
 80045e6:	4619      	mov	r1, r3
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fb29 	bl	8004c40 <VL53L0X_GetDeviceParameters>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 80045f4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d130      	bne.n	800465e <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 80045fc:	2300      	movs	r3, #0
 80045fe:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 8004600:	2300      	movs	r3, #0
 8004602:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 8004604:	2300      	movs	r3, #0
 8004606:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 8004608:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 800460c:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 800460e:	f24b 3333 	movw	r3, #45875	; 0xb333
 8004612:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 8004614:	4b9f      	ldr	r3, [pc, #636]	; (8004894 <VL53L0X_DataInit+0x2f8>)
 8004616:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 8004618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800461c:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 800461e:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 8004622:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 8004624:	4b9c      	ldr	r3, [pc, #624]	; (8004898 <VL53L0X_DataInit+0x2fc>)
 8004626:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 8004628:	4b9c      	ldr	r3, [pc, #624]	; (800489c <VL53L0X_DataInit+0x300>)
 800462a:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 800462c:	4b9c      	ldr	r3, [pc, #624]	; (80048a0 <VL53L0X_DataInit+0x304>)
 800462e:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 8004630:	4b9c      	ldr	r3, [pc, #624]	; (80048a4 <VL53L0X_DataInit+0x308>)
 8004632:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 8004634:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8004638:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 800463a:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 800463e:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 8004640:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8004644:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 8004646:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 800464a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3308      	adds	r3, #8
 8004652:	f107 0110 	add.w	r1, r7, #16
 8004656:	2278      	movs	r2, #120	; 0x78
 8004658:	4618      	mov	r0, r3
 800465a:	f004 fde9 	bl	8009230 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2264      	movs	r2, #100	; 0x64
 8004662:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f44f 7261 	mov.w	r2, #900	; 0x384
 800466c:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004676:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004680:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800468c:	2201      	movs	r2, #1
 800468e:	2180      	movs	r1, #128	; 0x80
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f004 fc49 	bl	8008f28 <VL53L0X_WrByte>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800469e:	4313      	orrs	r3, r2
 80046a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80046a4:	2201      	movs	r2, #1
 80046a6:	21ff      	movs	r1, #255	; 0xff
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f004 fc3d 	bl	8008f28 <VL53L0X_WrByte>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461a      	mov	r2, r3
 80046b2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80046bc:	2200      	movs	r2, #0
 80046be:	2100      	movs	r1, #0
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f004 fc31 	bl	8008f28 <VL53L0X_WrByte>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80046d4:	f107 030f 	add.w	r3, r7, #15
 80046d8:	461a      	mov	r2, r3
 80046da:	2191      	movs	r1, #145	; 0x91
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f004 fca5 	bl	800902c <VL53L0X_RdByte>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461a      	mov	r2, r3
 80046e6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80046f8:	2201      	movs	r2, #1
 80046fa:	2100      	movs	r1, #0
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f004 fc13 	bl	8008f28 <VL53L0X_WrByte>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800470a:	4313      	orrs	r3, r2
 800470c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004710:	2200      	movs	r2, #0
 8004712:	21ff      	movs	r1, #255	; 0xff
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f004 fc07 	bl	8008f28 <VL53L0X_WrByte>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004722:	4313      	orrs	r3, r2
 8004724:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004728:	2200      	movs	r2, #0
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f004 fbfb 	bl	8008f28 <VL53L0X_WrByte>
 8004732:	4603      	mov	r3, r0
 8004734:	461a      	mov	r2, r3
 8004736:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800473a:	4313      	orrs	r3, r2
 800473c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004740:	2300      	movs	r3, #0
 8004742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004746:	e017      	b.n	8004778 <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 8004748:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800474c:	2b00      	cmp	r3, #0
 800474e:	d118      	bne.n	8004782 <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004750:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004754:	b29b      	uxth	r3, r3
 8004756:	2201      	movs	r2, #1
 8004758:	4619      	mov	r1, r3
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fd8a 	bl	8005274 <VL53L0X_SetLimitCheckEnable>
 8004760:	4603      	mov	r3, r0
 8004762:	461a      	mov	r2, r3
 8004764:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004768:	4313      	orrs	r3, r2
 800476a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800476e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004772:	3301      	adds	r3, #1
 8004774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004778:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800477c:	2b05      	cmp	r3, #5
 800477e:	dde3      	ble.n	8004748 <VL53L0X_DataInit+0x1ac>
 8004780:	e000      	b.n	8004784 <VL53L0X_DataInit+0x1e8>
		else
			break;
 8004782:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004784:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004788:	2b00      	cmp	r3, #0
 800478a:	d107      	bne.n	800479c <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800478c:	2200      	movs	r2, #0
 800478e:	2102      	movs	r1, #2
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fd6f 	bl	8005274 <VL53L0X_SetLimitCheckEnable>
 8004796:	4603      	mov	r3, r0
 8004798:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800479c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d107      	bne.n	80047b4 <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80047a4:	2200      	movs	r2, #0
 80047a6:	2103      	movs	r1, #3
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fd63 	bl	8005274 <VL53L0X_SetLimitCheckEnable>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80047b4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d107      	bne.n	80047cc <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80047bc:	2200      	movs	r2, #0
 80047be:	2104      	movs	r1, #4
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fd57 	bl	8005274 <VL53L0X_SetLimitCheckEnable>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80047cc:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d107      	bne.n	80047e4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80047d4:	2200      	movs	r2, #0
 80047d6:	2105      	movs	r1, #5
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fd4b 	bl	8005274 <VL53L0X_SetLimitCheckEnable>
 80047de:	4603      	mov	r3, r0
 80047e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80047e4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d108      	bne.n	80047fe <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80047ec:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80047f0:	2100      	movs	r1, #0
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fdee 	bl	80053d4 <VL53L0X_SetLimitCheckValue>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80047fe:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004802:	2b00      	cmp	r3, #0
 8004804:	d108      	bne.n	8004818 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800480a:	2101      	movs	r1, #1
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fde1 	bl	80053d4 <VL53L0X_SetLimitCheckValue>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004818:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800481c:	2b00      	cmp	r3, #0
 800481e:	d108      	bne.n	8004832 <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004820:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004824:	2102      	movs	r1, #2
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fdd4 	bl	80053d4 <VL53L0X_SetLimitCheckValue>
 800482c:	4603      	mov	r3, r0
 800482e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004832:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004836:	2b00      	cmp	r3, #0
 8004838:	d107      	bne.n	800484a <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800483a:	2200      	movs	r2, #0
 800483c:	2103      	movs	r1, #3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fdc8 	bl	80053d4 <VL53L0X_SetLimitCheckValue>
 8004844:	4603      	mov	r3, r0
 8004846:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800484a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	22ff      	movs	r2, #255	; 0xff
 8004856:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800485a:	22ff      	movs	r2, #255	; 0xff
 800485c:	2101      	movs	r1, #1
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f004 fb62 	bl	8008f28 <VL53L0X_WrByte>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004872:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004876:	2b00      	cmp	r3, #0
 8004878:	d103      	bne.n	8004882 <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 8004882:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8004886:	4618      	mov	r0, r3
 8004888:	3790      	adds	r7, #144	; 0x90
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	000970a4 	.word	0x000970a4
 8004894:	044c0000 	.word	0x044c0000
 8004898:	0003cccc 	.word	0x0003cccc
 800489c:	02ee0000 	.word	0x02ee0000
 80048a0:	00074ccc 	.word	0x00074ccc
 80048a4:	02260000 	.word	0x02260000

080048a8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b0ac      	sub	sp, #176	; 0xb0
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80048b6:	f107 031c 	add.w	r3, r7, #28
 80048ba:	2278      	movs	r2, #120	; 0x78
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f004 fcc4 	bl	800924c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80048e6:	2101      	movs	r1, #1
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f002 fb3b 	bl	8006f64 <VL53L0X_get_info_from_device>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80048fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8004904:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004908:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800490c:	2b01      	cmp	r3, #1
 800490e:	d80f      	bhi.n	8004930 <VL53L0X_StaticInit+0x88>
 8004910:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004914:	2b01      	cmp	r3, #1
 8004916:	d103      	bne.n	8004920 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 8004918:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800491c:	2b20      	cmp	r3, #32
 800491e:	d807      	bhi.n	8004930 <VL53L0X_StaticInit+0x88>
 8004920:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10f      	bne.n	8004948 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 8004928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800492c:	2b0c      	cmp	r3, #12
 800492e:	d90b      	bls.n	8004948 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004930:	f107 0218 	add.w	r2, r7, #24
 8004934:	f107 0314 	add.w	r3, r7, #20
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f001 fdca 	bl	80064d4 <VL53L0X_perform_ref_spad_management>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004946:	e00a      	b.n	800495e <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004948:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800494c:	461a      	mov	r2, r3
 800494e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f001 ffca 	bl	80068ec <VL53L0X_set_reference_spads>
 8004958:	4603      	mov	r3, r0
 800495a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800495e:	4b93      	ldr	r3, [pc, #588]	; (8004bac <VL53L0X_StaticInit+0x304>)
 8004960:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8004964:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004968:	2b00      	cmp	r3, #0
 800496a:	d111      	bne.n	8004990 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004972:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004976:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8004984:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004988:	e002      	b.n	8004990 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800498a:	4b88      	ldr	r3, [pc, #544]	; (8004bac <VL53L0X_StaticInit+0x304>)
 800498c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004990:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004994:	2b00      	cmp	r3, #0
 8004996:	d107      	bne.n	80049a8 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 8004998:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f003 fbf1 	bl	8008184 <VL53L0X_load_tuning_settings>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80049a8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80049b0:	2300      	movs	r3, #0
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	2304      	movs	r3, #4
 80049b6:	2200      	movs	r2, #0
 80049b8:	2100      	movs	r1, #0
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f001 f9be 	bl	8005d3c <VL53L0X_SetGpioConfig>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80049c6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d121      	bne.n	8004a12 <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80049ce:	2201      	movs	r2, #1
 80049d0:	21ff      	movs	r1, #255	; 0xff
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f004 faa8 	bl	8008f28 <VL53L0X_WrByte>
 80049d8:	4603      	mov	r3, r0
 80049da:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80049de:	f107 031a 	add.w	r3, r7, #26
 80049e2:	461a      	mov	r2, r3
 80049e4:	2184      	movs	r1, #132	; 0x84
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f004 fb4a 	bl	8009080 <VL53L0X_RdWord>
 80049ec:	4603      	mov	r3, r0
 80049ee:	461a      	mov	r2, r3
 80049f0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80049fa:	2200      	movs	r2, #0
 80049fc:	21ff      	movs	r1, #255	; 0xff
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f004 fa92 	bl	8008f28 <VL53L0X_WrByte>
 8004a04:	4603      	mov	r3, r0
 8004a06:	461a      	mov	r2, r3
 8004a08:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004a12:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d105      	bne.n	8004a26 <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004a1a:	8b7b      	ldrh	r3, [r7, #26]
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	461a      	mov	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8004a26:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d108      	bne.n	8004a40 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004a2e:	f107 031c 	add.w	r3, r7, #28
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f903 	bl	8004c40 <VL53L0X_GetDeviceParameters>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 8004a40:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d110      	bne.n	8004a6a <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004a48:	f107 0319 	add.w	r3, r7, #25
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f9eb 	bl	8004e2a <VL53L0X_GetFractionEnable>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 8004a5a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d103      	bne.n	8004a6a <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8004a62:	7e7a      	ldrb	r2, [r7, #25]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004a6a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d107      	bne.n	8004a82 <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3308      	adds	r3, #8
 8004a76:	f107 011c 	add.w	r1, r7, #28
 8004a7a:	2278      	movs	r2, #120	; 0x78
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f004 fbd7 	bl	8009230 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004a82:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d111      	bne.n	8004aae <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 8004a8a:	f107 0319 	add.w	r3, r7, #25
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2101      	movs	r1, #1
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f004 faca 	bl	800902c <VL53L0X_RdByte>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8004a9e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d103      	bne.n	8004aae <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8004aa6:	7e7a      	ldrb	r2, [r7, #25]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8004aae:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d107      	bne.n	8004ac6 <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2100      	movs	r1, #0
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa12 	bl	8004ee4 <VL53L0X_SetSequenceStepEnable>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004ac6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d107      	bne.n	8004ade <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa06 	bl	8004ee4 <VL53L0X_SetSequenceStepEnable>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004ade:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2203      	movs	r2, #3
 8004aea:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004aee:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004af6:	f107 0313 	add.w	r3, r7, #19
 8004afa:	461a      	mov	r2, r3
 8004afc:	2100      	movs	r1, #0
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f9d8 	bl	8004eb4 <VL53L0X_GetVcselPulsePeriod>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b0a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004b12:	7cfa      	ldrb	r2, [r7, #19]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004b1a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004b22:	f107 0313 	add.w	r3, r7, #19
 8004b26:	461a      	mov	r2, r3
 8004b28:	2101      	movs	r1, #1
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f9c2 	bl	8004eb4 <VL53L0X_GetVcselPulsePeriod>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b36:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d103      	bne.n	8004b46 <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004b3e:	7cfa      	ldrb	r2, [r7, #19]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004b46:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d109      	bne.n	8004b62 <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 8004b4e:	f107 030c 	add.w	r3, r7, #12
 8004b52:	461a      	mov	r2, r3
 8004b54:	2103      	movs	r1, #3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f002 ff86 	bl	8007a68 <get_sequence_step_timeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b62:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d103      	bne.n	8004b72 <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004b72:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 8004b7a:	f107 030c 	add.w	r3, r7, #12
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2104      	movs	r1, #4
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f002 ff70 	bl	8007a68 <get_sequence_step_timeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b8e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d103      	bne.n	8004b9e <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004b9e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	37a8      	adds	r7, #168	; 0xa8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	200000a8 	.word	0x200000a8

08004bb0 <VL53L0X_ResetDevice>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_ResetDevice(VL53L0X_DEV Dev)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* Set reset bit */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	21bf      	movs	r1, #191	; 0xbf
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f004 f9b1 	bl	8008f28 <VL53L0X_WrByte>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	73fb      	strb	r3, [r7, #15]
		0x00);

	/* Wait for some time */
	if (Status == VL53L0X_ERROR_NONE) {
 8004bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10b      	bne.n	8004bea <VL53L0X_ResetDevice+0x3a>
		do {
			Status = VL53L0X_RdByte(Dev,
 8004bd2:	f107 030e 	add.w	r3, r7, #14
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	21c0      	movs	r1, #192	; 0xc0
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f004 fa26 	bl	800902c <VL53L0X_RdByte>
 8004be0:	4603      	mov	r3, r0
 8004be2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Byte);
		} while (Byte != 0x00);
 8004be4:	7bbb      	ldrb	r3, [r7, #14]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f3      	bne.n	8004bd2 <VL53L0X_ResetDevice+0x22>
	}

	VL53L0X_PollingDelay(Dev);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f004 fabc 	bl	8009168 <VL53L0X_PollingDelay>

	/* Release reset */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	21bf      	movs	r1, #191	; 0xbf
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f004 f997 	bl	8008f28 <VL53L0X_WrByte>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	73fb      	strb	r3, [r7, #15]
		0x01);

	/* Wait until correct boot-up of the device */
	if (Status == VL53L0X_ERROR_NONE) {
 8004bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <VL53L0X_ResetDevice+0x6e>
		do {
			Status = VL53L0X_RdByte(Dev,
 8004c06:	f107 030e 	add.w	r3, r7, #14
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	21c0      	movs	r1, #192	; 0xc0
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f004 fa0c 	bl	800902c <VL53L0X_RdByte>
 8004c14:	4603      	mov	r3, r0
 8004c16:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Byte);
		} while (Byte == 0x00);
 8004c18:	7bbb      	ldrb	r3, [r7, #14]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f3      	beq.n	8004c06 <VL53L0X_ResetDevice+0x56>
	}

	VL53L0X_PollingDelay(Dev);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f004 faa2 	bl	8009168 <VL53L0X_PollingDelay>

	/* Set PAL State to VL53L0X_STATE_POWERDOWN */
	if (Status == VL53L0X_ERROR_NONE)
 8004c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d103      	bne.n	8004c34 <VL53L0X_ResetDevice+0x84>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_POWERDOWN);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 8004c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f8d6 	bl	8004e04 <VL53L0X_GetDeviceMode>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	3308      	adds	r3, #8
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fa86 	bl	800517c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004c70:	4603      	mov	r3, r0
 8004c72:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8004c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8004c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d107      	bne.n	8004c9a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	3310      	adds	r3, #16
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fabc 	bl	800520e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8004c96:	4603      	mov	r3, r0
 8004c98:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8004c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d107      	bne.n	8004cb2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	3314      	adds	r3, #20
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff fc63 	bl	8004574 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8004cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d134      	bne.n	8004d24 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	e02a      	b.n	8004d16 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d12a      	bne.n	8004d1e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	b299      	uxth	r1, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fbdc 	bl	8005498 <VL53L0X_GetLimitCheckValue>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8004cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d117      	bne.n	8004d22 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	b299      	uxth	r1, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	3318      	adds	r3, #24
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	461a      	mov	r2, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fb43 	bl	800538c <VL53L0X_GetLimitCheckEnable>
 8004d06:	4603      	mov	r3, r0
 8004d08:	461a      	mov	r2, r3
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	3301      	adds	r3, #1
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b05      	cmp	r3, #5
 8004d1a:	ddd1      	ble.n	8004cc0 <VL53L0X_GetDeviceParameters+0x80>
 8004d1c:	e002      	b.n	8004d24 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8004d1e:	bf00      	nop
 8004d20:	e000      	b.n	8004d24 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8004d22:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d107      	bne.n	8004d3c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	3374      	adds	r3, #116	; 0x74
 8004d30:	4619      	mov	r1, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fc3e 	bl	80055b4 <VL53L0X_GetWrapAroundCheckEnable>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8004d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d107      	bne.n	8004d54 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f89f 	bl	8004e8e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8004d50:	4603      	mov	r3, r0
 8004d52:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d120      	bne.n	8004d9e <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	e01a      	b.n	8004d98 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	3310      	adds	r3, #16
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	330e      	adds	r3, #14
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	3316      	adds	r3, #22
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 8004d86:	6839      	ldr	r1, [r7, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	3314      	adds	r3, #20
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b06      	cmp	r3, #6
 8004d9c:	dde1      	ble.n	8004d62 <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	2b15      	cmp	r3, #21
 8004dc0:	bf8c      	ite	hi
 8004dc2:	2201      	movhi	r2, #1
 8004dc4:	2200      	movls	r2, #0
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	2a00      	cmp	r2, #0
 8004dca:	d10e      	bne.n	8004dea <VL53L0X_SetDeviceMode+0x3e>
 8004dcc:	2201      	movs	r2, #1
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <VL53L0X_SetDeviceMode+0x54>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	721a      	strb	r2, [r3, #8]
		break;
 8004de8:	e001      	b.n	8004dee <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004dea:	23f8      	movs	r3, #248	; 0xf8
 8004dec:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	0030000b 	.word	0x0030000b

08004e04 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	7a1a      	ldrb	r2, [r3, #8]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	2109      	movs	r1, #9
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f004 f8f5 	bl	800902c <VL53L0X_RdByte>
 8004e42:	4603      	mov	r3, r0
 8004e44:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8004e76:	6839      	ldr	r1, [r7, #0]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f002 ffff 	bl	8007e7c <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8004e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004e9c:	6839      	ldr	r1, [r7, #0]
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f003 f8bf 	bl	8008022 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8004ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f002 ff9e 	bl	8007e0e <VL53L0X_get_vcsel_pulse_period>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004ed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004f00:	f107 030f 	add.w	r3, r7, #15
 8004f04:	461a      	mov	r2, r3
 8004f06:	2101      	movs	r1, #1
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f004 f88f 	bl	800902c <VL53L0X_RdByte>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8004f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d15a      	bne.n	8004fd4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8004f1e:	78bb      	ldrb	r3, [r7, #2]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d12b      	bne.n	8004f7c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d825      	bhi.n	8004f76 <VL53L0X_SetSequenceStepEnable+0x92>
 8004f2a:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f45 	.word	0x08004f45
 8004f34:	08004f4f 	.word	0x08004f4f
 8004f38:	08004f59 	.word	0x08004f59
 8004f3c:	08004f63 	.word	0x08004f63
 8004f40:	08004f6d 	.word	0x08004f6d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004f44:	7dbb      	ldrb	r3, [r7, #22]
 8004f46:	f043 0310 	orr.w	r3, r3, #16
 8004f4a:	75bb      	strb	r3, [r7, #22]
				break;
 8004f4c:	e043      	b.n	8004fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8004f4e:	7dbb      	ldrb	r3, [r7, #22]
 8004f50:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004f54:	75bb      	strb	r3, [r7, #22]
				break;
 8004f56:	e03e      	b.n	8004fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8004f58:	7dbb      	ldrb	r3, [r7, #22]
 8004f5a:	f043 0304 	orr.w	r3, r3, #4
 8004f5e:	75bb      	strb	r3, [r7, #22]
				break;
 8004f60:	e039      	b.n	8004fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8004f62:	7dbb      	ldrb	r3, [r7, #22]
 8004f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f68:	75bb      	strb	r3, [r7, #22]
				break;
 8004f6a:	e034      	b.n	8004fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8004f6c:	7dbb      	ldrb	r3, [r7, #22]
 8004f6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f72:	75bb      	strb	r3, [r7, #22]
				break;
 8004f74:	e02f      	b.n	8004fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004f76:	23fc      	movs	r3, #252	; 0xfc
 8004f78:	75fb      	strb	r3, [r7, #23]
 8004f7a:	e02c      	b.n	8004fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d825      	bhi.n	8004fce <VL53L0X_SetSequenceStepEnable+0xea>
 8004f82:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004f9d 	.word	0x08004f9d
 8004f8c:	08004fa7 	.word	0x08004fa7
 8004f90:	08004fb1 	.word	0x08004fb1
 8004f94:	08004fbb 	.word	0x08004fbb
 8004f98:	08004fc5 	.word	0x08004fc5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004f9c:	7dbb      	ldrb	r3, [r7, #22]
 8004f9e:	f023 0310 	bic.w	r3, r3, #16
 8004fa2:	75bb      	strb	r3, [r7, #22]
				break;
 8004fa4:	e017      	b.n	8004fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8004fa6:	7dbb      	ldrb	r3, [r7, #22]
 8004fa8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004fac:	75bb      	strb	r3, [r7, #22]
				break;
 8004fae:	e012      	b.n	8004fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8004fb0:	7dbb      	ldrb	r3, [r7, #22]
 8004fb2:	f023 0304 	bic.w	r3, r3, #4
 8004fb6:	75bb      	strb	r3, [r7, #22]
				break;
 8004fb8:	e00d      	b.n	8004fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8004fba:	7dbb      	ldrb	r3, [r7, #22]
 8004fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc0:	75bb      	strb	r3, [r7, #22]
				break;
 8004fc2:	e008      	b.n	8004fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004fc4:	7dbb      	ldrb	r3, [r7, #22]
 8004fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fca:	75bb      	strb	r3, [r7, #22]
				break;
 8004fcc:	e003      	b.n	8004fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004fce:	23fc      	movs	r3, #252	; 0xfc
 8004fd0:	75fb      	strb	r3, [r7, #23]
 8004fd2:	e000      	b.n	8004fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8004fd4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	7dba      	ldrb	r2, [r7, #22]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d01e      	beq.n	800501c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8004fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d107      	bne.n	8004ff6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8004fe6:	7dbb      	ldrb	r3, [r7, #22]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	2101      	movs	r1, #1
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f003 ff9b 	bl	8008f28 <VL53L0X_WrByte>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8004ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	7dba      	ldrb	r2, [r7, #22]
 8005002:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8005006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005014:	6939      	ldr	r1, [r7, #16]
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff ff26 	bl	8004e68 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800501c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	72fb      	strb	r3, [r7, #11]
 8005036:	4613      	mov	r3, r2
 8005038:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800503a:	2300      	movs	r3, #0
 800503c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005044:	7afb      	ldrb	r3, [r7, #11]
 8005046:	2b04      	cmp	r3, #4
 8005048:	d836      	bhi.n	80050b8 <sequence_step_enabled+0x90>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <sequence_step_enabled+0x28>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005065 	.word	0x08005065
 8005054:	08005077 	.word	0x08005077
 8005058:	08005089 	.word	0x08005089
 800505c:	0800509b 	.word	0x0800509b
 8005060:	080050ad 	.word	0x080050ad
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005064:	7abb      	ldrb	r3, [r7, #10]
 8005066:	111b      	asrs	r3, r3, #4
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	701a      	strb	r2, [r3, #0]
		break;
 8005074:	e022      	b.n	80050bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005076:	7abb      	ldrb	r3, [r7, #10]
 8005078:	10db      	asrs	r3, r3, #3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	b2da      	uxtb	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	701a      	strb	r2, [r3, #0]
		break;
 8005086:	e019      	b.n	80050bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005088:	7abb      	ldrb	r3, [r7, #10]
 800508a:	109b      	asrs	r3, r3, #2
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	b2da      	uxtb	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	701a      	strb	r2, [r3, #0]
		break;
 8005098:	e010      	b.n	80050bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800509a:	7abb      	ldrb	r3, [r7, #10]
 800509c:	119b      	asrs	r3, r3, #6
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	701a      	strb	r2, [r3, #0]
		break;
 80050aa:	e007      	b.n	80050bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80050ac:	7abb      	ldrb	r3, [r7, #10]
 80050ae:	09db      	lsrs	r3, r3, #7
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	701a      	strb	r2, [r3, #0]
		break;
 80050b6:	e001      	b.n	80050bc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80050b8:	23fc      	movs	r3, #252	; 0xfc
 80050ba:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80050bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80050de:	f107 030e 	add.w	r3, r7, #14
 80050e2:	461a      	mov	r2, r3
 80050e4:	2101      	movs	r1, #1
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f003 ffa0 	bl	800902c <VL53L0X_RdByte>
 80050ec:	4603      	mov	r3, r0
 80050ee:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80050f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80050f8:	7bba      	ldrb	r2, [r7, #14]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2100      	movs	r1, #0
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff ff92 	bl	8005028 <sequence_step_enabled>
 8005104:	4603      	mov	r3, r0
 8005106:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d108      	bne.n	8005122 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8005110:	7bba      	ldrb	r2, [r7, #14]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	3302      	adds	r3, #2
 8005116:	2101      	movs	r1, #1
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff ff85 	bl	8005028 <sequence_step_enabled>
 800511e:	4603      	mov	r3, r0
 8005120:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d108      	bne.n	800513c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800512a:	7bba      	ldrb	r2, [r7, #14]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	3301      	adds	r3, #1
 8005130:	2102      	movs	r1, #2
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff ff78 	bl	8005028 <sequence_step_enabled>
 8005138:	4603      	mov	r3, r0
 800513a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800513c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d108      	bne.n	8005156 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005144:	7bba      	ldrb	r2, [r7, #14]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	3303      	adds	r3, #3
 800514a:	2103      	movs	r1, #3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff ff6b 	bl	8005028 <sequence_step_enabled>
 8005152:	4603      	mov	r3, r0
 8005154:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d108      	bne.n	8005170 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800515e:	7bba      	ldrb	r2, [r7, #14]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	3304      	adds	r3, #4
 8005164:	2104      	movs	r1, #4
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff ff5e 	bl	8005028 <sequence_step_enabled>
 800516c:	4603      	mov	r3, r0
 800516e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005170:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800518a:	f107 030c 	add.w	r3, r7, #12
 800518e:	461a      	mov	r2, r3
 8005190:	21f8      	movs	r1, #248	; 0xf8
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f003 ff74 	bl	8009080 <VL53L0X_RdWord>
 8005198:	4603      	mov	r3, r0
 800519a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800519c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d108      	bne.n	80051b6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80051a4:	f107 0308 	add.w	r3, r7, #8
 80051a8:	461a      	mov	r2, r3
 80051aa:	2104      	movs	r1, #4
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f003 ff9f 	bl	80090f0 <VL53L0X_RdDWord>
 80051b2:	4603      	mov	r3, r0
 80051b4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80051b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10c      	bne.n	80051d8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80051be:	89bb      	ldrh	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	89ba      	ldrh	r2, [r7, #12]
 80051c8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	7d1b      	ldrb	r3, [r3, #20]
 80051f6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	7bba      	ldrb	r2, [r7, #14]
 80051fc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80051fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b086      	sub	sp, #24
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005218:	2300      	movs	r3, #0
 800521a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800521c:	f107 030e 	add.w	r3, r7, #14
 8005220:	461a      	mov	r2, r3
 8005222:	2120      	movs	r1, #32
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f003 ff2b 	bl	8009080 <VL53L0X_RdWord>
 800522a:	4603      	mov	r3, r0
 800522c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800522e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d118      	bne.n	8005268 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8005236:	89fb      	ldrh	r3, [r7, #14]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	751a      	strb	r2, [r3, #20]
 800524e:	e00b      	b.n	8005268 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005268:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	807b      	strh	r3, [r7, #2]
 8005280:	4613      	mov	r3, r2
 8005282:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005284:	2300      	movs	r3, #0
 8005286:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005294:	887b      	ldrh	r3, [r7, #2]
 8005296:	2b05      	cmp	r3, #5
 8005298:	d902      	bls.n	80052a0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800529a:	23fc      	movs	r3, #252	; 0xfc
 800529c:	75fb      	strb	r3, [r7, #23]
 800529e:	e05b      	b.n	8005358 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80052a0:	787b      	ldrb	r3, [r7, #1]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73bb      	strb	r3, [r7, #14]
 80052b2:	e00a      	b.n	80052ca <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	330a      	adds	r3, #10
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80052ca:	887b      	ldrh	r3, [r7, #2]
 80052cc:	2b05      	cmp	r3, #5
 80052ce:	d841      	bhi.n	8005354 <VL53L0X_SetLimitCheckEnable+0xe0>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	080052f1 	.word	0x080052f1
 80052dc:	080052fb 	.word	0x080052fb
 80052e0:	08005311 	.word	0x08005311
 80052e4:	0800531b 	.word	0x0800531b
 80052e8:	08005325 	.word	0x08005325
 80052ec:	0800533d 	.word	0x0800533d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	7bfa      	ldrb	r2, [r7, #15]
 80052f4:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80052f8:	e02e      	b.n	8005358 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80052fe:	b29b      	uxth	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	2144      	movs	r1, #68	; 0x44
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f003 fe33 	bl	8008f70 <VL53L0X_WrWord>
 800530a:	4603      	mov	r3, r0
 800530c:	75fb      	strb	r3, [r7, #23]

			break;
 800530e:	e023      	b.n	8005358 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	7bfa      	ldrb	r2, [r7, #15]
 8005314:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8005318:	e01e      	b.n	8005358 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	7bfa      	ldrb	r2, [r7, #15]
 800531e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005322:	e019      	b.n	8005358 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005324:	7bbb      	ldrb	r3, [r7, #14]
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800532a:	7b7b      	ldrb	r3, [r7, #13]
 800532c:	22fe      	movs	r2, #254	; 0xfe
 800532e:	2160      	movs	r1, #96	; 0x60
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f003 fe47 	bl	8008fc4 <VL53L0X_UpdateByte>
 8005336:	4603      	mov	r3, r0
 8005338:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800533a:	e00d      	b.n	8005358 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800533c:	7bbb      	ldrb	r3, [r7, #14]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005342:	7b7b      	ldrb	r3, [r7, #13]
 8005344:	22ef      	movs	r2, #239	; 0xef
 8005346:	2160      	movs	r1, #96	; 0x60
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f003 fe3b 	bl	8008fc4 <VL53L0X_UpdateByte>
 800534e:	4603      	mov	r3, r0
 8005350:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005352:	e001      	b.n	8005358 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005354:	23fc      	movs	r3, #252	; 0xfc
 8005356:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10f      	bne.n	8005380 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005360:	787b      	ldrb	r3, [r7, #1]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005366:	887b      	ldrh	r3, [r7, #2]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	4413      	add	r3, r2
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2020 	strb.w	r2, [r3, #32]
 8005372:	e005      	b.n	8005380 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	4413      	add	r3, r2
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005380:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	460b      	mov	r3, r1
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800539a:	2300      	movs	r3, #0
 800539c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800539e:	897b      	ldrh	r3, [r7, #10]
 80053a0:	2b05      	cmp	r3, #5
 80053a2:	d905      	bls.n	80053b0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80053a4:	23fc      	movs	r3, #252	; 0xfc
 80053a6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	e008      	b.n	80053c2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80053b0:	897b      	ldrh	r3, [r7, #10]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053ba:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	7dba      	ldrb	r2, [r7, #22]
 80053c0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80053c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	460b      	mov	r3, r1
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80053e6:	897b      	ldrh	r3, [r7, #10]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053f0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80053f2:	7dbb      	ldrb	r3, [r7, #22]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d107      	bne.n	8005408 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80053f8:	897b      	ldrh	r3, [r7, #10]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	330a      	adds	r3, #10
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	605a      	str	r2, [r3, #4]
 8005406:	e040      	b.n	800548a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005408:	897b      	ldrh	r3, [r7, #10]
 800540a:	2b05      	cmp	r3, #5
 800540c:	d830      	bhi.n	8005470 <VL53L0X_SetLimitCheckValue+0x9c>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <VL53L0X_SetLimitCheckValue+0x40>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	0800542d 	.word	0x0800542d
 8005418:	08005435 	.word	0x08005435
 800541c:	0800544b 	.word	0x0800544b
 8005420:	08005453 	.word	0x08005453
 8005424:	0800545b 	.word	0x0800545b
 8005428:	0800545b 	.word	0x0800545b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005432:	e01f      	b.n	8005474 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005438:	b29b      	uxth	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	2144      	movs	r1, #68	; 0x44
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f003 fd96 	bl	8008f70 <VL53L0X_WrWord>
 8005444:	4603      	mov	r3, r0
 8005446:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005448:	e014      	b.n	8005474 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005450:	e010      	b.n	8005474 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005458:	e00c      	b.n	8005474 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800545e:	b29b      	uxth	r3, r3
 8005460:	461a      	mov	r2, r3
 8005462:	2164      	movs	r1, #100	; 0x64
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f003 fd83 	bl	8008f70 <VL53L0X_WrWord>
 800546a:	4603      	mov	r3, r0
 800546c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800546e:	e001      	b.n	8005474 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005470:	23fc      	movs	r3, #252	; 0xfc
 8005472:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005474:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d106      	bne.n	800548a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800547c:	897b      	ldrh	r3, [r7, #10]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	330a      	adds	r3, #10
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800548a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop

08005498 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	460b      	mov	r3, r1
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80054ae:	897b      	ldrh	r3, [r7, #10]
 80054b0:	2b05      	cmp	r3, #5
 80054b2:	d847      	bhi.n	8005544 <VL53L0X_GetLimitCheckValue+0xac>
 80054b4:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <VL53L0X_GetLimitCheckValue+0x24>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054d5 	.word	0x080054d5
 80054c0:	080054e1 	.word	0x080054e1
 80054c4:	08005507 	.word	0x08005507
 80054c8:	08005513 	.word	0x08005513
 80054cc:	0800551f 	.word	0x0800551f
 80054d0:	0800551f 	.word	0x0800551f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	77bb      	strb	r3, [r7, #30]
		break;
 80054de:	e033      	b.n	8005548 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80054e0:	f107 0316 	add.w	r3, r7, #22
 80054e4:	461a      	mov	r2, r3
 80054e6:	2144      	movs	r1, #68	; 0x44
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f003 fdc9 	bl	8009080 <VL53L0X_RdWord>
 80054ee:	4603      	mov	r3, r0
 80054f0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80054f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d102      	bne.n	8005500 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80054fa:	8afb      	ldrh	r3, [r7, #22]
 80054fc:	025b      	lsls	r3, r3, #9
 80054fe:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005500:	2301      	movs	r3, #1
 8005502:	77bb      	strb	r3, [r7, #30]
		break;
 8005504:	e020      	b.n	8005548 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	77bb      	strb	r3, [r7, #30]
		break;
 8005510:	e01a      	b.n	8005548 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	77bb      	strb	r3, [r7, #30]
		break;
 800551c:	e014      	b.n	8005548 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800551e:	f107 0316 	add.w	r3, r7, #22
 8005522:	461a      	mov	r2, r3
 8005524:	2164      	movs	r1, #100	; 0x64
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f003 fdaa 	bl	8009080 <VL53L0X_RdWord>
 800552c:	4603      	mov	r3, r0
 800552e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005530:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005538:	8afb      	ldrh	r3, [r7, #22]
 800553a:	025b      	lsls	r3, r3, #9
 800553c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	77bb      	strb	r3, [r7, #30]
		break;
 8005542:	e001      	b.n	8005548 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005544:	23fc      	movs	r3, #252	; 0xfc
 8005546:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005548:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d12a      	bne.n	80055a6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005550:	7fbb      	ldrb	r3, [r7, #30]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d124      	bne.n	80055a0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d110      	bne.n	800557e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800555c:	897b      	ldrh	r3, [r7, #10]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	330a      	adds	r3, #10
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005570:	897b      	ldrh	r3, [r7, #10]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2020 	strb.w	r2, [r3, #32]
 800557c:	e013      	b.n	80055a6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005584:	897b      	ldrh	r3, [r7, #10]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	330a      	adds	r3, #10
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005592:	897b      	ldrh	r3, [r7, #10]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2020 	strb.w	r2, [r3, #32]
 800559e:	e002      	b.n	80055a6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80055a6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop

080055b4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055be:	2300      	movs	r3, #0
 80055c0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80055c2:	f107 030e 	add.w	r3, r7, #14
 80055c6:	461a      	mov	r2, r3
 80055c8:	2101      	movs	r1, #1
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f003 fd2e 	bl	800902c <VL53L0X_RdByte>
 80055d0:	4603      	mov	r3, r0
 80055d2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80055d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10e      	bne.n	80055fa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80055dc:	7bba      	ldrb	r2, [r7, #14]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 80055e4:	7bbb      	ldrb	r3, [r7, #14]
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	da03      	bge.n	80055f4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2201      	movs	r2, #1
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	e002      	b.n	80055fa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2200      	movs	r2, #0
 80055f8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80055fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800560c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005620:	2300      	movs	r3, #0
 8005622:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005624:	f107 030e 	add.w	r3, r7, #14
 8005628:	4619      	mov	r1, r3
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fbea 	bl	8004e04 <VL53L0X_GetDeviceMode>
 8005630:	4603      	mov	r3, r0
 8005632:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 8005634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d107      	bne.n	800564c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800563c:	7bbb      	ldrb	r3, [r7, #14]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f924 	bl	8005890 <VL53L0X_StartMeasurement>
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800564c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 fbcb 	bl	8006df0 <VL53L0X_measurement_poll_for_completion>
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800565e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005666:	7bbb      	ldrb	r3, [r7, #14]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d103      	bne.n	8005674 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2203      	movs	r2, #3
 8005670:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 8005674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800568c:	2300      	movs	r3, #0
 800568e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005690:	2301      	movs	r3, #1
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f001 fb6d 	bl	8006d76 <VL53L0X_perform_ref_calibration>
 800569c:	4603      	mov	r3, r0
 800569e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80056a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80056c2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 80056c4:	7dbb      	ldrb	r3, [r7, #22]
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	f000 8093 	beq.w	80057f2 <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	f300 80d6 	bgt.w	800587e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d002      	beq.n	80056dc <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d047      	beq.n	800576a <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 80056da:	e0d0      	b.n	800587e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80056dc:	f107 030c 	add.w	r3, r7, #12
 80056e0:	f107 0210 	add.w	r2, r7, #16
 80056e4:	2101      	movs	r1, #1
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fc4c 	bl	8005f84 <VL53L0X_GetInterruptThresholds>
 80056ec:	4603      	mov	r3, r0
 80056ee:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80056f6:	f240 80bd 	bls.w	8005874 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 80056fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f040 80b8 	bne.w	8005874 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d006      	beq.n	8005718 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 800570a:	4960      	ldr	r1, [pc, #384]	; (800588c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f002 fd39 	bl	8008184 <VL53L0X_load_tuning_settings>
 8005712:	4603      	mov	r3, r0
 8005714:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8005716:	e0ad      	b.n	8005874 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005718:	2204      	movs	r2, #4
 800571a:	21ff      	movs	r1, #255	; 0xff
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f003 fc03 	bl	8008f28 <VL53L0X_WrByte>
 8005722:	4603      	mov	r3, r0
 8005724:	461a      	mov	r2, r3
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	4313      	orrs	r3, r2
 800572a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800572c:	2200      	movs	r2, #0
 800572e:	2170      	movs	r1, #112	; 0x70
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f003 fbf9 	bl	8008f28 <VL53L0X_WrByte>
 8005736:	4603      	mov	r3, r0
 8005738:	461a      	mov	r2, r3
 800573a:	7dfb      	ldrb	r3, [r7, #23]
 800573c:	4313      	orrs	r3, r2
 800573e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005740:	2200      	movs	r2, #0
 8005742:	21ff      	movs	r1, #255	; 0xff
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f003 fbef 	bl	8008f28 <VL53L0X_WrByte>
 800574a:	4603      	mov	r3, r0
 800574c:	461a      	mov	r2, r3
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	4313      	orrs	r3, r2
 8005752:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005754:	2200      	movs	r2, #0
 8005756:	2180      	movs	r1, #128	; 0x80
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f003 fbe5 	bl	8008f28 <VL53L0X_WrByte>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	7dfb      	ldrb	r3, [r7, #23]
 8005764:	4313      	orrs	r3, r2
 8005766:	75fb      	strb	r3, [r7, #23]
		break;
 8005768:	e084      	b.n	8005874 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800576a:	f107 030c 	add.w	r3, r7, #12
 800576e:	f107 0210 	add.w	r2, r7, #16
 8005772:	2101      	movs	r1, #1
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fc05 	bl	8005f84 <VL53L0X_GetInterruptThresholds>
 800577a:	4603      	mov	r3, r0
 800577c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d079      	beq.n	8005878 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 8005784:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d175      	bne.n	8005878 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d006      	beq.n	80057a0 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005792:	493e      	ldr	r1, [pc, #248]	; (800588c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f002 fcf5 	bl	8008184 <VL53L0X_load_tuning_settings>
 800579a:	4603      	mov	r3, r0
 800579c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800579e:	e06b      	b.n	8005878 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80057a0:	2204      	movs	r2, #4
 80057a2:	21ff      	movs	r1, #255	; 0xff
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f003 fbbf 	bl	8008f28 <VL53L0X_WrByte>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	7dfb      	ldrb	r3, [r7, #23]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80057b4:	2200      	movs	r2, #0
 80057b6:	2170      	movs	r1, #112	; 0x70
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f003 fbb5 	bl	8008f28 <VL53L0X_WrByte>
 80057be:	4603      	mov	r3, r0
 80057c0:	461a      	mov	r2, r3
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80057c8:	2200      	movs	r2, #0
 80057ca:	21ff      	movs	r1, #255	; 0xff
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f003 fbab 	bl	8008f28 <VL53L0X_WrByte>
 80057d2:	4603      	mov	r3, r0
 80057d4:	461a      	mov	r2, r3
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
 80057d8:	4313      	orrs	r3, r2
 80057da:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80057dc:	2200      	movs	r2, #0
 80057de:	2180      	movs	r1, #128	; 0x80
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f003 fba1 	bl	8008f28 <VL53L0X_WrByte>
 80057e6:	4603      	mov	r3, r0
 80057e8:	461a      	mov	r2, r3
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	75fb      	strb	r3, [r7, #23]
		break;
 80057f0:	e042      	b.n	8005878 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80057f2:	f107 030c 	add.w	r3, r7, #12
 80057f6:	f107 0210 	add.w	r2, r7, #16
 80057fa:	2101      	movs	r1, #1
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fbc1 	bl	8005f84 <VL53L0X_GetInterruptThresholds>
 8005802:	4603      	mov	r3, r0
 8005804:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 8005806:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d136      	bne.n	800587c <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d006      	beq.n	8005822 <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005814:	491d      	ldr	r1, [pc, #116]	; (800588c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f002 fcb4 	bl	8008184 <VL53L0X_load_tuning_settings>
 800581c:	4603      	mov	r3, r0
 800581e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8005820:	e02c      	b.n	800587c <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005822:	2204      	movs	r2, #4
 8005824:	21ff      	movs	r1, #255	; 0xff
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f003 fb7e 	bl	8008f28 <VL53L0X_WrByte>
 800582c:	4603      	mov	r3, r0
 800582e:	461a      	mov	r2, r3
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	4313      	orrs	r3, r2
 8005834:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005836:	2200      	movs	r2, #0
 8005838:	2170      	movs	r1, #112	; 0x70
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f003 fb74 	bl	8008f28 <VL53L0X_WrByte>
 8005840:	4603      	mov	r3, r0
 8005842:	461a      	mov	r2, r3
 8005844:	7dfb      	ldrb	r3, [r7, #23]
 8005846:	4313      	orrs	r3, r2
 8005848:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800584a:	2200      	movs	r2, #0
 800584c:	21ff      	movs	r1, #255	; 0xff
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f003 fb6a 	bl	8008f28 <VL53L0X_WrByte>
 8005854:	4603      	mov	r3, r0
 8005856:	461a      	mov	r2, r3
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	4313      	orrs	r3, r2
 800585c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800585e:	2200      	movs	r2, #0
 8005860:	2180      	movs	r1, #128	; 0x80
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f003 fb60 	bl	8008f28 <VL53L0X_WrByte>
 8005868:	4603      	mov	r3, r0
 800586a:	461a      	mov	r2, r3
 800586c:	7dfb      	ldrb	r3, [r7, #23]
 800586e:	4313      	orrs	r3, r2
 8005870:	75fb      	strb	r3, [r7, #23]
		break;
 8005872:	e003      	b.n	800587c <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 8005874:	bf00      	nop
 8005876:	e002      	b.n	800587e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8005878:	bf00      	nop
 800587a:	e000      	b.n	800587e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 800587c:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800587e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	2000019c 	.word	0x2000019c

08005890 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005898:	2300      	movs	r3, #0
 800589a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80058a0:	f107 030e 	add.w	r3, r7, #14
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff faac 	bl	8004e04 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80058ac:	2201      	movs	r2, #1
 80058ae:	2180      	movs	r1, #128	; 0x80
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f003 fb39 	bl	8008f28 <VL53L0X_WrByte>
 80058b6:	4603      	mov	r3, r0
 80058b8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80058ba:	2201      	movs	r2, #1
 80058bc:	21ff      	movs	r1, #255	; 0xff
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f003 fb32 	bl	8008f28 <VL53L0X_WrByte>
 80058c4:	4603      	mov	r3, r0
 80058c6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80058c8:	2200      	movs	r2, #0
 80058ca:	2100      	movs	r1, #0
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f003 fb2b 	bl	8008f28 <VL53L0X_WrByte>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 80058dc:	461a      	mov	r2, r3
 80058de:	2191      	movs	r1, #145	; 0x91
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f003 fb21 	bl	8008f28 <VL53L0X_WrByte>
 80058e6:	4603      	mov	r3, r0
 80058e8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80058ea:	2201      	movs	r2, #1
 80058ec:	2100      	movs	r1, #0
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f003 fb1a 	bl	8008f28 <VL53L0X_WrByte>
 80058f4:	4603      	mov	r3, r0
 80058f6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80058f8:	2200      	movs	r2, #0
 80058fa:	21ff      	movs	r1, #255	; 0xff
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f003 fb13 	bl	8008f28 <VL53L0X_WrByte>
 8005902:	4603      	mov	r3, r0
 8005904:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005906:	2200      	movs	r2, #0
 8005908:	2180      	movs	r1, #128	; 0x80
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f003 fb0c 	bl	8008f28 <VL53L0X_WrByte>
 8005910:	4603      	mov	r3, r0
 8005912:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	2b03      	cmp	r3, #3
 8005918:	d054      	beq.n	80059c4 <VL53L0X_StartMeasurement+0x134>
 800591a:	2b03      	cmp	r3, #3
 800591c:	dc6c      	bgt.n	80059f8 <VL53L0X_StartMeasurement+0x168>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <VL53L0X_StartMeasurement+0x98>
 8005922:	2b01      	cmp	r3, #1
 8005924:	d034      	beq.n	8005990 <VL53L0X_StartMeasurement+0x100>
 8005926:	e067      	b.n	80059f8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005928:	2201      	movs	r2, #1
 800592a:	2100      	movs	r1, #0
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f003 fafb 	bl	8008f28 <VL53L0X_WrByte>
 8005932:	4603      	mov	r3, r0
 8005934:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800593a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d15d      	bne.n	80059fe <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005942:	2300      	movs	r3, #0
 8005944:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800594c:	f107 030d 	add.w	r3, r7, #13
 8005950:	461a      	mov	r2, r3
 8005952:	2100      	movs	r1, #0
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f003 fb69 	bl	800902c <VL53L0X_RdByte>
 800595a:	4603      	mov	r3, r0
 800595c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3301      	adds	r3, #1
 8005962:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005964:	7b7a      	ldrb	r2, [r7, #13]
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	4013      	ands	r3, r2
 800596a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800596c:	7bfa      	ldrb	r2, [r7, #15]
 800596e:	429a      	cmp	r2, r3
 8005970:	d107      	bne.n	8005982 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005972:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005980:	d3e1      	bcc.n	8005946 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005988:	d339      	bcc.n	80059fe <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800598a:	23f9      	movs	r3, #249	; 0xf9
 800598c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800598e:	e036      	b.n	80059fe <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005990:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d105      	bne.n	80059a4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005998:	2101      	movs	r1, #1
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff fe86 	bl	80056ac <VL53L0X_CheckAndLoadInterruptSettings>
 80059a0:	4603      	mov	r3, r0
 80059a2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80059a4:	2202      	movs	r2, #2
 80059a6:	2100      	movs	r1, #0
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f003 fabd 	bl	8008f28 <VL53L0X_WrByte>
 80059ae:	4603      	mov	r3, r0
 80059b0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80059b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d123      	bne.n	8005a02 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 80059c2:	e01e      	b.n	8005a02 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80059c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d105      	bne.n	80059d8 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80059cc:	2101      	movs	r1, #1
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fe6c 	bl	80056ac <VL53L0X_CheckAndLoadInterruptSettings>
 80059d4:	4603      	mov	r3, r0
 80059d6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80059d8:	2204      	movs	r2, #4
 80059da:	2100      	movs	r1, #0
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f003 faa3 	bl	8008f28 <VL53L0X_WrByte>
 80059e2:	4603      	mov	r3, r0
 80059e4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80059e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10b      	bne.n	8005a06 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2204      	movs	r2, #4
 80059f2:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 80059f6:	e006      	b.n	8005a06 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80059f8:	23f8      	movs	r3, #248	; 0xf8
 80059fa:	75fb      	strb	r3, [r7, #23]
 80059fc:	e004      	b.n	8005a08 <VL53L0X_StartMeasurement+0x178>
		break;
 80059fe:	bf00      	nop
 8005a00:	e002      	b.n	8005a08 <VL53L0X_StartMeasurement+0x178>
		break;
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <VL53L0X_StartMeasurement+0x178>
		break;
 8005a06:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005a28:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005a2a:	7bbb      	ldrb	r3, [r7, #14]
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d112      	bne.n	8005a56 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005a30:	f107 0308 	add.w	r3, r7, #8
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fb1a 	bl	8006070 <VL53L0X_GetInterruptMaskStatus>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d103      	bne.n	8005a4e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e01c      	b.n	8005a88 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	e018      	b.n	8005a88 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005a56:	f107 030d 	add.w	r3, r7, #13
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2114      	movs	r1, #20
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f003 fae4 	bl	800902c <VL53L0X_RdByte>
 8005a64:	4603      	mov	r3, r0
 8005a66:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10b      	bne.n	8005a88 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005a70:	7b7b      	ldrb	r3, [r7, #13]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	e002      	b.n	8005a88 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2200      	movs	r2, #0
 8005a86:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005a94:	b5b0      	push	{r4, r5, r7, lr}
 8005a96:	b096      	sub	sp, #88	; 0x58
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005aa4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005aa8:	230c      	movs	r3, #12
 8005aaa:	2114      	movs	r1, #20
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f003 fa0f 	bl	8008ed0 <VL53L0X_ReadMulti>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005ab8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 80d1 	bne.w	8005c64 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 8005ace:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	4413      	add	r3, r2
 8005ae0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005aea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	4413      	add	r3, r2
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	025b      	lsls	r3, r3, #9
 8005b00:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b06:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 8005b08:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	4413      	add	r3, r2
 8005b1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005b1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b22:	025b      	lsls	r3, r3, #9
 8005b24:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005b2a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005b46:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005b48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 8005b56:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 8005b5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005b62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b68:	d046      	beq.n	8005bf8 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005b6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b6c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005b70:	fb02 f303 	mul.w	r3, r2, r3
 8005b74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005b78:	4a57      	ldr	r2, [pc, #348]	; (8005cd8 <VL53L0X_GetRangingMeasurementData+0x244>)
 8005b7a:	fb82 1203 	smull	r1, r2, r2, r3
 8005b7e:	1192      	asrs	r2, r2, #6
 8005b80:	17db      	asrs	r3, r3, #31
 8005b82:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005b84:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	7d1b      	ldrb	r3, [r3, #20]
 8005b92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005b96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d02c      	beq.n	8005bf8 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005b9e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ba0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005ba4:	fb02 f303 	mul.w	r3, r2, r3
 8005ba8:	121a      	asrs	r2, r3, #8
					<= 0) {
 8005baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d10d      	bne.n	8005bcc <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8005bb0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d004      	beq.n	8005bc2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8005bb8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005bbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005bc0:	e016      	b.n	8005bf0 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8005bc2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005bc6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005bca:	e011      	b.n	8005bf0 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005bcc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005bd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bd2:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005bd6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bd8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005bdc:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005be0:	121b      	asrs	r3, r3, #8
 8005be2:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be6:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005be8:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005bec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005bf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bf4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005bf8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00d      	beq.n	8005c1c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005c00:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005c04:	089b      	lsrs	r3, r3, #2
 8005c06:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005c0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	019b      	lsls	r3, r3, #6
 8005c14:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	75da      	strb	r2, [r3, #23]
 8005c1a:	e006      	b.n	8005c2a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005c22:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2200      	movs	r2, #0
 8005c28:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005c2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005c2e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005c32:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f002 fef1 	bl	8008a28 <VL53L0X_get_pal_range_status>
 8005c46:	4603      	mov	r3, r0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005c54:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005c5c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c64:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d12f      	bne.n	8005ccc <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f107 040c 	add.w	r4, r7, #12
 8005c72:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8005c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005c86:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8005c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005c94:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005c9a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005ca0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005ca6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005cac:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005cb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8005cbc:	f107 050c 	add.w	r5, r7, #12
 8005cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005cc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ccc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3750      	adds	r7, #80	; 0x50
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8005cd8:	10624dd3 	.word	0x10624dd3

08005cdc <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8005cea:	2100      	movs	r1, #0
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff f85d 	bl	8004dac <VL53L0X_SetDeviceMode>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d104      	bne.n	8005d08 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff fc8a 	bl	8005618 <VL53L0X_PerformSingleMeasurement>
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d105      	bne.n	8005d1c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff febe 	bl	8005a94 <VL53L0X_GetRangingMeasurementData>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8005d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005d24:	2100      	movs	r1, #0
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f962 	bl	8005ff0 <VL53L0X_ClearInterruptMask>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8005d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	4608      	mov	r0, r1
 8005d46:	4611      	mov	r1, r2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	70fb      	strb	r3, [r7, #3]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70bb      	strb	r3, [r7, #2]
 8005d52:	4613      	mov	r3, r2
 8005d54:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8005d60:	23f6      	movs	r3, #246	; 0xf6
 8005d62:	73fb      	strb	r3, [r7, #15]
 8005d64:	e107      	b.n	8005f76 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8005d66:	78bb      	ldrb	r3, [r7, #2]
 8005d68:	2b14      	cmp	r3, #20
 8005d6a:	d110      	bne.n	8005d8e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005d6c:	7e3b      	ldrb	r3, [r7, #24]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d102      	bne.n	8005d78 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8005d72:	2310      	movs	r3, #16
 8005d74:	73bb      	strb	r3, [r7, #14]
 8005d76:	e001      	b.n	8005d7c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8005d7c:	7bbb      	ldrb	r3, [r7, #14]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	2184      	movs	r1, #132	; 0x84
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f003 f8d0 	bl	8008f28 <VL53L0X_WrByte>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	73fb      	strb	r3, [r7, #15]
 8005d8c:	e0f3      	b.n	8005f76 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8005d8e:	78bb      	ldrb	r3, [r7, #2]
 8005d90:	2b15      	cmp	r3, #21
 8005d92:	f040 8097 	bne.w	8005ec4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005d96:	2201      	movs	r2, #1
 8005d98:	21ff      	movs	r1, #255	; 0xff
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f003 f8c4 	bl	8008f28 <VL53L0X_WrByte>
 8005da0:	4603      	mov	r3, r0
 8005da2:	461a      	mov	r2, r3
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005daa:	2200      	movs	r2, #0
 8005dac:	2100      	movs	r1, #0
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f003 f8ba 	bl	8008f28 <VL53L0X_WrByte>
 8005db4:	4603      	mov	r3, r0
 8005db6:	461a      	mov	r2, r3
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	21ff      	movs	r1, #255	; 0xff
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f003 f8b0 	bl	8008f28 <VL53L0X_WrByte>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	461a      	mov	r2, r3
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	2180      	movs	r1, #128	; 0x80
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f003 f8a6 	bl	8008f28 <VL53L0X_WrByte>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	461a      	mov	r2, r3
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005de6:	2202      	movs	r2, #2
 8005de8:	2185      	movs	r1, #133	; 0x85
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f003 f89c 	bl	8008f28 <VL53L0X_WrByte>
 8005df0:	4603      	mov	r3, r0
 8005df2:	461a      	mov	r2, r3
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	21ff      	movs	r1, #255	; 0xff
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f003 f892 	bl	8008f28 <VL53L0X_WrByte>
 8005e04:	4603      	mov	r3, r0
 8005e06:	461a      	mov	r2, r3
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005e0e:	2200      	movs	r2, #0
 8005e10:	21cd      	movs	r1, #205	; 0xcd
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f003 f888 	bl	8008f28 <VL53L0X_WrByte>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005e22:	2211      	movs	r2, #17
 8005e24:	21cc      	movs	r1, #204	; 0xcc
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f003 f87e 	bl	8008f28 <VL53L0X_WrByte>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	461a      	mov	r2, r3
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005e36:	2207      	movs	r2, #7
 8005e38:	21ff      	movs	r1, #255	; 0xff
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f003 f874 	bl	8008f28 <VL53L0X_WrByte>
 8005e40:	4603      	mov	r3, r0
 8005e42:	461a      	mov	r2, r3
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	21be      	movs	r1, #190	; 0xbe
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f003 f86a 	bl	8008f28 <VL53L0X_WrByte>
 8005e54:	4603      	mov	r3, r0
 8005e56:	461a      	mov	r2, r3
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005e5e:	2206      	movs	r2, #6
 8005e60:	21ff      	movs	r1, #255	; 0xff
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f003 f860 	bl	8008f28 <VL53L0X_WrByte>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8005e72:	2209      	movs	r2, #9
 8005e74:	21cc      	movs	r1, #204	; 0xcc
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f003 f856 	bl	8008f28 <VL53L0X_WrByte>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	461a      	mov	r2, r3
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005e86:	2200      	movs	r2, #0
 8005e88:	21ff      	movs	r1, #255	; 0xff
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f003 f84c 	bl	8008f28 <VL53L0X_WrByte>
 8005e90:	4603      	mov	r3, r0
 8005e92:	461a      	mov	r2, r3
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	21ff      	movs	r1, #255	; 0xff
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f003 f842 	bl	8008f28 <VL53L0X_WrByte>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f003 f838 	bl	8008f28 <VL53L0X_WrByte>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	73fb      	strb	r3, [r7, #15]
 8005ec2:	e058      	b.n	8005f76 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8005ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d121      	bne.n	8005f10 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8005ecc:	787b      	ldrb	r3, [r7, #1]
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d81b      	bhi.n	8005f0a <VL53L0X_SetGpioConfig+0x1ce>
 8005ed2:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <VL53L0X_SetGpioConfig+0x19c>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005eed 	.word	0x08005eed
 8005edc:	08005ef3 	.word	0x08005ef3
 8005ee0:	08005ef9 	.word	0x08005ef9
 8005ee4:	08005eff 	.word	0x08005eff
 8005ee8:	08005f05 	.word	0x08005f05
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8005eec:	2300      	movs	r3, #0
 8005eee:	73bb      	strb	r3, [r7, #14]
				break;
 8005ef0:	e00f      	b.n	8005f12 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	73bb      	strb	r3, [r7, #14]
				break;
 8005ef6:	e00c      	b.n	8005f12 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	73bb      	strb	r3, [r7, #14]
				break;
 8005efc:	e009      	b.n	8005f12 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8005efe:	2303      	movs	r3, #3
 8005f00:	73bb      	strb	r3, [r7, #14]
				break;
 8005f02:	e006      	b.n	8005f12 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8005f04:	2304      	movs	r3, #4
 8005f06:	73bb      	strb	r3, [r7, #14]
				break;
 8005f08:	e003      	b.n	8005f12 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8005f0a:	23f5      	movs	r3, #245	; 0xf5
 8005f0c:	73fb      	strb	r3, [r7, #15]
 8005f0e:	e000      	b.n	8005f12 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8005f10:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8005f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8005f1a:	7bbb      	ldrb	r3, [r7, #14]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	210a      	movs	r1, #10
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f003 f801 	bl	8008f28 <VL53L0X_WrByte>
 8005f26:	4603      	mov	r3, r0
 8005f28:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8005f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10f      	bne.n	8005f52 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005f32:	7e3b      	ldrb	r3, [r7, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d102      	bne.n	8005f3e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	73bb      	strb	r3, [r7, #14]
 8005f3c:	e001      	b.n	8005f42 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8005f3e:	2310      	movs	r3, #16
 8005f40:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8005f42:	7bbb      	ldrb	r3, [r7, #14]
 8005f44:	22ef      	movs	r2, #239	; 0xef
 8005f46:	2184      	movs	r1, #132	; 0x84
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f003 f83b 	bl	8008fc4 <VL53L0X_UpdateByte>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8005f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	787a      	ldrb	r2, [r7, #1]
 8005f5e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8005f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f83f 	bl	8005ff0 <VL53L0X_ClearInterruptMask>
 8005f72:	4603      	mov	r3, r0
 8005f74:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop

08005f84 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	460b      	mov	r3, r1
 8005f92:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f94:	2300      	movs	r3, #0
 8005f96:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 8005f98:	f107 0314 	add.w	r3, r7, #20
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	210e      	movs	r1, #14
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f003 f86d 	bl	8009080 <VL53L0X_RdWord>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005faa:	8abb      	ldrh	r3, [r7, #20]
 8005fac:	045b      	lsls	r3, r3, #17
 8005fae:	461a      	mov	r2, r3
 8005fb0:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <VL53L0X_GetInterruptThresholds+0x68>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10f      	bne.n	8005fe0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005fc0:	f107 0314 	add.w	r3, r7, #20
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	210c      	movs	r1, #12
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f003 f859 	bl	8009080 <VL53L0X_RdWord>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005fd2:	8abb      	ldrh	r3, [r7, #20]
 8005fd4:	045b      	lsls	r3, r3, #17
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4b04      	ldr	r3, [pc, #16]	; (8005fec <VL53L0X_GetInterruptThresholds+0x68>)
 8005fda:	4013      	ands	r3, r2
		*pThresholdHigh =
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005fe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	1ffe0000 	.word	0x1ffe0000

08005ff0 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8006002:	2201      	movs	r2, #1
 8006004:	210b      	movs	r1, #11
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f002 ff8e 	bl	8008f28 <VL53L0X_WrByte>
 800600c:	4603      	mov	r3, r0
 800600e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8006010:	2200      	movs	r2, #0
 8006012:	210b      	movs	r1, #11
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f002 ff87 	bl	8008f28 <VL53L0X_WrByte>
 800601a:	4603      	mov	r3, r0
 800601c:	461a      	mov	r2, r3
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	4313      	orrs	r3, r2
 8006022:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006024:	f107 030d 	add.w	r3, r7, #13
 8006028:	461a      	mov	r2, r3
 800602a:	2113      	movs	r1, #19
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f002 fffd 	bl	800902c <VL53L0X_RdByte>
 8006032:	4603      	mov	r3, r0
 8006034:	461a      	mov	r2, r3
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	4313      	orrs	r3, r2
 800603a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800603c:	7bbb      	ldrb	r3, [r7, #14]
 800603e:	3301      	adds	r3, #1
 8006040:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8006042:	7b7b      	ldrb	r3, [r7, #13]
 8006044:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006048:	2b00      	cmp	r3, #0
 800604a:	d006      	beq.n	800605a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800604c:	7bbb      	ldrb	r3, [r7, #14]
 800604e:	2b02      	cmp	r3, #2
 8006050:	d803      	bhi.n	800605a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8006052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0d3      	beq.n	8006002 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006060:	23f4      	movs	r3, #244	; 0xf4
 8006062:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006064:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800607a:	2300      	movs	r3, #0
 800607c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 800607e:	f107 030e 	add.w	r3, r7, #14
 8006082:	461a      	mov	r2, r3
 8006084:	2113      	movs	r1, #19
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f002 ffd0 	bl	800902c <VL53L0X_RdByte>
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	f003 0207 	and.w	r2, r3, #7
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800609a:	7bbb      	ldrb	r3, [r7, #14]
 800609c:	f003 0318 	and.w	r3, r3, #24
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80060a4:	23fa      	movs	r3, #250	; 0xfa
 80060a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80060a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060c0:	2300      	movs	r3, #0
 80060c2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fa03 	bl	80064d4 <VL53L0X_perform_ref_spad_management>
 80060ce:	4603      	mov	r3, r0
 80060d0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80060d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060e8:	2300      	movs	r3, #0
 80060ea:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80060ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80060f0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80060f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060f6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80060f8:	f107 0308 	add.w	r3, r7, #8
 80060fc:	461a      	mov	r2, r3
 80060fe:	2128      	movs	r1, #40	; 0x28
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f002 ffbd 	bl	8009080 <VL53L0X_RdWord>
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800610a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d11e      	bne.n	8006150 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8006112:	893b      	ldrh	r3, [r7, #8]
 8006114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006118:	b29b      	uxth	r3, r3
 800611a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800611c:	893b      	ldrh	r3, [r7, #8]
 800611e:	461a      	mov	r2, r3
 8006120:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006124:	429a      	cmp	r2, r3
 8006126:	dd0b      	ble.n	8006140 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8006128:	893a      	ldrh	r2, [r7, #8]
 800612a:	897b      	ldrh	r3, [r7, #10]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	b29b      	uxth	r3, r3
 8006130:	b21b      	sxth	r3, r3
 8006132:	461a      	mov	r2, r3
					* 250;
 8006134:	23fa      	movs	r3, #250	; 0xfa
 8006136:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e007      	b.n	8006150 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006140:	893b      	ldrh	r3, [r7, #8]
 8006142:	b21b      	sxth	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	23fa      	movs	r3, #250	; 0xfa
 8006148:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800615c:	b480      	push	{r7}
 800615e:	b08b      	sub	sp, #44	; 0x2c
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800616a:	2308      	movs	r3, #8
 800616c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	f04f 32ff 	mov.w	r2, #4294967295
 8006178:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006182:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	fbb3 f2f2 	udiv	r2, r3, r2
 800618c:	69b9      	ldr	r1, [r7, #24]
 800618e:	fb01 f202 	mul.w	r2, r1, r2
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
 800619a:	e030      	b.n	80061fe <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	4413      	add	r3, r2
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80061aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d11e      	bne.n	80061f0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 80061b2:	7ffa      	ldrb	r2, [r7, #31]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	fa42 f303 	asr.w	r3, r2, r3
 80061ba:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80061c0:	e016      	b.n	80061f0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80061c2:	7ffb      	ldrb	r3, [r7, #31]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00b      	beq.n	80061e4 <get_next_good_spad+0x88>
				success = 1;
 80061cc:	2301      	movs	r3, #1
 80061ce:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	fb03 f202 	mul.w	r2, r3, r2
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	4413      	add	r3, r2
 80061dc:	461a      	mov	r2, r3
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	601a      	str	r2, [r3, #0]
				break;
 80061e2:	e009      	b.n	80061f8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80061e4:	7ffb      	ldrb	r3, [r7, #31]
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	3301      	adds	r3, #1
 80061ee:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80061f0:	6a3a      	ldr	r2, [r7, #32]
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d3e4      	bcc.n	80061c2 <get_next_good_spad+0x66>
				coarseIndex++) {
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	3301      	adds	r3, #1
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80061fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	d202      	bcs.n	800620c <get_next_good_spad+0xb0>
 8006206:	7fbb      	ldrb	r3, [r7, #30]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0c7      	beq.n	800619c <get_next_good_spad+0x40>
		}
	}
}
 800620c:	bf00      	nop
 800620e:	372c      	adds	r7, #44	; 0x2c
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8006220:	2301      	movs	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	099b      	lsrs	r3, r3, #6
 8006228:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800622a:	4a07      	ldr	r2, [pc, #28]	; (8006248 <is_aperture+0x30>)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <is_aperture+0x22>
		isAperture = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	20000354 	.word	0x20000354

0800624c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800624c:	b480      	push	{r7}
 800624e:	b089      	sub	sp, #36	; 0x24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006258:	2300      	movs	r3, #0
 800625a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800625c:	2308      	movs	r3, #8
 800625e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006272:	69b9      	ldr	r1, [r7, #24]
 8006274:	fb01 f202 	mul.w	r2, r1, r2
 8006278:	1a9b      	subs	r3, r3, r2
 800627a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	429a      	cmp	r2, r3
 8006282:	d302      	bcc.n	800628a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006284:	23ce      	movs	r3, #206	; 0xce
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e010      	b.n	80062ac <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	4413      	add	r3, r2
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	b25a      	sxtb	r2, r3
 8006294:	2101      	movs	r1, #1
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	fa01 f303 	lsl.w	r3, r1, r3
 800629c:	b25b      	sxtb	r3, r3
 800629e:	4313      	orrs	r3, r2
 80062a0:	b259      	sxtb	r1, r3
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	4413      	add	r3, r2
 80062a8:	b2ca      	uxtb	r2, r1
 80062aa:	701a      	strb	r2, [r3, #0]

	return status;
 80062ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3724      	adds	r7, #36	; 0x24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80062c6:	2306      	movs	r3, #6
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	21b0      	movs	r1, #176	; 0xb0
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f002 fdcf 	bl	8008e70 <VL53L0X_WriteMulti>
 80062d2:	4603      	mov	r3, r0
 80062d4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80062d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80062ec:	2306      	movs	r3, #6
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	21b0      	movs	r1, #176	; 0xb0
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f002 fdec 	bl	8008ed0 <VL53L0X_ReadMulti>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80062fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08c      	sub	sp, #48	; 0x30
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	460b      	mov	r3, r1
 8006316:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006318:	2300      	movs	r3, #0
 800631a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800631e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006320:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8006322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006324:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006326:	2300      	movs	r3, #0
 8006328:	62bb      	str	r3, [r7, #40]	; 0x28
 800632a:	e02b      	b.n	8006384 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800632c:	f107 031c 	add.w	r3, r7, #28
 8006330:	6a3a      	ldr	r2, [r7, #32]
 8006332:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff ff11 	bl	800615c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d103      	bne.n	800634a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006342:	23ce      	movs	r3, #206	; 0xce
 8006344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006348:	e020      	b.n	800638c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	461a      	mov	r2, r3
 800634e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006350:	4413      	add	r3, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff ff60 	bl	8006218 <is_aperture>
 8006358:	4603      	mov	r3, r0
 800635a:	461a      	mov	r2, r3
 800635c:	7afb      	ldrb	r3, [r7, #11]
 800635e:	4293      	cmp	r3, r2
 8006360:	d003      	beq.n	800636a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006362:	23ce      	movs	r3, #206	; 0xce
 8006364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006368:	e010      	b.n	800638c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800636e:	6a3a      	ldr	r2, [r7, #32]
 8006370:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006372:	6838      	ldr	r0, [r7, #0]
 8006374:	f7ff ff6a 	bl	800624c <enable_spad_bit>
		currentSpad++;
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	3301      	adds	r3, #1
 800637c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	3301      	adds	r3, #1
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28
 8006384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006388:	429a      	cmp	r2, r3
 800638a:	d3cf      	bcc.n	800632c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800638c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800638e:	6a3a      	ldr	r2, [r7, #32]
 8006390:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006392:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800639a:	6839      	ldr	r1, [r7, #0]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff ff8d 	bl	80062bc <set_ref_spad_map>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80063a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d121      	bne.n	80063f4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80063b0:	f107 0314 	add.w	r3, r7, #20
 80063b4:	4619      	mov	r1, r3
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff ff93 	bl	80062e2 <get_ref_spad_map>
 80063bc:	4603      	mov	r3, r0
 80063be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80063c6:	e011      	b.n	80063ec <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	4413      	add	r3, r2
 80063ce:	781a      	ldrb	r2, [r3, #0]
 80063d0:	f107 0114 	add.w	r1, r7, #20
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	440b      	add	r3, r1
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d003      	beq.n	80063e6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80063de:	23ce      	movs	r3, #206	; 0xce
 80063e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80063e4:	e006      	b.n	80063f4 <enable_ref_spads+0xec>
			}
			i++;
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	3301      	adds	r3, #1
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80063ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d3e9      	bcc.n	80063c8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80063f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3730      	adds	r7, #48	; 0x30
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	; 0x28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800640a:	2300      	movs	r3, #0
 800640c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800641c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006420:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006424:	2b00      	cmp	r3, #0
 8006426:	d107      	bne.n	8006438 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8006428:	22c0      	movs	r2, #192	; 0xc0
 800642a:	2101      	movs	r1, #1
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f002 fd7b 	bl	8008f28 <VL53L0X_WrByte>
 8006432:	4603      	mov	r3, r0
 8006434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006438:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800643c:	2b00      	cmp	r3, #0
 800643e:	d108      	bne.n	8006452 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006440:	f107 0308 	add.w	r3, r7, #8
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fc48 	bl	8005cdc <VL53L0X_PerformSingleRangingMeasurement>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006452:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006456:	2b00      	cmp	r3, #0
 8006458:	d107      	bne.n	800646a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800645a:	2201      	movs	r2, #1
 800645c:	21ff      	movs	r1, #255	; 0xff
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f002 fd62 	bl	8008f28 <VL53L0X_WrByte>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800646a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	21b6      	movs	r1, #182	; 0xb6
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f002 fe02 	bl	8009080 <VL53L0X_RdWord>
 800647c:	4603      	mov	r3, r0
 800647e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006482:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006486:	2b00      	cmp	r3, #0
 8006488:	d107      	bne.n	800649a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800648a:	2200      	movs	r2, #0
 800648c:	21ff      	movs	r1, #255	; 0xff
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f002 fd4a 	bl	8008f28 <VL53L0X_WrByte>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800649a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d112      	bne.n	80064c8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80064a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064a6:	461a      	mov	r2, r3
 80064a8:	2101      	movs	r1, #1
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f002 fd3c 	bl	8008f28 <VL53L0X_WrByte>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80064b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80064c4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 80064c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3728      	adds	r7, #40	; 0x28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80064d4:	b590      	push	{r4, r7, lr}
 80064d6:	b09d      	sub	sp, #116	; 0x74
 80064d8:	af06      	add	r7, sp, #24
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80064e6:	23b4      	movs	r3, #180	; 0xb4
 80064e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80064ec:	2303      	movs	r3, #3
 80064ee:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80064f0:	232c      	movs	r3, #44	; 0x2c
 80064f2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006500:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006504:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800650e:	2306      	movs	r3, #6
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006524:	2300      	movs	r3, #0
 8006526:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800652c:	2300      	movs	r3, #0
 800652e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8006538:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800653a:	2300      	movs	r3, #0
 800653c:	64bb      	str	r3, [r7, #72]	; 0x48
 800653e:	e009      	b.n	8006554 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006544:	4413      	add	r3, r2
 8006546:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800654a:	2200      	movs	r2, #0
 800654c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800654e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006550:	3301      	adds	r3, #1
 8006552:	64bb      	str	r3, [r7, #72]	; 0x48
 8006554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	429a      	cmp	r2, r3
 800655a:	d3f1      	bcc.n	8006540 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800655c:	2201      	movs	r2, #1
 800655e:	21ff      	movs	r1, #255	; 0xff
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f002 fce1 	bl	8008f28 <VL53L0X_WrByte>
 8006566:	4603      	mov	r3, r0
 8006568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800656c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006570:	2b00      	cmp	r3, #0
 8006572:	d107      	bne.n	8006584 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006574:	2200      	movs	r2, #0
 8006576:	214f      	movs	r1, #79	; 0x4f
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f002 fcd5 	bl	8008f28 <VL53L0X_WrByte>
 800657e:	4603      	mov	r3, r0
 8006580:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006584:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006588:	2b00      	cmp	r3, #0
 800658a:	d107      	bne.n	800659c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800658c:	222c      	movs	r2, #44	; 0x2c
 800658e:	214e      	movs	r1, #78	; 0x4e
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f002 fcc9 	bl	8008f28 <VL53L0X_WrByte>
 8006596:	4603      	mov	r3, r0
 8006598:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800659c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d107      	bne.n	80065b4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80065a4:	2200      	movs	r2, #0
 80065a6:	21ff      	movs	r1, #255	; 0xff
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f002 fcbd 	bl	8008f28 <VL53L0X_WrByte>
 80065ae:	4603      	mov	r3, r0
 80065b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80065b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80065bc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80065c0:	461a      	mov	r2, r3
 80065c2:	21b6      	movs	r1, #182	; 0xb6
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f002 fcaf 	bl	8008f28 <VL53L0X_WrByte>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80065d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d107      	bne.n	80065e8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80065d8:	2200      	movs	r2, #0
 80065da:	2180      	movs	r1, #128	; 0x80
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f002 fca3 	bl	8008f28 <VL53L0X_WrByte>
 80065e2:	4603      	mov	r3, r0
 80065e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80065e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80065f0:	f107 0210 	add.w	r2, r7, #16
 80065f4:	f107 0111 	add.w	r1, r7, #17
 80065f8:	2300      	movs	r3, #0
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 fbbb 	bl	8006d76 <VL53L0X_perform_ref_calibration>
 8006600:	4603      	mov	r3, r0
 8006602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8006606:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800660a:	2b00      	cmp	r3, #0
 800660c:	d121      	bne.n	8006652 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8006612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006614:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800661a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 800662a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800662e:	f107 0218 	add.w	r2, r7, #24
 8006632:	9204      	str	r2, [sp, #16]
 8006634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006636:	9203      	str	r2, [sp, #12]
 8006638:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800663a:	9202      	str	r2, [sp, #8]
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	4623      	mov	r3, r4
 8006644:	4602      	mov	r2, r0
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f7ff fe5e 	bl	8006308 <enable_ref_spads>
 800664c:	4603      	mov	r3, r0
 800664e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006652:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006656:	2b00      	cmp	r3, #0
 8006658:	d174      	bne.n	8006744 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800665e:	f107 0312 	add.w	r3, r7, #18
 8006662:	4619      	mov	r1, r3
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7ff fecb 	bl	8006400 <perform_ref_signal_measurement>
 800666a:	4603      	mov	r3, r0
 800666c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006670:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006674:	2b00      	cmp	r3, #0
 8006676:	d161      	bne.n	800673c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006678:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800667a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800667c:	429a      	cmp	r2, r3
 800667e:	d25d      	bcs.n	800673c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 8006680:	2300      	movs	r3, #0
 8006682:	64bb      	str	r3, [r7, #72]	; 0x48
 8006684:	e009      	b.n	800669a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800668a:	4413      	add	r3, r2
 800668c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006690:	2200      	movs	r2, #0
 8006692:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006696:	3301      	adds	r3, #1
 8006698:	64bb      	str	r3, [r7, #72]	; 0x48
 800669a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	429a      	cmp	r2, r3
 80066a0:	d3f1      	bcc.n	8006686 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80066a2:	e002      	b.n	80066aa <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80066a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a6:	3301      	adds	r3, #1
 80066a8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80066aa:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80066ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066b0:	4413      	add	r3, r2
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff fdb0 	bl	8006218 <is_aperture>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d103      	bne.n	80066c6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80066be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d3ee      	bcc.n	80066a4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80066c6:	2301      	movs	r3, #1
 80066c8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80066ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066cc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 80066da:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80066de:	f107 0218 	add.w	r2, r7, #24
 80066e2:	9204      	str	r2, [sp, #16]
 80066e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066e6:	9203      	str	r2, [sp, #12]
 80066e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066ea:	9202      	str	r2, [sp, #8]
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	4623      	mov	r3, r4
 80066f4:	4602      	mov	r2, r0
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff fe06 	bl	8006308 <enable_ref_spads>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006702:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006706:	2b00      	cmp	r3, #0
 8006708:	d11b      	bne.n	8006742 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800670e:	f107 0312 	add.w	r3, r7, #18
 8006712:	4619      	mov	r1, r3
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7ff fe73 	bl	8006400 <perform_ref_signal_measurement>
 800671a:	4603      	mov	r3, r0
 800671c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006720:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10c      	bne.n	8006742 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006728:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800672a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800672c:	429a      	cmp	r2, r3
 800672e:	d208      	bcs.n	8006742 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006730:	2301      	movs	r3, #1
 8006732:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006738:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800673a:	e002      	b.n	8006742 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006740:	e000      	b.n	8006744 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006742:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006744:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006748:	2b00      	cmp	r3, #0
 800674a:	f040 80af 	bne.w	80068ac <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800674e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006750:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006752:	429a      	cmp	r2, r3
 8006754:	f240 80aa 	bls.w	80068ac <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800675a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8006768:	f107 031c 	add.w	r3, r7, #28
 800676c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800676e:	4618      	mov	r0, r3
 8006770:	f002 fd5e 	bl	8009230 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006774:	8a7b      	ldrh	r3, [r7, #18]
 8006776:	461a      	mov	r2, r3
 8006778:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	bfb8      	it	lt
 8006780:	425b      	neglt	r3, r3
 8006782:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800678a:	e086      	b.n	800689a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 8006792:	f107 0314 	add.w	r3, r7, #20
 8006796:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800679a:	f7ff fcdf 	bl	800615c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d103      	bne.n	80067ae <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80067a6:	23ce      	movs	r3, #206	; 0xce
 80067a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80067ac:	e07e      	b.n	80068ac <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80067ae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4413      	add	r3, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff fd2e 	bl	8006218 <is_aperture>
 80067bc:	4603      	mov	r3, r0
 80067be:	461a      	mov	r2, r3
 80067c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d003      	beq.n	80067ce <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80067cc:	e06e      	b.n	80068ac <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80067ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d0:	3301      	adds	r3, #1
 80067d2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 80067de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff fd32 	bl	800624c <enable_spad_bit>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80067ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10c      	bne.n	8006810 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80067f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f8:	3301      	adds	r3, #1
 80067fa:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 8006802:	4619      	mov	r1, r3
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7ff fd59 	bl	80062bc <set_ref_spad_map>
 800680a:	4603      	mov	r3, r0
 800680c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006810:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006814:	2b00      	cmp	r3, #0
 8006816:	d146      	bne.n	80068a6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006818:	f107 0312 	add.w	r3, r7, #18
 800681c:	4619      	mov	r1, r3
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f7ff fdee 	bl	8006400 <perform_ref_signal_measurement>
 8006824:	4603      	mov	r3, r0
 8006826:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800682a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800682e:	2b00      	cmp	r3, #0
 8006830:	d13b      	bne.n	80068aa <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006832:	8a7b      	ldrh	r3, [r7, #18]
 8006834:	461a      	mov	r2, r3
 8006836:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	bfb8      	it	lt
 800683e:	425b      	neglt	r3, r3
 8006840:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006842:	8a7b      	ldrh	r3, [r7, #18]
 8006844:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006846:	429a      	cmp	r2, r3
 8006848:	d21c      	bcs.n	8006884 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800684a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800684e:	429a      	cmp	r2, r3
 8006850:	d914      	bls.n	800687c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 8006852:	f107 031c 	add.w	r3, r7, #28
 8006856:	4619      	mov	r1, r3
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f7ff fd2f 	bl	80062bc <set_ref_spad_map>
 800685e:	4603      	mov	r3, r0
 8006860:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 800686a:	f107 011c 	add.w	r1, r7, #28
 800686e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006870:	4618      	mov	r0, r3
 8006872:	f002 fcdd 	bl	8009230 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006878:	3b01      	subs	r3, #1
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006882:	e00a      	b.n	800689a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 800688e:	f107 031c 	add.w	r3, r7, #28
 8006892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006894:	4618      	mov	r0, r3
 8006896:	f002 fccb 	bl	8009230 <memcpy>
		while (!complete) {
 800689a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f43f af74 	beq.w	800678c <VL53L0X_perform_ref_spad_management+0x2b8>
 80068a4:	e002      	b.n	80068ac <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80068a6:	bf00      	nop
 80068a8:	e000      	b.n	80068ac <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80068aa:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d115      	bne.n	80068e0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068b8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80068c0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	781a      	ldrb	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80068e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	375c      	adds	r7, #92	; 0x5c
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd90      	pop	{r4, r7, pc}

080068ec <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80068ec:	b590      	push	{r4, r7, lr}
 80068ee:	b093      	sub	sp, #76	; 0x4c
 80068f0:	af06      	add	r7, sp, #24
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068fa:	2300      	movs	r3, #0
 80068fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006904:	23b4      	movs	r3, #180	; 0xb4
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800690a:	2306      	movs	r3, #6
 800690c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800690e:	232c      	movs	r3, #44	; 0x2c
 8006910:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006912:	2201      	movs	r2, #1
 8006914:	21ff      	movs	r1, #255	; 0xff
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f002 fb06 	bl	8008f28 <VL53L0X_WrByte>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006922:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006926:	2b00      	cmp	r3, #0
 8006928:	d107      	bne.n	800693a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800692a:	2200      	movs	r2, #0
 800692c:	214f      	movs	r1, #79	; 0x4f
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f002 fafa 	bl	8008f28 <VL53L0X_WrByte>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800693a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800693e:	2b00      	cmp	r3, #0
 8006940:	d107      	bne.n	8006952 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006942:	222c      	movs	r2, #44	; 0x2c
 8006944:	214e      	movs	r1, #78	; 0x4e
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f002 faee 	bl	8008f28 <VL53L0X_WrByte>
 800694c:	4603      	mov	r3, r0
 800694e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006952:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006956:	2b00      	cmp	r3, #0
 8006958:	d107      	bne.n	800696a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800695a:	2200      	movs	r2, #0
 800695c:	21ff      	movs	r1, #255	; 0xff
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f002 fae2 	bl	8008f28 <VL53L0X_WrByte>
 8006964:	4603      	mov	r3, r0
 8006966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800696a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006976:	461a      	mov	r2, r3
 8006978:	21b6      	movs	r1, #182	; 0xb6
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f002 fad4 	bl	8008f28 <VL53L0X_WrByte>
 8006980:	4603      	mov	r3, r0
 8006982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006986:	2300      	movs	r3, #0
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
 800698a:	e009      	b.n	80069a0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	4413      	add	r3, r2
 8006992:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006996:	2200      	movs	r2, #0
 8006998:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	3301      	adds	r3, #1
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d3f1      	bcc.n	800698c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80069a8:	79fb      	ldrb	r3, [r7, #7]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d011      	beq.n	80069d2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80069ae:	e002      	b.n	80069b6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	3301      	adds	r3, #1
 80069b4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80069b6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	4413      	add	r3, r2
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff fc2a 	bl	8006218 <is_aperture>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d103      	bne.n	80069d2 <VL53L0X_set_reference_spads+0xe6>
 80069ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d3ee      	bcc.n	80069b0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 80069de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069e2:	79f9      	ldrb	r1, [r7, #7]
 80069e4:	f107 0214 	add.w	r2, r7, #20
 80069e8:	9204      	str	r2, [sp, #16]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	9203      	str	r2, [sp, #12]
 80069ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069f0:	9202      	str	r2, [sp, #8]
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	4623      	mov	r3, r4
 80069fa:	4602      	mov	r2, r0
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff fc83 	bl	8006308 <enable_ref_spads>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006a08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10c      	bne.n	8006a2a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	79fa      	ldrb	r2, [r7, #7]
 8006a26:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006a2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3734      	adds	r7, #52	; 0x34
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd90      	pop	{r4, r7, pc}

08006a36 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	f043 0301 	orr.w	r3, r3, #1
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	461a      	mov	r2, r3
 8006a58:	2100      	movs	r1, #0
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f002 fa64 	bl	8008f28 <VL53L0X_WrByte>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f9bf 	bl	8006df0 <VL53L0X_measurement_poll_for_completion>
 8006a72:	4603      	mov	r3, r0
 8006a74:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d105      	bne.n	8006a8a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006a7e:	2100      	movs	r1, #0
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff fab5 	bl	8005ff0 <VL53L0X_ClearInterruptMask>
 8006a86:	4603      	mov	r3, r0
 8006a88:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d106      	bne.n	8006aa0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006a92:	2200      	movs	r2, #0
 8006a94:	2100      	movs	r1, #0
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f002 fa46 	bl	8008f28 <VL53L0X_WrByte>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	4608      	mov	r0, r1
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	70fb      	strb	r3, [r7, #3]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	70bb      	strb	r3, [r7, #2]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ace:	2201      	movs	r2, #1
 8006ad0:	21ff      	movs	r1, #255	; 0xff
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f002 fa28 	bl	8008f28 <VL53L0X_WrByte>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	461a      	mov	r2, r3
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f002 fa1e 	bl	8008f28 <VL53L0X_WrByte>
 8006aec:	4603      	mov	r3, r0
 8006aee:	461a      	mov	r2, r3
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006af6:	2200      	movs	r2, #0
 8006af8:	21ff      	movs	r1, #255	; 0xff
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f002 fa14 	bl	8008f28 <VL53L0X_WrByte>
 8006b00:	4603      	mov	r3, r0
 8006b02:	461a      	mov	r2, r3
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01e      	beq.n	8006b4e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006b10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d009      	beq.n	8006b2c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	21cb      	movs	r1, #203	; 0xcb
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f002 fa85 	bl	800902c <VL53L0X_RdByte>
 8006b22:	4603      	mov	r3, r0
 8006b24:	461a      	mov	r2, r3
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006b2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d02a      	beq.n	8006b8a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006b34:	f107 030e 	add.w	r3, r7, #14
 8006b38:	461a      	mov	r2, r3
 8006b3a:	21ee      	movs	r1, #238	; 0xee
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f002 fa75 	bl	800902c <VL53L0X_RdByte>
 8006b42:	4603      	mov	r3, r0
 8006b44:	461a      	mov	r2, r3
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	73fb      	strb	r3, [r7, #15]
 8006b4c:	e01d      	b.n	8006b8a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8006b4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00a      	beq.n	8006b6c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006b56:	78bb      	ldrb	r3, [r7, #2]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	21cb      	movs	r1, #203	; 0xcb
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f002 f9e3 	bl	8008f28 <VL53L0X_WrByte>
 8006b62:	4603      	mov	r3, r0
 8006b64:	461a      	mov	r2, r3
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006b6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00a      	beq.n	8006b8a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006b74:	787b      	ldrb	r3, [r7, #1]
 8006b76:	2280      	movs	r2, #128	; 0x80
 8006b78:	21ee      	movs	r1, #238	; 0xee
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f002 fa22 	bl	8008fc4 <VL53L0X_UpdateByte>
 8006b80:	4603      	mov	r3, r0
 8006b82:	461a      	mov	r2, r3
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	21ff      	movs	r1, #255	; 0xff
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f002 f9ca 	bl	8008f28 <VL53L0X_WrByte>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461a      	mov	r2, r3
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f002 f9c0 	bl	8008f28 <VL53L0X_WrByte>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	461a      	mov	r2, r3
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	21ff      	movs	r1, #255	; 0xff
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f002 f9b6 	bl	8008f28 <VL53L0X_WrByte>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	f023 0310 	bic.w	r3, r3, #16
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	701a      	strb	r2, [r3, #0]

	return Status;
 8006bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b08a      	sub	sp, #40	; 0x28
 8006be2:	af04      	add	r7, sp, #16
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	4611      	mov	r1, r2
 8006bea:	461a      	mov	r2, r3
 8006bec:	460b      	mov	r3, r1
 8006bee:	71fb      	strb	r3, [r7, #7]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006c04:	2300      	movs	r3, #0
 8006c06:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006c08:	79bb      	ldrb	r3, [r7, #6]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006c14:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006c16:	2201      	movs	r2, #1
 8006c18:	2101      	movs	r1, #1
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f002 f984 	bl	8008f28 <VL53L0X_WrByte>
 8006c20:	4603      	mov	r3, r0
 8006c22:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d105      	bne.n	8006c38 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006c2c:	2140      	movs	r1, #64	; 0x40
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff ff01 	bl	8006a36 <VL53L0X_perform_single_ref_calibration>
 8006c34:	4603      	mov	r3, r0
 8006c36:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006c38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d115      	bne.n	8006c6c <VL53L0X_perform_vhv_calibration+0x8e>
 8006c40:	79fb      	ldrb	r3, [r7, #7]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d112      	bne.n	8006c6c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006c46:	7d39      	ldrb	r1, [r7, #20]
 8006c48:	7d7a      	ldrb	r2, [r7, #21]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	9303      	str	r3, [sp, #12]
 8006c4e:	2301      	movs	r3, #1
 8006c50:	9302      	str	r3, [sp, #8]
 8006c52:	f107 0313 	add.w	r3, r7, #19
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	2101      	movs	r1, #1
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7ff ff23 	bl	8006aac <VL53L0X_ref_calibration_io>
 8006c66:	4603      	mov	r3, r0
 8006c68:	75fb      	strb	r3, [r7, #23]
 8006c6a:	e002      	b.n	8006c72 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d112      	bne.n	8006ca0 <VL53L0X_perform_vhv_calibration+0xc2>
 8006c7a:	79bb      	ldrb	r3, [r7, #6]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00f      	beq.n	8006ca0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006c80:	7dbb      	ldrb	r3, [r7, #22]
 8006c82:	461a      	mov	r2, r3
 8006c84:	2101      	movs	r1, #1
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f002 f94e 	bl	8008f28 <VL53L0X_WrByte>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d103      	bne.n	8006ca0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	7dba      	ldrb	r2, [r7, #22]
 8006c9c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8006ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08a      	sub	sp, #40	; 0x28
 8006cb0:	af04      	add	r7, sp, #16
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	461a      	mov	r2, r3
 8006cba:	460b      	mov	r3, r1
 8006cbc:	71fb      	strb	r3, [r7, #7]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006cd2:	79bb      	ldrb	r3, [r7, #6]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006cde:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f002 f91f 	bl	8008f28 <VL53L0X_WrByte>
 8006cea:	4603      	mov	r3, r0
 8006cec:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d105      	bne.n	8006d02 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f7ff fe9c 	bl	8006a36 <VL53L0X_perform_single_ref_calibration>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006d02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d115      	bne.n	8006d36 <VL53L0X_perform_phase_calibration+0x8a>
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d112      	bne.n	8006d36 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006d10:	7d39      	ldrb	r1, [r7, #20]
 8006d12:	7d7a      	ldrb	r2, [r7, #21]
 8006d14:	2301      	movs	r3, #1
 8006d16:	9303      	str	r3, [sp, #12]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9302      	str	r3, [sp, #8]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	9301      	str	r3, [sp, #4]
 8006d20:	f107 0313 	add.w	r3, r7, #19
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	460b      	mov	r3, r1
 8006d28:	2101      	movs	r1, #1
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff febe 	bl	8006aac <VL53L0X_ref_calibration_io>
 8006d30:	4603      	mov	r3, r0
 8006d32:	75fb      	strb	r3, [r7, #23]
 8006d34:	e002      	b.n	8006d3c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d112      	bne.n	8006d6a <VL53L0X_perform_phase_calibration+0xbe>
 8006d44:	79bb      	ldrb	r3, [r7, #6]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00f      	beq.n	8006d6a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006d4a:	7dbb      	ldrb	r3, [r7, #22]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2101      	movs	r1, #1
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f002 f8e9 	bl	8008f28 <VL53L0X_WrByte>
 8006d56:	4603      	mov	r3, r0
 8006d58:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d103      	bne.n	8006d6a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	7dba      	ldrb	r2, [r7, #22]
 8006d66:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8006d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b086      	sub	sp, #24
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006d92:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 8006d94:	78fa      	ldrb	r2, [r7, #3]
 8006d96:	2300      	movs	r3, #0
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f7ff ff1f 	bl	8006bde <VL53L0X_perform_vhv_calibration>
 8006da0:	4603      	mov	r3, r0
 8006da2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d107      	bne.n	8006dbc <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8006dac:	78fa      	ldrb	r2, [r7, #3]
 8006dae:	2300      	movs	r3, #0
 8006db0:	6879      	ldr	r1, [r7, #4]
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff ff7a 	bl	8006cac <VL53L0X_perform_phase_calibration>
 8006db8:	4603      	mov	r3, r0
 8006dba:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8006dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10f      	bne.n	8006de4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006dc4:	7dbb      	ldrb	r3, [r7, #22]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	2101      	movs	r1, #1
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f002 f8ac 	bl	8008f28 <VL53L0X_WrByte>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006dd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	7dba      	ldrb	r2, [r7, #22]
 8006de0:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8006de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006e04:	f107 030f 	add.w	r3, r7, #15
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fe fe02 	bl	8005a14 <VL53L0X_GetMeasurementDataReady>
 8006e10:	4603      	mov	r3, r0
 8006e12:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8006e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d110      	bne.n	8006e3e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d00f      	beq.n	8006e42 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	3301      	adds	r3, #1
 8006e26:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006e2e:	d302      	bcc.n	8006e36 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006e30:	23f9      	movs	r3, #249	; 0xf9
 8006e32:	75fb      	strb	r3, [r7, #23]
			break;
 8006e34:	e006      	b.n	8006e44 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f002 f996 	bl	8009168 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006e3c:	e7e2      	b.n	8006e04 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8006e3e:	bf00      	nop
 8006e40:	e000      	b.n	8006e44 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8006e42:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8006e44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	3301      	adds	r3, #1
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8006e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e86:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006e88:	e002      	b.n	8006e90 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	089b      	lsrs	r3, r3, #2
 8006e8e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d8f8      	bhi.n	8006e8a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8006e98:	e017      	b.n	8006eca <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d30b      	bcc.n	8006ebe <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4413      	add	r3, r2
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	085b      	lsrs	r3, r3, #1
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	4413      	add	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	e002      	b.n	8006ec4 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	085b      	lsrs	r3, r3, #1
 8006ec2:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	089b      	lsrs	r3, r3, #2
 8006ec8:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e4      	bne.n	8006e9a <VL53L0X_isqrt+0x24>
	}

	return res;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b086      	sub	sp, #24
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006eea:	2200      	movs	r2, #0
 8006eec:	2183      	movs	r1, #131	; 0x83
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f002 f81a 	bl	8008f28 <VL53L0X_WrByte>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 8006efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d11e      	bne.n	8006f44 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006f0a:	f107 030f 	add.w	r3, r7, #15
 8006f0e:	461a      	mov	r2, r3
 8006f10:	2183      	movs	r1, #131	; 0x83
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f002 f88a 	bl	800902c <VL53L0X_RdByte>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10a      	bne.n	8006f38 <VL53L0X_device_read_strobe+0x5a>
 8006f22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006f36:	d3e8      	bcc.n	8006f0a <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006f3e:	d301      	bcc.n	8006f44 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006f40:	23f9      	movs	r3, #249	; 0xf9
 8006f42:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8006f44:	2201      	movs	r2, #1
 8006f46:	2183      	movs	r1, #131	; 0x83
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 ffed 	bl	8008f28 <VL53L0X_WrByte>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	461a      	mov	r2, r3
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8006f58:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b098      	sub	sp, #96	; 0x60
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8006f94:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006f98:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8006fac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 8006fb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006fb4:	2b07      	cmp	r3, #7
 8006fb6:	f000 8408 	beq.w	80077ca <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006fba:	2201      	movs	r2, #1
 8006fbc:	2180      	movs	r1, #128	; 0x80
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 ffb2 	bl	8008f28 <VL53L0X_WrByte>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	21ff      	movs	r1, #255	; 0xff
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 ffa6 	bl	8008f28 <VL53L0X_WrByte>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006fea:	2200      	movs	r2, #0
 8006fec:	2100      	movs	r1, #0
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 ff9a 	bl	8008f28 <VL53L0X_WrByte>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007002:	2206      	movs	r2, #6
 8007004:	21ff      	movs	r1, #255	; 0xff
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 ff8e 	bl	8008f28 <VL53L0X_WrByte>
 800700c:	4603      	mov	r3, r0
 800700e:	461a      	mov	r2, r3
 8007010:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007014:	4313      	orrs	r3, r2
 8007016:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800701a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800701e:	461a      	mov	r2, r3
 8007020:	2183      	movs	r1, #131	; 0x83
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f002 f802 	bl	800902c <VL53L0X_RdByte>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007030:	4313      	orrs	r3, r2
 8007032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007036:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800703a:	f043 0304 	orr.w	r3, r3, #4
 800703e:	b2db      	uxtb	r3, r3
 8007040:	461a      	mov	r2, r3
 8007042:	2183      	movs	r1, #131	; 0x83
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 ff6f 	bl	8008f28 <VL53L0X_WrByte>
 800704a:	4603      	mov	r3, r0
 800704c:	461a      	mov	r2, r3
 800704e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007052:	4313      	orrs	r3, r2
 8007054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8007058:	2207      	movs	r2, #7
 800705a:	21ff      	movs	r1, #255	; 0xff
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 ff63 	bl	8008f28 <VL53L0X_WrByte>
 8007062:	4603      	mov	r3, r0
 8007064:	461a      	mov	r2, r3
 8007066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800706a:	4313      	orrs	r3, r2
 800706c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8007070:	2201      	movs	r2, #1
 8007072:	2181      	movs	r1, #129	; 0x81
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 ff57 	bl	8008f28 <VL53L0X_WrByte>
 800707a:	4603      	mov	r3, r0
 800707c:	461a      	mov	r2, r3
 800707e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007082:	4313      	orrs	r3, r2
 8007084:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f002 f86d 	bl	8009168 <VL53L0X_PollingDelay>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007096:	4313      	orrs	r3, r2
 8007098:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800709c:	2201      	movs	r2, #1
 800709e:	2180      	movs	r1, #128	; 0x80
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 ff41 	bl	8008f28 <VL53L0X_WrByte>
 80070a6:	4603      	mov	r3, r0
 80070a8:	461a      	mov	r2, r3
 80070aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 8098 	beq.w	80071f0 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80070c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80070c4:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f040 8091 	bne.w	80071f0 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80070ce:	226b      	movs	r2, #107	; 0x6b
 80070d0:	2194      	movs	r1, #148	; 0x94
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 ff28 	bl	8008f28 <VL53L0X_WrByte>
 80070d8:	4603      	mov	r3, r0
 80070da:	461a      	mov	r2, r3
 80070dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070e0:	4313      	orrs	r3, r2
 80070e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff fef9 	bl	8006ede <VL53L0X_device_read_strobe>
 80070ec:	4603      	mov	r3, r0
 80070ee:	461a      	mov	r2, r3
 80070f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80070fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070fe:	461a      	mov	r2, r3
 8007100:	2190      	movs	r1, #144	; 0x90
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 fff4 	bl	80090f0 <VL53L0X_RdDWord>
 8007108:	4603      	mov	r3, r0
 800710a:	461a      	mov	r2, r3
 800710c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007110:	4313      	orrs	r3, r2
 8007112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	0a1b      	lsrs	r3, r3, #8
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007120:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	0bdb      	lsrs	r3, r3, #15
 8007128:	b2db      	uxtb	r3, r3
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8007132:	2224      	movs	r2, #36	; 0x24
 8007134:	2194      	movs	r1, #148	; 0x94
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 fef6 	bl	8008f28 <VL53L0X_WrByte>
 800713c:	4603      	mov	r3, r0
 800713e:	461a      	mov	r2, r3
 8007140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007144:	4313      	orrs	r3, r2
 8007146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff fec7 	bl	8006ede <VL53L0X_device_read_strobe>
 8007150:	4603      	mov	r3, r0
 8007152:	461a      	mov	r2, r3
 8007154:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007158:	4313      	orrs	r3, r2
 800715a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800715e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007162:	461a      	mov	r2, r3
 8007164:	2190      	movs	r1, #144	; 0x90
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 ffc2 	bl	80090f0 <VL53L0X_RdDWord>
 800716c:	4603      	mov	r3, r0
 800716e:	461a      	mov	r2, r3
 8007170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007174:	4313      	orrs	r3, r2
 8007176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	0e1b      	lsrs	r3, r3, #24
 800717e:	b2db      	uxtb	r3, r3
 8007180:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	0c1b      	lsrs	r3, r3, #16
 8007186:	b2db      	uxtb	r3, r3
 8007188:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	0a1b      	lsrs	r3, r3, #8
 800718e:	b2db      	uxtb	r3, r3
 8007190:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	b2db      	uxtb	r3, r3
 8007196:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8007198:	2225      	movs	r2, #37	; 0x25
 800719a:	2194      	movs	r1, #148	; 0x94
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 fec3 	bl	8008f28 <VL53L0X_WrByte>
 80071a2:	4603      	mov	r3, r0
 80071a4:	461a      	mov	r2, r3
 80071a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff fe94 	bl	8006ede <VL53L0X_device_read_strobe>
 80071b6:	4603      	mov	r3, r0
 80071b8:	461a      	mov	r2, r3
 80071ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071be:	4313      	orrs	r3, r2
 80071c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80071c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071c8:	461a      	mov	r2, r3
 80071ca:	2190      	movs	r1, #144	; 0x90
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 ff8f 	bl	80090f0 <VL53L0X_RdDWord>
 80071d2:	4603      	mov	r3, r0
 80071d4:	461a      	mov	r2, r3
 80071d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071da:	4313      	orrs	r3, r2
 80071dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	0e1b      	lsrs	r3, r3, #24
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	0c1b      	lsrs	r3, r3, #16
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 8189 	beq.w	800750e <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80071fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007200:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007204:	2b00      	cmp	r3, #0
 8007206:	f040 8182 	bne.w	800750e <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800720a:	2202      	movs	r2, #2
 800720c:	2194      	movs	r1, #148	; 0x94
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fe8a 	bl	8008f28 <VL53L0X_WrByte>
 8007214:	4603      	mov	r3, r0
 8007216:	461a      	mov	r2, r3
 8007218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800721c:	4313      	orrs	r3, r2
 800721e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff fe5b 	bl	8006ede <VL53L0X_device_read_strobe>
 8007228:	4603      	mov	r3, r0
 800722a:	461a      	mov	r2, r3
 800722c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007230:	4313      	orrs	r3, r2
 8007232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8007236:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800723a:	461a      	mov	r2, r3
 800723c:	2190      	movs	r1, #144	; 0x90
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fef4 	bl	800902c <VL53L0X_RdByte>
 8007244:	4603      	mov	r3, r0
 8007246:	461a      	mov	r2, r3
 8007248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800724c:	4313      	orrs	r3, r2
 800724e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007252:	227b      	movs	r2, #123	; 0x7b
 8007254:	2194      	movs	r1, #148	; 0x94
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 fe66 	bl	8008f28 <VL53L0X_WrByte>
 800725c:	4603      	mov	r3, r0
 800725e:	461a      	mov	r2, r3
 8007260:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007264:	4313      	orrs	r3, r2
 8007266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff fe37 	bl	8006ede <VL53L0X_device_read_strobe>
 8007270:	4603      	mov	r3, r0
 8007272:	461a      	mov	r2, r3
 8007274:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007278:	4313      	orrs	r3, r2
 800727a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800727e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007282:	461a      	mov	r2, r3
 8007284:	2190      	movs	r1, #144	; 0x90
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 fed0 	bl	800902c <VL53L0X_RdByte>
 800728c:	4603      	mov	r3, r0
 800728e:	461a      	mov	r2, r3
 8007290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007294:	4313      	orrs	r3, r2
 8007296:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800729a:	2277      	movs	r2, #119	; 0x77
 800729c:	2194      	movs	r1, #148	; 0x94
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f001 fe42 	bl	8008f28 <VL53L0X_WrByte>
 80072a4:	4603      	mov	r3, r0
 80072a6:	461a      	mov	r2, r3
 80072a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff fe13 	bl	8006ede <VL53L0X_device_read_strobe>
 80072b8:	4603      	mov	r3, r0
 80072ba:	461a      	mov	r2, r3
 80072bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072c0:	4313      	orrs	r3, r2
 80072c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80072c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072ca:	461a      	mov	r2, r3
 80072cc:	2190      	movs	r1, #144	; 0x90
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 ff0e 	bl	80090f0 <VL53L0X_RdDWord>
 80072d4:	4603      	mov	r3, r0
 80072d6:	461a      	mov	r2, r3
 80072d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072dc:	4313      	orrs	r3, r2
 80072de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	0e5b      	lsrs	r3, r3, #25
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	0c9b      	lsrs	r3, r3, #18
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	0adb      	lsrs	r3, r3, #11
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007308:	b2db      	uxtb	r3, r3
 800730a:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	091b      	lsrs	r3, r3, #4
 8007310:	b2db      	uxtb	r3, r3
 8007312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007316:	b2db      	uxtb	r3, r3
 8007318:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	b2db      	uxtb	r3, r3
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	b2db      	uxtb	r3, r3
 8007322:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007326:	b2db      	uxtb	r3, r3
 8007328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800732c:	2278      	movs	r2, #120	; 0x78
 800732e:	2194      	movs	r1, #148	; 0x94
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 fdf9 	bl	8008f28 <VL53L0X_WrByte>
 8007336:	4603      	mov	r3, r0
 8007338:	461a      	mov	r2, r3
 800733a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800733e:	4313      	orrs	r3, r2
 8007340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff fdca 	bl	8006ede <VL53L0X_device_read_strobe>
 800734a:	4603      	mov	r3, r0
 800734c:	461a      	mov	r2, r3
 800734e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007352:	4313      	orrs	r3, r2
 8007354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800735c:	461a      	mov	r2, r3
 800735e:	2190      	movs	r1, #144	; 0x90
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 fec5 	bl	80090f0 <VL53L0X_RdDWord>
 8007366:	4603      	mov	r3, r0
 8007368:	461a      	mov	r2, r3
 800736a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800736e:	4313      	orrs	r3, r2
 8007370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	0f5b      	lsrs	r3, r3, #29
 8007378:	b2db      	uxtb	r3, r3
 800737a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800737e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007380:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007384:	4413      	add	r3, r2
 8007386:	b2db      	uxtb	r3, r3
 8007388:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	0d9b      	lsrs	r3, r3, #22
 800738e:	b2db      	uxtb	r3, r3
 8007390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007394:	b2db      	uxtb	r3, r3
 8007396:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	0bdb      	lsrs	r3, r3, #15
 800739c:	b2db      	uxtb	r3, r3
 800739e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	0a1b      	lsrs	r3, r3, #8
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80073b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b6:	085b      	lsrs	r3, r3, #1
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	019b      	lsls	r3, r3, #6
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80073d4:	2279      	movs	r2, #121	; 0x79
 80073d6:	2194      	movs	r1, #148	; 0x94
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 fda5 	bl	8008f28 <VL53L0X_WrByte>
 80073de:	4603      	mov	r3, r0
 80073e0:	461a      	mov	r2, r3
 80073e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff fd76 	bl	8006ede <VL53L0X_device_read_strobe>
 80073f2:	4603      	mov	r3, r0
 80073f4:	461a      	mov	r2, r3
 80073f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073fa:	4313      	orrs	r3, r2
 80073fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007400:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007404:	461a      	mov	r2, r3
 8007406:	2190      	movs	r1, #144	; 0x90
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 fe71 	bl	80090f0 <VL53L0X_RdDWord>
 800740e:	4603      	mov	r3, r0
 8007410:	461a      	mov	r2, r3
 8007412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007416:	4313      	orrs	r3, r2
 8007418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	0e9b      	lsrs	r3, r3, #26
 8007420:	b2db      	uxtb	r3, r3
 8007422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007426:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8007428:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800742c:	4413      	add	r3, r2
 800742e:	b2db      	uxtb	r3, r3
 8007430:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	0cdb      	lsrs	r3, r3, #19
 8007436:	b2db      	uxtb	r3, r3
 8007438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743c:	b2db      	uxtb	r3, r3
 800743e:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	0b1b      	lsrs	r3, r3, #12
 8007444:	b2db      	uxtb	r3, r3
 8007446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800744a:	b2db      	uxtb	r3, r3
 800744c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	095b      	lsrs	r3, r3, #5
 8007452:	b2db      	uxtb	r3, r3
 8007454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007458:	b2db      	uxtb	r3, r3
 800745a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	b2db      	uxtb	r3, r3
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007468:	b2db      	uxtb	r3, r3
 800746a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800746e:	227a      	movs	r2, #122	; 0x7a
 8007470:	2194      	movs	r1, #148	; 0x94
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 fd58 	bl	8008f28 <VL53L0X_WrByte>
 8007478:	4603      	mov	r3, r0
 800747a:	461a      	mov	r2, r3
 800747c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007480:	4313      	orrs	r3, r2
 8007482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff fd29 	bl	8006ede <VL53L0X_device_read_strobe>
 800748c:	4603      	mov	r3, r0
 800748e:	461a      	mov	r2, r3
 8007490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007494:	4313      	orrs	r3, r2
 8007496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800749a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800749e:	461a      	mov	r2, r3
 80074a0:	2190      	movs	r1, #144	; 0x90
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 fe24 	bl	80090f0 <VL53L0X_RdDWord>
 80074a8:	4603      	mov	r3, r0
 80074aa:	461a      	mov	r2, r3
 80074ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074b0:	4313      	orrs	r3, r2
 80074b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	0f9b      	lsrs	r3, r3, #30
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c0:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80074c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074c6:	4413      	add	r3, r2
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	0ddb      	lsrs	r3, r3, #23
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	0c1b      	lsrs	r3, r3, #16
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	0a5b      	lsrs	r3, r3, #9
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	089b      	lsrs	r3, r3, #2
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8007508:	2300      	movs	r3, #0
 800750a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 80f1 	beq.w	80076fc <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800751a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800751e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007522:	2b00      	cmp	r3, #0
 8007524:	f040 80ea 	bne.w	80076fc <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007528:	227b      	movs	r2, #123	; 0x7b
 800752a:	2194      	movs	r1, #148	; 0x94
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 fcfb 	bl	8008f28 <VL53L0X_WrByte>
 8007532:	4603      	mov	r3, r0
 8007534:	461a      	mov	r2, r3
 8007536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800753a:	4313      	orrs	r3, r2
 800753c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff fccc 	bl	8006ede <VL53L0X_device_read_strobe>
 8007546:	4603      	mov	r3, r0
 8007548:	461a      	mov	r2, r3
 800754a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800754e:	4313      	orrs	r3, r2
 8007550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007554:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007558:	461a      	mov	r2, r3
 800755a:	2190      	movs	r1, #144	; 0x90
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 fdc7 	bl	80090f0 <VL53L0X_RdDWord>
 8007562:	4603      	mov	r3, r0
 8007564:	461a      	mov	r2, r3
 8007566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800756a:	4313      	orrs	r3, r2
 800756c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007570:	227c      	movs	r2, #124	; 0x7c
 8007572:	2194      	movs	r1, #148	; 0x94
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 fcd7 	bl	8008f28 <VL53L0X_WrByte>
 800757a:	4603      	mov	r3, r0
 800757c:	461a      	mov	r2, r3
 800757e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007582:	4313      	orrs	r3, r2
 8007584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff fca8 	bl	8006ede <VL53L0X_device_read_strobe>
 800758e:	4603      	mov	r3, r0
 8007590:	461a      	mov	r2, r3
 8007592:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007596:	4313      	orrs	r3, r2
 8007598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800759c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075a0:	461a      	mov	r2, r3
 80075a2:	2190      	movs	r1, #144	; 0x90
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 fda3 	bl	80090f0 <VL53L0X_RdDWord>
 80075aa:	4603      	mov	r3, r0
 80075ac:	461a      	mov	r2, r3
 80075ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075b2:	4313      	orrs	r3, r2
 80075b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80075b8:	2273      	movs	r2, #115	; 0x73
 80075ba:	2194      	movs	r1, #148	; 0x94
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 fcb3 	bl	8008f28 <VL53L0X_WrByte>
 80075c2:	4603      	mov	r3, r0
 80075c4:	461a      	mov	r2, r3
 80075c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075ca:	4313      	orrs	r3, r2
 80075cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff fc84 	bl	8006ede <VL53L0X_device_read_strobe>
 80075d6:	4603      	mov	r3, r0
 80075d8:	461a      	mov	r2, r3
 80075da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075de:	4313      	orrs	r3, r2
 80075e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80075e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075e8:	461a      	mov	r2, r3
 80075ea:	2190      	movs	r1, #144	; 0x90
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f001 fd7f 	bl	80090f0 <VL53L0X_RdDWord>
 80075f2:	4603      	mov	r3, r0
 80075f4:	461a      	mov	r2, r3
 80075f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8007604:	b29b      	uxth	r3, r3
 8007606:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007608:	2274      	movs	r2, #116	; 0x74
 800760a:	2194      	movs	r1, #148	; 0x94
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 fc8b 	bl	8008f28 <VL53L0X_WrByte>
 8007612:	4603      	mov	r3, r0
 8007614:	461a      	mov	r2, r3
 8007616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800761a:	4313      	orrs	r3, r2
 800761c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff fc5c 	bl	8006ede <VL53L0X_device_read_strobe>
 8007626:	4603      	mov	r3, r0
 8007628:	461a      	mov	r2, r3
 800762a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800762e:	4313      	orrs	r3, r2
 8007630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007638:	461a      	mov	r2, r3
 800763a:	2190      	movs	r1, #144	; 0x90
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 fd57 	bl	80090f0 <VL53L0X_RdDWord>
 8007642:	4603      	mov	r3, r0
 8007644:	461a      	mov	r2, r3
 8007646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800764a:	4313      	orrs	r3, r2
 800764c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007654:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007656:	4313      	orrs	r3, r2
 8007658:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800765a:	2275      	movs	r2, #117	; 0x75
 800765c:	2194      	movs	r1, #148	; 0x94
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 fc62 	bl	8008f28 <VL53L0X_WrByte>
 8007664:	4603      	mov	r3, r0
 8007666:	461a      	mov	r2, r3
 8007668:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800766c:	4313      	orrs	r3, r2
 800766e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff fc33 	bl	8006ede <VL53L0X_device_read_strobe>
 8007678:	4603      	mov	r3, r0
 800767a:	461a      	mov	r2, r3
 800767c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007680:	4313      	orrs	r3, r2
 8007682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007686:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800768a:	461a      	mov	r2, r3
 800768c:	2190      	movs	r1, #144	; 0x90
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 fd2e 	bl	80090f0 <VL53L0X_RdDWord>
 8007694:	4603      	mov	r3, r0
 8007696:	461a      	mov	r2, r3
 8007698:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800769c:	4313      	orrs	r3, r2
 800769e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80076aa:	2276      	movs	r2, #118	; 0x76
 80076ac:	2194      	movs	r1, #148	; 0x94
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fc3a 	bl	8008f28 <VL53L0X_WrByte>
 80076b4:	4603      	mov	r3, r0
 80076b6:	461a      	mov	r2, r3
 80076b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076bc:	4313      	orrs	r3, r2
 80076be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff fc0b 	bl	8006ede <VL53L0X_device_read_strobe>
 80076c8:	4603      	mov	r3, r0
 80076ca:	461a      	mov	r2, r3
 80076cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076d0:	4313      	orrs	r3, r2
 80076d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80076d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076da:	461a      	mov	r2, r3
 80076dc:	2190      	movs	r1, #144	; 0x90
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fd06 	bl	80090f0 <VL53L0X_RdDWord>
 80076e4:	4603      	mov	r3, r0
 80076e6:	461a      	mov	r2, r3
 80076e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076ec:	4313      	orrs	r3, r2
 80076ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80076f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076f8:	4313      	orrs	r3, r2
 80076fa:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80076fc:	2200      	movs	r2, #0
 80076fe:	2181      	movs	r1, #129	; 0x81
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 fc11 	bl	8008f28 <VL53L0X_WrByte>
 8007706:	4603      	mov	r3, r0
 8007708:	461a      	mov	r2, r3
 800770a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800770e:	4313      	orrs	r3, r2
 8007710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007714:	2206      	movs	r2, #6
 8007716:	21ff      	movs	r1, #255	; 0xff
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 fc05 	bl	8008f28 <VL53L0X_WrByte>
 800771e:	4603      	mov	r3, r0
 8007720:	461a      	mov	r2, r3
 8007722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007726:	4313      	orrs	r3, r2
 8007728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800772c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007730:	461a      	mov	r2, r3
 8007732:	2183      	movs	r1, #131	; 0x83
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f001 fc79 	bl	800902c <VL53L0X_RdByte>
 800773a:	4603      	mov	r3, r0
 800773c:	461a      	mov	r2, r3
 800773e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007742:	4313      	orrs	r3, r2
 8007744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800774c:	f023 0304 	bic.w	r3, r3, #4
 8007750:	b2db      	uxtb	r3, r3
 8007752:	461a      	mov	r2, r3
 8007754:	2183      	movs	r1, #131	; 0x83
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fbe6 	bl	8008f28 <VL53L0X_WrByte>
 800775c:	4603      	mov	r3, r0
 800775e:	461a      	mov	r2, r3
 8007760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007764:	4313      	orrs	r3, r2
 8007766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800776a:	2201      	movs	r2, #1
 800776c:	21ff      	movs	r1, #255	; 0xff
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 fbda 	bl	8008f28 <VL53L0X_WrByte>
 8007774:	4603      	mov	r3, r0
 8007776:	461a      	mov	r2, r3
 8007778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800777c:	4313      	orrs	r3, r2
 800777e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007782:	2201      	movs	r2, #1
 8007784:	2100      	movs	r1, #0
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 fbce 	bl	8008f28 <VL53L0X_WrByte>
 800778c:	4603      	mov	r3, r0
 800778e:	461a      	mov	r2, r3
 8007790:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007794:	4313      	orrs	r3, r2
 8007796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800779a:	2200      	movs	r2, #0
 800779c:	21ff      	movs	r1, #255	; 0xff
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 fbc2 	bl	8008f28 <VL53L0X_WrByte>
 80077a4:	4603      	mov	r3, r0
 80077a6:	461a      	mov	r2, r3
 80077a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80077b2:	2200      	movs	r2, #0
 80077b4:	2180      	movs	r1, #128	; 0x80
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 fbb6 	bl	8008f28 <VL53L0X_WrByte>
 80077bc:	4603      	mov	r3, r0
 80077be:	461a      	mov	r2, r3
 80077c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077c4:	4313      	orrs	r3, r2
 80077c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80077ca:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f040 8090 	bne.w	80078f4 <VL53L0X_get_info_from_device+0x990>
 80077d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077d8:	2b07      	cmp	r3, #7
 80077da:	f000 808b 	beq.w	80078f4 <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d024      	beq.n	8007832 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80077e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077ec:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d11e      	bne.n	8007832 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80077fa:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007804:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007808:	2300      	movs	r3, #0
 800780a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800780c:	e00e      	b.n	800782c <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800780e:	f107 0208 	add.w	r2, r7, #8
 8007812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007814:	4413      	add	r3, r2
 8007816:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781c:	4413      	add	r3, r2
 800781e:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8007822:	460a      	mov	r2, r1
 8007824:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007828:	3301      	adds	r3, #1
 800782a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800782c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800782e:	2b05      	cmp	r3, #5
 8007830:	dded      	ble.n	800780e <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d019      	beq.n	8007870 <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800783c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007840:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007844:	2b00      	cmp	r3, #0
 8007846:	d113      	bne.n	8007870 <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007848:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007852:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f203 131f 	addw	r3, r3, #287	; 0x11f
 8007862:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007864:	f107 0310 	add.w	r3, r7, #16
 8007868:	4619      	mov	r1, r3
 800786a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800786c:	f001 fd2a 	bl	80092c4 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	f003 0304 	and.w	r3, r3, #4
 8007876:	2b00      	cmp	r3, #0
 8007878:	d030      	beq.n	80078dc <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800787a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800787e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007882:	2b00      	cmp	r3, #0
 8007884:	d12a      	bne.n	80078dc <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800788e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007898:	025b      	lsls	r3, r3, #9
 800789a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078a0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80078aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d011      	beq.n	80078d4 <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 80078b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80078b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80078be:	fb02 f303 	mul.w	r3, r2, r3
 80078c2:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 80078c4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 80078c8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80078cc:	425b      	negs	r3, r3
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80078d4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80078dc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80078ea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078f4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3760      	adds	r7, #96	; 0x60
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 800790c:	f240 6277 	movw	r2, #1655	; 0x677
 8007910:	f04f 0300 	mov.w	r3, #0
 8007914:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8007918:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800791c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	fb02 f303 	mul.w	r3, r2, r3
 800792c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800792e:	68bb      	ldr	r3, [r7, #8]
}
 8007930:	4618      	mov	r0, r3
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d017      	beq.n	8007986 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	3b01      	subs	r3, #1
 800795a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800795c:	e005      	b.n	800796a <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	085b      	lsrs	r3, r3, #1
 8007962:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007964:	89fb      	ldrh	r3, [r7, #14]
 8007966:	3301      	adds	r3, #1
 8007968:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1f4      	bne.n	800795e <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007974:	89fb      	ldrh	r3, [r7, #14]
 8007976:	021b      	lsls	r3, r3, #8
 8007978:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	b29b      	uxth	r3, r3
 800797e:	b2db      	uxtb	r3, r3
 8007980:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007982:	4413      	add	r3, r2
 8007984:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007986:	8afb      	ldrh	r3, [r7, #22]

}
 8007988:	4618      	mov	r0, r3
 800798a:	371c      	adds	r7, #28
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80079a2:	88fb      	ldrh	r3, [r7, #6]
 80079a4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	0a12      	lsrs	r2, r2, #8
 80079aa:	b292      	uxth	r2, r2
 80079ac:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80079ae:	3301      	adds	r3, #1
 80079b0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80079b2:	68fb      	ldr	r3, [r7, #12]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4613      	mov	r3, r2
 80079cc:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80079d2:	79fb      	ldrb	r3, [r7, #7]
 80079d4:	4619      	mov	r1, r3
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7ff ff92 	bl	8007900 <VL53L0X_calc_macro_period_ps>
 80079dc:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80079e4:	4a0a      	ldr	r2, [pc, #40]	; (8007a10 <VL53L0X_calc_timeout_mclks+0x50>)
 80079e6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ea:	099b      	lsrs	r3, r3, #6
 80079ec:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079f4:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	085b      	lsrs	r3, r3, #1
 80079fc:	441a      	add	r2, r3
	timeout_period_mclks =
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a04:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8007a06:	69fb      	ldr	r3, [r7, #28]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3720      	adds	r7, #32
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	10624dd3 	.word	0x10624dd3

08007a14 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	807b      	strh	r3, [r7, #2]
 8007a20:	4613      	mov	r3, r2
 8007a22:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007a28:	787b      	ldrb	r3, [r7, #1]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff ff67 	bl	8007900 <VL53L0X_calc_macro_period_ps>
 8007a32:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007a3a:	4a0a      	ldr	r2, [pc, #40]	; (8007a64 <VL53L0X_calc_timeout_us+0x50>)
 8007a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a40:	099b      	lsrs	r3, r3, #6
 8007a42:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007a44:	887b      	ldrh	r3, [r7, #2]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	fb02 f303 	mul.w	r3, r2, r3
 8007a4c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007a50:	4a04      	ldr	r2, [pc, #16]	; (8007a64 <VL53L0X_calc_timeout_us+0x50>)
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	099b      	lsrs	r3, r3, #6
 8007a58:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007a5a:	697b      	ldr	r3, [r7, #20]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	10624dd3 	.word	0x10624dd3

08007a68 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08c      	sub	sp, #48	; 0x30
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	460b      	mov	r3, r1
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a76:	2300      	movs	r3, #0
 8007a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007a82:	2300      	movs	r3, #0
 8007a84:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <get_sequence_step_timeout+0x38>
 8007a94:	7afb      	ldrb	r3, [r7, #11]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d002      	beq.n	8007aa0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d128      	bne.n	8007af2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007aa0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f7fd fa03 	bl	8004eb4 <VL53L0X_GetVcselPulsePeriod>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007ab4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d109      	bne.n	8007ad0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007abc:	f107 0320 	add.w	r3, r7, #32
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2146      	movs	r1, #70	; 0x46
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f001 fab1 	bl	800902c <VL53L0X_RdByte>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007ad0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff ff5c 	bl	8007994 <VL53L0X_decode_timeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007ae0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007ae4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f7ff ff93 	bl	8007a14 <VL53L0X_calc_timeout_us>
 8007aee:	62b8      	str	r0, [r7, #40]	; 0x28
 8007af0:	e092      	b.n	8007c18 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d135      	bne.n	8007b64 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007af8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007afc:	461a      	mov	r2, r3
 8007afe:	2100      	movs	r1, #0
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f7fd f9d7 	bl	8004eb4 <VL53L0X_GetVcselPulsePeriod>
 8007b06:	4603      	mov	r3, r0
 8007b08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007b0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f040 8081 	bne.w	8007c18 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007b16:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f7fd f9c8 	bl	8004eb4 <VL53L0X_GetVcselPulsePeriod>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007b2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007b32:	f107 031e 	add.w	r3, r7, #30
 8007b36:	461a      	mov	r2, r3
 8007b38:	2151      	movs	r1, #81	; 0x51
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f001 faa0 	bl	8009080 <VL53L0X_RdWord>
 8007b40:	4603      	mov	r3, r0
 8007b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007b46:	8bfb      	ldrh	r3, [r7, #30]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff ff23 	bl	8007994 <VL53L0X_decode_timeout>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007b52:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b58:	4619      	mov	r1, r3
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7ff ff5a 	bl	8007a14 <VL53L0X_calc_timeout_us>
 8007b60:	62b8      	str	r0, [r7, #40]	; 0x28
 8007b62:	e059      	b.n	8007c18 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007b64:	7afb      	ldrb	r3, [r7, #11]
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	d156      	bne.n	8007c18 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007b6a:	f107 0314 	add.w	r3, r7, #20
 8007b6e:	4619      	mov	r1, r3
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f7fd faab 	bl	80050cc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01d      	beq.n	8007bbc <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007b80:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007b84:	461a      	mov	r2, r3
 8007b86:	2100      	movs	r1, #0
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f7fd f993 	bl	8004eb4 <VL53L0X_GetVcselPulsePeriod>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007b94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10f      	bne.n	8007bbc <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007b9c:	f107 031e 	add.w	r3, r7, #30
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	2151      	movs	r1, #81	; 0x51
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f001 fa6b 	bl	8009080 <VL53L0X_RdWord>
 8007baa:	4603      	mov	r3, r0
 8007bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007bb0:	8bfb      	ldrh	r3, [r7, #30]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff feee 	bl	8007994 <VL53L0X_decode_timeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007bbc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d109      	bne.n	8007bd8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007bc4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007bc8:	461a      	mov	r2, r3
 8007bca:	2101      	movs	r1, #1
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7fd f971 	bl	8004eb4 <VL53L0X_GetVcselPulsePeriod>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007bd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10f      	bne.n	8007c00 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007be0:	f107 031c 	add.w	r3, r7, #28
 8007be4:	461a      	mov	r2, r3
 8007be6:	2171      	movs	r1, #113	; 0x71
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f001 fa49 	bl	8009080 <VL53L0X_RdWord>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007bf4:	8bbb      	ldrh	r3, [r7, #28]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff fecc 	bl	8007994 <VL53L0X_decode_timeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007c00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007c08:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff feff 	bl	8007a14 <VL53L0X_calc_timeout_us>
 8007c16:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c1c:	601a      	str	r2, [r3, #0]

	return Status;
 8007c1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3730      	adds	r7, #48	; 0x30
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b08a      	sub	sp, #40	; 0x28
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	460b      	mov	r3, r1
 8007c34:	607a      	str	r2, [r7, #4]
 8007c36:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007c3e:	7afb      	ldrb	r3, [r7, #11]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <set_sequence_step_timeout+0x26>
 8007c44:	7afb      	ldrb	r3, [r7, #11]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d002      	beq.n	8007c50 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007c4a:	7afb      	ldrb	r3, [r7, #11]
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d138      	bne.n	8007cc2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007c50:	f107 031b 	add.w	r3, r7, #27
 8007c54:	461a      	mov	r2, r3
 8007c56:	2100      	movs	r1, #0
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f7fd f92b 	bl	8004eb4 <VL53L0X_GetVcselPulsePeriod>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d11a      	bne.n	8007ca2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007c6c:	7efb      	ldrb	r3, [r7, #27]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f7ff fea4 	bl	80079c0 <VL53L0X_calc_timeout_mclks>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007c7c:	8bbb      	ldrh	r3, [r7, #28]
 8007c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c82:	d903      	bls.n	8007c8c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007c84:	23ff      	movs	r3, #255	; 0xff
 8007c86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007c8a:	e004      	b.n	8007c96 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8007c8c:	8bbb      	ldrh	r3, [r7, #28]
 8007c8e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007c90:	3b01      	subs	r3, #1
 8007c92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007ca2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f040 80ab 	bne.w	8007e02 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8007cac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	2146      	movs	r1, #70	; 0x46
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f001 f937 	bl	8008f28 <VL53L0X_WrByte>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007cc0:	e09f      	b.n	8007e02 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007cc2:	7afb      	ldrb	r3, [r7, #11]
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d135      	bne.n	8007d34 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007cc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d11b      	bne.n	8007d08 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007cd0:	f107 031b 	add.w	r3, r7, #27
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f7fd f8eb 	bl	8004eb4 <VL53L0X_GetVcselPulsePeriod>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007ce4:	7efb      	ldrb	r3, [r7, #27]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff fe68 	bl	80079c0 <VL53L0X_calc_timeout_mclks>
 8007cf0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007cf2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff fe20 	bl	800793c <VL53L0X_encode_timeout>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007d00:	8b3a      	ldrh	r2, [r7, #24]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007d08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d108      	bne.n	8007d22 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8007d10:	8b3b      	ldrh	r3, [r7, #24]
 8007d12:	461a      	mov	r2, r3
 8007d14:	2151      	movs	r1, #81	; 0x51
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f001 f92a 	bl	8008f70 <VL53L0X_WrWord>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007d22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d16b      	bne.n	8007e02 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8007d32:	e066      	b.n	8007e02 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d160      	bne.n	8007dfc <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8007d3a:	f107 0310 	add.w	r3, r7, #16
 8007d3e:	4619      	mov	r1, r3
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f7fd f9c3 	bl	80050cc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8007d4a:	7cfb      	ldrb	r3, [r7, #19]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01d      	beq.n	8007d8c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007d50:	f107 031b 	add.w	r3, r7, #27
 8007d54:	461a      	mov	r2, r3
 8007d56:	2100      	movs	r1, #0
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f7fd f8ab 	bl	8004eb4 <VL53L0X_GetVcselPulsePeriod>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 8007d64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10f      	bne.n	8007d8c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8007d6c:	f107 0318 	add.w	r3, r7, #24
 8007d70:	461a      	mov	r2, r3
 8007d72:	2151      	movs	r1, #81	; 0x51
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f001 f983 	bl	8009080 <VL53L0X_RdWord>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8007d80:	8b3b      	ldrh	r3, [r7, #24]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff fe06 	bl	8007994 <VL53L0X_decode_timeout>
 8007d88:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8007d8a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007d8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d109      	bne.n	8007da8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007d94:	f107 031b 	add.w	r3, r7, #27
 8007d98:	461a      	mov	r2, r3
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7fd f889 	bl	8004eb4 <VL53L0X_GetVcselPulsePeriod>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007da8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d128      	bne.n	8007e02 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007db0:	7efb      	ldrb	r3, [r7, #27]
 8007db2:	461a      	mov	r2, r3
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f7ff fe02 	bl	80079c0 <VL53L0X_calc_timeout_mclks>
 8007dbc:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8007dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dc0:	6a3a      	ldr	r2, [r7, #32]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8007dc6:	6a38      	ldr	r0, [r7, #32]
 8007dc8:	f7ff fdb8 	bl	800793c <VL53L0X_encode_timeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8007dd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d108      	bne.n	8007dea <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007dd8:	8bfb      	ldrh	r3, [r7, #30]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	2171      	movs	r1, #113	; 0x71
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f001 f8c6 	bl	8008f70 <VL53L0X_WrWord>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8007dea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d107      	bne.n	8007e02 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8007dfa:	e002      	b.n	8007e02 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007dfc:	23fc      	movs	r3, #252	; 0xfc
 8007dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8007e02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3728      	adds	r7, #40	; 0x28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b086      	sub	sp, #24
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	460b      	mov	r3, r1
 8007e18:	607a      	str	r2, [r7, #4]
 8007e1a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007e20:	7afb      	ldrb	r3, [r7, #11]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d002      	beq.n	8007e2c <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d00a      	beq.n	8007e40 <VL53L0X_get_vcsel_pulse_period+0x32>
 8007e2a:	e013      	b.n	8007e54 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007e2c:	f107 0316 	add.w	r3, r7, #22
 8007e30:	461a      	mov	r2, r3
 8007e32:	2150      	movs	r1, #80	; 0x50
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f001 f8f9 	bl	800902c <VL53L0X_RdByte>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007e3e:	e00b      	b.n	8007e58 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007e40:	f107 0316 	add.w	r3, r7, #22
 8007e44:	461a      	mov	r2, r3
 8007e46:	2170      	movs	r1, #112	; 0x70
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f001 f8ef 	bl	800902c <VL53L0X_RdByte>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007e52:	e001      	b.n	8007e58 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e54:	23fc      	movs	r3, #252	; 0xfc
 8007e56:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d107      	bne.n	8007e70 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007e60:	7dbb      	ldrb	r3, [r7, #22]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe fff4 	bl	8006e50 <VL53L0X_decode_vcsel_period>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	701a      	strb	r2, [r3, #0]

	return Status;
 8007e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b090      	sub	sp, #64	; 0x40
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e86:	2300      	movs	r3, #0
 8007e88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007e8c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007e90:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007e92:	f240 7376 	movw	r3, #1910	; 0x776
 8007e96:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 8007e98:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007e9c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007e9e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 8007ea4:	f240 234e 	movw	r3, #590	; 0x24e
 8007ea8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 8007eaa:	f240 23b2 	movw	r3, #690	; 0x2b2
 8007eae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007eb0:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007eb4:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007eb6:	f240 2326 	movw	r3, #550	; 0x226
 8007eba:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8007ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007ed0:	f107 0310 	add.w	r3, r7, #16
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7fd f8f8 	bl	80050cc <VL53L0X_GetSequenceStepEnables>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 8007ee2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d15b      	bne.n	8007fa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 8007eea:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d105      	bne.n	8007efc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007ef0:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d102      	bne.n	8007efc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 8007ef6:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d052      	beq.n	8007fa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007efc:	f107 030c 	add.w	r3, r7, #12
 8007f00:	461a      	mov	r2, r3
 8007f02:	2102      	movs	r1, #2
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff fdaf 	bl	8007a68 <get_sequence_step_timeout>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 8007f10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 8007f18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f1c:	e07d      	b.n	800801a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8007f1e:	7c3b      	ldrb	r3, [r7, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00f      	beq.n	8007f44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8007f24:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f28:	4413      	add	r3, r2
 8007f2a:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d204      	bcs.n	8007f3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8007f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f3c:	e002      	b.n	8007f44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f3e:	23fc      	movs	r3, #252	; 0xfc
 8007f40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8007f44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 8007f4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f50:	e063      	b.n	800801a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8007f52:	7cbb      	ldrb	r3, [r7, #18]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d011      	beq.n	8007f7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	4413      	add	r3, r2
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d204      	bcs.n	8007f74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007f6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f72:	e016      	b.n	8007fa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f74:	23fc      	movs	r3, #252	; 0xfc
 8007f76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007f7a:	e012      	b.n	8007fa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007f7c:	7c7b      	ldrb	r3, [r7, #17]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00f      	beq.n	8007fa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f86:	4413      	add	r3, r2
 8007f88:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d204      	bcs.n	8007f9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f9a:	e002      	b.n	8007fa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f9c:	23fc      	movs	r3, #252	; 0xfc
 8007f9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007fa2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 8007faa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007fae:	e034      	b.n	800801a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8007fb0:	7cfb      	ldrb	r3, [r7, #19]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d019      	beq.n	8007fea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8007fb6:	f107 0308 	add.w	r3, r7, #8
 8007fba:	461a      	mov	r2, r3
 8007fbc:	2103      	movs	r1, #3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7ff fd52 	bl	8007a68 <get_sequence_step_timeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6a3a      	ldr	r2, [r7, #32]
 8007fce:	4413      	add	r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d204      	bcs.n	8007fe4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fe2:	e002      	b.n	8007fea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007fe4:	23fc      	movs	r3, #252	; 0xfc
 8007fe6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007fea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d111      	bne.n	8008016 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 8007ff2:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00e      	beq.n	8008016 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 8007ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008002:	2104      	movs	r1, #4
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff fe10 	bl	8007c2a <set_sequence_step_timeout>
 800800a:	4603      	mov	r3, r0
 800800c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008016:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800801a:	4618      	mov	r0, r3
 800801c:	3740      	adds	r7, #64	; 0x40
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b090      	sub	sp, #64	; 0x40
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800802c:	2300      	movs	r3, #0
 800802e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008032:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008036:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008038:	f240 7376 	movw	r3, #1910	; 0x776
 800803c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800803e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008042:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008044:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008048:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800804a:	f240 234e 	movw	r3, #590	; 0x24e
 800804e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008050:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008054:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008056:	f44f 7325 	mov.w	r3, #660	; 0x294
 800805a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800805c:	f240 2326 	movw	r3, #550	; 0x226
 8008060:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806a:	441a      	add	r2, r3
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008070:	f107 0318 	add.w	r3, r7, #24
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7fd f828 	bl	80050cc <VL53L0X_GetSequenceStepEnables>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008082:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800808a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800808e:	e075      	b.n	800817c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8008090:	7e3b      	ldrb	r3, [r7, #24]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d105      	bne.n	80080a2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008096:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008098:	2b00      	cmp	r3, #0
 800809a:	d102      	bne.n	80080a2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800809c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d030      	beq.n	8008104 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80080a2:	f107 0310 	add.w	r3, r7, #16
 80080a6:	461a      	mov	r2, r3
 80080a8:	2102      	movs	r1, #2
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff fcdc 	bl	8007a68 <get_sequence_step_timeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80080b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d122      	bne.n	8008104 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80080be:	7e3b      	ldrb	r3, [r7, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80080c8:	6939      	ldr	r1, [r7, #16]
 80080ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080cc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80080ce:	441a      	add	r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80080d4:	7ebb      	ldrb	r3, [r7, #26]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d009      	beq.n	80080ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80080de:	6939      	ldr	r1, [r7, #16]
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	440b      	add	r3, r1
 80080e4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80080e6:	441a      	add	r2, r3
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e00a      	b.n	8008104 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80080ee:	7e7b      	ldrb	r3, [r7, #25]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d007      	beq.n	8008104 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80080f8:	6939      	ldr	r1, [r7, #16]
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80080fe:	441a      	add	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008104:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008108:	2b00      	cmp	r3, #0
 800810a:	d114      	bne.n	8008136 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800810c:	7efb      	ldrb	r3, [r7, #27]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d011      	beq.n	8008136 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008112:	f107 030c 	add.w	r3, r7, #12
 8008116:	461a      	mov	r2, r3
 8008118:	2103      	movs	r1, #3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff fca4 	bl	8007a68 <get_sequence_step_timeout>
 8008120:	4603      	mov	r3, r0
 8008122:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800812a:	68f9      	ldr	r1, [r7, #12]
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008130:	441a      	add	r2, r3
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008136:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800813a:	2b00      	cmp	r3, #0
 800813c:	d114      	bne.n	8008168 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800813e:	7f3b      	ldrb	r3, [r7, #28]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d011      	beq.n	8008168 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008144:	f107 0314 	add.w	r3, r7, #20
 8008148:	461a      	mov	r2, r3
 800814a:	2104      	movs	r1, #4
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff fc8b 	bl	8007a68 <get_sequence_step_timeout>
 8008152:	4603      	mov	r3, r0
 8008154:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800815c:	6979      	ldr	r1, [r7, #20]
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008162:	441a      	add	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008168:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800816c:	2b00      	cmp	r3, #0
 800816e:	d103      	bne.n	8008178 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008178:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800817c:	4618      	mov	r0, r3
 800817e:	3740      	adds	r7, #64	; 0x40
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800818e:	2300      	movs	r3, #0
 8008190:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008196:	e0c6      	b.n	8008326 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	4413      	add	r3, r2
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	74fb      	strb	r3, [r7, #19]
		Index++;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	3301      	adds	r3, #1
 80081a6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80081a8:	7cfb      	ldrb	r3, [r7, #19]
 80081aa:	2bff      	cmp	r3, #255	; 0xff
 80081ac:	f040 808d 	bne.w	80082ca <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	4413      	add	r3, r2
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	747b      	strb	r3, [r7, #17]
			Index++;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	3301      	adds	r3, #1
 80081be:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80081c0:	7c7b      	ldrb	r3, [r7, #17]
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d87e      	bhi.n	80082c4 <VL53L0X_load_tuning_settings+0x140>
 80081c6:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <VL53L0X_load_tuning_settings+0x48>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	080081dd 	.word	0x080081dd
 80081d0:	08008217 	.word	0x08008217
 80081d4:	08008251 	.word	0x08008251
 80081d8:	0800828b 	.word	0x0800828b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	4413      	add	r3, r2
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	743b      	strb	r3, [r7, #16]
				Index++;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	3301      	adds	r3, #1
 80081ea:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4413      	add	r3, r2
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	3301      	adds	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80081fc:	7c3b      	ldrb	r3, [r7, #16]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	b29a      	uxth	r2, r3
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	b29b      	uxth	r3, r3
 8008208:	4413      	add	r3, r2
 800820a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	89ba      	ldrh	r2, [r7, #12]
 8008210:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 8008214:	e087      	b.n	8008326 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	4413      	add	r3, r2
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	743b      	strb	r3, [r7, #16]
				Index++;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	3301      	adds	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	4413      	add	r3, r2
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	3301      	adds	r3, #1
 8008234:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008236:	7c3b      	ldrb	r3, [r7, #16]
 8008238:	b29b      	uxth	r3, r3
 800823a:	021b      	lsls	r3, r3, #8
 800823c:	b29a      	uxth	r2, r3
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	b29b      	uxth	r3, r3
 8008242:	4413      	add	r3, r2
 8008244:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	89ba      	ldrh	r2, [r7, #12]
 800824a:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 800824e:	e06a      	b.n	8008326 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	4413      	add	r3, r2
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	743b      	strb	r3, [r7, #16]
				Index++;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	3301      	adds	r3, #1
 800825e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	4413      	add	r3, r2
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	73fb      	strb	r3, [r7, #15]
				Index++;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	3301      	adds	r3, #1
 800826e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008270:	7c3b      	ldrb	r3, [r7, #16]
 8008272:	b29b      	uxth	r3, r3
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	b29a      	uxth	r2, r3
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	b29b      	uxth	r3, r3
 800827c:	4413      	add	r3, r2
 800827e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	89ba      	ldrh	r2, [r7, #12]
 8008284:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 8008288:	e04d      	b.n	8008326 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	4413      	add	r3, r2
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	743b      	strb	r3, [r7, #16]
				Index++;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	3301      	adds	r3, #1
 8008298:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	4413      	add	r3, r2
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	73fb      	strb	r3, [r7, #15]
				Index++;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	3301      	adds	r3, #1
 80082a8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80082aa:	7c3b      	ldrb	r3, [r7, #16]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	4413      	add	r3, r2
 80082b8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	89ba      	ldrh	r2, [r7, #12]
 80082be:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 80082c2:	e030      	b.n	8008326 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80082c4:	23fc      	movs	r3, #252	; 0xfc
 80082c6:	77fb      	strb	r3, [r7, #31]
 80082c8:	e02d      	b.n	8008326 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80082ca:	7cfb      	ldrb	r3, [r7, #19]
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d828      	bhi.n	8008322 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	4413      	add	r3, r2
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	74bb      	strb	r3, [r7, #18]
			Index++;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	3301      	adds	r3, #1
 80082de:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80082e0:	2300      	movs	r3, #0
 80082e2:	61bb      	str	r3, [r7, #24]
 80082e4:	e00f      	b.n	8008306 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	4413      	add	r3, r2
 80082ec:	7819      	ldrb	r1, [r3, #0]
 80082ee:	f107 0208 	add.w	r2, r7, #8
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	4413      	add	r3, r2
 80082f6:	460a      	mov	r2, r1
 80082f8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	3301      	adds	r3, #1
 80082fe:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	3301      	adds	r3, #1
 8008304:	61bb      	str	r3, [r7, #24]
 8008306:	7cfb      	ldrb	r3, [r7, #19]
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	429a      	cmp	r2, r3
 800830c:	dbeb      	blt.n	80082e6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800830e:	7cfb      	ldrb	r3, [r7, #19]
 8008310:	f107 0208 	add.w	r2, r7, #8
 8008314:	7cb9      	ldrb	r1, [r7, #18]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fdaa 	bl	8008e70 <VL53L0X_WriteMulti>
 800831c:	4603      	mov	r3, r0
 800831e:	77fb      	strb	r3, [r7, #31]
 8008320:	e001      	b.n	8008326 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008322:	23fc      	movs	r3, #252	; 0xfc
 8008324:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	4413      	add	r3, r2
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d004      	beq.n	800833c <VL53L0X_load_tuning_settings+0x1b8>
 8008332:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f43f af2e 	beq.w	8008198 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800833c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3720      	adds	r7, #32
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b088      	sub	sp, #32
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008354:	2300      	movs	r3, #0
 8008356:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800835e:	f107 0313 	add.w	r3, r7, #19
 8008362:	4619      	mov	r1, r3
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f7fc ff3d 	bl	80051e4 <VL53L0X_GetXTalkCompensationEnable>
 800836a:	4603      	mov	r3, r0
 800836c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800836e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d111      	bne.n	800839a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008376:	7cfb      	ldrb	r3, [r7, #19]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00e      	beq.n	800839a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	8a9b      	ldrh	r3, [r3, #20]
 8008386:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	fb02 f303 	mul.w	r3, r2, r3
 800838e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	3380      	adds	r3, #128	; 0x80
 8008394:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800839a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3720      	adds	r7, #32
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b086      	sub	sp, #24
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	60f8      	str	r0, [r7, #12]
 80083ae:	60b9      	str	r1, [r7, #8]
 80083b0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083b2:	2300      	movs	r3, #0
 80083b4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80083be:	f107 0310 	add.w	r3, r7, #16
 80083c2:	461a      	mov	r2, r3
 80083c4:	68b9      	ldr	r1, [r7, #8]
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f7ff ffbe 	bl	8008348 <VL53L0X_get_total_xtalk_rate>
 80083cc:	4603      	mov	r3, r0
 80083ce:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80083d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d105      	bne.n	80083e4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	441a      	add	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	601a      	str	r2, [r3, #0]

	return Status;
 80083e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 80083f0:	b084      	sub	sp, #16
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	f107 0c18 	add.w	ip, r7, #24
 80083fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008400:	2300      	movs	r3, #0
 8008402:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	60bb      	str	r3, [r7, #8]
	int index = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 8008410:	2300      	movs	r3, #0
 8008412:	607b      	str	r3, [r7, #4]
 8008414:	e00d      	b.n	8008432 <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f107 0218 	add.w	r2, r7, #24
 800841c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008420:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008422:	429a      	cmp	r2, r3
 8008424:	d802      	bhi.n	800842c <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60bb      	str	r3, [r7, #8]
			break;
 800842a:	e006      	b.n	800843a <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3301      	adds	r3, #1
 8008430:	607b      	str	r3, [r7, #4]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008436:	429a      	cmp	r2, r3
 8008438:	d8ed      	bhi.n	8008416 <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 800843a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	429a      	cmp	r2, r3
 8008440:	d105      	bne.n	800844e <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 8008442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008444:	3b01      	subs	r3, #1
 8008446:	60bb      	str	r3, [r7, #8]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	e008      	b.n	8008460 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	e002      	b.n	8008460 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	3b01      	subs	r3, #1
 800845e:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008464:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800846a:	601a      	str	r2, [r3, #0]

	return Status;
 800846c:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	b004      	add	sp, #16
 800847c:	4770      	bx	lr

0800847e <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 800847e:	b5b0      	push	{r4, r5, r7, lr}
 8008480:	b0ba      	sub	sp, #232	; 0xe8
 8008482:	af0e      	add	r7, sp, #56	; 0x38
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800848a:	2300      	movs	r3, #0
 800848c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008498:	f107 031c 	add.w	r3, r7, #28
 800849c:	4619      	mov	r1, r3
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f7fc fbce 	bl	8004c40 <VL53L0X_GetDeviceParameters>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 80084aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d803      	bhi.n	80084ba <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 80084b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084b8:	e07c      	b.n	80085b4 <VL53L0X_calc_dmax+0x136>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 80084ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d304      	bcc.n	80084cc <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 80084c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084ca:	e073      	b.n	80085b4 <VL53L0X_calc_dmax+0x136>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 80084cc:	f107 0314 	add.w	r3, r7, #20
 80084d0:	930d      	str	r3, [sp, #52]	; 0x34
 80084d2:	f107 0318 	add.w	r3, r7, #24
 80084d6:	930c      	str	r3, [sp, #48]	; 0x30
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	930b      	str	r3, [sp, #44]	; 0x2c
 80084dc:	2307      	movs	r3, #7
 80084de:	930a      	str	r3, [sp, #40]	; 0x28
 80084e0:	466d      	mov	r5, sp
 80084e2:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80084e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80084f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80084f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80084fc:	f7ff ff78 	bl	80083f0 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	429a      	cmp	r2, r3
 8008506:	d109      	bne.n	800851c <VL53L0X_calc_dmax+0x9e>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	3314      	adds	r3, #20
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	33b0      	adds	r3, #176	; 0xb0
 8008510:	443b      	add	r3, r7
 8008512:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8008516:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800851a:	e04b      	b.n	80085b4 <VL53L0X_calc_dmax+0x136>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	330e      	adds	r3, #14
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	33b0      	adds	r3, #176	; 0xb0
 8008524:	443b      	add	r3, r7
 8008526:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800852a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	330e      	adds	r3, #14
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	33b0      	adds	r3, #176	; 0xb0
 8008536:	443b      	add	r3, r7
 8008538:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800853c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	3314      	adds	r3, #20
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	33b0      	adds	r3, #176	; 0xb0
 8008548:	443b      	add	r3, r7
 800854a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800854e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	3314      	adds	r3, #20
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	33b0      	adds	r3, #176	; 0xb0
 800855a:	443b      	add	r3, r7
 800855c:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8008560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 8008564:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008568:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800856c:	429a      	cmp	r2, r3
 800856e:	d01d      	beq.n	80085ac <VL53L0X_calc_dmax+0x12e>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 8008570:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008578:	1ad2      	subs	r2, r2, r3
 800857a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800857e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008582:	1acb      	subs	r3, r1, r3
 8008584:	0a1b      	lsrs	r3, r3, #8
 8008586:	fbb2 f3f3 	udiv	r3, r2, r3
 800858a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 800858e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 8008596:	0a1b      	lsrs	r3, r3, #8
 8008598:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800859c:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 80085a0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80085a4:	4413      	add	r3, r2
 80085a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085aa:	e003      	b.n	80085b4 <VL53L0X_calc_dmax+0x136>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 80085ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 80085b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085b8:	0c1a      	lsrs	r2, r3, #16
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80085be:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	37b0      	adds	r7, #176	; 0xb0
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080085cc <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b0b0      	sub	sp, #192	; 0xc0
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80085d8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80085dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80085e0:	f44f 7316 	mov.w	r3, #600	; 0x258
 80085e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 80085e8:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80085ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80085f0:	f241 235c 	movw	r3, #4700	; 0x125c
 80085f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80085f8:	4b98      	ldr	r3, [pc, #608]	; (800885c <VL53L0X_calc_sigma_estimate+0x290>)
 80085fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80085fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008606:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800860a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800860e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008616:	4b92      	ldr	r3, [pc, #584]	; (8008860 <VL53L0X_calc_sigma_estimate+0x294>)
 8008618:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800861a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800861e:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008620:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008624:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 8008626:	f240 6377 	movw	r3, #1655	; 0x677
 800862a:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800862c:	2300      	movs	r3, #0
 800862e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008640:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8008644:	0c1b      	lsrs	r3, r3, #16
 8008646:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 8008648:	f107 0314 	add.w	r3, r7, #20
 800864c:	461a      	mov	r2, r3
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f7ff fea8 	bl	80083a6 <VL53L0X_get_total_signal_rate>
 8008656:	4603      	mov	r3, r0
 8008658:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800865c:	f107 0318 	add.w	r3, r7, #24
 8008660:	461a      	mov	r2, r3
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f7ff fe6f 	bl	8008348 <VL53L0X_get_total_xtalk_rate>
 800866a:	4603      	mov	r3, r0
 800866c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008676:	fb02 f303 	mul.w	r3, r2, r3
 800867a:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800867c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800867e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008682:	0c1b      	lsrs	r3, r3, #16
 8008684:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800868c:	fb02 f303 	mul.w	r3, r2, r3
 8008690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008694:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800869a:	429a      	cmp	r2, r3
 800869c:	d902      	bls.n	80086a4 <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800869e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80086a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d160      	bne.n	800876e <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80086b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80086bc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80086c0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80086c4:	461a      	mov	r2, r3
 80086c6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f7ff f978 	bl	80079c0 <VL53L0X_calc_timeout_mclks>
 80086d0:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80086d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80086e2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80086e6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80086ea:	461a      	mov	r2, r3
 80086ec:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff f965 	bl	80079c0 <VL53L0X_calc_timeout_mclks>
 80086f6:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80086f8:	2303      	movs	r3, #3
 80086fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 80086fe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8008702:	2b08      	cmp	r3, #8
 8008704:	d102      	bne.n	800870c <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 8008706:	2302      	movs	r3, #2
 8008708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800870c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800870e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008710:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008712:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008716:	fb02 f303 	mul.w	r3, r2, r3
 800871a:	02db      	lsls	r3, r3, #11
 800871c:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800871e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008720:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008724:	4a4f      	ldr	r2, [pc, #316]	; (8008864 <VL53L0X_calc_sigma_estimate+0x298>)
 8008726:	fba2 2303 	umull	r2, r3, r2, r3
 800872a:	099b      	lsrs	r3, r3, #6
 800872c:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 800872e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008730:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008732:	fb02 f303 	mul.w	r3, r2, r3
 8008736:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800873a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800873e:	4a49      	ldr	r2, [pc, #292]	; (8008864 <VL53L0X_calc_sigma_estimate+0x298>)
 8008740:	fba2 2303 	umull	r2, r3, r2, r3
 8008744:	099b      	lsrs	r3, r3, #6
 8008746:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	3380      	adds	r3, #128	; 0x80
 800874c:	0a1b      	lsrs	r3, r3, #8
 800874e:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008754:	fb02 f303 	mul.w	r3, r2, r3
 8008758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800875c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008760:	3380      	adds	r3, #128	; 0x80
 8008762:	0a1b      	lsrs	r3, r3, #8
 8008764:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	021b      	lsls	r3, r3, #8
 800876c:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800876e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 8008776:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800877a:	e14a      	b.n	8008a12 <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 800877c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800877e:	2b00      	cmp	r3, #0
 8008780:	d109      	bne.n	8008796 <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008788:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008790:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008794:	e13b      	b.n	8008a0e <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 8008796:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800879a:	2b00      	cmp	r3, #0
 800879c:	d102      	bne.n	80087a4 <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 800879e:	2301      	movs	r3, #1
 80087a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80087a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087a8:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80087aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087ac:	041a      	lsls	r2, r3, #16
 80087ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80087b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d903      	bls.n	80087cc <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80087c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80087cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087d4:	fb02 f303 	mul.w	r3, r2, r3
 80087d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80087dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80087e0:	4613      	mov	r3, r2
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fe fb44 	bl	8006e76 <VL53L0X_isqrt>
 80087ee:	4603      	mov	r3, r0
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	891b      	ldrh	r3, [r3, #8]
 80087f8:	461a      	mov	r2, r3
 80087fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087fc:	fb02 f303 	mul.w	r3, r2, r3
 8008800:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008804:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800880a:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800880c:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800880e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008812:	4a14      	ldr	r2, [pc, #80]	; (8008864 <VL53L0X_calc_sigma_estimate+0x298>)
 8008814:	fba2 2303 	umull	r2, r3, r2, r3
 8008818:	099b      	lsrs	r3, r3, #6
 800881a:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800881c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800881e:	041b      	lsls	r3, r3, #16
 8008820:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008824:	4a0f      	ldr	r2, [pc, #60]	; (8008864 <VL53L0X_calc_sigma_estimate+0x298>)
 8008826:	fba2 2303 	umull	r2, r3, r2, r3
 800882a:	099b      	lsrs	r3, r3, #6
 800882c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 800882e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008830:	021b      	lsls	r3, r3, #8
 8008832:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8008834:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008838:	fbb2 f3f3 	udiv	r3, r2, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	bfb8      	it	lt
 8008840:	425b      	neglt	r3, r3
 8008842:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008846:	021b      	lsls	r3, r3, #8
 8008848:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	7e1b      	ldrb	r3, [r3, #24]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 8008852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800885a:	e032      	b.n	80088c2 <VL53L0X_calc_sigma_estimate+0x2f6>
 800885c:	028f87ae 	.word	0x028f87ae
 8008860:	0006999a 	.word	0x0006999a
 8008864:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 8008868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800886a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800886e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008872:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8008876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008878:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800887c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008880:	fb02 f303 	mul.w	r3, r2, r3
 8008884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008888:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800888c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800888e:	4413      	add	r3, r2
 8008890:	0c1b      	lsrs	r3, r3, #16
 8008892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800889a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800889e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 80088a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088a6:	085b      	lsrs	r3, r3, #1
 80088a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80088ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088b0:	fb03 f303 	mul.w	r3, r3, r3
 80088b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80088b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088bc:	0b9b      	lsrs	r3, r3, #14
 80088be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80088c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088c8:	fb02 f303 	mul.w	r3, r2, r3
 80088cc:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80088ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80088d4:	0c1b      	lsrs	r3, r3, #16
 80088d6:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80088d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088da:	fb03 f303 	mul.w	r3, r3, r3
 80088de:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 80088e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088e4:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80088ec:	0c1b      	lsrs	r3, r3, #16
 80088ee:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80088f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f2:	fb03 f303 	mul.w	r3, r3, r3
 80088f6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80088f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	4413      	add	r3, r2
 80088fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008902:	f7fe fab8 	bl	8006e76 <VL53L0X_isqrt>
 8008906:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890a:	041b      	lsls	r3, r3, #16
 800890c:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	3332      	adds	r3, #50	; 0x32
 8008912:	4a42      	ldr	r2, [pc, #264]	; (8008a1c <VL53L0X_calc_sigma_estimate+0x450>)
 8008914:	fba2 2303 	umull	r2, r3, r2, r3
 8008918:	095a      	lsrs	r2, r3, #5
 800891a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800891c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008924:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008928:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800892c:	fb02 f303 	mul.w	r3, r2, r3
 8008930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008934:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008938:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800893c:	3308      	adds	r3, #8
 800893e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8008942:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008946:	4a36      	ldr	r2, [pc, #216]	; (8008a20 <VL53L0X_calc_sigma_estimate+0x454>)
 8008948:	fba2 2303 	umull	r2, r3, r2, r3
 800894c:	0b5b      	lsrs	r3, r3, #13
 800894e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008952:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800895a:	429a      	cmp	r2, r3
 800895c:	d903      	bls.n	8008966 <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 800895e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008962:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 8008966:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800896a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800896e:	4413      	add	r3, r2
 8008970:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008974:	4a2b      	ldr	r2, [pc, #172]	; (8008a24 <VL53L0X_calc_sigma_estimate+0x458>)
 8008976:	fba2 2303 	umull	r2, r3, r2, r3
 800897a:	099b      	lsrs	r3, r3, #6
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8008982:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008986:	441a      	add	r2, r3
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	fbb2 f3f3 	udiv	r3, r2, r3
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe fa71 	bl	8006e76 <VL53L0X_isqrt>
 8008994:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	021b      	lsls	r3, r3, #8
 800899a:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80089a2:	4a20      	ldr	r2, [pc, #128]	; (8008a24 <VL53L0X_calc_sigma_estimate+0x458>)
 80089a4:	fba2 2303 	umull	r2, r3, r2, r3
 80089a8:	099b      	lsrs	r3, r3, #6
 80089aa:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80089ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089b0:	fb03 f303 	mul.w	r3, r3, r3
 80089b4:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	fb03 f303 	mul.w	r3, r3, r3
 80089bc:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80089be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	4413      	add	r3, r2
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fe fa56 	bl	8006e76 <VL53L0X_isqrt>
 80089ca:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089d2:	fb02 f303 	mul.w	r3, r2, r3
 80089d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80089da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d009      	beq.n	80089f4 <VL53L0X_calc_sigma_estimate+0x428>
 80089e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <VL53L0X_calc_sigma_estimate+0x428>
 80089e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80089ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d903      	bls.n	80089fc <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 80089f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008a02:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	37c0      	adds	r7, #192	; 0xc0
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	51eb851f 	.word	0x51eb851f
 8008a20:	d1b71759 	.word	0xd1b71759
 8008a24:	10624dd3 	.word	0x10624dd3

08008a28 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b090      	sub	sp, #64	; 0x40
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	607a      	str	r2, [r7, #4]
 8008a32:	461a      	mov	r2, r3
 8008a34:	460b      	mov	r3, r1
 8008a36:	72fb      	strb	r3, [r7, #11]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008a54:	2300      	movs	r3, #0
 8008a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008a7a:	7afb      	ldrb	r3, [r7, #11]
 8008a7c:	10db      	asrs	r3, r3, #3
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 030f 	and.w	r3, r3, #15
 8008a84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008a88:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d017      	beq.n	8008ac0 <VL53L0X_get_pal_range_status+0x98>
 8008a90:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008a94:	2b05      	cmp	r3, #5
 8008a96:	d013      	beq.n	8008ac0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008a98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008a9c:	2b07      	cmp	r3, #7
 8008a9e:	d00f      	beq.n	8008ac0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008aa0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008aa4:	2b0c      	cmp	r3, #12
 8008aa6:	d00b      	beq.n	8008ac0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008aa8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008aac:	2b0d      	cmp	r3, #13
 8008aae:	d007      	beq.n	8008ac0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008ab0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ab4:	2b0e      	cmp	r3, #14
 8008ab6:	d003      	beq.n	8008ac0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008ab8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008abc:	2b0f      	cmp	r3, #15
 8008abe:	d103      	bne.n	8008ac8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008ac6:	e002      	b.n	8008ace <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008ace:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d109      	bne.n	8008aea <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008ad6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008ada:	461a      	mov	r2, r3
 8008adc:	2100      	movs	r1, #0
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f7fc fc54 	bl	800538c <VL53L0X_GetLimitCheckEnable>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8008aea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d03c      	beq.n	8008b6c <VL53L0X_get_pal_range_status+0x144>
 8008af2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d138      	bne.n	8008b6c <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8008afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008afe:	461a      	mov	r2, r3
 8008b00:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f7ff fd62 	bl	80085cc <VL53L0X_calc_sigma_estimate>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 8008b0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10a      	bne.n	8008b2c <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 8008b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	f107 0210 	add.w	r2, r7, #16
 8008b1e:	4619      	mov	r1, r3
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7ff fcac 	bl	800847e <VL53L0X_calc_dmax>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008b2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d103      	bne.n	8008b3c <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b3a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008b3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d113      	bne.n	8008b6c <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008b44:	f107 0320 	add.w	r3, r7, #32
 8008b48:	461a      	mov	r2, r3
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f7fc fca3 	bl	8005498 <VL53L0X_GetLimitCheckValue>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d006      	beq.n	8008b6c <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 8008b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b60:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d902      	bls.n	8008b6c <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008b6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d109      	bne.n	8008b88 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008b74:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008b78:	461a      	mov	r2, r3
 8008b7a:	2102      	movs	r1, #2
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f7fc fc05 	bl	800538c <VL53L0X_GetLimitCheckEnable>
 8008b82:	4603      	mov	r3, r0
 8008b84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008b88:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d044      	beq.n	8008c1a <VL53L0X_get_pal_range_status+0x1f2>
 8008b90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d140      	bne.n	8008c1a <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008b98:	f107 031c 	add.w	r3, r7, #28
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	2102      	movs	r1, #2
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f7fc fc79 	bl	8005498 <VL53L0X_GetLimitCheckValue>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008bac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d107      	bne.n	8008bc4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	21ff      	movs	r1, #255	; 0xff
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 f9b5 	bl	8008f28 <VL53L0X_WrByte>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008bc4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d109      	bne.n	8008be0 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 8008bcc:	f107 0316 	add.w	r3, r7, #22
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	21b6      	movs	r1, #182	; 0xb6
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 fa53 	bl	8009080 <VL53L0X_RdWord>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8008be0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d107      	bne.n	8008bf8 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008be8:	2200      	movs	r2, #0
 8008bea:	21ff      	movs	r1, #255	; 0xff
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 f99b 	bl	8008f28 <VL53L0X_WrByte>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008bf8:	8afb      	ldrh	r3, [r7, #22]
 8008bfa:	025b      	lsls	r3, r3, #9
 8008bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c02:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d006      	beq.n	8008c1a <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008c0c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d902      	bls.n	8008c1a <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008c14:	2301      	movs	r3, #1
 8008c16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008c1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d109      	bne.n	8008c36 <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c26:	461a      	mov	r2, r3
 8008c28:	2103      	movs	r1, #3
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f7fc fbae 	bl	800538c <VL53L0X_GetLimitCheckEnable>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008c36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d023      	beq.n	8008c86 <VL53L0X_get_pal_range_status+0x25e>
 8008c3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d11f      	bne.n	8008c86 <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008c46:	893b      	ldrh	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d102      	bne.n	8008c52 <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c50:	e005      	b.n	8008c5e <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	021a      	lsls	r2, r3, #8
 8008c56:	893b      	ldrh	r3, [r7, #8]
 8008c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c5c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008c5e:	f107 0318 	add.w	r3, r7, #24
 8008c62:	461a      	mov	r2, r3
 8008c64:	2103      	movs	r1, #3
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f7fc fc16 	bl	8005498 <VL53L0X_GetLimitCheckValue>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d006      	beq.n	8008c86 <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008c78:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d202      	bcs.n	8008c86 <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008c80:	2301      	movs	r3, #1
 8008c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d14a      	bne.n	8008d24 <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 8008c8e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d103      	bne.n	8008c9e <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 8008c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c98:	22ff      	movs	r2, #255	; 0xff
 8008c9a:	701a      	strb	r2, [r3, #0]
 8008c9c:	e042      	b.n	8008d24 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008c9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d007      	beq.n	8008cb6 <VL53L0X_get_pal_range_status+0x28e>
 8008ca6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d003      	beq.n	8008cb6 <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 8008cae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d103      	bne.n	8008cbe <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb8:	2205      	movs	r2, #5
 8008cba:	701a      	strb	r2, [r3, #0]
 8008cbc:	e032      	b.n	8008d24 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008cbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cc2:	2b06      	cmp	r3, #6
 8008cc4:	d003      	beq.n	8008cce <VL53L0X_get_pal_range_status+0x2a6>
 8008cc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cca:	2b09      	cmp	r3, #9
 8008ccc:	d103      	bne.n	8008cd6 <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cd0:	2204      	movs	r2, #4
 8008cd2:	701a      	strb	r2, [r3, #0]
 8008cd4:	e026      	b.n	8008d24 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 8008cd6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cda:	2b08      	cmp	r3, #8
 8008cdc:	d007      	beq.n	8008cee <VL53L0X_get_pal_range_status+0x2c6>
 8008cde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ce2:	2b0a      	cmp	r3, #10
 8008ce4:	d003      	beq.n	8008cee <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 8008ce6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d103      	bne.n	8008cf6 <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8008cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf0:	2203      	movs	r2, #3
 8008cf2:	701a      	strb	r2, [r3, #0]
 8008cf4:	e016      	b.n	8008d24 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 8008cf6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cfa:	2b04      	cmp	r3, #4
 8008cfc:	d003      	beq.n	8008d06 <VL53L0X_get_pal_range_status+0x2de>
 8008cfe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d103      	bne.n	8008d0e <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8008d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d08:	2202      	movs	r2, #2
 8008d0a:	701a      	strb	r2, [r3, #0]
 8008d0c:	e00a      	b.n	8008d24 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 8008d0e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d103      	bne.n	8008d1e <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8008d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d18:	2201      	movs	r2, #1
 8008d1a:	701a      	strb	r2, [r3, #0]
 8008d1c:	e002      	b.n	8008d24 <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d20:	2200      	movs	r2, #0
 8008d22:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008d24:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8008d28:	461a      	mov	r2, r3
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f7fc fb2d 	bl	800538c <VL53L0X_GetLimitCheckEnable>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008d38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d14f      	bne.n	8008de0 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008d40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <VL53L0X_get_pal_range_status+0x328>
 8008d48:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d103      	bne.n	8008d58 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d56:	e002      	b.n	8008d5e <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008d64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008d68:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d003      	beq.n	8008d78 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008d70:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d103      	bne.n	8008d80 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d7e:	e002      	b.n	8008d86 <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008d8c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008d90:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <VL53L0X_get_pal_range_status+0x378>
 8008d98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d103      	bne.n	8008da8 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008da0:	2301      	movs	r3, #1
 8008da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008da6:	e002      	b.n	8008dae <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008db4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008db8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <VL53L0X_get_pal_range_status+0x3a0>
 8008dc0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d103      	bne.n	8008dd0 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dce:	e002      	b.n	8008dd6 <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008ddc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008de0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3740      	adds	r7, #64	; 0x40
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b088      	sub	sp, #32
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	330a      	adds	r3, #10
 8008dfc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8008e0a:	b299      	uxth	r1, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	4613      	mov	r3, r2
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	f7f7 ff7c 	bl	8000d14 <HAL_I2C_Master_Transmit>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008e20:	693b      	ldr	r3, [r7, #16]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b088      	sub	sp, #32
 8008e2e:	af02      	add	r7, sp, #8
 8008e30:	60f8      	str	r0, [r7, #12]
 8008e32:	60b9      	str	r1, [r7, #8]
 8008e34:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	330a      	adds	r3, #10
 8008e3a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8008e48:	f043 0301 	orr.w	r3, r3, #1
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	b299      	uxth	r1, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	f7f8 f84e 	bl	8000efc <HAL_I2C_Master_Receive>
 8008e60:	4603      	mov	r3, r0
 8008e62:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008e64:	693b      	ldr	r3, [r7, #16]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	607a      	str	r2, [r7, #4]
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e80:	2300      	movs	r3, #0
 8008e82:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	2b3f      	cmp	r3, #63	; 0x3f
 8008e88:	d902      	bls.n	8008e90 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8008e8a:	f06f 0303 	mvn.w	r3, #3
 8008e8e:	e016      	b.n	8008ebe <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008e90:	4a0d      	ldr	r2, [pc, #52]	; (8008ec8 <VL53L0X_WriteMulti+0x58>)
 8008e92:	7afb      	ldrb	r3, [r7, #11]
 8008e94:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	6879      	ldr	r1, [r7, #4]
 8008e9a:	480c      	ldr	r0, [pc, #48]	; (8008ecc <VL53L0X_WriteMulti+0x5c>)
 8008e9c:	f000 f9c8 	bl	8009230 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	4908      	ldr	r1, [pc, #32]	; (8008ec8 <VL53L0X_WriteMulti+0x58>)
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f7ff ff9f 	bl	8008dec <_I2CWrite>
 8008eae:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008eb6:	23ec      	movs	r3, #236	; 0xec
 8008eb8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	200006e8 	.word	0x200006e8
 8008ecc:	200006e9 	.word	0x200006e9

08008ed0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	607a      	str	r2, [r7, #4]
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	460b      	mov	r3, r1
 8008ede:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008ee4:	f107 030b 	add.w	r3, r7, #11
 8008ee8:	2201      	movs	r2, #1
 8008eea:	4619      	mov	r1, r3
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7ff ff7d 	bl	8008dec <_I2CWrite>
 8008ef2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008efa:	23ec      	movs	r3, #236	; 0xec
 8008efc:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008efe:	e00c      	b.n	8008f1a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f7ff ff90 	bl	8008e2a <_I2CRead>
 8008f0a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f12:	23ec      	movs	r3, #236	; 0xec
 8008f14:	75fb      	strb	r3, [r7, #23]
 8008f16:	e000      	b.n	8008f1a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008f18:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
	...

08008f28 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
 8008f34:	4613      	mov	r3, r2
 8008f36:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008f3c:	4a0b      	ldr	r2, [pc, #44]	; (8008f6c <VL53L0X_WrByte+0x44>)
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8008f42:	4a0a      	ldr	r2, [pc, #40]	; (8008f6c <VL53L0X_WrByte+0x44>)
 8008f44:	78bb      	ldrb	r3, [r7, #2]
 8008f46:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008f48:	2202      	movs	r2, #2
 8008f4a:	4908      	ldr	r1, [pc, #32]	; (8008f6c <VL53L0X_WrByte+0x44>)
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff ff4d 	bl	8008dec <_I2CWrite>
 8008f52:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f5a:	23ec      	movs	r3, #236	; 0xec
 8008f5c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	200006e8 	.word	0x200006e8

08008f70 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008f84:	4a0e      	ldr	r2, [pc, #56]	; (8008fc0 <VL53L0X_WrWord+0x50>)
 8008f86:	78fb      	ldrb	r3, [r7, #3]
 8008f88:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8008f8a:	883b      	ldrh	r3, [r7, #0]
 8008f8c:	0a1b      	lsrs	r3, r3, #8
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <VL53L0X_WrWord+0x50>)
 8008f94:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8008f96:	883b      	ldrh	r3, [r7, #0]
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <VL53L0X_WrWord+0x50>)
 8008f9c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008f9e:	2203      	movs	r2, #3
 8008fa0:	4907      	ldr	r1, [pc, #28]	; (8008fc0 <VL53L0X_WrWord+0x50>)
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff ff22 	bl	8008dec <_I2CWrite>
 8008fa8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008fb0:	23ec      	movs	r3, #236	; 0xec
 8008fb2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	200006e8 	.word	0x200006e8

08008fc4 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	4608      	mov	r0, r1
 8008fce:	4611      	mov	r1, r2
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	70fb      	strb	r3, [r7, #3]
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	70bb      	strb	r3, [r7, #2]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8008fe2:	f107 020e 	add.w	r2, r7, #14
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f81e 	bl	800902c <VL53L0X_RdByte>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8008ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d110      	bne.n	800901e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8008ffc:	7bba      	ldrb	r2, [r7, #14]
 8008ffe:	78bb      	ldrb	r3, [r7, #2]
 8009000:	4013      	ands	r3, r2
 8009002:	b2da      	uxtb	r2, r3
 8009004:	787b      	ldrb	r3, [r7, #1]
 8009006:	4313      	orrs	r3, r2
 8009008:	b2db      	uxtb	r3, r3
 800900a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800900c:	7bba      	ldrb	r2, [r7, #14]
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7ff ff88 	bl	8008f28 <VL53L0X_WrByte>
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]
 800901c:	e000      	b.n	8009020 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800901e:	bf00      	nop
done:
    return Status;
 8009020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	460b      	mov	r3, r1
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800903a:	2300      	movs	r3, #0
 800903c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800903e:	f107 030b 	add.w	r3, r7, #11
 8009042:	2201      	movs	r2, #1
 8009044:	4619      	mov	r1, r3
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f7ff fed0 	bl	8008dec <_I2CWrite>
 800904c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009054:	23ec      	movs	r3, #236	; 0xec
 8009056:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009058:	e00c      	b.n	8009074 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800905a:	2201      	movs	r2, #1
 800905c:	6879      	ldr	r1, [r7, #4]
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7ff fee3 	bl	8008e2a <_I2CRead>
 8009064:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d002      	beq.n	8009072 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800906c:	23ec      	movs	r3, #236	; 0xec
 800906e:	75fb      	strb	r3, [r7, #23]
 8009070:	e000      	b.n	8009074 <VL53L0X_RdByte+0x48>
    }
done:
 8009072:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009074:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	460b      	mov	r3, r1
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800908e:	2300      	movs	r3, #0
 8009090:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009092:	f107 030b 	add.w	r3, r7, #11
 8009096:	2201      	movs	r2, #1
 8009098:	4619      	mov	r1, r3
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f7ff fea6 	bl	8008dec <_I2CWrite>
 80090a0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80090a8:	23ec      	movs	r3, #236	; 0xec
 80090aa:	75fb      	strb	r3, [r7, #23]
        goto done;
 80090ac:	e017      	b.n	80090de <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80090ae:	2202      	movs	r2, #2
 80090b0:	490e      	ldr	r1, [pc, #56]	; (80090ec <VL53L0X_RdWord+0x6c>)
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7ff feb9 	bl	8008e2a <_I2CRead>
 80090b8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80090c0:	23ec      	movs	r3, #236	; 0xec
 80090c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80090c4:	e00b      	b.n	80090de <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <VL53L0X_RdWord+0x6c>)
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	021b      	lsls	r3, r3, #8
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	4b06      	ldr	r3, [pc, #24]	; (80090ec <VL53L0X_RdWord+0x6c>)
 80090d2:	785b      	ldrb	r3, [r3, #1]
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	4413      	add	r3, r2
 80090d8:	b29a      	uxth	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80090de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	200006e8 	.word	0x200006e8

080090f0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	460b      	mov	r3, r1
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090fe:	2300      	movs	r3, #0
 8009100:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009102:	f107 030b 	add.w	r3, r7, #11
 8009106:	2201      	movs	r2, #1
 8009108:	4619      	mov	r1, r3
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7ff fe6e 	bl	8008dec <_I2CWrite>
 8009110:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009118:	23ec      	movs	r3, #236	; 0xec
 800911a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800911c:	e01b      	b.n	8009156 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800911e:	2204      	movs	r2, #4
 8009120:	4910      	ldr	r1, [pc, #64]	; (8009164 <VL53L0X_RdDWord+0x74>)
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f7ff fe81 	bl	8008e2a <_I2CRead>
 8009128:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009130:	23ec      	movs	r3, #236	; 0xec
 8009132:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009134:	e00f      	b.n	8009156 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8009136:	4b0b      	ldr	r3, [pc, #44]	; (8009164 <VL53L0X_RdDWord+0x74>)
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	061a      	lsls	r2, r3, #24
 800913c:	4b09      	ldr	r3, [pc, #36]	; (8009164 <VL53L0X_RdDWord+0x74>)
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	041b      	lsls	r3, r3, #16
 8009142:	441a      	add	r2, r3
 8009144:	4b07      	ldr	r3, [pc, #28]	; (8009164 <VL53L0X_RdDWord+0x74>)
 8009146:	789b      	ldrb	r3, [r3, #2]
 8009148:	021b      	lsls	r3, r3, #8
 800914a:	4413      	add	r3, r2
 800914c:	4a05      	ldr	r2, [pc, #20]	; (8009164 <VL53L0X_RdDWord+0x74>)
 800914e:	78d2      	ldrb	r2, [r2, #3]
 8009150:	441a      	add	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8009156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	200006e8 	.word	0x200006e8

08009168 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8009174:	2002      	movs	r0, #2
 8009176:	f7f7 faa1 	bl	80006bc <HAL_Delay>
    return status;
 800917a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80091c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800918c:	f7fb f9e0 	bl	8004550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009190:	480c      	ldr	r0, [pc, #48]	; (80091c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8009192:	490d      	ldr	r1, [pc, #52]	; (80091c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009194:	4a0d      	ldr	r2, [pc, #52]	; (80091cc <LoopForever+0xe>)
  movs r3, #0
 8009196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009198:	e002      	b.n	80091a0 <LoopCopyDataInit>

0800919a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800919a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800919c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800919e:	3304      	adds	r3, #4

080091a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091a4:	d3f9      	bcc.n	800919a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091a6:	4a0a      	ldr	r2, [pc, #40]	; (80091d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80091a8:	4c0a      	ldr	r4, [pc, #40]	; (80091d4 <LoopForever+0x16>)
  movs r3, #0
 80091aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091ac:	e001      	b.n	80091b2 <LoopFillZerobss>

080091ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091b0:	3204      	adds	r2, #4

080091b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091b4:	d3fb      	bcc.n	80091ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80091b6:	f000 f817 	bl	80091e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80091ba:	f7fa fe61 	bl	8003e80 <main>

080091be <LoopForever>:

LoopForever:
    b LoopForever
 80091be:	e7fe      	b.n	80091be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80091c0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80091c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091c8:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 80091cc:	08009d84 	.word	0x08009d84
  ldr r2, =_sbss
 80091d0:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 80091d4:	20000738 	.word	0x20000738

080091d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80091d8:	e7fe      	b.n	80091d8 <ADC1_IRQHandler>
	...

080091dc <__errno>:
 80091dc:	4b01      	ldr	r3, [pc, #4]	; (80091e4 <__errno+0x8>)
 80091de:	6818      	ldr	r0, [r3, #0]
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20000364 	.word	0x20000364

080091e8 <__libc_init_array>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	4d0d      	ldr	r5, [pc, #52]	; (8009220 <__libc_init_array+0x38>)
 80091ec:	4c0d      	ldr	r4, [pc, #52]	; (8009224 <__libc_init_array+0x3c>)
 80091ee:	1b64      	subs	r4, r4, r5
 80091f0:	10a4      	asrs	r4, r4, #2
 80091f2:	2600      	movs	r6, #0
 80091f4:	42a6      	cmp	r6, r4
 80091f6:	d109      	bne.n	800920c <__libc_init_array+0x24>
 80091f8:	4d0b      	ldr	r5, [pc, #44]	; (8009228 <__libc_init_array+0x40>)
 80091fa:	4c0c      	ldr	r4, [pc, #48]	; (800922c <__libc_init_array+0x44>)
 80091fc:	f000 fcaa 	bl	8009b54 <_init>
 8009200:	1b64      	subs	r4, r4, r5
 8009202:	10a4      	asrs	r4, r4, #2
 8009204:	2600      	movs	r6, #0
 8009206:	42a6      	cmp	r6, r4
 8009208:	d105      	bne.n	8009216 <__libc_init_array+0x2e>
 800920a:	bd70      	pop	{r4, r5, r6, pc}
 800920c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009210:	4798      	blx	r3
 8009212:	3601      	adds	r6, #1
 8009214:	e7ee      	b.n	80091f4 <__libc_init_array+0xc>
 8009216:	f855 3b04 	ldr.w	r3, [r5], #4
 800921a:	4798      	blx	r3
 800921c:	3601      	adds	r6, #1
 800921e:	e7f2      	b.n	8009206 <__libc_init_array+0x1e>
 8009220:	08009d7c 	.word	0x08009d7c
 8009224:	08009d7c 	.word	0x08009d7c
 8009228:	08009d7c 	.word	0x08009d7c
 800922c:	08009d80 	.word	0x08009d80

08009230 <memcpy>:
 8009230:	440a      	add	r2, r1
 8009232:	4291      	cmp	r1, r2
 8009234:	f100 33ff 	add.w	r3, r0, #4294967295
 8009238:	d100      	bne.n	800923c <memcpy+0xc>
 800923a:	4770      	bx	lr
 800923c:	b510      	push	{r4, lr}
 800923e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009242:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009246:	4291      	cmp	r1, r2
 8009248:	d1f9      	bne.n	800923e <memcpy+0xe>
 800924a:	bd10      	pop	{r4, pc}

0800924c <memset>:
 800924c:	4402      	add	r2, r0
 800924e:	4603      	mov	r3, r0
 8009250:	4293      	cmp	r3, r2
 8009252:	d100      	bne.n	8009256 <memset+0xa>
 8009254:	4770      	bx	lr
 8009256:	f803 1b01 	strb.w	r1, [r3], #1
 800925a:	e7f9      	b.n	8009250 <memset+0x4>

0800925c <sniprintf>:
 800925c:	b40c      	push	{r2, r3}
 800925e:	b530      	push	{r4, r5, lr}
 8009260:	4b17      	ldr	r3, [pc, #92]	; (80092c0 <sniprintf+0x64>)
 8009262:	1e0c      	subs	r4, r1, #0
 8009264:	681d      	ldr	r5, [r3, #0]
 8009266:	b09d      	sub	sp, #116	; 0x74
 8009268:	da08      	bge.n	800927c <sniprintf+0x20>
 800926a:	238b      	movs	r3, #139	; 0x8b
 800926c:	602b      	str	r3, [r5, #0]
 800926e:	f04f 30ff 	mov.w	r0, #4294967295
 8009272:	b01d      	add	sp, #116	; 0x74
 8009274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009278:	b002      	add	sp, #8
 800927a:	4770      	bx	lr
 800927c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009280:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009284:	bf14      	ite	ne
 8009286:	f104 33ff 	addne.w	r3, r4, #4294967295
 800928a:	4623      	moveq	r3, r4
 800928c:	9304      	str	r3, [sp, #16]
 800928e:	9307      	str	r3, [sp, #28]
 8009290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009294:	9002      	str	r0, [sp, #8]
 8009296:	9006      	str	r0, [sp, #24]
 8009298:	f8ad 3016 	strh.w	r3, [sp, #22]
 800929c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800929e:	ab21      	add	r3, sp, #132	; 0x84
 80092a0:	a902      	add	r1, sp, #8
 80092a2:	4628      	mov	r0, r5
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	f000 f907 	bl	80094b8 <_svfiprintf_r>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	bfbc      	itt	lt
 80092ae:	238b      	movlt	r3, #139	; 0x8b
 80092b0:	602b      	strlt	r3, [r5, #0]
 80092b2:	2c00      	cmp	r4, #0
 80092b4:	d0dd      	beq.n	8009272 <sniprintf+0x16>
 80092b6:	9b02      	ldr	r3, [sp, #8]
 80092b8:	2200      	movs	r2, #0
 80092ba:	701a      	strb	r2, [r3, #0]
 80092bc:	e7d9      	b.n	8009272 <sniprintf+0x16>
 80092be:	bf00      	nop
 80092c0:	20000364 	.word	0x20000364

080092c4 <strcpy>:
 80092c4:	4603      	mov	r3, r0
 80092c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092ca:	f803 2b01 	strb.w	r2, [r3], #1
 80092ce:	2a00      	cmp	r2, #0
 80092d0:	d1f9      	bne.n	80092c6 <strcpy+0x2>
 80092d2:	4770      	bx	lr

080092d4 <__retarget_lock_acquire_recursive>:
 80092d4:	4770      	bx	lr

080092d6 <__retarget_lock_release_recursive>:
 80092d6:	4770      	bx	lr

080092d8 <sbrk_aligned>:
 80092d8:	b570      	push	{r4, r5, r6, lr}
 80092da:	4e0e      	ldr	r6, [pc, #56]	; (8009314 <sbrk_aligned+0x3c>)
 80092dc:	460c      	mov	r4, r1
 80092de:	6831      	ldr	r1, [r6, #0]
 80092e0:	4605      	mov	r5, r0
 80092e2:	b911      	cbnz	r1, 80092ea <sbrk_aligned+0x12>
 80092e4:	f000 fb7c 	bl	80099e0 <_sbrk_r>
 80092e8:	6030      	str	r0, [r6, #0]
 80092ea:	4621      	mov	r1, r4
 80092ec:	4628      	mov	r0, r5
 80092ee:	f000 fb77 	bl	80099e0 <_sbrk_r>
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	d00a      	beq.n	800930c <sbrk_aligned+0x34>
 80092f6:	1cc4      	adds	r4, r0, #3
 80092f8:	f024 0403 	bic.w	r4, r4, #3
 80092fc:	42a0      	cmp	r0, r4
 80092fe:	d007      	beq.n	8009310 <sbrk_aligned+0x38>
 8009300:	1a21      	subs	r1, r4, r0
 8009302:	4628      	mov	r0, r5
 8009304:	f000 fb6c 	bl	80099e0 <_sbrk_r>
 8009308:	3001      	adds	r0, #1
 800930a:	d101      	bne.n	8009310 <sbrk_aligned+0x38>
 800930c:	f04f 34ff 	mov.w	r4, #4294967295
 8009310:	4620      	mov	r0, r4
 8009312:	bd70      	pop	{r4, r5, r6, pc}
 8009314:	20000730 	.word	0x20000730

08009318 <_malloc_r>:
 8009318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800931c:	1ccd      	adds	r5, r1, #3
 800931e:	f025 0503 	bic.w	r5, r5, #3
 8009322:	3508      	adds	r5, #8
 8009324:	2d0c      	cmp	r5, #12
 8009326:	bf38      	it	cc
 8009328:	250c      	movcc	r5, #12
 800932a:	2d00      	cmp	r5, #0
 800932c:	4607      	mov	r7, r0
 800932e:	db01      	blt.n	8009334 <_malloc_r+0x1c>
 8009330:	42a9      	cmp	r1, r5
 8009332:	d905      	bls.n	8009340 <_malloc_r+0x28>
 8009334:	230c      	movs	r3, #12
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	2600      	movs	r6, #0
 800933a:	4630      	mov	r0, r6
 800933c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009340:	4e2e      	ldr	r6, [pc, #184]	; (80093fc <_malloc_r+0xe4>)
 8009342:	f000 fb77 	bl	8009a34 <__malloc_lock>
 8009346:	6833      	ldr	r3, [r6, #0]
 8009348:	461c      	mov	r4, r3
 800934a:	bb34      	cbnz	r4, 800939a <_malloc_r+0x82>
 800934c:	4629      	mov	r1, r5
 800934e:	4638      	mov	r0, r7
 8009350:	f7ff ffc2 	bl	80092d8 <sbrk_aligned>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	4604      	mov	r4, r0
 8009358:	d14d      	bne.n	80093f6 <_malloc_r+0xde>
 800935a:	6834      	ldr	r4, [r6, #0]
 800935c:	4626      	mov	r6, r4
 800935e:	2e00      	cmp	r6, #0
 8009360:	d140      	bne.n	80093e4 <_malloc_r+0xcc>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	4631      	mov	r1, r6
 8009366:	4638      	mov	r0, r7
 8009368:	eb04 0803 	add.w	r8, r4, r3
 800936c:	f000 fb38 	bl	80099e0 <_sbrk_r>
 8009370:	4580      	cmp	r8, r0
 8009372:	d13a      	bne.n	80093ea <_malloc_r+0xd2>
 8009374:	6821      	ldr	r1, [r4, #0]
 8009376:	3503      	adds	r5, #3
 8009378:	1a6d      	subs	r5, r5, r1
 800937a:	f025 0503 	bic.w	r5, r5, #3
 800937e:	3508      	adds	r5, #8
 8009380:	2d0c      	cmp	r5, #12
 8009382:	bf38      	it	cc
 8009384:	250c      	movcc	r5, #12
 8009386:	4629      	mov	r1, r5
 8009388:	4638      	mov	r0, r7
 800938a:	f7ff ffa5 	bl	80092d8 <sbrk_aligned>
 800938e:	3001      	adds	r0, #1
 8009390:	d02b      	beq.n	80093ea <_malloc_r+0xd2>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	442b      	add	r3, r5
 8009396:	6023      	str	r3, [r4, #0]
 8009398:	e00e      	b.n	80093b8 <_malloc_r+0xa0>
 800939a:	6822      	ldr	r2, [r4, #0]
 800939c:	1b52      	subs	r2, r2, r5
 800939e:	d41e      	bmi.n	80093de <_malloc_r+0xc6>
 80093a0:	2a0b      	cmp	r2, #11
 80093a2:	d916      	bls.n	80093d2 <_malloc_r+0xba>
 80093a4:	1961      	adds	r1, r4, r5
 80093a6:	42a3      	cmp	r3, r4
 80093a8:	6025      	str	r5, [r4, #0]
 80093aa:	bf18      	it	ne
 80093ac:	6059      	strne	r1, [r3, #4]
 80093ae:	6863      	ldr	r3, [r4, #4]
 80093b0:	bf08      	it	eq
 80093b2:	6031      	streq	r1, [r6, #0]
 80093b4:	5162      	str	r2, [r4, r5]
 80093b6:	604b      	str	r3, [r1, #4]
 80093b8:	4638      	mov	r0, r7
 80093ba:	f104 060b 	add.w	r6, r4, #11
 80093be:	f000 fb3f 	bl	8009a40 <__malloc_unlock>
 80093c2:	f026 0607 	bic.w	r6, r6, #7
 80093c6:	1d23      	adds	r3, r4, #4
 80093c8:	1af2      	subs	r2, r6, r3
 80093ca:	d0b6      	beq.n	800933a <_malloc_r+0x22>
 80093cc:	1b9b      	subs	r3, r3, r6
 80093ce:	50a3      	str	r3, [r4, r2]
 80093d0:	e7b3      	b.n	800933a <_malloc_r+0x22>
 80093d2:	6862      	ldr	r2, [r4, #4]
 80093d4:	42a3      	cmp	r3, r4
 80093d6:	bf0c      	ite	eq
 80093d8:	6032      	streq	r2, [r6, #0]
 80093da:	605a      	strne	r2, [r3, #4]
 80093dc:	e7ec      	b.n	80093b8 <_malloc_r+0xa0>
 80093de:	4623      	mov	r3, r4
 80093e0:	6864      	ldr	r4, [r4, #4]
 80093e2:	e7b2      	b.n	800934a <_malloc_r+0x32>
 80093e4:	4634      	mov	r4, r6
 80093e6:	6876      	ldr	r6, [r6, #4]
 80093e8:	e7b9      	b.n	800935e <_malloc_r+0x46>
 80093ea:	230c      	movs	r3, #12
 80093ec:	603b      	str	r3, [r7, #0]
 80093ee:	4638      	mov	r0, r7
 80093f0:	f000 fb26 	bl	8009a40 <__malloc_unlock>
 80093f4:	e7a1      	b.n	800933a <_malloc_r+0x22>
 80093f6:	6025      	str	r5, [r4, #0]
 80093f8:	e7de      	b.n	80093b8 <_malloc_r+0xa0>
 80093fa:	bf00      	nop
 80093fc:	2000072c 	.word	0x2000072c

08009400 <__ssputs_r>:
 8009400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009404:	688e      	ldr	r6, [r1, #8]
 8009406:	429e      	cmp	r6, r3
 8009408:	4682      	mov	sl, r0
 800940a:	460c      	mov	r4, r1
 800940c:	4690      	mov	r8, r2
 800940e:	461f      	mov	r7, r3
 8009410:	d838      	bhi.n	8009484 <__ssputs_r+0x84>
 8009412:	898a      	ldrh	r2, [r1, #12]
 8009414:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009418:	d032      	beq.n	8009480 <__ssputs_r+0x80>
 800941a:	6825      	ldr	r5, [r4, #0]
 800941c:	6909      	ldr	r1, [r1, #16]
 800941e:	eba5 0901 	sub.w	r9, r5, r1
 8009422:	6965      	ldr	r5, [r4, #20]
 8009424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009428:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800942c:	3301      	adds	r3, #1
 800942e:	444b      	add	r3, r9
 8009430:	106d      	asrs	r5, r5, #1
 8009432:	429d      	cmp	r5, r3
 8009434:	bf38      	it	cc
 8009436:	461d      	movcc	r5, r3
 8009438:	0553      	lsls	r3, r2, #21
 800943a:	d531      	bpl.n	80094a0 <__ssputs_r+0xa0>
 800943c:	4629      	mov	r1, r5
 800943e:	f7ff ff6b 	bl	8009318 <_malloc_r>
 8009442:	4606      	mov	r6, r0
 8009444:	b950      	cbnz	r0, 800945c <__ssputs_r+0x5c>
 8009446:	230c      	movs	r3, #12
 8009448:	f8ca 3000 	str.w	r3, [sl]
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009452:	81a3      	strh	r3, [r4, #12]
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945c:	6921      	ldr	r1, [r4, #16]
 800945e:	464a      	mov	r2, r9
 8009460:	f7ff fee6 	bl	8009230 <memcpy>
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800946a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800946e:	81a3      	strh	r3, [r4, #12]
 8009470:	6126      	str	r6, [r4, #16]
 8009472:	6165      	str	r5, [r4, #20]
 8009474:	444e      	add	r6, r9
 8009476:	eba5 0509 	sub.w	r5, r5, r9
 800947a:	6026      	str	r6, [r4, #0]
 800947c:	60a5      	str	r5, [r4, #8]
 800947e:	463e      	mov	r6, r7
 8009480:	42be      	cmp	r6, r7
 8009482:	d900      	bls.n	8009486 <__ssputs_r+0x86>
 8009484:	463e      	mov	r6, r7
 8009486:	6820      	ldr	r0, [r4, #0]
 8009488:	4632      	mov	r2, r6
 800948a:	4641      	mov	r1, r8
 800948c:	f000 fab8 	bl	8009a00 <memmove>
 8009490:	68a3      	ldr	r3, [r4, #8]
 8009492:	1b9b      	subs	r3, r3, r6
 8009494:	60a3      	str	r3, [r4, #8]
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	4433      	add	r3, r6
 800949a:	6023      	str	r3, [r4, #0]
 800949c:	2000      	movs	r0, #0
 800949e:	e7db      	b.n	8009458 <__ssputs_r+0x58>
 80094a0:	462a      	mov	r2, r5
 80094a2:	f000 fb1f 	bl	8009ae4 <_realloc_r>
 80094a6:	4606      	mov	r6, r0
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d1e1      	bne.n	8009470 <__ssputs_r+0x70>
 80094ac:	6921      	ldr	r1, [r4, #16]
 80094ae:	4650      	mov	r0, sl
 80094b0:	f000 facc 	bl	8009a4c <_free_r>
 80094b4:	e7c7      	b.n	8009446 <__ssputs_r+0x46>
	...

080094b8 <_svfiprintf_r>:
 80094b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094bc:	4698      	mov	r8, r3
 80094be:	898b      	ldrh	r3, [r1, #12]
 80094c0:	061b      	lsls	r3, r3, #24
 80094c2:	b09d      	sub	sp, #116	; 0x74
 80094c4:	4607      	mov	r7, r0
 80094c6:	460d      	mov	r5, r1
 80094c8:	4614      	mov	r4, r2
 80094ca:	d50e      	bpl.n	80094ea <_svfiprintf_r+0x32>
 80094cc:	690b      	ldr	r3, [r1, #16]
 80094ce:	b963      	cbnz	r3, 80094ea <_svfiprintf_r+0x32>
 80094d0:	2140      	movs	r1, #64	; 0x40
 80094d2:	f7ff ff21 	bl	8009318 <_malloc_r>
 80094d6:	6028      	str	r0, [r5, #0]
 80094d8:	6128      	str	r0, [r5, #16]
 80094da:	b920      	cbnz	r0, 80094e6 <_svfiprintf_r+0x2e>
 80094dc:	230c      	movs	r3, #12
 80094de:	603b      	str	r3, [r7, #0]
 80094e0:	f04f 30ff 	mov.w	r0, #4294967295
 80094e4:	e0d1      	b.n	800968a <_svfiprintf_r+0x1d2>
 80094e6:	2340      	movs	r3, #64	; 0x40
 80094e8:	616b      	str	r3, [r5, #20]
 80094ea:	2300      	movs	r3, #0
 80094ec:	9309      	str	r3, [sp, #36]	; 0x24
 80094ee:	2320      	movs	r3, #32
 80094f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80094f8:	2330      	movs	r3, #48	; 0x30
 80094fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80096a4 <_svfiprintf_r+0x1ec>
 80094fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009502:	f04f 0901 	mov.w	r9, #1
 8009506:	4623      	mov	r3, r4
 8009508:	469a      	mov	sl, r3
 800950a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800950e:	b10a      	cbz	r2, 8009514 <_svfiprintf_r+0x5c>
 8009510:	2a25      	cmp	r2, #37	; 0x25
 8009512:	d1f9      	bne.n	8009508 <_svfiprintf_r+0x50>
 8009514:	ebba 0b04 	subs.w	fp, sl, r4
 8009518:	d00b      	beq.n	8009532 <_svfiprintf_r+0x7a>
 800951a:	465b      	mov	r3, fp
 800951c:	4622      	mov	r2, r4
 800951e:	4629      	mov	r1, r5
 8009520:	4638      	mov	r0, r7
 8009522:	f7ff ff6d 	bl	8009400 <__ssputs_r>
 8009526:	3001      	adds	r0, #1
 8009528:	f000 80aa 	beq.w	8009680 <_svfiprintf_r+0x1c8>
 800952c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800952e:	445a      	add	r2, fp
 8009530:	9209      	str	r2, [sp, #36]	; 0x24
 8009532:	f89a 3000 	ldrb.w	r3, [sl]
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 80a2 	beq.w	8009680 <_svfiprintf_r+0x1c8>
 800953c:	2300      	movs	r3, #0
 800953e:	f04f 32ff 	mov.w	r2, #4294967295
 8009542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009546:	f10a 0a01 	add.w	sl, sl, #1
 800954a:	9304      	str	r3, [sp, #16]
 800954c:	9307      	str	r3, [sp, #28]
 800954e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009552:	931a      	str	r3, [sp, #104]	; 0x68
 8009554:	4654      	mov	r4, sl
 8009556:	2205      	movs	r2, #5
 8009558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800955c:	4851      	ldr	r0, [pc, #324]	; (80096a4 <_svfiprintf_r+0x1ec>)
 800955e:	f7f6 fe67 	bl	8000230 <memchr>
 8009562:	9a04      	ldr	r2, [sp, #16]
 8009564:	b9d8      	cbnz	r0, 800959e <_svfiprintf_r+0xe6>
 8009566:	06d0      	lsls	r0, r2, #27
 8009568:	bf44      	itt	mi
 800956a:	2320      	movmi	r3, #32
 800956c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009570:	0711      	lsls	r1, r2, #28
 8009572:	bf44      	itt	mi
 8009574:	232b      	movmi	r3, #43	; 0x2b
 8009576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800957a:	f89a 3000 	ldrb.w	r3, [sl]
 800957e:	2b2a      	cmp	r3, #42	; 0x2a
 8009580:	d015      	beq.n	80095ae <_svfiprintf_r+0xf6>
 8009582:	9a07      	ldr	r2, [sp, #28]
 8009584:	4654      	mov	r4, sl
 8009586:	2000      	movs	r0, #0
 8009588:	f04f 0c0a 	mov.w	ip, #10
 800958c:	4621      	mov	r1, r4
 800958e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009592:	3b30      	subs	r3, #48	; 0x30
 8009594:	2b09      	cmp	r3, #9
 8009596:	d94e      	bls.n	8009636 <_svfiprintf_r+0x17e>
 8009598:	b1b0      	cbz	r0, 80095c8 <_svfiprintf_r+0x110>
 800959a:	9207      	str	r2, [sp, #28]
 800959c:	e014      	b.n	80095c8 <_svfiprintf_r+0x110>
 800959e:	eba0 0308 	sub.w	r3, r0, r8
 80095a2:	fa09 f303 	lsl.w	r3, r9, r3
 80095a6:	4313      	orrs	r3, r2
 80095a8:	9304      	str	r3, [sp, #16]
 80095aa:	46a2      	mov	sl, r4
 80095ac:	e7d2      	b.n	8009554 <_svfiprintf_r+0x9c>
 80095ae:	9b03      	ldr	r3, [sp, #12]
 80095b0:	1d19      	adds	r1, r3, #4
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	9103      	str	r1, [sp, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	bfbb      	ittet	lt
 80095ba:	425b      	neglt	r3, r3
 80095bc:	f042 0202 	orrlt.w	r2, r2, #2
 80095c0:	9307      	strge	r3, [sp, #28]
 80095c2:	9307      	strlt	r3, [sp, #28]
 80095c4:	bfb8      	it	lt
 80095c6:	9204      	strlt	r2, [sp, #16]
 80095c8:	7823      	ldrb	r3, [r4, #0]
 80095ca:	2b2e      	cmp	r3, #46	; 0x2e
 80095cc:	d10c      	bne.n	80095e8 <_svfiprintf_r+0x130>
 80095ce:	7863      	ldrb	r3, [r4, #1]
 80095d0:	2b2a      	cmp	r3, #42	; 0x2a
 80095d2:	d135      	bne.n	8009640 <_svfiprintf_r+0x188>
 80095d4:	9b03      	ldr	r3, [sp, #12]
 80095d6:	1d1a      	adds	r2, r3, #4
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	9203      	str	r2, [sp, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	bfb8      	it	lt
 80095e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80095e4:	3402      	adds	r4, #2
 80095e6:	9305      	str	r3, [sp, #20]
 80095e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80096b4 <_svfiprintf_r+0x1fc>
 80095ec:	7821      	ldrb	r1, [r4, #0]
 80095ee:	2203      	movs	r2, #3
 80095f0:	4650      	mov	r0, sl
 80095f2:	f7f6 fe1d 	bl	8000230 <memchr>
 80095f6:	b140      	cbz	r0, 800960a <_svfiprintf_r+0x152>
 80095f8:	2340      	movs	r3, #64	; 0x40
 80095fa:	eba0 000a 	sub.w	r0, r0, sl
 80095fe:	fa03 f000 	lsl.w	r0, r3, r0
 8009602:	9b04      	ldr	r3, [sp, #16]
 8009604:	4303      	orrs	r3, r0
 8009606:	3401      	adds	r4, #1
 8009608:	9304      	str	r3, [sp, #16]
 800960a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960e:	4826      	ldr	r0, [pc, #152]	; (80096a8 <_svfiprintf_r+0x1f0>)
 8009610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009614:	2206      	movs	r2, #6
 8009616:	f7f6 fe0b 	bl	8000230 <memchr>
 800961a:	2800      	cmp	r0, #0
 800961c:	d038      	beq.n	8009690 <_svfiprintf_r+0x1d8>
 800961e:	4b23      	ldr	r3, [pc, #140]	; (80096ac <_svfiprintf_r+0x1f4>)
 8009620:	bb1b      	cbnz	r3, 800966a <_svfiprintf_r+0x1b2>
 8009622:	9b03      	ldr	r3, [sp, #12]
 8009624:	3307      	adds	r3, #7
 8009626:	f023 0307 	bic.w	r3, r3, #7
 800962a:	3308      	adds	r3, #8
 800962c:	9303      	str	r3, [sp, #12]
 800962e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009630:	4433      	add	r3, r6
 8009632:	9309      	str	r3, [sp, #36]	; 0x24
 8009634:	e767      	b.n	8009506 <_svfiprintf_r+0x4e>
 8009636:	fb0c 3202 	mla	r2, ip, r2, r3
 800963a:	460c      	mov	r4, r1
 800963c:	2001      	movs	r0, #1
 800963e:	e7a5      	b.n	800958c <_svfiprintf_r+0xd4>
 8009640:	2300      	movs	r3, #0
 8009642:	3401      	adds	r4, #1
 8009644:	9305      	str	r3, [sp, #20]
 8009646:	4619      	mov	r1, r3
 8009648:	f04f 0c0a 	mov.w	ip, #10
 800964c:	4620      	mov	r0, r4
 800964e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009652:	3a30      	subs	r2, #48	; 0x30
 8009654:	2a09      	cmp	r2, #9
 8009656:	d903      	bls.n	8009660 <_svfiprintf_r+0x1a8>
 8009658:	2b00      	cmp	r3, #0
 800965a:	d0c5      	beq.n	80095e8 <_svfiprintf_r+0x130>
 800965c:	9105      	str	r1, [sp, #20]
 800965e:	e7c3      	b.n	80095e8 <_svfiprintf_r+0x130>
 8009660:	fb0c 2101 	mla	r1, ip, r1, r2
 8009664:	4604      	mov	r4, r0
 8009666:	2301      	movs	r3, #1
 8009668:	e7f0      	b.n	800964c <_svfiprintf_r+0x194>
 800966a:	ab03      	add	r3, sp, #12
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	462a      	mov	r2, r5
 8009670:	4b0f      	ldr	r3, [pc, #60]	; (80096b0 <_svfiprintf_r+0x1f8>)
 8009672:	a904      	add	r1, sp, #16
 8009674:	4638      	mov	r0, r7
 8009676:	f3af 8000 	nop.w
 800967a:	1c42      	adds	r2, r0, #1
 800967c:	4606      	mov	r6, r0
 800967e:	d1d6      	bne.n	800962e <_svfiprintf_r+0x176>
 8009680:	89ab      	ldrh	r3, [r5, #12]
 8009682:	065b      	lsls	r3, r3, #25
 8009684:	f53f af2c 	bmi.w	80094e0 <_svfiprintf_r+0x28>
 8009688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800968a:	b01d      	add	sp, #116	; 0x74
 800968c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009690:	ab03      	add	r3, sp, #12
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	462a      	mov	r2, r5
 8009696:	4b06      	ldr	r3, [pc, #24]	; (80096b0 <_svfiprintf_r+0x1f8>)
 8009698:	a904      	add	r1, sp, #16
 800969a:	4638      	mov	r0, r7
 800969c:	f000 f87a 	bl	8009794 <_printf_i>
 80096a0:	e7eb      	b.n	800967a <_svfiprintf_r+0x1c2>
 80096a2:	bf00      	nop
 80096a4:	08009d40 	.word	0x08009d40
 80096a8:	08009d4a 	.word	0x08009d4a
 80096ac:	00000000 	.word	0x00000000
 80096b0:	08009401 	.word	0x08009401
 80096b4:	08009d46 	.word	0x08009d46

080096b8 <_printf_common>:
 80096b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096bc:	4616      	mov	r6, r2
 80096be:	4699      	mov	r9, r3
 80096c0:	688a      	ldr	r2, [r1, #8]
 80096c2:	690b      	ldr	r3, [r1, #16]
 80096c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096c8:	4293      	cmp	r3, r2
 80096ca:	bfb8      	it	lt
 80096cc:	4613      	movlt	r3, r2
 80096ce:	6033      	str	r3, [r6, #0]
 80096d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096d4:	4607      	mov	r7, r0
 80096d6:	460c      	mov	r4, r1
 80096d8:	b10a      	cbz	r2, 80096de <_printf_common+0x26>
 80096da:	3301      	adds	r3, #1
 80096dc:	6033      	str	r3, [r6, #0]
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	0699      	lsls	r1, r3, #26
 80096e2:	bf42      	ittt	mi
 80096e4:	6833      	ldrmi	r3, [r6, #0]
 80096e6:	3302      	addmi	r3, #2
 80096e8:	6033      	strmi	r3, [r6, #0]
 80096ea:	6825      	ldr	r5, [r4, #0]
 80096ec:	f015 0506 	ands.w	r5, r5, #6
 80096f0:	d106      	bne.n	8009700 <_printf_common+0x48>
 80096f2:	f104 0a19 	add.w	sl, r4, #25
 80096f6:	68e3      	ldr	r3, [r4, #12]
 80096f8:	6832      	ldr	r2, [r6, #0]
 80096fa:	1a9b      	subs	r3, r3, r2
 80096fc:	42ab      	cmp	r3, r5
 80096fe:	dc26      	bgt.n	800974e <_printf_common+0x96>
 8009700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009704:	1e13      	subs	r3, r2, #0
 8009706:	6822      	ldr	r2, [r4, #0]
 8009708:	bf18      	it	ne
 800970a:	2301      	movne	r3, #1
 800970c:	0692      	lsls	r2, r2, #26
 800970e:	d42b      	bmi.n	8009768 <_printf_common+0xb0>
 8009710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009714:	4649      	mov	r1, r9
 8009716:	4638      	mov	r0, r7
 8009718:	47c0      	blx	r8
 800971a:	3001      	adds	r0, #1
 800971c:	d01e      	beq.n	800975c <_printf_common+0xa4>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	68e5      	ldr	r5, [r4, #12]
 8009722:	6832      	ldr	r2, [r6, #0]
 8009724:	f003 0306 	and.w	r3, r3, #6
 8009728:	2b04      	cmp	r3, #4
 800972a:	bf08      	it	eq
 800972c:	1aad      	subeq	r5, r5, r2
 800972e:	68a3      	ldr	r3, [r4, #8]
 8009730:	6922      	ldr	r2, [r4, #16]
 8009732:	bf0c      	ite	eq
 8009734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009738:	2500      	movne	r5, #0
 800973a:	4293      	cmp	r3, r2
 800973c:	bfc4      	itt	gt
 800973e:	1a9b      	subgt	r3, r3, r2
 8009740:	18ed      	addgt	r5, r5, r3
 8009742:	2600      	movs	r6, #0
 8009744:	341a      	adds	r4, #26
 8009746:	42b5      	cmp	r5, r6
 8009748:	d11a      	bne.n	8009780 <_printf_common+0xc8>
 800974a:	2000      	movs	r0, #0
 800974c:	e008      	b.n	8009760 <_printf_common+0xa8>
 800974e:	2301      	movs	r3, #1
 8009750:	4652      	mov	r2, sl
 8009752:	4649      	mov	r1, r9
 8009754:	4638      	mov	r0, r7
 8009756:	47c0      	blx	r8
 8009758:	3001      	adds	r0, #1
 800975a:	d103      	bne.n	8009764 <_printf_common+0xac>
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009764:	3501      	adds	r5, #1
 8009766:	e7c6      	b.n	80096f6 <_printf_common+0x3e>
 8009768:	18e1      	adds	r1, r4, r3
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	2030      	movs	r0, #48	; 0x30
 800976e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009772:	4422      	add	r2, r4
 8009774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800977c:	3302      	adds	r3, #2
 800977e:	e7c7      	b.n	8009710 <_printf_common+0x58>
 8009780:	2301      	movs	r3, #1
 8009782:	4622      	mov	r2, r4
 8009784:	4649      	mov	r1, r9
 8009786:	4638      	mov	r0, r7
 8009788:	47c0      	blx	r8
 800978a:	3001      	adds	r0, #1
 800978c:	d0e6      	beq.n	800975c <_printf_common+0xa4>
 800978e:	3601      	adds	r6, #1
 8009790:	e7d9      	b.n	8009746 <_printf_common+0x8e>
	...

08009794 <_printf_i>:
 8009794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009798:	7e0f      	ldrb	r7, [r1, #24]
 800979a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800979c:	2f78      	cmp	r7, #120	; 0x78
 800979e:	4691      	mov	r9, r2
 80097a0:	4680      	mov	r8, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	469a      	mov	sl, r3
 80097a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097aa:	d807      	bhi.n	80097bc <_printf_i+0x28>
 80097ac:	2f62      	cmp	r7, #98	; 0x62
 80097ae:	d80a      	bhi.n	80097c6 <_printf_i+0x32>
 80097b0:	2f00      	cmp	r7, #0
 80097b2:	f000 80d8 	beq.w	8009966 <_printf_i+0x1d2>
 80097b6:	2f58      	cmp	r7, #88	; 0x58
 80097b8:	f000 80a3 	beq.w	8009902 <_printf_i+0x16e>
 80097bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097c4:	e03a      	b.n	800983c <_printf_i+0xa8>
 80097c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097ca:	2b15      	cmp	r3, #21
 80097cc:	d8f6      	bhi.n	80097bc <_printf_i+0x28>
 80097ce:	a101      	add	r1, pc, #4	; (adr r1, 80097d4 <_printf_i+0x40>)
 80097d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097d4:	0800982d 	.word	0x0800982d
 80097d8:	08009841 	.word	0x08009841
 80097dc:	080097bd 	.word	0x080097bd
 80097e0:	080097bd 	.word	0x080097bd
 80097e4:	080097bd 	.word	0x080097bd
 80097e8:	080097bd 	.word	0x080097bd
 80097ec:	08009841 	.word	0x08009841
 80097f0:	080097bd 	.word	0x080097bd
 80097f4:	080097bd 	.word	0x080097bd
 80097f8:	080097bd 	.word	0x080097bd
 80097fc:	080097bd 	.word	0x080097bd
 8009800:	0800994d 	.word	0x0800994d
 8009804:	08009871 	.word	0x08009871
 8009808:	0800992f 	.word	0x0800992f
 800980c:	080097bd 	.word	0x080097bd
 8009810:	080097bd 	.word	0x080097bd
 8009814:	0800996f 	.word	0x0800996f
 8009818:	080097bd 	.word	0x080097bd
 800981c:	08009871 	.word	0x08009871
 8009820:	080097bd 	.word	0x080097bd
 8009824:	080097bd 	.word	0x080097bd
 8009828:	08009937 	.word	0x08009937
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	1d1a      	adds	r2, r3, #4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	602a      	str	r2, [r5, #0]
 8009834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800983c:	2301      	movs	r3, #1
 800983e:	e0a3      	b.n	8009988 <_printf_i+0x1f4>
 8009840:	6820      	ldr	r0, [r4, #0]
 8009842:	6829      	ldr	r1, [r5, #0]
 8009844:	0606      	lsls	r6, r0, #24
 8009846:	f101 0304 	add.w	r3, r1, #4
 800984a:	d50a      	bpl.n	8009862 <_printf_i+0xce>
 800984c:	680e      	ldr	r6, [r1, #0]
 800984e:	602b      	str	r3, [r5, #0]
 8009850:	2e00      	cmp	r6, #0
 8009852:	da03      	bge.n	800985c <_printf_i+0xc8>
 8009854:	232d      	movs	r3, #45	; 0x2d
 8009856:	4276      	negs	r6, r6
 8009858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800985c:	485e      	ldr	r0, [pc, #376]	; (80099d8 <_printf_i+0x244>)
 800985e:	230a      	movs	r3, #10
 8009860:	e019      	b.n	8009896 <_printf_i+0x102>
 8009862:	680e      	ldr	r6, [r1, #0]
 8009864:	602b      	str	r3, [r5, #0]
 8009866:	f010 0f40 	tst.w	r0, #64	; 0x40
 800986a:	bf18      	it	ne
 800986c:	b236      	sxthne	r6, r6
 800986e:	e7ef      	b.n	8009850 <_printf_i+0xbc>
 8009870:	682b      	ldr	r3, [r5, #0]
 8009872:	6820      	ldr	r0, [r4, #0]
 8009874:	1d19      	adds	r1, r3, #4
 8009876:	6029      	str	r1, [r5, #0]
 8009878:	0601      	lsls	r1, r0, #24
 800987a:	d501      	bpl.n	8009880 <_printf_i+0xec>
 800987c:	681e      	ldr	r6, [r3, #0]
 800987e:	e002      	b.n	8009886 <_printf_i+0xf2>
 8009880:	0646      	lsls	r6, r0, #25
 8009882:	d5fb      	bpl.n	800987c <_printf_i+0xe8>
 8009884:	881e      	ldrh	r6, [r3, #0]
 8009886:	4854      	ldr	r0, [pc, #336]	; (80099d8 <_printf_i+0x244>)
 8009888:	2f6f      	cmp	r7, #111	; 0x6f
 800988a:	bf0c      	ite	eq
 800988c:	2308      	moveq	r3, #8
 800988e:	230a      	movne	r3, #10
 8009890:	2100      	movs	r1, #0
 8009892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009896:	6865      	ldr	r5, [r4, #4]
 8009898:	60a5      	str	r5, [r4, #8]
 800989a:	2d00      	cmp	r5, #0
 800989c:	bfa2      	ittt	ge
 800989e:	6821      	ldrge	r1, [r4, #0]
 80098a0:	f021 0104 	bicge.w	r1, r1, #4
 80098a4:	6021      	strge	r1, [r4, #0]
 80098a6:	b90e      	cbnz	r6, 80098ac <_printf_i+0x118>
 80098a8:	2d00      	cmp	r5, #0
 80098aa:	d04d      	beq.n	8009948 <_printf_i+0x1b4>
 80098ac:	4615      	mov	r5, r2
 80098ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80098b2:	fb03 6711 	mls	r7, r3, r1, r6
 80098b6:	5dc7      	ldrb	r7, [r0, r7]
 80098b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098bc:	4637      	mov	r7, r6
 80098be:	42bb      	cmp	r3, r7
 80098c0:	460e      	mov	r6, r1
 80098c2:	d9f4      	bls.n	80098ae <_printf_i+0x11a>
 80098c4:	2b08      	cmp	r3, #8
 80098c6:	d10b      	bne.n	80098e0 <_printf_i+0x14c>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	07de      	lsls	r6, r3, #31
 80098cc:	d508      	bpl.n	80098e0 <_printf_i+0x14c>
 80098ce:	6923      	ldr	r3, [r4, #16]
 80098d0:	6861      	ldr	r1, [r4, #4]
 80098d2:	4299      	cmp	r1, r3
 80098d4:	bfde      	ittt	le
 80098d6:	2330      	movle	r3, #48	; 0x30
 80098d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098e0:	1b52      	subs	r2, r2, r5
 80098e2:	6122      	str	r2, [r4, #16]
 80098e4:	f8cd a000 	str.w	sl, [sp]
 80098e8:	464b      	mov	r3, r9
 80098ea:	aa03      	add	r2, sp, #12
 80098ec:	4621      	mov	r1, r4
 80098ee:	4640      	mov	r0, r8
 80098f0:	f7ff fee2 	bl	80096b8 <_printf_common>
 80098f4:	3001      	adds	r0, #1
 80098f6:	d14c      	bne.n	8009992 <_printf_i+0x1fe>
 80098f8:	f04f 30ff 	mov.w	r0, #4294967295
 80098fc:	b004      	add	sp, #16
 80098fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009902:	4835      	ldr	r0, [pc, #212]	; (80099d8 <_printf_i+0x244>)
 8009904:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009908:	6829      	ldr	r1, [r5, #0]
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009910:	6029      	str	r1, [r5, #0]
 8009912:	061d      	lsls	r5, r3, #24
 8009914:	d514      	bpl.n	8009940 <_printf_i+0x1ac>
 8009916:	07df      	lsls	r7, r3, #31
 8009918:	bf44      	itt	mi
 800991a:	f043 0320 	orrmi.w	r3, r3, #32
 800991e:	6023      	strmi	r3, [r4, #0]
 8009920:	b91e      	cbnz	r6, 800992a <_printf_i+0x196>
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	f023 0320 	bic.w	r3, r3, #32
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	2310      	movs	r3, #16
 800992c:	e7b0      	b.n	8009890 <_printf_i+0xfc>
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	f043 0320 	orr.w	r3, r3, #32
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	2378      	movs	r3, #120	; 0x78
 8009938:	4828      	ldr	r0, [pc, #160]	; (80099dc <_printf_i+0x248>)
 800993a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800993e:	e7e3      	b.n	8009908 <_printf_i+0x174>
 8009940:	0659      	lsls	r1, r3, #25
 8009942:	bf48      	it	mi
 8009944:	b2b6      	uxthmi	r6, r6
 8009946:	e7e6      	b.n	8009916 <_printf_i+0x182>
 8009948:	4615      	mov	r5, r2
 800994a:	e7bb      	b.n	80098c4 <_printf_i+0x130>
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	6826      	ldr	r6, [r4, #0]
 8009950:	6961      	ldr	r1, [r4, #20]
 8009952:	1d18      	adds	r0, r3, #4
 8009954:	6028      	str	r0, [r5, #0]
 8009956:	0635      	lsls	r5, r6, #24
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	d501      	bpl.n	8009960 <_printf_i+0x1cc>
 800995c:	6019      	str	r1, [r3, #0]
 800995e:	e002      	b.n	8009966 <_printf_i+0x1d2>
 8009960:	0670      	lsls	r0, r6, #25
 8009962:	d5fb      	bpl.n	800995c <_printf_i+0x1c8>
 8009964:	8019      	strh	r1, [r3, #0]
 8009966:	2300      	movs	r3, #0
 8009968:	6123      	str	r3, [r4, #16]
 800996a:	4615      	mov	r5, r2
 800996c:	e7ba      	b.n	80098e4 <_printf_i+0x150>
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	1d1a      	adds	r2, r3, #4
 8009972:	602a      	str	r2, [r5, #0]
 8009974:	681d      	ldr	r5, [r3, #0]
 8009976:	6862      	ldr	r2, [r4, #4]
 8009978:	2100      	movs	r1, #0
 800997a:	4628      	mov	r0, r5
 800997c:	f7f6 fc58 	bl	8000230 <memchr>
 8009980:	b108      	cbz	r0, 8009986 <_printf_i+0x1f2>
 8009982:	1b40      	subs	r0, r0, r5
 8009984:	6060      	str	r0, [r4, #4]
 8009986:	6863      	ldr	r3, [r4, #4]
 8009988:	6123      	str	r3, [r4, #16]
 800998a:	2300      	movs	r3, #0
 800998c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009990:	e7a8      	b.n	80098e4 <_printf_i+0x150>
 8009992:	6923      	ldr	r3, [r4, #16]
 8009994:	462a      	mov	r2, r5
 8009996:	4649      	mov	r1, r9
 8009998:	4640      	mov	r0, r8
 800999a:	47d0      	blx	sl
 800999c:	3001      	adds	r0, #1
 800999e:	d0ab      	beq.n	80098f8 <_printf_i+0x164>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	079b      	lsls	r3, r3, #30
 80099a4:	d413      	bmi.n	80099ce <_printf_i+0x23a>
 80099a6:	68e0      	ldr	r0, [r4, #12]
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	4298      	cmp	r0, r3
 80099ac:	bfb8      	it	lt
 80099ae:	4618      	movlt	r0, r3
 80099b0:	e7a4      	b.n	80098fc <_printf_i+0x168>
 80099b2:	2301      	movs	r3, #1
 80099b4:	4632      	mov	r2, r6
 80099b6:	4649      	mov	r1, r9
 80099b8:	4640      	mov	r0, r8
 80099ba:	47d0      	blx	sl
 80099bc:	3001      	adds	r0, #1
 80099be:	d09b      	beq.n	80098f8 <_printf_i+0x164>
 80099c0:	3501      	adds	r5, #1
 80099c2:	68e3      	ldr	r3, [r4, #12]
 80099c4:	9903      	ldr	r1, [sp, #12]
 80099c6:	1a5b      	subs	r3, r3, r1
 80099c8:	42ab      	cmp	r3, r5
 80099ca:	dcf2      	bgt.n	80099b2 <_printf_i+0x21e>
 80099cc:	e7eb      	b.n	80099a6 <_printf_i+0x212>
 80099ce:	2500      	movs	r5, #0
 80099d0:	f104 0619 	add.w	r6, r4, #25
 80099d4:	e7f5      	b.n	80099c2 <_printf_i+0x22e>
 80099d6:	bf00      	nop
 80099d8:	08009d51 	.word	0x08009d51
 80099dc:	08009d62 	.word	0x08009d62

080099e0 <_sbrk_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d06      	ldr	r5, [pc, #24]	; (80099fc <_sbrk_r+0x1c>)
 80099e4:	2300      	movs	r3, #0
 80099e6:	4604      	mov	r4, r0
 80099e8:	4608      	mov	r0, r1
 80099ea:	602b      	str	r3, [r5, #0]
 80099ec:	f7fa fd7a 	bl	80044e4 <_sbrk>
 80099f0:	1c43      	adds	r3, r0, #1
 80099f2:	d102      	bne.n	80099fa <_sbrk_r+0x1a>
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	b103      	cbz	r3, 80099fa <_sbrk_r+0x1a>
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	bd38      	pop	{r3, r4, r5, pc}
 80099fc:	20000734 	.word	0x20000734

08009a00 <memmove>:
 8009a00:	4288      	cmp	r0, r1
 8009a02:	b510      	push	{r4, lr}
 8009a04:	eb01 0402 	add.w	r4, r1, r2
 8009a08:	d902      	bls.n	8009a10 <memmove+0x10>
 8009a0a:	4284      	cmp	r4, r0
 8009a0c:	4623      	mov	r3, r4
 8009a0e:	d807      	bhi.n	8009a20 <memmove+0x20>
 8009a10:	1e43      	subs	r3, r0, #1
 8009a12:	42a1      	cmp	r1, r4
 8009a14:	d008      	beq.n	8009a28 <memmove+0x28>
 8009a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a1e:	e7f8      	b.n	8009a12 <memmove+0x12>
 8009a20:	4402      	add	r2, r0
 8009a22:	4601      	mov	r1, r0
 8009a24:	428a      	cmp	r2, r1
 8009a26:	d100      	bne.n	8009a2a <memmove+0x2a>
 8009a28:	bd10      	pop	{r4, pc}
 8009a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a32:	e7f7      	b.n	8009a24 <memmove+0x24>

08009a34 <__malloc_lock>:
 8009a34:	4801      	ldr	r0, [pc, #4]	; (8009a3c <__malloc_lock+0x8>)
 8009a36:	f7ff bc4d 	b.w	80092d4 <__retarget_lock_acquire_recursive>
 8009a3a:	bf00      	nop
 8009a3c:	20000728 	.word	0x20000728

08009a40 <__malloc_unlock>:
 8009a40:	4801      	ldr	r0, [pc, #4]	; (8009a48 <__malloc_unlock+0x8>)
 8009a42:	f7ff bc48 	b.w	80092d6 <__retarget_lock_release_recursive>
 8009a46:	bf00      	nop
 8009a48:	20000728 	.word	0x20000728

08009a4c <_free_r>:
 8009a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a4e:	2900      	cmp	r1, #0
 8009a50:	d044      	beq.n	8009adc <_free_r+0x90>
 8009a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a56:	9001      	str	r0, [sp, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8009a5e:	bfb8      	it	lt
 8009a60:	18e4      	addlt	r4, r4, r3
 8009a62:	f7ff ffe7 	bl	8009a34 <__malloc_lock>
 8009a66:	4a1e      	ldr	r2, [pc, #120]	; (8009ae0 <_free_r+0x94>)
 8009a68:	9801      	ldr	r0, [sp, #4]
 8009a6a:	6813      	ldr	r3, [r2, #0]
 8009a6c:	b933      	cbnz	r3, 8009a7c <_free_r+0x30>
 8009a6e:	6063      	str	r3, [r4, #4]
 8009a70:	6014      	str	r4, [r2, #0]
 8009a72:	b003      	add	sp, #12
 8009a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a78:	f7ff bfe2 	b.w	8009a40 <__malloc_unlock>
 8009a7c:	42a3      	cmp	r3, r4
 8009a7e:	d908      	bls.n	8009a92 <_free_r+0x46>
 8009a80:	6825      	ldr	r5, [r4, #0]
 8009a82:	1961      	adds	r1, r4, r5
 8009a84:	428b      	cmp	r3, r1
 8009a86:	bf01      	itttt	eq
 8009a88:	6819      	ldreq	r1, [r3, #0]
 8009a8a:	685b      	ldreq	r3, [r3, #4]
 8009a8c:	1949      	addeq	r1, r1, r5
 8009a8e:	6021      	streq	r1, [r4, #0]
 8009a90:	e7ed      	b.n	8009a6e <_free_r+0x22>
 8009a92:	461a      	mov	r2, r3
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	b10b      	cbz	r3, 8009a9c <_free_r+0x50>
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	d9fa      	bls.n	8009a92 <_free_r+0x46>
 8009a9c:	6811      	ldr	r1, [r2, #0]
 8009a9e:	1855      	adds	r5, r2, r1
 8009aa0:	42a5      	cmp	r5, r4
 8009aa2:	d10b      	bne.n	8009abc <_free_r+0x70>
 8009aa4:	6824      	ldr	r4, [r4, #0]
 8009aa6:	4421      	add	r1, r4
 8009aa8:	1854      	adds	r4, r2, r1
 8009aaa:	42a3      	cmp	r3, r4
 8009aac:	6011      	str	r1, [r2, #0]
 8009aae:	d1e0      	bne.n	8009a72 <_free_r+0x26>
 8009ab0:	681c      	ldr	r4, [r3, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	6053      	str	r3, [r2, #4]
 8009ab6:	4421      	add	r1, r4
 8009ab8:	6011      	str	r1, [r2, #0]
 8009aba:	e7da      	b.n	8009a72 <_free_r+0x26>
 8009abc:	d902      	bls.n	8009ac4 <_free_r+0x78>
 8009abe:	230c      	movs	r3, #12
 8009ac0:	6003      	str	r3, [r0, #0]
 8009ac2:	e7d6      	b.n	8009a72 <_free_r+0x26>
 8009ac4:	6825      	ldr	r5, [r4, #0]
 8009ac6:	1961      	adds	r1, r4, r5
 8009ac8:	428b      	cmp	r3, r1
 8009aca:	bf04      	itt	eq
 8009acc:	6819      	ldreq	r1, [r3, #0]
 8009ace:	685b      	ldreq	r3, [r3, #4]
 8009ad0:	6063      	str	r3, [r4, #4]
 8009ad2:	bf04      	itt	eq
 8009ad4:	1949      	addeq	r1, r1, r5
 8009ad6:	6021      	streq	r1, [r4, #0]
 8009ad8:	6054      	str	r4, [r2, #4]
 8009ada:	e7ca      	b.n	8009a72 <_free_r+0x26>
 8009adc:	b003      	add	sp, #12
 8009ade:	bd30      	pop	{r4, r5, pc}
 8009ae0:	2000072c 	.word	0x2000072c

08009ae4 <_realloc_r>:
 8009ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae8:	4680      	mov	r8, r0
 8009aea:	4614      	mov	r4, r2
 8009aec:	460e      	mov	r6, r1
 8009aee:	b921      	cbnz	r1, 8009afa <_realloc_r+0x16>
 8009af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009af4:	4611      	mov	r1, r2
 8009af6:	f7ff bc0f 	b.w	8009318 <_malloc_r>
 8009afa:	b92a      	cbnz	r2, 8009b08 <_realloc_r+0x24>
 8009afc:	f7ff ffa6 	bl	8009a4c <_free_r>
 8009b00:	4625      	mov	r5, r4
 8009b02:	4628      	mov	r0, r5
 8009b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b08:	f000 f81b 	bl	8009b42 <_malloc_usable_size_r>
 8009b0c:	4284      	cmp	r4, r0
 8009b0e:	4607      	mov	r7, r0
 8009b10:	d802      	bhi.n	8009b18 <_realloc_r+0x34>
 8009b12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b16:	d812      	bhi.n	8009b3e <_realloc_r+0x5a>
 8009b18:	4621      	mov	r1, r4
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	f7ff fbfc 	bl	8009318 <_malloc_r>
 8009b20:	4605      	mov	r5, r0
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d0ed      	beq.n	8009b02 <_realloc_r+0x1e>
 8009b26:	42bc      	cmp	r4, r7
 8009b28:	4622      	mov	r2, r4
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	bf28      	it	cs
 8009b2e:	463a      	movcs	r2, r7
 8009b30:	f7ff fb7e 	bl	8009230 <memcpy>
 8009b34:	4631      	mov	r1, r6
 8009b36:	4640      	mov	r0, r8
 8009b38:	f7ff ff88 	bl	8009a4c <_free_r>
 8009b3c:	e7e1      	b.n	8009b02 <_realloc_r+0x1e>
 8009b3e:	4635      	mov	r5, r6
 8009b40:	e7df      	b.n	8009b02 <_realloc_r+0x1e>

08009b42 <_malloc_usable_size_r>:
 8009b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b46:	1f18      	subs	r0, r3, #4
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	bfbc      	itt	lt
 8009b4c:	580b      	ldrlt	r3, [r1, r0]
 8009b4e:	18c0      	addlt	r0, r0, r3
 8009b50:	4770      	bx	lr
	...

08009b54 <_init>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr

08009b60 <_fini>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	bf00      	nop
 8009b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b66:	bc08      	pop	{r3}
 8009b68:	469e      	mov	lr, r3
 8009b6a:	4770      	bx	lr
