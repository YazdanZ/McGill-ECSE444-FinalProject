
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c00  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08010dc0  08010dc0  00020dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011150  08011150  000303cc  2**0
                  CONTENTS
  4 .ARM          00000008  08011150  08011150  00021150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011158  08011158  000303cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011158  08011158  00021158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801115c  0801115c  0002115c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  08011160  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004aab4  200003cc  0801152c  000303cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2004ae80  0801152c  0003ae80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ef5e  00000000  00000000  000303fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f3c  00000000  00000000  0005f35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  00064298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021f0  00000000  00000000  00066690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030e7b  00000000  00000000  00068880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028fa0  00000000  00000000  000996fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126355  00000000  00000000  000c269b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e89f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f58  00000000  00000000  001e8a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200003cc 	.word	0x200003cc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08010da8 	.word	0x08010da8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200003d0 	.word	0x200003d0
 80001fc:	08010da8 	.word	0x08010da8

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005da:	2300      	movs	r3, #0
 80005dc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005de:	2003      	movs	r0, #3
 80005e0:	f000 f901 	bl	80007e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e4:	2005      	movs	r0, #5
 80005e6:	f00a ffa7 	bl	800b538 <HAL_InitTick>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d002      	beq.n	80005f6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	e001      	b.n	80005fa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005f6:	f00a fbdf 	bl	800adb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_IncTick+0x20>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_IncTick+0x24>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <HAL_IncTick+0x24>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000004 	.word	0x20000004
 8000628:	200003e8 	.word	0x200003e8

0800062c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <HAL_GetTick+0x14>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200003e8 	.word	0x200003e8

08000644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800064c:	f7ff ffee 	bl	800062c <HAL_GetTick>
 8000650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800065c:	d005      	beq.n	800066a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_Delay+0x44>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800066a:	bf00      	nop
 800066c:	f7ff ffde 	bl	800062c <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	429a      	cmp	r2, r3
 800067a:	d8f7      	bhi.n	800066c <HAL_Delay+0x28>
  {
  }
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000004 	.word	0x20000004

0800068c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <__NVIC_GetPriorityGrouping+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	f003 0307 	and.w	r3, r3, #7
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	db0b      	blt.n	800071a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f003 021f 	and.w	r2, r3, #31
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <__NVIC_EnableIRQ+0x38>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	095b      	lsrs	r3, r3, #5
 8000710:	2001      	movs	r0, #1
 8000712:	fa00 f202 	lsl.w	r2, r0, r2
 8000716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e100 	.word	0xe000e100

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	; (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	; 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff4c 	bl	800068c <__NVIC_SetPriorityGrouping>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800080e:	f7ff ff61 	bl	80006d4 <__NVIC_GetPriorityGrouping>
 8000812:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	6978      	ldr	r0, [r7, #20]
 800081a:	f7ff ffb1 	bl	8000780 <NVIC_EncodePriority>
 800081e:	4602      	mov	r2, r0
 8000820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff80 	bl	800072c <__NVIC_SetPriority>
}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff54 	bl	80006f0 <__NVIC_EnableIRQ>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d101      	bne.n	8000862 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e014      	b.n	800088c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	791b      	ldrb	r3, [r3, #4]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d105      	bne.n	8000878 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f00a fac8 	bl	800ae08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2202      	movs	r2, #2
 800087c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	795b      	ldrb	r3, [r3, #5]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d101      	bne.n	80008b2 <HAL_DAC_Start_DMA+0x1e>
 80008ae:	2302      	movs	r3, #2
 80008b0:	e0ab      	b.n	8000a0a <HAL_DAC_Start_DMA+0x176>
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2201      	movs	r2, #1
 80008b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2202      	movs	r2, #2
 80008bc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d12f      	bne.n	8000924 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	4a52      	ldr	r2, [pc, #328]	; (8000a14 <HAL_DAC_Start_DMA+0x180>)
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	4a51      	ldr	r2, [pc, #324]	; (8000a18 <HAL_DAC_Start_DMA+0x184>)
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	4a50      	ldr	r2, [pc, #320]	; (8000a1c <HAL_DAC_Start_DMA+0x188>)
 80008da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008ea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	2b08      	cmp	r3, #8
 80008f0:	d013      	beq.n	800091a <HAL_DAC_Start_DMA+0x86>
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	2b08      	cmp	r3, #8
 80008f6:	d845      	bhi.n	8000984 <HAL_DAC_Start_DMA+0xf0>
 80008f8:	6a3b      	ldr	r3, [r7, #32]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <HAL_DAC_Start_DMA+0x72>
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	2b04      	cmp	r3, #4
 8000902:	d005      	beq.n	8000910 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000904:	e03e      	b.n	8000984 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	3308      	adds	r3, #8
 800090c:	613b      	str	r3, [r7, #16]
        break;
 800090e:	e03c      	b.n	800098a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	330c      	adds	r3, #12
 8000916:	613b      	str	r3, [r7, #16]
        break;
 8000918:	e037      	b.n	800098a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	3310      	adds	r3, #16
 8000920:	613b      	str	r3, [r7, #16]
        break;
 8000922:	e032      	b.n	800098a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4a3d      	ldr	r2, [pc, #244]	; (8000a20 <HAL_DAC_Start_DMA+0x18c>)
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	4a3c      	ldr	r2, [pc, #240]	; (8000a24 <HAL_DAC_Start_DMA+0x190>)
 8000932:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	4a3b      	ldr	r2, [pc, #236]	; (8000a28 <HAL_DAC_Start_DMA+0x194>)
 800093a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800094a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	2b08      	cmp	r3, #8
 8000950:	d013      	beq.n	800097a <HAL_DAC_Start_DMA+0xe6>
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	2b08      	cmp	r3, #8
 8000956:	d817      	bhi.n	8000988 <HAL_DAC_Start_DMA+0xf4>
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <HAL_DAC_Start_DMA+0xd2>
 800095e:	6a3b      	ldr	r3, [r7, #32]
 8000960:	2b04      	cmp	r3, #4
 8000962:	d005      	beq.n	8000970 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000964:	e010      	b.n	8000988 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3314      	adds	r3, #20
 800096c:	613b      	str	r3, [r7, #16]
        break;
 800096e:	e00c      	b.n	800098a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3318      	adds	r3, #24
 8000976:	613b      	str	r3, [r7, #16]
        break;
 8000978:	e007      	b.n	800098a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	331c      	adds	r3, #28
 8000980:	613b      	str	r3, [r7, #16]
        break;
 8000982:	e002      	b.n	800098a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000984:	bf00      	nop
 8000986:	e000      	b.n	800098a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000988:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d111      	bne.n	80009b4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800099e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	6898      	ldr	r0, [r3, #8]
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	f001 f8c7 	bl	8001b3c <HAL_DMA_Start_IT>
 80009ae:	4603      	mov	r3, r0
 80009b0:	75fb      	strb	r3, [r7, #23]
 80009b2:	e010      	b.n	80009d6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80009c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	68d8      	ldr	r0, [r3, #12]
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	f001 f8b5 	bl	8001b3c <HAL_DMA_Start_IT>
 80009d2:	4603      	mov	r3, r0
 80009d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2200      	movs	r2, #0
 80009da:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80009dc:	7dfb      	ldrb	r3, [r7, #23]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d10c      	bne.n	80009fc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6819      	ldr	r1, [r3, #0]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	2201      	movs	r2, #1
 80009f0:	409a      	lsls	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	430a      	orrs	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	e005      	b.n	8000a08 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	691b      	ldr	r3, [r3, #16]
 8000a00:	f043 0204 	orr.w	r2, r3, #4
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	08000e3d 	.word	0x08000e3d
 8000a18:	08000e5f 	.word	0x08000e5f
 8000a1c:	08000e7b 	.word	0x08000e7b
 8000a20:	08000ef9 	.word	0x08000ef9
 8000a24:	08000f1b 	.word	0x08000f1b
 8000a28:	08000f37 	.word	0x08000f37

08000a2c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6819      	ldr	r1, [r3, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	f003 0310 	and.w	r3, r3, #16
 8000a42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	400a      	ands	r2, r1
 8000a52:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6819      	ldr	r1, [r3, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	f003 0310 	and.w	r3, r3, #16
 8000a60:	2201      	movs	r2, #1
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43da      	mvns	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	400a      	ands	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10d      	bne.n	8000a92 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f8d9 	bl	8001c32 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	e00c      	b.n	8000aac <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 f8cb 	bl	8001c32 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000aaa:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000acc:	d120      	bne.n	8000b10 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000adc:	d118      	bne.n	8000b10 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	691b      	ldr	r3, [r3, #16]
 8000ae8:	f043 0201 	orr.w	r2, r3, #1
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b08:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f000 f84b 	bl	8000ba6 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b1e:	d120      	bne.n	8000b62 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b2e:	d118      	bne.n	8000b62 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2204      	movs	r2, #4
 8000b34:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	f043 0202 	orr.w	r2, r3, #2
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000b5a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f9c1 	bl	8000ee4 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	795b      	ldrb	r3, [r3, #5]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d101      	bne.n	8000bd8 <HAL_DAC_ConfigChannel+0x1c>
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	e12a      	b.n	8000e2e <HAL_DAC_ConfigChannel+0x272>
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2202      	movs	r2, #2
 8000be2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d174      	bne.n	8000cd6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000bec:	f7ff fd1e 	bl	800062c <HAL_GetTick>
 8000bf0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d134      	bne.n	8000c62 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000bf8:	e011      	b.n	8000c1e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000bfa:	f7ff fd17 	bl	800062c <HAL_GetTick>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d90a      	bls.n	8000c1e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	f043 0208 	orr.w	r2, r3, #8
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2203      	movs	r2, #3
 8000c18:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e107      	b.n	8000e2e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1e6      	bne.n	8000bfa <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff fd09 	bl	8000644 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	69d2      	ldr	r2, [r2, #28]
 8000c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c3c:	e01e      	b.n	8000c7c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000c3e:	f7ff fcf5 	bl	800062c <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d90a      	bls.n	8000c62 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	f043 0208 	orr.w	r2, r3, #8
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e0e5      	b.n	8000e2e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dbe8      	blt.n	8000c3e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff fce9 	bl	8000644 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	69d2      	ldr	r2, [r2, #28]
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	ea02 0103 	and.w	r1, r2, r3
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	6a1a      	ldr	r2, [r3, #32]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	409a      	lsls	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	21ff      	movs	r1, #255	; 0xff
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	ea02 0103 	and.w	r1, r2, r3
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f003 0310 	and.w	r3, r3, #16
 8000ccc:	409a      	lsls	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d11d      	bne.n	8000d1a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce4:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	221f      	movs	r2, #31
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69fa      	ldr	r2, [r7, #28]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d20:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	2207      	movs	r2, #7
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69fa      	ldr	r2, [r7, #28]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6819      	ldr	r1, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69fa      	ldr	r2, [r7, #28]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dbe:	d104      	bne.n	8000dca <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	e018      	b.n	8000dfc <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d104      	bne.n	8000ddc <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	e00f      	b.n	8000dfc <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000ddc:	f003 ff92 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8000de0:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_DAC_ConfigChannel+0x27c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d904      	bls.n	8000df4 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	e003      	b.n	8000dfc <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dfa:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6819      	ldr	r1, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	22c0      	movs	r2, #192	; 0xc0
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2201      	movs	r2, #1
 8000e24:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	04c4b400 	.word	0x04c4b400

08000e3c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f7ff fe8d 	bl	8000b6a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2201      	movs	r2, #1
 8000e54:	711a      	strb	r2, [r3, #4]
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f7ff fe86 	bl	8000b7e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	f043 0204 	orr.w	r2, r3, #4
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	f7ff fe7c 	bl	8000b92 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	711a      	strb	r2, [r3, #4]
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f7ff ffce 	bl	8000ea8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	711a      	strb	r2, [r3, #4]
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b084      	sub	sp, #16
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f26:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff ffc7 	bl	8000ebc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f42:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	f043 0204 	orr.w	r2, r3, #4
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f7ff ffbd 	bl	8000ed0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	711a      	strb	r2, [r3, #4]
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e0ac      	b.n	80010d0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fc46 	bl	800180c <DFSDM_GetChannelFromInstance>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a55      	ldr	r2, [pc, #340]	; (80010d8 <HAL_DFSDM_ChannelInit+0x174>)
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e09f      	b.n	80010d0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f00a f863 	bl	800b05c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000f96:	4b51      	ldr	r3, [pc, #324]	; (80010dc <HAL_DFSDM_ChannelInit+0x178>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	4a4f      	ldr	r2, [pc, #316]	; (80010dc <HAL_DFSDM_ChannelInit+0x178>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000fa0:	4b4e      	ldr	r3, [pc, #312]	; (80010dc <HAL_DFSDM_ChannelInit+0x178>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d125      	bne.n	8000ff4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000fb2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4948      	ldr	r1, [pc, #288]	; (80010e0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000fc2:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a46      	ldr	r2, [pc, #280]	; (80010e0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fc8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000fcc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	791b      	ldrb	r3, [r3, #4]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d108      	bne.n	8000fe8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	041b      	lsls	r3, r3, #16
 8000fe2:	493f      	ldr	r1, [pc, #252]	; (80010e0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000fe8:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a3c      	ldr	r2, [pc, #240]	; (80010e0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001002:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001012:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001018:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 020f 	bic.w	r2, r2, #15
 8001030:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001058:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6899      	ldr	r1, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001068:	3b01      	subs	r3, #1
 800106a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f002 0207 	and.w	r2, r2, #7
 8001084:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6859      	ldr	r1, [r3, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	430a      	orrs	r2, r1
 80010a0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010b0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fba4 	bl	800180c <DFSDM_GetChannelFromInstance>
 80010c4:	4602      	mov	r2, r0
 80010c6:	4904      	ldr	r1, [pc, #16]	; (80010d8 <HAL_DFSDM_ChannelInit+0x174>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200003f0 	.word	0x200003f0
 80010dc:	200003ec 	.word	0x200003ec
 80010e0:	40016000 	.word	0x40016000

080010e4 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e0ca      	b.n	80012b4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a66      	ldr	r2, [pc, #408]	; (80012bc <HAL_DFSDM_FilterInit+0x1b0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d109      	bne.n	800113c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800112c:	2b01      	cmp	r3, #1
 800112e:	d003      	beq.n	8001138 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e0bb      	b.n	80012b4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f009 fecd 	bl	800aef4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001168:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7a1b      	ldrb	r3, [r3, #8]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e007      	b.n	8001194 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001192:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7a5b      	ldrb	r3, [r3, #9]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d108      	bne.n	80011ae <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e007      	b.n	80011be <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80011cc:	f023 0308 	bic.w	r3, r3, #8
 80011d0:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d108      	bne.n	80011ec <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6819      	ldr	r1, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695a      	ldr	r2, [r3, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7c1b      	ldrb	r3, [r3, #16]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d108      	bne.n	8001206 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0210 	orr.w	r2, r2, #16
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e007      	b.n	8001216 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0210 	bic.w	r2, r2, #16
 8001214:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7c5b      	ldrb	r3, [r3, #17]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0220 	orr.w	r2, r2, #32
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e007      	b.n	8001240 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0220 	bic.w	r2, r2, #32
 800123e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800124e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001252:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6959      	ldr	r1, [r3, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	3b01      	subs	r3, #1
 8001264:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001266:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800126e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699a      	ldr	r2, [r3, #24]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7c1a      	ldrb	r2, [r3, #16]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0201 	orr.w	r2, r2, #1
 80012a8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40016100 	.word	0x40016100

080012c0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d02e      	beq.n	8001338 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80012e0:	2bff      	cmp	r3, #255	; 0xff
 80012e2:	d029      	beq.n	8001338 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f6:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d10d      	bne.n	800131a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800130c:	431a      	orrs	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	e00a      	b.n	8001330 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6819      	ldr	r1, [r3, #0]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	631a      	str	r2, [r3, #48]	; 0x30
 8001336:	e001      	b.n	800133c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800133c:	7dfb      	ldrb	r3, [r7, #23]
}
 800133e:	4618      	mov	r0, r3
 8001340:	371c      	adds	r7, #28
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	75fb      	strb	r3, [r7, #23]
 800136c:	e064      	b.n	8001438 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800137c:	d002      	beq.n	8001384 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	75fb      	strb	r3, [r7, #23]
 8001382:	e059      	b.n	8001438 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10e      	bne.n	80013aa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10a      	bne.n	80013aa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d002      	beq.n	80013aa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	75fb      	strb	r3, [r7, #23]
 80013a8:	e046      	b.n	8001438 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10b      	bne.n	80013ca <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d107      	bne.n	80013ca <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80013c0:	2b20      	cmp	r3, #32
 80013c2:	d102      	bne.n	80013ca <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	75fb      	strb	r3, [r7, #23]
 80013c8:	e036      	b.n	8001438 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d004      	beq.n	80013de <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d12a      	bne.n	8001434 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	4a18      	ldr	r2, [pc, #96]	; (8001444 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80013f4:	2b20      	cmp	r3, #32
 80013f6:	d101      	bne.n	80013fc <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80013fa:	e000      	b.n	80013fe <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80013fc:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	331c      	adds	r3, #28
 800140e:	4619      	mov	r1, r3
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f000 fb92 	bl	8001b3c <HAL_DMA_Start_IT>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	22ff      	movs	r2, #255	; 0xff
 8001422:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800142a:	e005      	b.n	8001438 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 fa39 	bl	80018a4 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001432:	e001      	b.n	8001438 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	080017cd 	.word	0x080017cd
 8001448:	080017e9 	.word	0x080017e9
 800144c:	080017b1 	.word	0x080017b1

08001450 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001462:	2b02      	cmp	r3, #2
 8001464:	d007      	beq.n	8001476 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800146c:	2b04      	cmp	r3, #4
 800146e:	d002      	beq.n	8001476 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e007      	b.n	8001486 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fbd9 	bl	8001c32 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fa65 	bl	8001950 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00f      	beq.n	80014d2 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00a      	beq.n	80014d2 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2208      	movs	r2, #8
 80014c2:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f966 	bl	800179c <HAL_DFSDM_FilterErrorCallback>
 80014d0:	e13b      	b.n	800174a <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00f      	beq.n	80014fc <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00a      	beq.n	80014fc <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2204      	movs	r2, #4
 80014ec:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2202      	movs	r2, #2
 80014f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f951 	bl	800179c <HAL_DFSDM_FilterErrorCallback>
 80014fa:	e126      	b.n	800174a <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d025      	beq.n	8001552 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 800150c:	2b00      	cmp	r3, #0
 800150e:	d020      	beq.n	8001552 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f008 ff3d 	bl	800a390 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 8114 	bne.w	8001748 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001524:	2b00      	cmp	r3, #0
 8001526:	f040 810f 	bne.w	8001748 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0202 	bic.w	r2, r2, #2
 8001538:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001540:	2b02      	cmp	r3, #2
 8001542:	d101      	bne.n	8001548 <HAL_DFSDM_IRQHandler+0xb8>
 8001544:	2201      	movs	r2, #1
 8001546:	e000      	b.n	800154a <HAL_DFSDM_IRQHandler+0xba>
 8001548:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001550:	e0fa      	b.n	8001748 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d034      	beq.n	80015c6 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001562:	2b00      	cmp	r3, #0
 8001564:	d02f      	beq.n	80015c6 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f902 	bl	8001770 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001570:	1e5a      	subs	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	2b00      	cmp	r3, #0
 800157c:	f040 80e5 	bne.w	800174a <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001584:	2b00      	cmp	r3, #0
 8001586:	d112      	bne.n	80015ae <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0201 	bic.w	r2, r2, #1
 8001596:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d101      	bne.n	80015a6 <HAL_DFSDM_IRQHandler+0x116>
 80015a2:	2201      	movs	r2, #1
 80015a4:	e000      	b.n	80015a8 <HAL_DFSDM_IRQHandler+0x118>
 80015a6:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d102      	bne.n	80015be <HAL_DFSDM_IRQHandler+0x12e>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	e000      	b.n	80015c0 <HAL_DFSDM_IRQHandler+0x130>
 80015be:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80015c4:	e0c1      	b.n	800174a <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d03d      	beq.n	800164c <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d038      	beq.n	800164c <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_DFSDM_IRQHandler+0x162>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_DFSDM_IRQHandler+0x164>
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 80015fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001602:	e005      	b.n	8001610 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8001604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001606:	3301      	adds	r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <HAL_DFSDM_IRQHandler+0x190>
 800161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161c:	2b06      	cmp	r3, #6
 800161e:	d9f1      	bls.n	8001604 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d105      	bne.n	8001632 <HAL_DFSDM_IRQHandler+0x1a2>
 8001626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001628:	3308      	adds	r3, #8
 800162a:	2201      	movs	r2, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	e003      	b.n	800163a <HAL_DFSDM_IRQHandler+0x1aa>
 8001632:	2201      	movs	r2, #1
 8001634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f89d 	bl	8001784 <HAL_DFSDM_FilterAwdCallback>
  {
 800164a:	e07e      	b.n	800174a <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a40      	ldr	r2, [pc, #256]	; (8001754 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d141      	bne.n	80016da <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800165c:	2b00      	cmp	r3, #0
 800165e:	d03c      	beq.n	80016da <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001666:	2b00      	cmp	r3, #0
 8001668:	d037      	beq.n	80016da <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	0c1b      	lsrs	r3, r3, #16
 8001676:	b2db      	uxtb	r3, r3
 8001678:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 800167a:	e02a      	b.n	80016d2 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d01f      	beq.n	80016c6 <HAL_DFSDM_IRQHandler+0x236>
 8001686:	4a34      	ldr	r2, [pc, #208]	; (8001758 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d019      	beq.n	80016c6 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8001692:	4a31      	ldr	r2, [pc, #196]	; (8001758 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00f      	beq.n	80016c6 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	f103 0210 	add.w	r2, r3, #16
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	fa01 f202 	lsl.w	r2, r1, r2
 80016b6:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <HAL_DFSDM_IRQHandler+0x2c8>)
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fd0f 	bl	80010e4 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	3301      	adds	r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	2b07      	cmp	r3, #7
 80016d6:	d9d1      	bls.n	800167c <HAL_DFSDM_IRQHandler+0x1ec>
  {
 80016d8:	e037      	b.n	800174a <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <HAL_DFSDM_IRQHandler+0x2c4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d132      	bne.n	800174a <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d02d      	beq.n	800174a <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d028      	beq.n	800174a <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	0e1b      	lsrs	r3, r3, #24
 8001704:	b2db      	uxtb	r3, r3
 8001706:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001708:	e005      	b.n	8001716 <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	3301      	adds	r3, #1
 800170e:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <HAL_DFSDM_IRQHandler+0x296>
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b06      	cmp	r3, #6
 8001724:	d9f1      	bls.n	800170a <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f103 0218 	add.w	r2, r3, #24
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2101      	movs	r1, #1
 8001732:	fa01 f202 	lsl.w	r2, r1, r2
 8001736:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_DFSDM_IRQHandler+0x2c8>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fcd9 	bl	80010f8 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8001746:	e000      	b.n	800174a <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001748:	bf00      	nop
}
 800174a:	bf00      	nop
 800174c:	3730      	adds	r7, #48	; 0x30
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40016100 	.word	0x40016100
 8001758:	200003f0 	.word	0x200003f0

0800175c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff ffcc 	bl	800175c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f008 fdd8 	bl	800a390 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2203      	movs	r2, #3
 80017fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f7ff ffcd 	bl	800179c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <DFSDM_GetChannelFromInstance+0x7c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d102      	bne.n	8001822 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e02b      	b.n	800187a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a19      	ldr	r2, [pc, #100]	; (800188c <DFSDM_GetChannelFromInstance+0x80>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d102      	bne.n	8001830 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800182a:	2301      	movs	r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	e024      	b.n	800187a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a17      	ldr	r2, [pc, #92]	; (8001890 <DFSDM_GetChannelFromInstance+0x84>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d102      	bne.n	800183e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001838:	2302      	movs	r3, #2
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e01d      	b.n	800187a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <DFSDM_GetChannelFromInstance+0x88>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d102      	bne.n	800184c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001846:	2304      	movs	r3, #4
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e016      	b.n	800187a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <DFSDM_GetChannelFromInstance+0x8c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d102      	bne.n	800185a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001854:	2305      	movs	r3, #5
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e00f      	b.n	800187a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a0f      	ldr	r2, [pc, #60]	; (800189c <DFSDM_GetChannelFromInstance+0x90>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d102      	bne.n	8001868 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001862:	2306      	movs	r3, #6
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	e008      	b.n	800187a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <DFSDM_GetChannelFromInstance+0x94>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d102      	bne.n	8001876 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001870:	2307      	movs	r3, #7
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e001      	b.n	800187a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001876:	2303      	movs	r3, #3
 8001878:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	40016000 	.word	0x40016000
 800188c:	40016020 	.word	0x40016020
 8001890:	40016040 	.word	0x40016040
 8001894:	40016080 	.word	0x40016080
 8001898:	400160a0 	.word	0x400160a0
 800189c:	400160c0 	.word	0x400160c0
 80018a0:	400160e0 	.word	0x400160e0

080018a4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d108      	bne.n	80018c6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e033      	b.n	800192e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80018e4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0201 	orr.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d116      	bne.n	800192e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001904:	2b00      	cmp	r3, #0
 8001906:	d107      	bne.n	8001918 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0202 	orr.w	r2, r2, #2
 8001916:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800191e:	2b01      	cmp	r3, #1
 8001920:	d102      	bne.n	8001928 <DFSDM_RegConvStart+0x84>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	e000      	b.n	800192a <DFSDM_RegConvStart+0x86>
 8001928:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <DFSDM_RegConvStart+0x98>
 8001938:	2202      	movs	r2, #2
 800193a:	e000      	b.n	800193e <DFSDM_RegConvStart+0x9a>
 800193c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196c:	2b01      	cmp	r3, #1
 800196e:	d107      	bne.n	8001980 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800197e:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001996:	2b04      	cmp	r3, #4
 8001998:	d116      	bne.n	80019c8 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 0202 	orr.w	r2, r2, #2
 80019b0:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d102      	bne.n	80019c2 <DFSDM_RegConvStop+0x72>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	e000      	b.n	80019c4 <DFSDM_RegConvStop+0x74>
 80019c2:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d101      	bne.n	80019d6 <DFSDM_RegConvStop+0x86>
 80019d2:	2201      	movs	r2, #1
 80019d4:	e000      	b.n	80019d8 <DFSDM_RegConvStop+0x88>
 80019d6:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e08d      	b.n	8001b1a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_DMA_Init+0x138>)
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d80f      	bhi.n	8001a2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <HAL_DMA_Init+0x13c>)
 8001a12:	4413      	add	r3, r2
 8001a14:	4a45      	ldr	r2, [pc, #276]	; (8001b2c <HAL_DMA_Init+0x140>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	091b      	lsrs	r3, r3, #4
 8001a1c:	009a      	lsls	r2, r3, #2
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a42      	ldr	r2, [pc, #264]	; (8001b30 <HAL_DMA_Init+0x144>)
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
 8001a28:	e00e      	b.n	8001a48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b40      	ldr	r3, [pc, #256]	; (8001b34 <HAL_DMA_Init+0x148>)
 8001a32:	4413      	add	r3, r2
 8001a34:	4a3d      	ldr	r2, [pc, #244]	; (8001b2c <HAL_DMA_Init+0x140>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	009a      	lsls	r2, r3, #2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a3c      	ldr	r2, [pc, #240]	; (8001b38 <HAL_DMA_Init+0x14c>)
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 fa72 	bl	8001f84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aa8:	d102      	bne.n	8001ab0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ac4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d010      	beq.n	8001af0 <HAL_DMA_Init+0x104>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d80c      	bhi.n	8001af0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fa92 	bl	8002000 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	e008      	b.n	8001b02 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40020407 	.word	0x40020407
 8001b28:	bffdfff8 	.word	0xbffdfff8
 8001b2c:	cccccccd 	.word	0xcccccccd
 8001b30:	40020000 	.word	0x40020000
 8001b34:	bffdfbf8 	.word	0xbffdfbf8
 8001b38:	40020400 	.word	0x40020400

08001b3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_DMA_Start_IT+0x20>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e066      	b.n	8001c2a <HAL_DMA_Start_IT+0xee>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d155      	bne.n	8001c1c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0201 	bic.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68b9      	ldr	r1, [r7, #8]
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f9b6 	bl	8001f06 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 020e 	orr.w	r2, r2, #14
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	e00f      	b.n	8001bd4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0204 	bic.w	r2, r2, #4
 8001bc2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 020a 	orr.w	r2, r2, #10
 8001bd2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c08:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e005      	b.n	8001c28 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c24:	2302      	movs	r3, #2
 8001c26:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b085      	sub	sp, #20
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d008      	beq.n	8001c5c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e040      	b.n	8001cde <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 020e 	bic.w	r2, r2, #14
 8001c6a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c7a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	f003 021c 	and.w	r2, r3, #28
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ca8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00c      	beq.n	8001ccc <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001cca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d005      	beq.n	8001d0e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e047      	b.n	8001d9e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 020e 	bic.w	r2, r2, #14
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f003 021c 	and.w	r2, r3, #28
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d5a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00c      	beq.n	8001d7e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d7c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	4798      	blx	r3
    }
  }
  return status;
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	f003 031c 	and.w	r3, r3, #28
 8001dc8:	2204      	movs	r2, #4
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d026      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x7a>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d021      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0204 	bic.w	r2, r2, #4
 8001dfa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	f003 021c 	and.w	r2, r3, #28
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2104      	movs	r1, #4
 8001e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d071      	beq.n	8001efc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001e20:	e06c      	b.n	8001efc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f003 031c 	and.w	r3, r3, #28
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d02e      	beq.n	8001e94 <HAL_DMA_IRQHandler+0xec>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d029      	beq.n	8001e94 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10b      	bne.n	8001e66 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 020a 	bic.w	r2, r2, #10
 8001e5c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f003 021c 	and.w	r2, r3, #28
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2102      	movs	r1, #2
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d038      	beq.n	8001efc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e92:	e033      	b.n	8001efc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	f003 031c 	and.w	r3, r3, #28
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d02a      	beq.n	8001efe <HAL_DMA_IRQHandler+0x156>
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d025      	beq.n	8001efe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 020e 	bic.w	r2, r2, #14
 8001ec0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f003 021c 	and.w	r2, r3, #28
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d004      	beq.n	8001efe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
}
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f1c:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d004      	beq.n	8001f30 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f2e:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	f003 021c 	and.w	r2, r3, #28
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b10      	cmp	r3, #16
 8001f52:	d108      	bne.n	8001f66 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f64:	e007      	b.n	8001f76 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	60da      	str	r2, [r3, #12]
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d80a      	bhi.n	8001fae <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fa4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6493      	str	r3, [r2, #72]	; 0x48
 8001fac:	e007      	b.n	8001fbe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	009a      	lsls	r2, r3, #2
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001fb8:	4413      	add	r3, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	3b08      	subs	r3, #8
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001fd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	2201      	movs	r2, #1
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40020407 	.word	0x40020407
 8001ff4:	4002081c 	.word	0x4002081c
 8001ff8:	cccccccd 	.word	0xcccccccd
 8001ffc:	40020880 	.word	0x40020880

08002000 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	461a      	mov	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a08      	ldr	r2, [pc, #32]	; (8002044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002022:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3b01      	subs	r3, #1
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2201      	movs	r2, #1
 800202e:	409a      	lsls	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	1000823f 	.word	0x1000823f
 8002044:	40020940 	.word	0x40020940

08002048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	e166      	b.n	8002326 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8158 	beq.w	8002320 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d005      	beq.n	8002088 <HAL_GPIO_Init+0x40>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d130      	bne.n	80020ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020be:	2201      	movs	r2, #1
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	f003 0201 	and.w	r2, r3, #1
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d017      	beq.n	8002126 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d123      	bne.n	800217a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	08da      	lsrs	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3208      	adds	r2, #8
 800213a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	08da      	lsrs	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3208      	adds	r2, #8
 8002174:	6939      	ldr	r1, [r7, #16]
 8002176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	2203      	movs	r2, #3
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0203 	and.w	r2, r3, #3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80b2 	beq.w	8002320 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021bc:	4b61      	ldr	r3, [pc, #388]	; (8002344 <HAL_GPIO_Init+0x2fc>)
 80021be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c0:	4a60      	ldr	r2, [pc, #384]	; (8002344 <HAL_GPIO_Init+0x2fc>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6613      	str	r3, [r2, #96]	; 0x60
 80021c8:	4b5e      	ldr	r3, [pc, #376]	; (8002344 <HAL_GPIO_Init+0x2fc>)
 80021ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021d4:	4a5c      	ldr	r2, [pc, #368]	; (8002348 <HAL_GPIO_Init+0x300>)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	220f      	movs	r2, #15
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021fe:	d02b      	beq.n	8002258 <HAL_GPIO_Init+0x210>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a52      	ldr	r2, [pc, #328]	; (800234c <HAL_GPIO_Init+0x304>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d025      	beq.n	8002254 <HAL_GPIO_Init+0x20c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a51      	ldr	r2, [pc, #324]	; (8002350 <HAL_GPIO_Init+0x308>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d01f      	beq.n	8002250 <HAL_GPIO_Init+0x208>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a50      	ldr	r2, [pc, #320]	; (8002354 <HAL_GPIO_Init+0x30c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d019      	beq.n	800224c <HAL_GPIO_Init+0x204>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a4f      	ldr	r2, [pc, #316]	; (8002358 <HAL_GPIO_Init+0x310>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d013      	beq.n	8002248 <HAL_GPIO_Init+0x200>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a4e      	ldr	r2, [pc, #312]	; (800235c <HAL_GPIO_Init+0x314>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00d      	beq.n	8002244 <HAL_GPIO_Init+0x1fc>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a4d      	ldr	r2, [pc, #308]	; (8002360 <HAL_GPIO_Init+0x318>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d007      	beq.n	8002240 <HAL_GPIO_Init+0x1f8>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a4c      	ldr	r2, [pc, #304]	; (8002364 <HAL_GPIO_Init+0x31c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d101      	bne.n	800223c <HAL_GPIO_Init+0x1f4>
 8002238:	2307      	movs	r3, #7
 800223a:	e00e      	b.n	800225a <HAL_GPIO_Init+0x212>
 800223c:	2308      	movs	r3, #8
 800223e:	e00c      	b.n	800225a <HAL_GPIO_Init+0x212>
 8002240:	2306      	movs	r3, #6
 8002242:	e00a      	b.n	800225a <HAL_GPIO_Init+0x212>
 8002244:	2305      	movs	r3, #5
 8002246:	e008      	b.n	800225a <HAL_GPIO_Init+0x212>
 8002248:	2304      	movs	r3, #4
 800224a:	e006      	b.n	800225a <HAL_GPIO_Init+0x212>
 800224c:	2303      	movs	r3, #3
 800224e:	e004      	b.n	800225a <HAL_GPIO_Init+0x212>
 8002250:	2302      	movs	r3, #2
 8002252:	e002      	b.n	800225a <HAL_GPIO_Init+0x212>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_GPIO_Init+0x212>
 8002258:	2300      	movs	r3, #0
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	f002 0203 	and.w	r2, r2, #3
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	4093      	lsls	r3, r2
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800226a:	4937      	ldr	r1, [pc, #220]	; (8002348 <HAL_GPIO_Init+0x300>)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002278:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_GPIO_Init+0x320>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800229c:	4a32      	ldr	r2, [pc, #200]	; (8002368 <HAL_GPIO_Init+0x320>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022a2:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_GPIO_Init+0x320>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022c6:	4a28      	ldr	r2, [pc, #160]	; (8002368 <HAL_GPIO_Init+0x320>)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022cc:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_GPIO_Init+0x320>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022f0:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <HAL_GPIO_Init+0x320>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022f6:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <HAL_GPIO_Init+0x320>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <HAL_GPIO_Init+0x320>)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3301      	adds	r3, #1
 8002324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	f47f ae91 	bne.w	8002058 <HAL_GPIO_Init+0x10>
  }
}
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000
 800234c:	48000400 	.word	0x48000400
 8002350:	48000800 	.word	0x48000800
 8002354:	48000c00 	.word	0x48000c00
 8002358:	48001000 	.word	0x48001000
 800235c:	48001400 	.word	0x48001400
 8002360:	48001800 	.word	0x48001800
 8002364:	48001c00 	.word	0x48001c00
 8002368:	40010400 	.word	0x40010400

0800236c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	e001      	b.n	800238e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
 80023a8:	4613      	mov	r3, r2
 80023aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f007 ff76 	bl	800a2dc <HAL_GPIO_EXTI_Callback>
  }
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40010400 	.word	0x40010400

080023fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e081      	b.n	8002512 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f008 fe8a 	bl	800b13c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	; 0x24
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800244c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800245c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	e006      	b.n	8002484 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002482:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d104      	bne.n	8002496 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002494:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69d9      	ldr	r1, [r3, #28]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1a      	ldr	r2, [r3, #32]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	461a      	mov	r2, r3
 8002528:	460b      	mov	r3, r1
 800252a:	817b      	strh	r3, [r7, #10]
 800252c:	4613      	mov	r3, r2
 800252e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b20      	cmp	r3, #32
 800253a:	f040 80da 	bne.w	80026f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_I2C_Master_Transmit+0x30>
 8002548:	2302      	movs	r3, #2
 800254a:	e0d3      	b.n	80026f4 <HAL_I2C_Master_Transmit+0x1d8>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002554:	f7fe f86a 	bl	800062c <HAL_GetTick>
 8002558:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2319      	movs	r3, #25
 8002560:	2201      	movs	r2, #1
 8002562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f9e6 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0be      	b.n	80026f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2221      	movs	r2, #33	; 0x21
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2210      	movs	r2, #16
 8002582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	893a      	ldrh	r2, [r7, #8]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2bff      	cmp	r3, #255	; 0xff
 80025a6:	d90e      	bls.n	80025c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	22ff      	movs	r2, #255	; 0xff
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	8979      	ldrh	r1, [r7, #10]
 80025b6:	4b51      	ldr	r3, [pc, #324]	; (80026fc <HAL_I2C_Master_Transmit+0x1e0>)
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fbdc 	bl	8002d7c <I2C_TransferConfig>
 80025c4:	e06c      	b.n	80026a0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	8979      	ldrh	r1, [r7, #10]
 80025d8:	4b48      	ldr	r3, [pc, #288]	; (80026fc <HAL_I2C_Master_Transmit+0x1e0>)
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fbcb 	bl	8002d7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025e6:	e05b      	b.n	80026a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	6a39      	ldr	r1, [r7, #32]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f9e3 	bl	80029b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e07b      	b.n	80026f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d034      	beq.n	80026a0 <HAL_I2C_Master_Transmit+0x184>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	2b00      	cmp	r3, #0
 800263c:	d130      	bne.n	80026a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2200      	movs	r2, #0
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f975 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e04d      	b.n	80026f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	d90e      	bls.n	8002680 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	22ff      	movs	r2, #255	; 0xff
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	b2da      	uxtb	r2, r3
 800266e:	8979      	ldrh	r1, [r7, #10]
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fb7f 	bl	8002d7c <I2C_TransferConfig>
 800267e:	e00f      	b.n	80026a0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	b2da      	uxtb	r2, r3
 8002690:	8979      	ldrh	r1, [r7, #10]
 8002692:	2300      	movs	r3, #0
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fb6e 	bl	8002d7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d19e      	bne.n	80025e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	6a39      	ldr	r1, [r7, #32]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f9c2 	bl	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e01a      	b.n	80026f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2220      	movs	r2, #32
 80026c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_I2C_Master_Transmit+0x1e4>)
 80026d2:	400b      	ands	r3, r1
 80026d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
  }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	80002000 	.word	0x80002000
 8002700:	fe00e800 	.word	0xfe00e800

08002704 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	461a      	mov	r2, r3
 8002710:	460b      	mov	r3, r1
 8002712:	817b      	strh	r3, [r7, #10]
 8002714:	4613      	mov	r3, r2
 8002716:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b20      	cmp	r3, #32
 8002722:	f040 80db 	bne.w	80028dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_I2C_Master_Receive+0x30>
 8002730:	2302      	movs	r3, #2
 8002732:	e0d4      	b.n	80028de <HAL_I2C_Master_Receive+0x1da>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800273c:	f7fd ff76 	bl	800062c <HAL_GetTick>
 8002740:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2319      	movs	r3, #25
 8002748:	2201      	movs	r2, #1
 800274a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f8f2 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0bf      	b.n	80028de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2222      	movs	r2, #34	; 0x22
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2210      	movs	r2, #16
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	893a      	ldrh	r2, [r7, #8]
 800277e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	2bff      	cmp	r3, #255	; 0xff
 800278e:	d90e      	bls.n	80027ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	22ff      	movs	r2, #255	; 0xff
 8002794:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	b2da      	uxtb	r2, r3
 800279c:	8979      	ldrh	r1, [r7, #10]
 800279e:	4b52      	ldr	r3, [pc, #328]	; (80028e8 <HAL_I2C_Master_Receive+0x1e4>)
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fae8 	bl	8002d7c <I2C_TransferConfig>
 80027ac:	e06d      	b.n	800288a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	8979      	ldrh	r1, [r7, #10]
 80027c0:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <HAL_I2C_Master_Receive+0x1e4>)
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fad7 	bl	8002d7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80027ce:	e05c      	b.n	800288a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	6a39      	ldr	r1, [r7, #32]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f96b 	bl	8002ab0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e07c      	b.n	80028de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d034      	beq.n	800288a <HAL_I2C_Master_Receive+0x186>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d130      	bne.n	800288a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	2200      	movs	r2, #0
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f880 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e04d      	b.n	80028de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	2bff      	cmp	r3, #255	; 0xff
 800284a:	d90e      	bls.n	800286a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	22ff      	movs	r2, #255	; 0xff
 8002850:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	b2da      	uxtb	r2, r3
 8002858:	8979      	ldrh	r1, [r7, #10]
 800285a:	2300      	movs	r3, #0
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fa8a 	bl	8002d7c <I2C_TransferConfig>
 8002868:	e00f      	b.n	800288a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	b2da      	uxtb	r2, r3
 800287a:	8979      	ldrh	r1, [r7, #10]
 800287c:	2300      	movs	r3, #0
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fa79 	bl	8002d7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d19d      	bne.n	80027d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	6a39      	ldr	r1, [r7, #32]
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f8cd 	bl	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e01a      	b.n	80028de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2220      	movs	r2, #32
 80028ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6859      	ldr	r1, [r3, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_I2C_Master_Receive+0x1e8>)
 80028bc:	400b      	ands	r3, r1
 80028be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	e000      	b.n	80028de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	80002400 	.word	0x80002400
 80028ec:	fe00e800 	.word	0xfe00e800

080028f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d103      	bne.n	800290e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d007      	beq.n	800292c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	619a      	str	r2, [r3, #24]
  }
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002948:	e022      	b.n	8002990 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002950:	d01e      	beq.n	8002990 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002952:	f7fd fe6b 	bl	800062c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d302      	bcc.n	8002968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d113      	bne.n	8002990 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e00f      	b.n	80029b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4013      	ands	r3, r2
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	429a      	cmp	r2, r3
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d0cd      	beq.n	800294a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029c4:	e02c      	b.n	8002a20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f8ea 	bl	8002ba4 <I2C_IsErrorOccurred>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e02a      	b.n	8002a30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e0:	d01e      	beq.n	8002a20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e2:	f7fd fe23 	bl	800062c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d302      	bcc.n	80029f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d113      	bne.n	8002a20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e007      	b.n	8002a30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d1cb      	bne.n	80029c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a44:	e028      	b.n	8002a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f8aa 	bl	8002ba4 <I2C_IsErrorOccurred>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e026      	b.n	8002aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5a:	f7fd fde7 	bl	800062c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d113      	bne.n	8002a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e007      	b.n	8002aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d1cf      	bne.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002abc:	e064      	b.n	8002b88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f86e 	bl	8002ba4 <I2C_IsErrorOccurred>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e062      	b.n	8002b98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d138      	bne.n	8002b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d105      	bne.n	8002afa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e04e      	b.n	8002b98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d107      	bne.n	8002b18 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2204      	movs	r2, #4
 8002b14:	645a      	str	r2, [r3, #68]	; 0x44
 8002b16:	e002      	b.n	8002b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2220      	movs	r2, #32
 8002b24:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002b32:	400b      	ands	r3, r1
 8002b34:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e022      	b.n	8002b98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7fd fd6b 	bl	800062c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10f      	bne.n	8002b88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e007      	b.n	8002b98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d193      	bne.n	8002abe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	fe00e800 	.word	0xfe00e800

08002ba4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d075      	beq.n	8002cbc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bd8:	e056      	b.n	8002c88 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002be0:	d052      	beq.n	8002c88 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002be2:	f7fd fd23 	bl	800062c <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d302      	bcc.n	8002bf8 <I2C_IsErrorOccurred+0x54>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d147      	bne.n	8002c88 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1a:	d12e      	bne.n	8002c7a <I2C_IsErrorOccurred+0xd6>
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c22:	d02a      	beq.n	8002c7a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d027      	beq.n	8002c7a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c3a:	f7fd fcf7 	bl	800062c <HAL_GetTick>
 8002c3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c40:	e01b      	b.n	8002c7a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c42:	f7fd fcf3 	bl	800062c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b19      	cmp	r3, #25
 8002c4e:	d914      	bls.n	8002c7a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d1dc      	bne.n	8002c42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d003      	beq.n	8002c9e <I2C_IsErrorOccurred+0xfa>
 8002c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d09d      	beq.n	8002bda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2220      	movs	r2, #32
 8002cac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	f043 0304 	orr.w	r3, r3, #4
 8002cb4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01c      	beq.n	8002d6c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f7ff fddc 	bl	80028f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <I2C_IsErrorOccurred+0x1d4>)
 8002d44:	400b      	ands	r3, r1
 8002d46:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3728      	adds	r7, #40	; 0x28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	fe00e800 	.word	0xfe00e800

08002d7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	607b      	str	r3, [r7, #4]
 8002d86:	460b      	mov	r3, r1
 8002d88:	817b      	strh	r3, [r7, #10]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d8e:	897b      	ldrh	r3, [r7, #10]
 8002d90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d94:	7a7b      	ldrb	r3, [r7, #9]
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002daa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	0d5b      	lsrs	r3, r3, #21
 8002db6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002dba:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <I2C_TransferConfig+0x60>)
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	ea02 0103 	and.w	r1, r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dce:	bf00      	nop
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	03ff63ff 	.word	0x03ff63ff

08002de0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d138      	bne.n	8002e68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e032      	b.n	8002e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2224      	movs	r2, #36	; 0x24
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e000      	b.n	8002e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
  }
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d139      	bne.n	8002f00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e033      	b.n	8002f02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2224      	movs	r2, #36	; 0x24
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ec8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7fd fb86 	bl	800062c <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	e092      	b.n	8003054 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 808b 	bne.w	8003054 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f008 f95a 	bl	800b1f8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002f44:	f241 3188 	movw	r1, #5000	; 0x1388
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 faa9 	bl	80034a0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	4b42      	ldr	r3, [pc, #264]	; (8003060 <HAL_OSPI_Init+0x150>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68d1      	ldr	r1, [r2, #12]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6912      	ldr	r2, [r2, #16]
 8002f60:	3a01      	subs	r2, #1
 8002f62:	0412      	lsls	r2, r2, #16
 8002f64:	4311      	orrs	r1, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6952      	ldr	r2, [r2, #20]
 8002f6a:	3a01      	subs	r2, #1
 8002f6c:	0212      	lsls	r2, r2, #8
 8002f6e:	4311      	orrs	r1, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f74:	4311      	orrs	r1, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	69d2      	ldr	r2, [r2, #28]
 8002f7a:	4311      	orrs	r1, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0412      	lsls	r2, r2, #16
 8002f8e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	021a      	lsls	r2, r3, #8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2120      	movs	r1, #32
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fdb6 	bl	8003b28 <OSPI_WaitFlagStateUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d146      	bne.n	8003054 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	1e5a      	subs	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ffc:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d107      	bne.n	800303c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0202 	orr.w	r2, r2, #2
 800303a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003044:	d103      	bne.n	800304e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	645a      	str	r2, [r3, #68]	; 0x44
 800304c:	e002      	b.n	8003054 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2202      	movs	r2, #2
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	f8e0f8f4 	.word	0xf8e0f8f4

08003064 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003070:	f7fd fadc 	bl	800062c <HAL_GetTick>
 8003074:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d104      	bne.n	8003092 <HAL_OSPI_Command+0x2e>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003090:	d10d      	bne.n	80030ae <HAL_OSPI_Command+0x4a>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b14      	cmp	r3, #20
 8003096:	d103      	bne.n	80030a0 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d006      	beq.n	80030ae <HAL_OSPI_Command+0x4a>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b24      	cmp	r3, #36	; 0x24
 80030a4:	d153      	bne.n	800314e <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d14f      	bne.n	800314e <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2120      	movs	r1, #32
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fd35 	bl	8003b28 <OSPI_WaitFlagStateUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80030c2:	7ffb      	ldrb	r3, [r7, #31]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d148      	bne.n	800315a <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fd61 	bl	8003b98 <OSPI_ConfigCmd>
 80030d6:	4603      	mov	r3, r0
 80030d8:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80030da:	7ffb      	ldrb	r3, [r7, #31]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d13c      	bne.n	800315a <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10e      	bne.n	8003106 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2201      	movs	r2, #1
 80030f0:	2102      	movs	r1, #2
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fd18 	bl	8003b28 <OSPI_WaitFlagStateUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2202      	movs	r2, #2
 8003102:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003104:	e029      	b.n	800315a <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2204      	movs	r2, #4
 8003112:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003114:	e021      	b.n	800315a <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d10b      	bne.n	8003136 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	2b24      	cmp	r3, #36	; 0x24
 8003124:	d103      	bne.n	800312e <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2204      	movs	r2, #4
 800312a:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800312c:	e015      	b.n	800315a <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2214      	movs	r2, #20
 8003132:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003134:	e011      	b.n	800315a <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	2b14      	cmp	r3, #20
 800313c:	d103      	bne.n	8003146 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2204      	movs	r2, #4
 8003142:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003144:	e009      	b.n	800315a <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2224      	movs	r2, #36	; 0x24
 800314a:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800314c:	e005      	b.n	800315a <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2210      	movs	r2, #16
 8003156:	649a      	str	r2, [r3, #72]	; 0x48
 8003158:	e000      	b.n	800315c <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 800315a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800315c:	7ffb      	ldrb	r3, [r7, #31]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b08a      	sub	sp, #40	; 0x28
 800316a:	af02      	add	r7, sp, #8
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003172:	f7fd fa5b 	bl	800062c <HAL_GetTick>
 8003176:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3350      	adds	r3, #80	; 0x50
 800317e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d105      	bne.n	8003192 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2208      	movs	r2, #8
 800318e:	649a      	str	r2, [r3, #72]	; 0x48
 8003190:	e057      	b.n	8003242 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	2b04      	cmp	r3, #4
 8003198:	d14e      	bne.n	8003238 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031c2:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2201      	movs	r2, #1
 80031cc:	2104      	movs	r1, #4
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fcaa 	bl	8003b28 <OSPI_WaitFlagStateUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80031d8:	7ffb      	ldrb	r3, [r7, #31]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d113      	bne.n	8003206 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	1e5a      	subs	r2, r3, #1
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1df      	bne.n	80031c4 <HAL_OSPI_Transmit+0x5e>
 8003204:	e000      	b.n	8003208 <HAL_OSPI_Transmit+0xa2>
          break;
 8003206:	bf00      	nop

      if (status == HAL_OK)
 8003208:	7ffb      	ldrb	r3, [r7, #31]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d119      	bne.n	8003242 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2201      	movs	r2, #1
 8003216:	2102      	movs	r1, #2
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fc85 	bl	8003b28 <OSPI_WaitFlagStateUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003222:	7ffb      	ldrb	r3, [r7, #31]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10c      	bne.n	8003242 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2202      	movs	r2, #2
 800322e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2202      	movs	r2, #2
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
 8003236:	e004      	b.n	8003242 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2210      	movs	r2, #16
 8003240:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003242:	7ffb      	ldrb	r3, [r7, #31]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08c      	sub	sp, #48	; 0x30
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003258:	f7fd f9e8 	bl	800062c <HAL_GetTick>
 800325c:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3350      	adds	r3, #80	; 0x50
 8003264:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326c:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003276:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2208      	movs	r2, #8
 8003288:	649a      	str	r2, [r3, #72]	; 0x48
 800328a:	e07c      	b.n	8003386 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	2b04      	cmp	r3, #4
 8003292:	d172      	bne.n	800337a <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032c0:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ca:	d104      	bne.n	80032d6 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	649a      	str	r2, [r3, #72]	; 0x48
 80032d4:	e011      	b.n	80032fa <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80032de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d004      	beq.n	80032f0 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	649a      	str	r2, [r3, #72]	; 0x48
 80032ee:	e004      	b.n	80032fa <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	2201      	movs	r2, #1
 8003302:	2106      	movs	r1, #6
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fc0f 	bl	8003b28 <OSPI_WaitFlagStateUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8003310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003314:	2b00      	cmp	r3, #0
 8003316:	d114      	bne.n	8003342 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	7812      	ldrb	r2, [r2, #0]
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	1e5a      	subs	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1dc      	bne.n	80032fa <HAL_OSPI_Receive+0xae>
 8003340:	e000      	b.n	8003344 <HAL_OSPI_Receive+0xf8>
          break;
 8003342:	bf00      	nop

      if (status == HAL_OK)
 8003344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003348:	2b00      	cmp	r3, #0
 800334a:	d11c      	bne.n	8003386 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	2201      	movs	r2, #1
 8003354:	2102      	movs	r1, #2
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fbe6 	bl	8003b28 <OSPI_WaitFlagStateUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8003362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10d      	bne.n	8003386 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2202      	movs	r2, #2
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2202      	movs	r2, #2
 8003376:	645a      	str	r2, [r3, #68]	; 0x44
 8003378:	e005      	b.n	8003386 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2210      	movs	r2, #16
 8003384:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800338a:	4618      	mov	r0, r3
 800338c:	3728      	adds	r7, #40	; 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b08a      	sub	sp, #40	; 0x28
 8003396:	af02      	add	r7, sp, #8
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800339e:	f7fd f945 	bl	800062c <HAL_GetTick>
 80033a2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033aa:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80033b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d164      	bne.n	8003488 <HAL_OSPI_AutoPolling+0xf6>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c6:	d15f      	bne.n	8003488 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2200      	movs	r2, #0
 80033d0:	2120      	movs	r1, #32
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fba8 	bl	8003b28 <OSPI_WaitFlagStateUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80033dc:	7ffb      	ldrb	r3, [r7, #31]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d158      	bne.n	8003494 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	6852      	ldr	r2, [r2, #4]
 80033f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	6912      	ldr	r2, [r2, #16]
 8003402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	6899      	ldr	r1, [r3, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	430b      	orrs	r3, r1
 800341a:	431a      	orrs	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003424:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800342e:	d104      	bne.n	800343a <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	649a      	str	r2, [r3, #72]	; 0x48
 8003438:	e011      	b.n	800345e <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003442:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003446:	2b00      	cmp	r3, #0
 8003448:	d004      	beq.n	8003454 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	649a      	str	r2, [r3, #72]	; 0x48
 8003452:	e004      	b.n	800345e <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2201      	movs	r2, #1
 8003466:	2108      	movs	r1, #8
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fb5d 	bl	8003b28 <OSPI_WaitFlagStateUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003472:	7ffb      	ldrb	r3, [r7, #31]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2208      	movs	r2, #8
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2202      	movs	r2, #2
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003486:	e005      	b.n	8003494 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2210      	movs	r2, #16
 8003490:	649a      	str	r2, [r3, #72]	; 0x48
 8003492:	e000      	b.n	8003496 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8003494:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003496:	7ffb      	ldrb	r3, [r7, #31]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b092      	sub	sp, #72	; 0x48
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a08      	ldr	r2, [pc, #32]	; (8003500 <HAL_OSPIM_Config+0x40>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d105      	bne.n	80034ee <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80034ec:	e004      	b.n	80034f8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80034ee:	2301      	movs	r3, #1
 80034f0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80034fe:	e01f      	b.n	8003540 <HAL_OSPIM_Config+0x80>
 8003500:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003504:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003508:	3301      	adds	r3, #1
 800350a:	b2d8      	uxtb	r0, r3
 800350c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003510:	f107 0114 	add.w	r1, r7, #20
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	4619      	mov	r1, r3
 8003520:	f000 fc9c 	bl	8003e5c <OSPIM_GetConfig>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2208      	movs	r2, #8
 8003534:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003536:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800353a:	3301      	adds	r3, #1
 800353c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003540:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003544:	2b01      	cmp	r3, #1
 8003546:	d9dd      	bls.n	8003504 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003548:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800354c:	2b00      	cmp	r3, #0
 800354e:	f040 82de 	bne.w	8003b0e <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003552:	4bc6      	ldr	r3, [pc, #792]	; (800386c <HAL_OSPIM_Config+0x3ac>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800355e:	4bc3      	ldr	r3, [pc, #780]	; (800386c <HAL_OSPIM_Config+0x3ac>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4ac2      	ldr	r2, [pc, #776]	; (800386c <HAL_OSPIM_Config+0x3ac>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800356a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003576:	4bbe      	ldr	r3, [pc, #760]	; (8003870 <HAL_OSPIM_Config+0x3b0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003582:	4bbb      	ldr	r3, [pc, #748]	; (8003870 <HAL_OSPIM_Config+0x3b0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4aba      	ldr	r2, [pc, #744]	; (8003870 <HAL_OSPIM_Config+0x3b0>)
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800358e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003592:	f043 0302 	orr.w	r3, r3, #2
 8003596:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800359a:	49b6      	ldr	r1, [pc, #728]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 800359c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	3348      	adds	r3, #72	; 0x48
 80035a8:	443b      	add	r3, r7
 80035aa:	3b2c      	subs	r3, #44	; 0x2c
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	6859      	ldr	r1, [r3, #4]
 80035b6:	48af      	ldr	r0, [pc, #700]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 80035b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	3348      	adds	r3, #72	; 0x48
 80035c4:	443b      	add	r3, r7
 80035c6:	3b2c      	subs	r3, #44	; 0x2c
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4403      	add	r3, r0
 80035d4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80035d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	3348      	adds	r3, #72	; 0x48
 80035e2:	443b      	add	r3, r7
 80035e4:	3b34      	subs	r3, #52	; 0x34
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a1 	beq.w	8003730 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80035ee:	49a1      	ldr	r1, [pc, #644]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 80035f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	3348      	adds	r3, #72	; 0x48
 80035fc:	443b      	add	r3, r7
 80035fe:	3b34      	subs	r3, #52	; 0x34
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3b01      	subs	r3, #1
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	489a      	ldr	r0, [pc, #616]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 800360c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	3348      	adds	r3, #72	; 0x48
 8003618:	443b      	add	r3, r7
 800361a:	3b34      	subs	r3, #52	; 0x34
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3b01      	subs	r3, #1
 8003620:	f021 0201 	bic.w	r2, r1, #1
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4403      	add	r3, r0
 8003628:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800362a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	3348      	adds	r3, #72	; 0x48
 8003636:	443b      	add	r3, r7
 8003638:	3b30      	subs	r3, #48	; 0x30
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01d      	beq.n	800367c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003640:	498c      	ldr	r1, [pc, #560]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 8003642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	3348      	adds	r3, #72	; 0x48
 800364e:	443b      	add	r3, r7
 8003650:	3b30      	subs	r3, #48	; 0x30
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3b01      	subs	r3, #1
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	4885      	ldr	r0, [pc, #532]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 800365e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	3348      	adds	r3, #72	; 0x48
 800366a:	443b      	add	r3, r7
 800366c:	3b30      	subs	r3, #48	; 0x30
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3b01      	subs	r3, #1
 8003672:	f021 0210 	bic.w	r2, r1, #16
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4403      	add	r3, r0
 800367a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800367c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	3348      	adds	r3, #72	; 0x48
 8003688:	443b      	add	r3, r7
 800368a:	3b28      	subs	r3, #40	; 0x28
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d021      	beq.n	80036d6 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003692:	4978      	ldr	r1, [pc, #480]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 8003694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	3348      	adds	r3, #72	; 0x48
 80036a0:	443b      	add	r3, r7
 80036a2:	3b28      	subs	r3, #40	; 0x28
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	6859      	ldr	r1, [r3, #4]
 80036b2:	4870      	ldr	r0, [pc, #448]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 80036b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	3348      	adds	r3, #72	; 0x48
 80036c0:	443b      	add	r3, r7
 80036c2:	3b28      	subs	r3, #40	; 0x28
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4403      	add	r3, r0
 80036d4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80036d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	3348      	adds	r3, #72	; 0x48
 80036e2:	443b      	add	r3, r7
 80036e4:	3b24      	subs	r3, #36	; 0x24
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d021      	beq.n	8003730 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80036ec:	4961      	ldr	r1, [pc, #388]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 80036ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	3348      	adds	r3, #72	; 0x48
 80036fa:	443b      	add	r3, r7
 80036fc:	3b24      	subs	r3, #36	; 0x24
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3b01      	subs	r3, #1
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	4859      	ldr	r0, [pc, #356]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 800370e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3348      	adds	r3, #72	; 0x48
 800371a:	443b      	add	r3, r7
 800371c:	3b24      	subs	r3, #36	; 0x24
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3b01      	subs	r3, #1
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4403      	add	r3, r0
 800372e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	3348      	adds	r3, #72	; 0x48
 8003742:	443b      	add	r3, r7
 8003744:	3b34      	subs	r3, #52	; 0x34
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4299      	cmp	r1, r3
 800374a:	d038      	beq.n	80037be <HAL_OSPIM_Config+0x2fe>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	3348      	adds	r3, #72	; 0x48
 800375e:	443b      	add	r3, r7
 8003760:	3b30      	subs	r3, #48	; 0x30
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4299      	cmp	r1, r3
 8003766:	d02a      	beq.n	80037be <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6899      	ldr	r1, [r3, #8]
 800376c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	3348      	adds	r3, #72	; 0x48
 800377a:	443b      	add	r3, r7
 800377c:	3b2c      	subs	r3, #44	; 0x2c
 800377e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003780:	4299      	cmp	r1, r3
 8003782:	d01c      	beq.n	80037be <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	68d9      	ldr	r1, [r3, #12]
 8003788:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	3348      	adds	r3, #72	; 0x48
 8003796:	443b      	add	r3, r7
 8003798:	3b28      	subs	r3, #40	; 0x28
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4299      	cmp	r1, r3
 800379e:	d00e      	beq.n	80037be <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	6919      	ldr	r1, [r3, #16]
 80037a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	3348      	adds	r3, #72	; 0x48
 80037b2:	443b      	add	r3, r7
 80037b4:	3b24      	subs	r3, #36	; 0x24
 80037b6:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80037b8:	4299      	cmp	r1, r3
 80037ba:	f040 80d3 	bne.w	8003964 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80037be:	492d      	ldr	r1, [pc, #180]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 80037c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	3348      	adds	r3, #72	; 0x48
 80037ce:	443b      	add	r3, r7
 80037d0:	3b34      	subs	r3, #52	; 0x34
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	4825      	ldr	r0, [pc, #148]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 80037de:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	3348      	adds	r3, #72	; 0x48
 80037ec:	443b      	add	r3, r7
 80037ee:	3b34      	subs	r3, #52	; 0x34
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	f021 0201 	bic.w	r2, r1, #1
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4403      	add	r3, r0
 80037fc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80037fe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	3348      	adds	r3, #72	; 0x48
 800380c:	443b      	add	r3, r7
 800380e:	3b30      	subs	r3, #48	; 0x30
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01f      	beq.n	8003856 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003816:	4917      	ldr	r1, [pc, #92]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 8003818:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	3348      	adds	r3, #72	; 0x48
 8003826:	443b      	add	r3, r7
 8003828:	3b30      	subs	r3, #48	; 0x30
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3b01      	subs	r3, #1
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	480f      	ldr	r0, [pc, #60]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 8003836:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	3348      	adds	r3, #72	; 0x48
 8003844:	443b      	add	r3, r7
 8003846:	3b30      	subs	r3, #48	; 0x30
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3b01      	subs	r3, #1
 800384c:	f021 0210 	bic.w	r2, r1, #16
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4403      	add	r3, r0
 8003854:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003856:	4907      	ldr	r1, [pc, #28]	; (8003874 <HAL_OSPIM_Config+0x3b4>)
 8003858:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	3348      	adds	r3, #72	; 0x48
 8003866:	443b      	add	r3, r7
 8003868:	3b2c      	subs	r3, #44	; 0x2c
 800386a:	e005      	b.n	8003878 <HAL_OSPIM_Config+0x3b8>
 800386c:	a0001000 	.word	0xa0001000
 8003870:	a0001400 	.word	0xa0001400
 8003874:	50061c00 	.word	0x50061c00
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3b01      	subs	r3, #1
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	48a6      	ldr	r0, [pc, #664]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 8003884:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	3348      	adds	r3, #72	; 0x48
 8003892:	443b      	add	r3, r7
 8003894:	3b2c      	subs	r3, #44	; 0x2c
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3b01      	subs	r3, #1
 800389a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4403      	add	r3, r0
 80038a2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80038a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	3348      	adds	r3, #72	; 0x48
 80038b2:	443b      	add	r3, r7
 80038b4:	3b28      	subs	r3, #40	; 0x28
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d023      	beq.n	8003904 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80038bc:	4997      	ldr	r1, [pc, #604]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 80038be:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	3348      	adds	r3, #72	; 0x48
 80038cc:	443b      	add	r3, r7
 80038ce:	3b28      	subs	r3, #40	; 0x28
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	488f      	ldr	r0, [pc, #572]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 80038e0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	3348      	adds	r3, #72	; 0x48
 80038ee:	443b      	add	r3, r7
 80038f0:	3b28      	subs	r3, #40	; 0x28
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4403      	add	r3, r0
 8003902:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003904:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	3348      	adds	r3, #72	; 0x48
 8003912:	443b      	add	r3, r7
 8003914:	3b24      	subs	r3, #36	; 0x24
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d023      	beq.n	8003964 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800391c:	497f      	ldr	r1, [pc, #508]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 800391e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	3348      	adds	r3, #72	; 0x48
 800392c:	443b      	add	r3, r7
 800392e:	3b24      	subs	r3, #36	; 0x24
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3b01      	subs	r3, #1
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	4877      	ldr	r0, [pc, #476]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 8003940:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	3348      	adds	r3, #72	; 0x48
 800394e:	443b      	add	r3, r7
 8003950:	3b24      	subs	r3, #36	; 0x24
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3b01      	subs	r3, #1
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4403      	add	r3, r0
 8003962:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003964:	4a6d      	ldr	r2, [pc, #436]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	3b01      	subs	r3, #1
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003978:	025b      	lsls	r3, r3, #9
 800397a:	431a      	orrs	r2, r3
 800397c:	4967      	ldr	r1, [pc, #412]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	3b01      	subs	r3, #1
 8003984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800398e:	4a63      	ldr	r2, [pc, #396]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3b01      	subs	r3, #1
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f023 0203 	bic.w	r2, r3, #3
 80039a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	431a      	orrs	r2, r3
 80039a6:	495d      	ldr	r1, [pc, #372]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d014      	beq.n	80039ea <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80039c0:	4a56      	ldr	r2, [pc, #344]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039d4:	015b      	lsls	r3, r3, #5
 80039d6:	431a      	orrs	r2, r3
 80039d8:	4950      	ldr	r1, [pc, #320]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	f042 0210 	orr.w	r2, r2, #16
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d019      	beq.n	8003a2a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80039f6:	4a49      	ldr	r2, [pc, #292]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0e:	049b      	lsls	r3, r3, #18
 8003a10:	431a      	orrs	r2, r3
 8003a12:	4942      	ldr	r1, [pc, #264]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	605a      	str	r2, [r3, #4]
 8003a28:	e01c      	b.n	8003a64 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d018      	beq.n	8003a64 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003a32:	4a3a      	ldr	r2, [pc, #232]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4a:	069b      	lsls	r3, r3, #26
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	4933      	ldr	r1, [pc, #204]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d019      	beq.n	8003aa4 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003a70:	4a2a      	ldr	r2, [pc, #168]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a88:	049b      	lsls	r3, r3, #18
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	4923      	ldr	r1, [pc, #140]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	e01c      	b.n	8003ade <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d018      	beq.n	8003ade <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003aac:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac4:	069b      	lsls	r3, r3, #26
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	4914      	ldr	r1, [pc, #80]	; (8003b1c <HAL_OSPIM_Config+0x65c>)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003ade:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <HAL_OSPIM_Config+0x660>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a0c      	ldr	r2, [pc, #48]	; (8003b20 <HAL_OSPIM_Config+0x660>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003af6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_OSPIM_Config+0x664>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a07      	ldr	r2, [pc, #28]	; (8003b24 <HAL_OSPIM_Config+0x664>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003b0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3748      	adds	r7, #72	; 0x48
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	50061c00 	.word	0x50061c00
 8003b20:	a0001000 	.word	0xa0001000
 8003b24:	a0001400 	.word	0xa0001400

08003b28 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	4613      	mov	r3, r2
 8003b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003b38:	e01a      	b.n	8003b70 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b40:	d016      	beq.n	8003b70 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b42:	f7fc fd73 	bl	800062c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d302      	bcc.n	8003b58 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b64:	f043 0201 	orr.w	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e00e      	b.n	8003b8e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bf14      	ite	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	2300      	moveq	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1d6      	bne.n	8003b3a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	; 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d114      	bne.n	8003c06 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003be4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003bee:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003bf8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	e013      	b.n	8003c2e <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c0e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003c18:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003c22:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c36:	431a      	orrs	r2, r3
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d012      	beq.n	8003c6a <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5c:	4319      	orrs	r1, r3
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	430b      	orrs	r3, r1
 8003c64:	431a      	orrs	r2, r3
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 021f 	bic.w	r2, r3, #31
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	431a      	orrs	r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3a01      	subs	r2, #1
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8099 	beq.w	8003dd4 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d055      	beq.n	8003d56 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01e      	beq.n	8003cf0 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b68      	ldr	r3, [pc, #416]	; (8003e58 <OSPI_ConfigCmd+0x2c0>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	68d1      	ldr	r1, [r2, #12]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	6952      	ldr	r2, [r2, #20]
 8003cc2:	4311      	orrs	r1, r2
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	6912      	ldr	r2, [r2, #16]
 8003cc8:	4311      	orrs	r1, r2
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	69d2      	ldr	r2, [r2, #28]
 8003cce:	4311      	orrs	r1, r2
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cd4:	4311      	orrs	r1, r2
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	6a12      	ldr	r2, [r2, #32]
 8003cda:	4311      	orrs	r1, r2
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e028      	b.n	8003d42 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	68d1      	ldr	r1, [r2, #12]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	6952      	ldr	r2, [r2, #20]
 8003d04:	4311      	orrs	r1, r2
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	6912      	ldr	r2, [r2, #16]
 8003d0a:	4311      	orrs	r1, r2
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	69d2      	ldr	r2, [r2, #28]
 8003d10:	4311      	orrs	r1, r2
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d16:	4311      	orrs	r1, r2
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	6a12      	ldr	r2, [r2, #32]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d2c:	d109      	bne.n	8003d42 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d105      	bne.n	8003d42 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	6992      	ldr	r2, [r2, #24]
 8003d52:	649a      	str	r2, [r3, #72]	; 0x48
 8003d54:	e078      	b.n	8003e48 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d017      	beq.n	8003d8e <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003d66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	68d1      	ldr	r1, [r2, #12]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	6952      	ldr	r2, [r2, #20]
 8003d72:	4311      	orrs	r1, r2
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	6912      	ldr	r2, [r2, #16]
 8003d78:	4311      	orrs	r1, r2
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d7e:	4311      	orrs	r1, r2
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d84:	430a      	orrs	r2, r1
 8003d86:	431a      	orrs	r2, r3
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e01d      	b.n	8003dca <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68d9      	ldr	r1, [r3, #12]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	4319      	orrs	r1, r3
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	430b      	orrs	r3, r1
 8003da6:	431a      	orrs	r2, r3
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003db4:	d109      	bne.n	8003dca <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d105      	bne.n	8003dca <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e039      	b.n	8003e48 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d030      	beq.n	8003e3e <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d017      	beq.n	8003e14 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003dec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	69d1      	ldr	r1, [r2, #28]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003df8:	4311      	orrs	r1, r2
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	6a12      	ldr	r2, [r2, #32]
 8003dfe:	4311      	orrs	r1, r2
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e04:	4311      	orrs	r1, r2
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e00e      	b.n	8003e32 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	69d9      	ldr	r1, [r3, #28]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	4319      	orrs	r1, r3
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	6992      	ldr	r2, [r2, #24]
 8003e3a:	649a      	str	r2, [r3, #72]	; 0x48
 8003e3c:	e004      	b.n	8003e48 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2208      	movs	r2, #8
 8003e46:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3724      	adds	r7, #36	; 0x24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	f0ffc0c0 	.word	0xf0ffc0c0

08003e5c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	6039      	str	r1, [r7, #0]
 8003e66:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <OSPIM_GetConfig+0x26>
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d802      	bhi.n	8003e82 <OSPIM_GetConfig+0x26>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
 8003e86:	e08e      	b.n	8003fa6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2200      	movs	r2, #0
 8003e92:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d101      	bne.n	8003eb0 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003eac:	4b41      	ldr	r3, [pc, #260]	; (8003fb4 <OSPIM_GetConfig+0x158>)
 8003eae:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e074      	b.n	8003fa0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003eb6:	4a40      	ldr	r2, [pc, #256]	; (8003fb8 <OSPIM_GetConfig+0x15c>)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4053      	eors	r3, r2
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4053      	eors	r3, r2
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4053      	eors	r3, r2
 8003f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d103      	bne.n	8003f22 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d018      	beq.n	8003f5e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4053      	eors	r3, r2
 8003f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d111      	bne.n	8003f5e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3301      	adds	r3, #1
 8003f48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	60da      	str	r2, [r3, #12]
 8003f50:	e005      	b.n	8003f5e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3301      	adds	r3, #1
 8003f56:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d018      	beq.n	8003f9a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4053      	eors	r3, r2
 8003f6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d111      	bne.n	8003f9a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3301      	adds	r3, #1
 8003f84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	611a      	str	r2, [r3, #16]
 8003f8c:	e005      	b.n	8003f9a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3301      	adds	r3, #1
 8003f92:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d987      	bls.n	8003eb6 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	04040222 	.word	0x04040222
 8003fb8:	50061c00 	.word	0x50061c00

08003fbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fc0:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fcc:	d102      	bne.n	8003fd4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fd2:	e00b      	b.n	8003fec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003fd4:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe2:	d102      	bne.n	8003fea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fe8:	e000      	b.n	8003fec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003fea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40007000 	.word	0x40007000

08003ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d141      	bne.n	800408e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800400a:	4b4b      	ldr	r3, [pc, #300]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004016:	d131      	bne.n	800407c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004018:	4b47      	ldr	r3, [pc, #284]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800401e:	4a46      	ldr	r2, [pc, #280]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004024:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004028:	4b43      	ldr	r3, [pc, #268]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004030:	4a41      	ldr	r2, [pc, #260]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004036:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004038:	4b40      	ldr	r3, [pc, #256]	; (800413c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2232      	movs	r2, #50	; 0x32
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	4a3f      	ldr	r2, [pc, #252]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	0c9b      	lsrs	r3, r3, #18
 800404a:	3301      	adds	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800404e:	e002      	b.n	8004056 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b01      	subs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004056:	4b38      	ldr	r3, [pc, #224]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004062:	d102      	bne.n	800406a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f2      	bne.n	8004050 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800406a:	4b33      	ldr	r3, [pc, #204]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004076:	d158      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e057      	b.n	800412c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800407c:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004082:	4a2d      	ldr	r2, [pc, #180]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800408c:	e04d      	b.n	800412a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004094:	d141      	bne.n	800411a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004096:	4b28      	ldr	r3, [pc, #160]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800409e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a2:	d131      	bne.n	8004108 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040a4:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040aa:	4a23      	ldr	r2, [pc, #140]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040b4:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040bc:	4a1e      	ldr	r2, [pc, #120]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2232      	movs	r2, #50	; 0x32
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	0c9b      	lsrs	r3, r3, #18
 80040d6:	3301      	adds	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040da:	e002      	b.n	80040e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3b01      	subs	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040e2:	4b15      	ldr	r3, [pc, #84]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ee:	d102      	bne.n	80040f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f2      	bne.n	80040dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004102:	d112      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e011      	b.n	800412c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410e:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004118:	e007      	b.n	800412a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004122:	4a05      	ldr	r2, [pc, #20]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004124:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004128:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	40007000 	.word	0x40007000
 800413c:	200000a8 	.word	0x200000a8
 8004140:	431bde83 	.word	0x431bde83

08004144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f000 bc08 	b.w	8004968 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004158:	4b96      	ldr	r3, [pc, #600]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004162:	4b94      	ldr	r3, [pc, #592]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80e4 	beq.w	8004342 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <HAL_RCC_OscConfig+0x4c>
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b0c      	cmp	r3, #12
 8004184:	f040 808b 	bne.w	800429e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2b01      	cmp	r3, #1
 800418c:	f040 8087 	bne.w	800429e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004190:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_OscConfig+0x64>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e3df      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1a      	ldr	r2, [r3, #32]
 80041ac:	4b81      	ldr	r3, [pc, #516]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <HAL_RCC_OscConfig+0x7e>
 80041b8:	4b7e      	ldr	r3, [pc, #504]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c0:	e005      	b.n	80041ce <HAL_RCC_OscConfig+0x8a>
 80041c2:	4b7c      	ldr	r3, [pc, #496]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80041c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d223      	bcs.n	800421a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fdfe 	bl	8004dd8 <RCC_SetFlashLatencyFromMSIRange>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e3c0      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e6:	4b73      	ldr	r3, [pc, #460]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a72      	ldr	r2, [pc, #456]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80041ec:	f043 0308 	orr.w	r3, r3, #8
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b70      	ldr	r3, [pc, #448]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	496d      	ldr	r1, [pc, #436]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004200:	4313      	orrs	r3, r2
 8004202:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004204:	4b6b      	ldr	r3, [pc, #428]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	4968      	ldr	r1, [pc, #416]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]
 8004218:	e025      	b.n	8004266 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800421a:	4b66      	ldr	r3, [pc, #408]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a65      	ldr	r2, [pc, #404]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004220:	f043 0308 	orr.w	r3, r3, #8
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b63      	ldr	r3, [pc, #396]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4960      	ldr	r1, [pc, #384]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004238:	4b5e      	ldr	r3, [pc, #376]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	495b      	ldr	r1, [pc, #364]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004248:	4313      	orrs	r3, r2
 800424a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fdbe 	bl	8004dd8 <RCC_SetFlashLatencyFromMSIRange>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e380      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004266:	f000 fcc1 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 800426a:	4602      	mov	r2, r0
 800426c:	4b51      	ldr	r3, [pc, #324]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	4950      	ldr	r1, [pc, #320]	; (80043b8 <HAL_RCC_OscConfig+0x274>)
 8004278:	5ccb      	ldrb	r3, [r1, r3]
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	fa22 f303 	lsr.w	r3, r2, r3
 8004282:	4a4e      	ldr	r2, [pc, #312]	; (80043bc <HAL_RCC_OscConfig+0x278>)
 8004284:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004286:	4b4e      	ldr	r3, [pc, #312]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f007 f954 	bl	800b538 <HAL_InitTick>
 8004290:	4603      	mov	r3, r0
 8004292:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d052      	beq.n	8004340 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	e364      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d032      	beq.n	800430c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042a6:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a42      	ldr	r2, [pc, #264]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042b2:	f7fc f9bb 	bl	800062c <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042ba:	f7fc f9b7 	bl	800062c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e34d      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042cc:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042d8:	4b36      	ldr	r3, [pc, #216]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a35      	ldr	r2, [pc, #212]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80042de:	f043 0308 	orr.w	r3, r3, #8
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b33      	ldr	r3, [pc, #204]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	4930      	ldr	r1, [pc, #192]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042f6:	4b2f      	ldr	r3, [pc, #188]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	492b      	ldr	r1, [pc, #172]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004306:	4313      	orrs	r3, r2
 8004308:	604b      	str	r3, [r1, #4]
 800430a:	e01a      	b.n	8004342 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800430c:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a28      	ldr	r2, [pc, #160]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004318:	f7fc f988 	bl	800062c <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004320:	f7fc f984 	bl	800062c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e31a      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004332:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x1dc>
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004340:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d073      	beq.n	8004436 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d005      	beq.n	8004360 <HAL_RCC_OscConfig+0x21c>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d10e      	bne.n	8004378 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b03      	cmp	r3, #3
 800435e:	d10b      	bne.n	8004378 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004360:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d063      	beq.n	8004434 <HAL_RCC_OscConfig+0x2f0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d15f      	bne.n	8004434 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e2f7      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d106      	bne.n	8004390 <HAL_RCC_OscConfig+0x24c>
 8004382:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a0b      	ldr	r2, [pc, #44]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 8004388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	e025      	b.n	80043dc <HAL_RCC_OscConfig+0x298>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004398:	d114      	bne.n	80043c4 <HAL_RCC_OscConfig+0x280>
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80043a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a02      	ldr	r2, [pc, #8]	; (80043b4 <HAL_RCC_OscConfig+0x270>)
 80043ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e013      	b.n	80043dc <HAL_RCC_OscConfig+0x298>
 80043b4:	40021000 	.word	0x40021000
 80043b8:	08010f70 	.word	0x08010f70
 80043bc:	200000a8 	.word	0x200000a8
 80043c0:	20000000 	.word	0x20000000
 80043c4:	4ba0      	ldr	r3, [pc, #640]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a9f      	ldr	r2, [pc, #636]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b9d      	ldr	r3, [pc, #628]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a9c      	ldr	r2, [pc, #624]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fc f922 	bl	800062c <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ec:	f7fc f91e 	bl	800062c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	; 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e2b4      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043fe:	4b92      	ldr	r3, [pc, #584]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x2a8>
 800440a:	e014      	b.n	8004436 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fc f90e 	bl	800062c <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004414:	f7fc f90a 	bl	800062c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e2a0      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004426:	4b88      	ldr	r3, [pc, #544]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x2d0>
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d060      	beq.n	8004504 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b04      	cmp	r3, #4
 8004446:	d005      	beq.n	8004454 <HAL_RCC_OscConfig+0x310>
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d119      	bne.n	8004482 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d116      	bne.n	8004482 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004454:	4b7c      	ldr	r3, [pc, #496]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_OscConfig+0x328>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e27d      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446c:	4b76      	ldr	r3, [pc, #472]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	061b      	lsls	r3, r3, #24
 800447a:	4973      	ldr	r1, [pc, #460]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004480:	e040      	b.n	8004504 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d023      	beq.n	80044d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800448a:	4b6f      	ldr	r3, [pc, #444]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a6e      	ldr	r2, [pc, #440]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fc f8c9 	bl	800062c <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449e:	f7fc f8c5 	bl	800062c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e25b      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b0:	4b65      	ldr	r3, [pc, #404]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b62      	ldr	r3, [pc, #392]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	495f      	ldr	r1, [pc, #380]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
 80044d0:	e018      	b.n	8004504 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b5d      	ldr	r3, [pc, #372]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a5c      	ldr	r2, [pc, #368]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80044d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fc f8a5 	bl	800062c <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e6:	f7fc f8a1 	bl	800062c <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e237      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044f8:	4b53      	ldr	r3, [pc, #332]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f0      	bne.n	80044e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d03c      	beq.n	800458a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01c      	beq.n	8004552 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004518:	4b4b      	ldr	r3, [pc, #300]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 800451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800451e:	4a4a      	ldr	r2, [pc, #296]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fc f880 	bl	800062c <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004530:	f7fc f87c 	bl	800062c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e212      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004542:	4b41      	ldr	r3, [pc, #260]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 8004544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ef      	beq.n	8004530 <HAL_RCC_OscConfig+0x3ec>
 8004550:	e01b      	b.n	800458a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004552:	4b3d      	ldr	r3, [pc, #244]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 8004554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004558:	4a3b      	ldr	r2, [pc, #236]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fc f863 	bl	800062c <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800456a:	f7fc f85f 	bl	800062c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e1f5      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800457c:	4b32      	ldr	r3, [pc, #200]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 800457e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ef      	bne.n	800456a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80a6 	beq.w	80046e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004598:	2300      	movs	r3, #0
 800459a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800459c:	4b2a      	ldr	r3, [pc, #168]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10d      	bne.n	80045c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a8:	4b27      	ldr	r3, [pc, #156]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	4a26      	ldr	r2, [pc, #152]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80045ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b2:	6593      	str	r3, [r2, #88]	; 0x58
 80045b4:	4b24      	ldr	r3, [pc, #144]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c0:	2301      	movs	r3, #1
 80045c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_RCC_OscConfig+0x508>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d118      	bne.n	8004602 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d0:	4b1e      	ldr	r3, [pc, #120]	; (800464c <HAL_RCC_OscConfig+0x508>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1d      	ldr	r2, [pc, #116]	; (800464c <HAL_RCC_OscConfig+0x508>)
 80045d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045dc:	f7fc f826 	bl	800062c <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e4:	f7fc f822 	bl	800062c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e1b8      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <HAL_RCC_OscConfig+0x508>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d108      	bne.n	800461c <HAL_RCC_OscConfig+0x4d8>
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	4a0d      	ldr	r2, [pc, #52]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800461a:	e029      	b.n	8004670 <HAL_RCC_OscConfig+0x52c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b05      	cmp	r3, #5
 8004622:	d115      	bne.n	8004650 <HAL_RCC_OscConfig+0x50c>
 8004624:	4b08      	ldr	r3, [pc, #32]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	4a07      	ldr	r2, [pc, #28]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 800462c:	f043 0304 	orr.w	r3, r3, #4
 8004630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463a:	4a03      	ldr	r2, [pc, #12]	; (8004648 <HAL_RCC_OscConfig+0x504>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004644:	e014      	b.n	8004670 <HAL_RCC_OscConfig+0x52c>
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	40007000 	.word	0x40007000
 8004650:	4b9d      	ldr	r3, [pc, #628]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	4a9c      	ldr	r2, [pc, #624]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004660:	4b99      	ldr	r3, [pc, #612]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	4a98      	ldr	r2, [pc, #608]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004668:	f023 0304 	bic.w	r3, r3, #4
 800466c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d016      	beq.n	80046a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fb ffd8 	bl	800062c <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800467e:	e00a      	b.n	8004696 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004680:	f7fb ffd4 	bl	800062c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e168      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004696:	4b8c      	ldr	r3, [pc, #560]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ed      	beq.n	8004680 <HAL_RCC_OscConfig+0x53c>
 80046a4:	e015      	b.n	80046d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a6:	f7fb ffc1 	bl	800062c <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046ac:	e00a      	b.n	80046c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ae:	f7fb ffbd 	bl	800062c <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e151      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046c4:	4b80      	ldr	r3, [pc, #512]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1ed      	bne.n	80046ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d2:	7ffb      	ldrb	r3, [r7, #31]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d105      	bne.n	80046e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d8:	4b7b      	ldr	r3, [pc, #492]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 80046da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046dc:	4a7a      	ldr	r2, [pc, #488]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 80046de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d03c      	beq.n	800476a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01c      	beq.n	8004732 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046f8:	4b73      	ldr	r3, [pc, #460]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 80046fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046fe:	4a72      	ldr	r2, [pc, #456]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004708:	f7fb ff90 	bl	800062c <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004710:	f7fb ff8c 	bl	800062c <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e122      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004722:	4b69      	ldr	r3, [pc, #420]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004724:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ef      	beq.n	8004710 <HAL_RCC_OscConfig+0x5cc>
 8004730:	e01b      	b.n	800476a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004732:	4b65      	ldr	r3, [pc, #404]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004734:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004738:	4a63      	ldr	r2, [pc, #396]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004742:	f7fb ff73 	bl	800062c <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800474a:	f7fb ff6f 	bl	800062c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e105      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800475c:	4b5a      	ldr	r3, [pc, #360]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 800475e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1ef      	bne.n	800474a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80f9 	beq.w	8004966 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	2b02      	cmp	r3, #2
 800477a:	f040 80cf 	bne.w	800491c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800477e:	4b52      	ldr	r3, [pc, #328]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f003 0203 	and.w	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	429a      	cmp	r2, r3
 8004790:	d12c      	bne.n	80047ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	3b01      	subs	r3, #1
 800479e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d123      	bne.n	80047ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d11b      	bne.n	80047ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d113      	bne.n	80047ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	3b01      	subs	r3, #1
 80047d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d109      	bne.n	80047ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	3b01      	subs	r3, #1
 80047e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d071      	beq.n	80048d0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d068      	beq.n	80048c4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047f2:	4b35      	ldr	r3, [pc, #212]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d105      	bne.n	800480a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047fe:	4b32      	ldr	r3, [pc, #200]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e0ac      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800480e:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2d      	ldr	r2, [pc, #180]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004818:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800481a:	f7fb ff07 	bl	800062c <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004822:	f7fb ff03 	bl	800062c <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e099      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004834:	4b24      	ldr	r3, [pc, #144]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1f0      	bne.n	8004822 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004840:	4b21      	ldr	r3, [pc, #132]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	4b21      	ldr	r3, [pc, #132]	; (80048cc <HAL_RCC_OscConfig+0x788>)
 8004846:	4013      	ands	r3, r2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004850:	3a01      	subs	r2, #1
 8004852:	0112      	lsls	r2, r2, #4
 8004854:	4311      	orrs	r1, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800485a:	0212      	lsls	r2, r2, #8
 800485c:	4311      	orrs	r1, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004862:	0852      	lsrs	r2, r2, #1
 8004864:	3a01      	subs	r2, #1
 8004866:	0552      	lsls	r2, r2, #21
 8004868:	4311      	orrs	r1, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800486e:	0852      	lsrs	r2, r2, #1
 8004870:	3a01      	subs	r2, #1
 8004872:	0652      	lsls	r2, r2, #25
 8004874:	4311      	orrs	r1, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800487a:	06d2      	lsls	r2, r2, #27
 800487c:	430a      	orrs	r2, r1
 800487e:	4912      	ldr	r1, [pc, #72]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004880:	4313      	orrs	r3, r2
 8004882:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004884:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 800488a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800488e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004890:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 8004896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800489a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800489c:	f7fb fec6 	bl	800062c <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fb fec2 	bl	800062c <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e058      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b6:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <HAL_RCC_OscConfig+0x784>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048c2:	e050      	b.n	8004966 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e04f      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
 80048c8:	40021000 	.word	0x40021000
 80048cc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048d0:	4b27      	ldr	r3, [pc, #156]	; (8004970 <HAL_RCC_OscConfig+0x82c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d144      	bne.n	8004966 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048dc:	4b24      	ldr	r3, [pc, #144]	; (8004970 <HAL_RCC_OscConfig+0x82c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a23      	ldr	r2, [pc, #140]	; (8004970 <HAL_RCC_OscConfig+0x82c>)
 80048e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048e8:	4b21      	ldr	r3, [pc, #132]	; (8004970 <HAL_RCC_OscConfig+0x82c>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	4a20      	ldr	r2, [pc, #128]	; (8004970 <HAL_RCC_OscConfig+0x82c>)
 80048ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048f4:	f7fb fe9a 	bl	800062c <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048fc:	f7fb fe96 	bl	800062c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e02c      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490e:	4b18      	ldr	r3, [pc, #96]	; (8004970 <HAL_RCC_OscConfig+0x82c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0x7b8>
 800491a:	e024      	b.n	8004966 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b0c      	cmp	r3, #12
 8004920:	d01f      	beq.n	8004962 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004922:	4b13      	ldr	r3, [pc, #76]	; (8004970 <HAL_RCC_OscConfig+0x82c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <HAL_RCC_OscConfig+0x82c>)
 8004928:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800492c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492e:	f7fb fe7d 	bl	800062c <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004936:	f7fb fe79 	bl	800062c <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e00f      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <HAL_RCC_OscConfig+0x82c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f0      	bne.n	8004936 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <HAL_RCC_OscConfig+0x82c>)
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	4905      	ldr	r1, [pc, #20]	; (8004970 <HAL_RCC_OscConfig+0x82c>)
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_OscConfig+0x830>)
 800495c:	4013      	ands	r3, r2
 800495e:	60cb      	str	r3, [r1, #12]
 8004960:	e001      	b.n	8004966 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40021000 	.word	0x40021000
 8004974:	feeefffc 	.word	0xfeeefffc

08004978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e11d      	b.n	8004bcc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004990:	4b90      	ldr	r3, [pc, #576]	; (8004bd4 <HAL_RCC_ClockConfig+0x25c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d910      	bls.n	80049c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b8d      	ldr	r3, [pc, #564]	; (8004bd4 <HAL_RCC_ClockConfig+0x25c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 020f 	bic.w	r2, r3, #15
 80049a6:	498b      	ldr	r1, [pc, #556]	; (8004bd4 <HAL_RCC_ClockConfig+0x25c>)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b89      	ldr	r3, [pc, #548]	; (8004bd4 <HAL_RCC_ClockConfig+0x25c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e105      	b.n	8004bcc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d010      	beq.n	80049ee <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	4b81      	ldr	r3, [pc, #516]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d8:	429a      	cmp	r2, r3
 80049da:	d908      	bls.n	80049ee <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049dc:	4b7e      	ldr	r3, [pc, #504]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	497b      	ldr	r1, [pc, #492]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d079      	beq.n	8004aee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d11e      	bne.n	8004a40 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a02:	4b75      	ldr	r3, [pc, #468]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e0dc      	b.n	8004bcc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004a12:	f000 fa3b 	bl	8004e8c <RCC_GetSysClockFreqFromPLLSource>
 8004a16:	4603      	mov	r3, r0
 8004a18:	4a70      	ldr	r2, [pc, #448]	; (8004bdc <HAL_RCC_ClockConfig+0x264>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d946      	bls.n	8004aac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a1e:	4b6e      	ldr	r3, [pc, #440]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d140      	bne.n	8004aac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a2a:	4b6b      	ldr	r3, [pc, #428]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a32:	4a69      	ldr	r2, [pc, #420]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	e035      	b.n	8004aac <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d107      	bne.n	8004a58 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a48:	4b63      	ldr	r3, [pc, #396]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d115      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0b9      	b.n	8004bcc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a60:	4b5d      	ldr	r3, [pc, #372]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0ad      	b.n	8004bcc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a70:	4b59      	ldr	r3, [pc, #356]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0a5      	b.n	8004bcc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004a80:	f000 f8b4 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8004a84:	4603      	mov	r3, r0
 8004a86:	4a55      	ldr	r2, [pc, #340]	; (8004bdc <HAL_RCC_ClockConfig+0x264>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d90f      	bls.n	8004aac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a8c:	4b52      	ldr	r3, [pc, #328]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a98:	4b4f      	ldr	r3, [pc, #316]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa0:	4a4d      	ldr	r2, [pc, #308]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004aac:	4b4a      	ldr	r3, [pc, #296]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f023 0203 	bic.w	r2, r3, #3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4947      	ldr	r1, [pc, #284]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004abe:	f7fb fdb5 	bl	800062c <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac4:	e00a      	b.n	8004adc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac6:	f7fb fdb1 	bl	800062c <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e077      	b.n	8004bcc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004adc:	4b3e      	ldr	r3, [pc, #248]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 020c 	and.w	r2, r3, #12
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d1eb      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d105      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004af4:	4b38      	ldr	r3, [pc, #224]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a37      	ldr	r2, [pc, #220]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004afe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d010      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d208      	bcs.n	8004b2e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b1c:	4b2e      	ldr	r3, [pc, #184]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	492b      	ldr	r1, [pc, #172]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b2e:	4b29      	ldr	r3, [pc, #164]	; (8004bd4 <HAL_RCC_ClockConfig+0x25c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d210      	bcs.n	8004b5e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3c:	4b25      	ldr	r3, [pc, #148]	; (8004bd4 <HAL_RCC_ClockConfig+0x25c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f023 020f 	bic.w	r2, r3, #15
 8004b44:	4923      	ldr	r1, [pc, #140]	; (8004bd4 <HAL_RCC_ClockConfig+0x25c>)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4c:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <HAL_RCC_ClockConfig+0x25c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d001      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e036      	b.n	8004bcc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b6a:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	4918      	ldr	r1, [pc, #96]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d009      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b88:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4910      	ldr	r1, [pc, #64]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b9c:	f000 f826 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <HAL_RCC_ClockConfig+0x260>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	490c      	ldr	r1, [pc, #48]	; (8004be0 <HAL_RCC_ClockConfig+0x268>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb8:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <HAL_RCC_ClockConfig+0x26c>)
 8004bba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <HAL_RCC_ClockConfig+0x270>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f006 fcb9 	bl	800b538 <HAL_InitTick>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	73fb      	strb	r3, [r7, #15]

  return status;
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40022000 	.word	0x40022000
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	04c4b400 	.word	0x04c4b400
 8004be0:	08010f70 	.word	0x08010f70
 8004be4:	200000a8 	.word	0x200000a8
 8004be8:	20000000 	.word	0x20000000

08004bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b089      	sub	sp, #36	; 0x24
 8004bf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bfa:	4b3e      	ldr	r3, [pc, #248]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c04:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_GetSysClockFreq+0x34>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d121      	bne.n	8004c5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d11e      	bne.n	8004c5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c20:	4b34      	ldr	r3, [pc, #208]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d107      	bne.n	8004c3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c2c:	4b31      	ldr	r3, [pc, #196]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c32:	0a1b      	lsrs	r3, r3, #8
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	e005      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c3c:	4b2d      	ldr	r3, [pc, #180]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c48:	4a2b      	ldr	r2, [pc, #172]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10d      	bne.n	8004c74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c5c:	e00a      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d102      	bne.n	8004c6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c64:	4b25      	ldr	r3, [pc, #148]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8004c66:	61bb      	str	r3, [r7, #24]
 8004c68:	e004      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c70:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d134      	bne.n	8004ce4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c7a:	4b1e      	ldr	r3, [pc, #120]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d003      	beq.n	8004c92 <HAL_RCC_GetSysClockFreq+0xa6>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d003      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0xac>
 8004c90:	e005      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c92:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8004c94:	617b      	str	r3, [r7, #20]
      break;
 8004c96:	e005      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c98:	4b19      	ldr	r3, [pc, #100]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c9a:	617b      	str	r3, [r7, #20]
      break;
 8004c9c:	e002      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	617b      	str	r3, [r7, #20]
      break;
 8004ca2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ca4:	4b13      	ldr	r3, [pc, #76]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	3301      	adds	r3, #1
 8004cb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cb2:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	fb03 f202 	mul.w	r2, r3, r2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	0e5b      	lsrs	r3, r3, #25
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3724      	adds	r7, #36	; 0x24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	08010f88 	.word	0x08010f88
 8004cfc:	00f42400 	.word	0x00f42400
 8004d00:	007a1200 	.word	0x007a1200

08004d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	200000a8 	.word	0x200000a8

08004d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d20:	f7ff fff0 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4904      	ldr	r1, [pc, #16]	; (8004d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40021000 	.word	0x40021000
 8004d44:	08010f80 	.word	0x08010f80

08004d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d4c:	f7ff ffda 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d50:	4602      	mov	r2, r0
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	0adb      	lsrs	r3, r3, #11
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	4904      	ldr	r1, [pc, #16]	; (8004d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d5e:	5ccb      	ldrb	r3, [r1, r3]
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	08010f80 	.word	0x08010f80

08004d74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	220f      	movs	r2, #15
 8004d82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004d84:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 0203 	and.w	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004d90:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	08db      	lsrs	r3, r3, #3
 8004dae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004db6:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <HAL_RCC_GetClockConfig+0x60>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 020f 	and.w	r2, r3, #15
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	601a      	str	r2, [r3, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	40022000 	.word	0x40022000

08004dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004de0:	2300      	movs	r3, #0
 8004de2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004de4:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004df0:	f7ff f8e4 	bl	8003fbc <HAL_PWREx_GetVoltageRange>
 8004df4:	6178      	str	r0, [r7, #20]
 8004df6:	e014      	b.n	8004e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004df8:	4b22      	ldr	r3, [pc, #136]	; (8004e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfc:	4a21      	ldr	r2, [pc, #132]	; (8004e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e02:	6593      	str	r3, [r2, #88]	; 0x58
 8004e04:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e10:	f7ff f8d4 	bl	8003fbc <HAL_PWREx_GetVoltageRange>
 8004e14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e16:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1a:	4a1a      	ldr	r2, [pc, #104]	; (8004e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e28:	d10b      	bne.n	8004e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b80      	cmp	r3, #128	; 0x80
 8004e2e:	d913      	bls.n	8004e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2ba0      	cmp	r3, #160	; 0xa0
 8004e34:	d902      	bls.n	8004e3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e36:	2302      	movs	r3, #2
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	e00d      	b.n	8004e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	e00a      	b.n	8004e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b7f      	cmp	r3, #127	; 0x7f
 8004e46:	d902      	bls.n	8004e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004e48:	2302      	movs	r3, #2
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	e004      	b.n	8004e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b70      	cmp	r3, #112	; 0x70
 8004e52:	d101      	bne.n	8004e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e54:	2301      	movs	r3, #1
 8004e56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f023 020f 	bic.w	r2, r3, #15
 8004e60:	4909      	ldr	r1, [pc, #36]	; (8004e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e68:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d001      	beq.n	8004e7a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40022000 	.word	0x40022000

08004e8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e92:	4b2d      	ldr	r3, [pc, #180]	; (8004f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d00b      	beq.n	8004eba <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d825      	bhi.n	8004ef4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d008      	beq.n	8004ec0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d11f      	bne.n	8004ef4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004eb4:	4b25      	ldr	r3, [pc, #148]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004eb6:	613b      	str	r3, [r7, #16]
    break;
 8004eb8:	e01f      	b.n	8004efa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004eba:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004ebc:	613b      	str	r3, [r7, #16]
    break;
 8004ebe:	e01c      	b.n	8004efa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ec0:	4b21      	ldr	r3, [pc, #132]	; (8004f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d107      	bne.n	8004edc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ecc:	4b1e      	ldr	r3, [pc, #120]	; (8004f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e005      	b.n	8004ee8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004ee8:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef0:	613b      	str	r3, [r7, #16]
    break;
 8004ef2:	e002      	b.n	8004efa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	613b      	str	r3, [r7, #16]
    break;
 8004ef8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	091b      	lsrs	r3, r3, #4
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	3301      	adds	r3, #1
 8004f06:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f08:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	0a1b      	lsrs	r3, r3, #8
 8004f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	fb03 f202 	mul.w	r2, r3, r2
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f20:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	0e5b      	lsrs	r3, r3, #25
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004f3a:	683b      	ldr	r3, [r7, #0]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	00f42400 	.word	0x00f42400
 8004f50:	007a1200 	.word	0x007a1200
 8004f54:	08010f88 	.word	0x08010f88

08004f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f60:	2300      	movs	r3, #0
 8004f62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f64:	2300      	movs	r3, #0
 8004f66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d040      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f78:	2b80      	cmp	r3, #128	; 0x80
 8004f7a:	d02a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f7c:	2b80      	cmp	r3, #128	; 0x80
 8004f7e:	d825      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f80:	2b60      	cmp	r3, #96	; 0x60
 8004f82:	d026      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f84:	2b60      	cmp	r3, #96	; 0x60
 8004f86:	d821      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	d006      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d81d      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d009      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d010      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004f98:	e018      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f9a:	4b89      	ldr	r3, [pc, #548]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	4a88      	ldr	r2, [pc, #544]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fa6:	e015      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fb02 	bl	80055b8 <RCCEx_PLLSAI1_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fb8:	e00c      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3320      	adds	r3, #32
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fbed 	bl	80057a0 <RCCEx_PLLSAI2_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fca:	e003      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	74fb      	strb	r3, [r7, #19]
      break;
 8004fd0:	e000      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fd4:	7cfb      	ldrb	r3, [r7, #19]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10b      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fda:	4b79      	ldr	r3, [pc, #484]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fe0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe8:	4975      	ldr	r1, [pc, #468]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ff0:	e001      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff2:	7cfb      	ldrb	r3, [r7, #19]
 8004ff4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d047      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500a:	d030      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800500c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005010:	d82a      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005016:	d02a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800501c:	d824      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800501e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005022:	d008      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005028:	d81e      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800502e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005032:	d010      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005034:	e018      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005036:	4b62      	ldr	r3, [pc, #392]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	4a61      	ldr	r2, [pc, #388]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005040:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005042:	e015      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3304      	adds	r3, #4
 8005048:	2100      	movs	r1, #0
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fab4 	bl	80055b8 <RCCEx_PLLSAI1_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005054:	e00c      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3320      	adds	r3, #32
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fb9f 	bl	80057a0 <RCCEx_PLLSAI2_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005066:	e003      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	74fb      	strb	r3, [r7, #19]
      break;
 800506c:	e000      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800506e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005076:	4b52      	ldr	r3, [pc, #328]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005078:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800507c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	494e      	ldr	r1, [pc, #312]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800508c:	e001      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 809f 	beq.w	80051de <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a0:	2300      	movs	r3, #0
 80050a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050a4:	4b46      	ldr	r3, [pc, #280]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80050b4:	2300      	movs	r3, #0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00d      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ba:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050be:	4a40      	ldr	r2, [pc, #256]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c4:	6593      	str	r3, [r2, #88]	; 0x58
 80050c6:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d2:	2301      	movs	r3, #1
 80050d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050d6:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a3a      	ldr	r2, [pc, #232]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80050dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050e2:	f7fb faa3 	bl	800062c <HAL_GetTick>
 80050e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050e8:	e009      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ea:	f7fb fa9f 	bl	800062c <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d902      	bls.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	74fb      	strb	r3, [r7, #19]
        break;
 80050fc:	e005      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050fe:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0ef      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800510a:	7cfb      	ldrb	r3, [r7, #19]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d15b      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005110:	4b2b      	ldr	r3, [pc, #172]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01f      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	429a      	cmp	r2, r3
 800512c:	d019      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800512e:	4b24      	ldr	r3, [pc, #144]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005138:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800513a:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005140:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800514c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005150:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800515a:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d016      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516c:	f7fb fa5e 	bl	800062c <HAL_GetTick>
 8005170:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005172:	e00b      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005174:	f7fb fa5a 	bl	800062c <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d902      	bls.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	74fb      	strb	r3, [r7, #19]
            break;
 800518a:	e006      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0ec      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800519a:	7cfb      	ldrb	r3, [r7, #19]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10c      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b0:	4903      	ldr	r1, [pc, #12]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051b8:	e008      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051ba:	7cfb      	ldrb	r3, [r7, #19]
 80051bc:	74bb      	strb	r3, [r7, #18]
 80051be:	e005      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	7cfb      	ldrb	r3, [r7, #19]
 80051ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051cc:	7c7b      	ldrb	r3, [r7, #17]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d105      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d2:	4ba0      	ldr	r3, [pc, #640]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d6:	4a9f      	ldr	r2, [pc, #636]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ea:	4b9a      	ldr	r3, [pc, #616]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f023 0203 	bic.w	r2, r3, #3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f8:	4996      	ldr	r1, [pc, #600]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800520c:	4b91      	ldr	r3, [pc, #580]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	f023 020c 	bic.w	r2, r3, #12
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	498e      	ldr	r1, [pc, #568]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800522e:	4b89      	ldr	r3, [pc, #548]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523c:	4985      	ldr	r1, [pc, #532]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005250:	4b80      	ldr	r3, [pc, #512]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525e:	497d      	ldr	r1, [pc, #500]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005272:	4b78      	ldr	r3, [pc, #480]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005280:	4974      	ldr	r1, [pc, #464]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005294:	4b6f      	ldr	r3, [pc, #444]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a2:	496c      	ldr	r1, [pc, #432]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052b6:	4b67      	ldr	r3, [pc, #412]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052c4:	4963      	ldr	r1, [pc, #396]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052d8:	4b5e      	ldr	r3, [pc, #376]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052e6:	495b      	ldr	r1, [pc, #364]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052fa:	4b56      	ldr	r3, [pc, #344]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005300:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005308:	4952      	ldr	r1, [pc, #328]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800531c:	4b4d      	ldr	r3, [pc, #308]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005322:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532a:	494a      	ldr	r1, [pc, #296]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800533e:	4b45      	ldr	r3, [pc, #276]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534c:	4941      	ldr	r1, [pc, #260]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005360:	4b3c      	ldr	r3, [pc, #240]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005366:	f023 0203 	bic.w	r2, r3, #3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536e:	4939      	ldr	r1, [pc, #228]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d028      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005382:	4b34      	ldr	r3, [pc, #208]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005390:	4930      	ldr	r1, [pc, #192]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800539c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a0:	d106      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053a2:	4b2c      	ldr	r3, [pc, #176]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	4a2b      	ldr	r2, [pc, #172]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ac:	60d3      	str	r3, [r2, #12]
 80053ae:	e011      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	2101      	movs	r1, #1
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f8f9 	bl	80055b8 <RCCEx_PLLSAI1_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d04d      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053e8:	d108      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80053ea:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053f0:	4a18      	ldr	r2, [pc, #96]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80053fa:	e012      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80053fc:	4b15      	ldr	r3, [pc, #84]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005402:	4a14      	ldr	r2, [pc, #80]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005408:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800540c:	4b11      	ldr	r3, [pc, #68]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800541a:	490e      	ldr	r1, [pc, #56]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800542a:	d106      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4a08      	ldr	r2, [pc, #32]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005436:	60d3      	str	r3, [r2, #12]
 8005438:	e020      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800543e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005442:	d109      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005444:	4b03      	ldr	r3, [pc, #12]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	4a02      	ldr	r2, [pc, #8]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800544a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544e:	60d3      	str	r3, [r2, #12]
 8005450:	e014      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005452:	bf00      	nop
 8005454:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800545c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005460:	d10c      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3304      	adds	r3, #4
 8005466:	2101      	movs	r1, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f8a5 	bl	80055b8 <RCCEx_PLLSAI1_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005472:	7cfb      	ldrb	r3, [r7, #19]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005478:	7cfb      	ldrb	r3, [r7, #19]
 800547a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d028      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005488:	4b4a      	ldr	r3, [pc, #296]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005496:	4947      	ldr	r1, [pc, #284]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a6:	d106      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a8:	4b42      	ldr	r3, [pc, #264]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4a41      	ldr	r2, [pc, #260]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054b2:	60d3      	str	r3, [r2, #12]
 80054b4:	e011      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054be:	d10c      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3304      	adds	r3, #4
 80054c4:	2101      	movs	r1, #1
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f876 	bl	80055b8 <RCCEx_PLLSAI1_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054d0:	7cfb      	ldrb	r3, [r7, #19]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80054d6:	7cfb      	ldrb	r3, [r7, #19]
 80054d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01e      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054e6:	4b33      	ldr	r3, [pc, #204]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f6:	492f      	ldr	r1, [pc, #188]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005508:	d10c      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3304      	adds	r3, #4
 800550e:	2102      	movs	r1, #2
 8005510:	4618      	mov	r0, r3
 8005512:	f000 f851 	bl	80055b8 <RCCEx_PLLSAI1_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800551a:	7cfb      	ldrb	r3, [r7, #19]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005520:	7cfb      	ldrb	r3, [r7, #19]
 8005522:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005530:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005536:	f023 0204 	bic.w	r2, r3, #4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005540:	491c      	ldr	r1, [pc, #112]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005554:	4b17      	ldr	r3, [pc, #92]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800555a:	f023 0218 	bic.w	r2, r3, #24
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005564:	4913      	ldr	r1, [pc, #76]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d017      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005578:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800557a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800557e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005588:	490a      	ldr	r1, [pc, #40]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800559a:	d105      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4a04      	ldr	r2, [pc, #16]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40021000 	.word	0x40021000

080055b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055c6:	4b72      	ldr	r3, [pc, #456]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00e      	beq.n	80055f0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055d2:	4b6f      	ldr	r3, [pc, #444]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0203 	and.w	r2, r3, #3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d103      	bne.n	80055ea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
       ||
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d142      	bne.n	8005670 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	73fb      	strb	r3, [r7, #15]
 80055ee:	e03f      	b.n	8005670 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d018      	beq.n	800562a <RCCEx_PLLSAI1_Config+0x72>
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d825      	bhi.n	8005648 <RCCEx_PLLSAI1_Config+0x90>
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d002      	beq.n	8005606 <RCCEx_PLLSAI1_Config+0x4e>
 8005600:	2b02      	cmp	r3, #2
 8005602:	d009      	beq.n	8005618 <RCCEx_PLLSAI1_Config+0x60>
 8005604:	e020      	b.n	8005648 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005606:	4b62      	ldr	r3, [pc, #392]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d11d      	bne.n	800564e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005616:	e01a      	b.n	800564e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005618:	4b5d      	ldr	r3, [pc, #372]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005620:	2b00      	cmp	r3, #0
 8005622:	d116      	bne.n	8005652 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005628:	e013      	b.n	8005652 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800562a:	4b59      	ldr	r3, [pc, #356]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10f      	bne.n	8005656 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005636:	4b56      	ldr	r3, [pc, #344]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005646:	e006      	b.n	8005656 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
      break;
 800564c:	e004      	b.n	8005658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800564e:	bf00      	nop
 8005650:	e002      	b.n	8005658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005652:	bf00      	nop
 8005654:	e000      	b.n	8005658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005656:	bf00      	nop
    }

    if(status == HAL_OK)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d108      	bne.n	8005670 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800565e:	4b4c      	ldr	r3, [pc, #304]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f023 0203 	bic.w	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4949      	ldr	r1, [pc, #292]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800566c:	4313      	orrs	r3, r2
 800566e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f040 8086 	bne.w	8005784 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005678:	4b45      	ldr	r3, [pc, #276]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a44      	ldr	r2, [pc, #272]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800567e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005684:	f7fa ffd2 	bl	800062c <HAL_GetTick>
 8005688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800568a:	e009      	b.n	80056a0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800568c:	f7fa ffce 	bl	800062c <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d902      	bls.n	80056a0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	73fb      	strb	r3, [r7, #15]
        break;
 800569e:	e005      	b.n	80056ac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056a0:	4b3b      	ldr	r3, [pc, #236]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1ef      	bne.n	800568c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d168      	bne.n	8005784 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d113      	bne.n	80056e0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056b8:	4b35      	ldr	r3, [pc, #212]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	4b35      	ldr	r3, [pc, #212]	; (8005794 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056be:	4013      	ands	r3, r2
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6892      	ldr	r2, [r2, #8]
 80056c4:	0211      	lsls	r1, r2, #8
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	68d2      	ldr	r2, [r2, #12]
 80056ca:	06d2      	lsls	r2, r2, #27
 80056cc:	4311      	orrs	r1, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6852      	ldr	r2, [r2, #4]
 80056d2:	3a01      	subs	r2, #1
 80056d4:	0112      	lsls	r2, r2, #4
 80056d6:	430a      	orrs	r2, r1
 80056d8:	492d      	ldr	r1, [pc, #180]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	610b      	str	r3, [r1, #16]
 80056de:	e02d      	b.n	800573c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d115      	bne.n	8005712 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056e6:	4b2a      	ldr	r3, [pc, #168]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6892      	ldr	r2, [r2, #8]
 80056f2:	0211      	lsls	r1, r2, #8
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6912      	ldr	r2, [r2, #16]
 80056f8:	0852      	lsrs	r2, r2, #1
 80056fa:	3a01      	subs	r2, #1
 80056fc:	0552      	lsls	r2, r2, #21
 80056fe:	4311      	orrs	r1, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6852      	ldr	r2, [r2, #4]
 8005704:	3a01      	subs	r2, #1
 8005706:	0112      	lsls	r2, r2, #4
 8005708:	430a      	orrs	r2, r1
 800570a:	4921      	ldr	r1, [pc, #132]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800570c:	4313      	orrs	r3, r2
 800570e:	610b      	str	r3, [r1, #16]
 8005710:	e014      	b.n	800573c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005712:	4b1f      	ldr	r3, [pc, #124]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	4b21      	ldr	r3, [pc, #132]	; (800579c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005718:	4013      	ands	r3, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6892      	ldr	r2, [r2, #8]
 800571e:	0211      	lsls	r1, r2, #8
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6952      	ldr	r2, [r2, #20]
 8005724:	0852      	lsrs	r2, r2, #1
 8005726:	3a01      	subs	r2, #1
 8005728:	0652      	lsls	r2, r2, #25
 800572a:	4311      	orrs	r1, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6852      	ldr	r2, [r2, #4]
 8005730:	3a01      	subs	r2, #1
 8005732:	0112      	lsls	r2, r2, #4
 8005734:	430a      	orrs	r2, r1
 8005736:	4916      	ldr	r1, [pc, #88]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005738:	4313      	orrs	r3, r2
 800573a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800573c:	4b14      	ldr	r3, [pc, #80]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a13      	ldr	r2, [pc, #76]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fa ff70 	bl	800062c <HAL_GetTick>
 800574c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800574e:	e009      	b.n	8005764 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005750:	f7fa ff6c 	bl	800062c <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d902      	bls.n	8005764 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	73fb      	strb	r3, [r7, #15]
          break;
 8005762:	e005      	b.n	8005770 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005764:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ef      	beq.n	8005750 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	4904      	ldr	r1, [pc, #16]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005780:	4313      	orrs	r3, r2
 8005782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000
 8005794:	07ff800f 	.word	0x07ff800f
 8005798:	ff9f800f 	.word	0xff9f800f
 800579c:	f9ff800f 	.word	0xf9ff800f

080057a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057ae:	4b72      	ldr	r3, [pc, #456]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00e      	beq.n	80057d8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057ba:	4b6f      	ldr	r3, [pc, #444]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f003 0203 	and.w	r2, r3, #3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d103      	bne.n	80057d2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
       ||
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d142      	bne.n	8005858 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
 80057d6:	e03f      	b.n	8005858 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d018      	beq.n	8005812 <RCCEx_PLLSAI2_Config+0x72>
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d825      	bhi.n	8005830 <RCCEx_PLLSAI2_Config+0x90>
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d002      	beq.n	80057ee <RCCEx_PLLSAI2_Config+0x4e>
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d009      	beq.n	8005800 <RCCEx_PLLSAI2_Config+0x60>
 80057ec:	e020      	b.n	8005830 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057ee:	4b62      	ldr	r3, [pc, #392]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d11d      	bne.n	8005836 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057fe:	e01a      	b.n	8005836 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005800:	4b5d      	ldr	r3, [pc, #372]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005808:	2b00      	cmp	r3, #0
 800580a:	d116      	bne.n	800583a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005810:	e013      	b.n	800583a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005812:	4b59      	ldr	r3, [pc, #356]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10f      	bne.n	800583e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800581e:	4b56      	ldr	r3, [pc, #344]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800582e:	e006      	b.n	800583e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	e004      	b.n	8005840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005836:	bf00      	nop
 8005838:	e002      	b.n	8005840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800583a:	bf00      	nop
 800583c:	e000      	b.n	8005840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800583e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005846:	4b4c      	ldr	r3, [pc, #304]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f023 0203 	bic.w	r2, r3, #3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4949      	ldr	r1, [pc, #292]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005854:	4313      	orrs	r3, r2
 8005856:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f040 8086 	bne.w	800596c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005860:	4b45      	ldr	r3, [pc, #276]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a44      	ldr	r2, [pc, #272]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586c:	f7fa fede 	bl	800062c <HAL_GetTick>
 8005870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005872:	e009      	b.n	8005888 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005874:	f7fa feda 	bl	800062c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d902      	bls.n	8005888 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	73fb      	strb	r3, [r7, #15]
        break;
 8005886:	e005      	b.n	8005894 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005888:	4b3b      	ldr	r3, [pc, #236]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ef      	bne.n	8005874 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d168      	bne.n	800596c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d113      	bne.n	80058c8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058a0:	4b35      	ldr	r3, [pc, #212]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058a2:	695a      	ldr	r2, [r3, #20]
 80058a4:	4b35      	ldr	r3, [pc, #212]	; (800597c <RCCEx_PLLSAI2_Config+0x1dc>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6892      	ldr	r2, [r2, #8]
 80058ac:	0211      	lsls	r1, r2, #8
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	68d2      	ldr	r2, [r2, #12]
 80058b2:	06d2      	lsls	r2, r2, #27
 80058b4:	4311      	orrs	r1, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6852      	ldr	r2, [r2, #4]
 80058ba:	3a01      	subs	r2, #1
 80058bc:	0112      	lsls	r2, r2, #4
 80058be:	430a      	orrs	r2, r1
 80058c0:	492d      	ldr	r1, [pc, #180]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	614b      	str	r3, [r1, #20]
 80058c6:	e02d      	b.n	8005924 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d115      	bne.n	80058fa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058ce:	4b2a      	ldr	r3, [pc, #168]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058d0:	695a      	ldr	r2, [r3, #20]
 80058d2:	4b2b      	ldr	r3, [pc, #172]	; (8005980 <RCCEx_PLLSAI2_Config+0x1e0>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6892      	ldr	r2, [r2, #8]
 80058da:	0211      	lsls	r1, r2, #8
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6912      	ldr	r2, [r2, #16]
 80058e0:	0852      	lsrs	r2, r2, #1
 80058e2:	3a01      	subs	r2, #1
 80058e4:	0552      	lsls	r2, r2, #21
 80058e6:	4311      	orrs	r1, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6852      	ldr	r2, [r2, #4]
 80058ec:	3a01      	subs	r2, #1
 80058ee:	0112      	lsls	r2, r2, #4
 80058f0:	430a      	orrs	r2, r1
 80058f2:	4921      	ldr	r1, [pc, #132]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	614b      	str	r3, [r1, #20]
 80058f8:	e014      	b.n	8005924 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058fa:	4b1f      	ldr	r3, [pc, #124]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058fc:	695a      	ldr	r2, [r3, #20]
 80058fe:	4b21      	ldr	r3, [pc, #132]	; (8005984 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005900:	4013      	ands	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6892      	ldr	r2, [r2, #8]
 8005906:	0211      	lsls	r1, r2, #8
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6952      	ldr	r2, [r2, #20]
 800590c:	0852      	lsrs	r2, r2, #1
 800590e:	3a01      	subs	r2, #1
 8005910:	0652      	lsls	r2, r2, #25
 8005912:	4311      	orrs	r1, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6852      	ldr	r2, [r2, #4]
 8005918:	3a01      	subs	r2, #1
 800591a:	0112      	lsls	r2, r2, #4
 800591c:	430a      	orrs	r2, r1
 800591e:	4916      	ldr	r1, [pc, #88]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005920:	4313      	orrs	r3, r2
 8005922:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005924:	4b14      	ldr	r3, [pc, #80]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a13      	ldr	r2, [pc, #76]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800592a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005930:	f7fa fe7c 	bl	800062c <HAL_GetTick>
 8005934:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005936:	e009      	b.n	800594c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005938:	f7fa fe78 	bl	800062c <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d902      	bls.n	800594c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	73fb      	strb	r3, [r7, #15]
          break;
 800594a:	e005      	b.n	8005958 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0ef      	beq.n	8005938 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800595e:	4b06      	ldr	r3, [pc, #24]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005960:	695a      	ldr	r2, [r3, #20]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	4904      	ldr	r1, [pc, #16]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005968:	4313      	orrs	r3, r2
 800596a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40021000 	.word	0x40021000
 800597c:	07ff800f 	.word	0x07ff800f
 8005980:	ff9f800f 	.word	0xff9f800f
 8005984:	f9ff800f 	.word	0xf9ff800f

08005988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e049      	b.n	8005a2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f005 fcb0 	bl	800b314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f000 fab6 	bl	8005f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d001      	beq.n	8005a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e04f      	b.n	8005af0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a23      	ldr	r2, [pc, #140]	; (8005afc <HAL_TIM_Base_Start_IT+0xc4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01d      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0x76>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7a:	d018      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0x76>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d013      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0x76>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1e      	ldr	r2, [pc, #120]	; (8005b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00e      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0x76>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1c      	ldr	r2, [pc, #112]	; (8005b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d009      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0x76>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1b      	ldr	r2, [pc, #108]	; (8005b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d004      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0x76>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a19      	ldr	r2, [pc, #100]	; (8005b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d115      	bne.n	8005ada <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	4b17      	ldr	r3, [pc, #92]	; (8005b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b06      	cmp	r3, #6
 8005abe:	d015      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0xb4>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac6:	d011      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad8:	e008      	b.n	8005aec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0201 	orr.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e000      	b.n	8005aee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40000400 	.word	0x40000400
 8005b04:	40000800 	.word	0x40000800
 8005b08:	40000c00 	.word	0x40000c00
 8005b0c:	40013400 	.word	0x40013400
 8005b10:	40014000 	.word	0x40014000
 8005b14:	00010007 	.word	0x00010007

08005b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d122      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d11b      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0202 	mvn.w	r2, #2
 8005b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9ce 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005b60:	e005      	b.n	8005b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f9c0 	bl	8005ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f9d1 	bl	8005f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d122      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d11b      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0204 	mvn.w	r2, #4
 8005b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f9a4 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f996 	bl	8005ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f9a7 	bl	8005f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d122      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d11b      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0208 	mvn.w	r2, #8
 8005bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f97a 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005c08:	e005      	b.n	8005c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f96c 	bl	8005ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f97d 	bl	8005f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0310 	and.w	r3, r3, #16
 8005c26:	2b10      	cmp	r3, #16
 8005c28:	d122      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d11b      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0210 	mvn.w	r2, #16
 8005c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2208      	movs	r2, #8
 8005c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f950 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f942 	bl	8005ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f953 	bl	8005f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d10e      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d107      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0201 	mvn.w	r2, #1
 8005c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f004 feac 	bl	800a9f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca6:	2b80      	cmp	r3, #128	; 0x80
 8005ca8:	d10e      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb4:	2b80      	cmp	r3, #128	; 0x80
 8005cb6:	d107      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fafe 	bl	80062c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd6:	d10e      	bne.n	8005cf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce2:	2b80      	cmp	r3, #128	; 0x80
 8005ce4:	d107      	bne.n	8005cf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 faf1 	bl	80062d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d10e      	bne.n	8005d22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0e:	2b40      	cmp	r3, #64	; 0x40
 8005d10:	d107      	bne.n	8005d22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f901 	bl	8005f24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d10e      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d107      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f06f 0220 	mvn.w	r2, #32
 8005d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fab1 	bl	80062b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d4e:	bf00      	nop
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_TIM_ConfigClockSource+0x1c>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e0b6      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x18a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dae:	d03e      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0xd8>
 8005db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db4:	f200 8087 	bhi.w	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dbc:	f000 8086 	beq.w	8005ecc <HAL_TIM_ConfigClockSource+0x176>
 8005dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc4:	d87f      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005dc6:	2b70      	cmp	r3, #112	; 0x70
 8005dc8:	d01a      	beq.n	8005e00 <HAL_TIM_ConfigClockSource+0xaa>
 8005dca:	2b70      	cmp	r3, #112	; 0x70
 8005dcc:	d87b      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005dce:	2b60      	cmp	r3, #96	; 0x60
 8005dd0:	d050      	beq.n	8005e74 <HAL_TIM_ConfigClockSource+0x11e>
 8005dd2:	2b60      	cmp	r3, #96	; 0x60
 8005dd4:	d877      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005dd6:	2b50      	cmp	r3, #80	; 0x50
 8005dd8:	d03c      	beq.n	8005e54 <HAL_TIM_ConfigClockSource+0xfe>
 8005dda:	2b50      	cmp	r3, #80	; 0x50
 8005ddc:	d873      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d058      	beq.n	8005e94 <HAL_TIM_ConfigClockSource+0x13e>
 8005de2:	2b40      	cmp	r3, #64	; 0x40
 8005de4:	d86f      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005de6:	2b30      	cmp	r3, #48	; 0x30
 8005de8:	d064      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x15e>
 8005dea:	2b30      	cmp	r3, #48	; 0x30
 8005dec:	d86b      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d060      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x15e>
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d867      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d05c      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x15e>
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d05a      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x15e>
 8005dfe:	e062      	b.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6899      	ldr	r1, [r3, #8]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f000 f9a6 	bl	8006160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	609a      	str	r2, [r3, #8]
      break;
 8005e2c:	e04f      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6899      	ldr	r1, [r3, #8]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f000 f98f 	bl	8006160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e50:	609a      	str	r2, [r3, #8]
      break;
 8005e52:	e03c      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	6859      	ldr	r1, [r3, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	461a      	mov	r2, r3
 8005e62:	f000 f903 	bl	800606c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2150      	movs	r1, #80	; 0x50
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 f95c 	bl	800612a <TIM_ITRx_SetConfig>
      break;
 8005e72:	e02c      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6859      	ldr	r1, [r3, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	461a      	mov	r2, r3
 8005e82:	f000 f922 	bl	80060ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2160      	movs	r1, #96	; 0x60
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 f94c 	bl	800612a <TIM_ITRx_SetConfig>
      break;
 8005e92:	e01c      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6818      	ldr	r0, [r3, #0]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	6859      	ldr	r1, [r3, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f000 f8e3 	bl	800606c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2140      	movs	r1, #64	; 0x40
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 f93c 	bl	800612a <TIM_ITRx_SetConfig>
      break;
 8005eb2:	e00c      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	f000 f933 	bl	800612a <TIM_ITRx_SetConfig>
      break;
 8005ec4:	e003      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8005eca:	e000      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ecc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a40      	ldr	r2, [pc, #256]	; (800604c <TIM_Base_SetConfig+0x114>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d013      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f56:	d00f      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a3d      	ldr	r2, [pc, #244]	; (8006050 <TIM_Base_SetConfig+0x118>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00b      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a3c      	ldr	r2, [pc, #240]	; (8006054 <TIM_Base_SetConfig+0x11c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d007      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a3b      	ldr	r2, [pc, #236]	; (8006058 <TIM_Base_SetConfig+0x120>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a3a      	ldr	r2, [pc, #232]	; (800605c <TIM_Base_SetConfig+0x124>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d108      	bne.n	8005f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a2f      	ldr	r2, [pc, #188]	; (800604c <TIM_Base_SetConfig+0x114>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01f      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f98:	d01b      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2c      	ldr	r2, [pc, #176]	; (8006050 <TIM_Base_SetConfig+0x118>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d017      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2b      	ldr	r2, [pc, #172]	; (8006054 <TIM_Base_SetConfig+0x11c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2a      	ldr	r2, [pc, #168]	; (8006058 <TIM_Base_SetConfig+0x120>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00f      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a29      	ldr	r2, [pc, #164]	; (800605c <TIM_Base_SetConfig+0x124>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00b      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a28      	ldr	r2, [pc, #160]	; (8006060 <TIM_Base_SetConfig+0x128>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d007      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a27      	ldr	r2, [pc, #156]	; (8006064 <TIM_Base_SetConfig+0x12c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a26      	ldr	r2, [pc, #152]	; (8006068 <TIM_Base_SetConfig+0x130>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d108      	bne.n	8005fe4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a10      	ldr	r2, [pc, #64]	; (800604c <TIM_Base_SetConfig+0x114>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00f      	beq.n	8006030 <TIM_Base_SetConfig+0xf8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a12      	ldr	r2, [pc, #72]	; (800605c <TIM_Base_SetConfig+0x124>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00b      	beq.n	8006030 <TIM_Base_SetConfig+0xf8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a11      	ldr	r2, [pc, #68]	; (8006060 <TIM_Base_SetConfig+0x128>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d007      	beq.n	8006030 <TIM_Base_SetConfig+0xf8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a10      	ldr	r2, [pc, #64]	; (8006064 <TIM_Base_SetConfig+0x12c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_Base_SetConfig+0xf8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a0f      	ldr	r2, [pc, #60]	; (8006068 <TIM_Base_SetConfig+0x130>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d103      	bne.n	8006038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	615a      	str	r2, [r3, #20]
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40012c00 	.word	0x40012c00
 8006050:	40000400 	.word	0x40000400
 8006054:	40000800 	.word	0x40000800
 8006058:	40000c00 	.word	0x40000c00
 800605c:	40013400 	.word	0x40013400
 8006060:	40014000 	.word	0x40014000
 8006064:	40014400 	.word	0x40014400
 8006068:	40014800 	.word	0x40014800

0800606c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	f023 0201 	bic.w	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f023 030a 	bic.w	r3, r3, #10
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b087      	sub	sp, #28
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f023 0210 	bic.w	r2, r3, #16
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	031b      	lsls	r3, r3, #12
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800612a:	b480      	push	{r7}
 800612c:	b085      	sub	sp, #20
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	f043 0307 	orr.w	r3, r3, #7
 800614c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	609a      	str	r2, [r3, #8]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800617a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	021a      	lsls	r2, r3, #8
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	431a      	orrs	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4313      	orrs	r3, r2
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	609a      	str	r2, [r3, #8]
}
 8006194:	bf00      	nop
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e068      	b.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2e      	ldr	r2, [pc, #184]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d004      	beq.n	80061ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2d      	ldr	r2, [pc, #180]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d108      	bne.n	80061fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d01d      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622a:	d018      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00e      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d009      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a13      	ldr	r2, [pc, #76]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d004      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a14      	ldr	r2, [pc, #80]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d10c      	bne.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4313      	orrs	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40012c00 	.word	0x40012c00
 800629c:	40013400 	.word	0x40013400
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40000c00 	.word	0x40000c00
 80062ac:	40014000 	.word	0x40014000

080062b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e042      	b.n	8006384 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006304:	2b00      	cmp	r3, #0
 8006306:	d106      	bne.n	8006316 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f005 f851 	bl	800b3b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2224      	movs	r2, #36	; 0x24
 800631a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0201 	bic.w	r2, r2, #1
 800632c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fc52 	bl	8006bd8 <UART_SetConfig>
 8006334:	4603      	mov	r3, r0
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e022      	b.n	8006384 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 ff42 	bl	80071d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800635a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800636a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0201 	orr.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 ffc9 	bl	8007314 <UART_CheckIdleState>
 8006382:	4603      	mov	r3, r0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	f040 8084 	bne.w	80064b0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_UART_Transmit+0x28>
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e07c      	b.n	80064b2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <HAL_UART_Transmit+0x3a>
 80063c2:	2302      	movs	r3, #2
 80063c4:	e075      	b.n	80064b2 <HAL_UART_Transmit+0x126>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2221      	movs	r2, #33	; 0x21
 80063da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063de:	f7fa f925 	bl	800062c <HAL_GetTick>
 80063e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	88fa      	ldrh	r2, [r7, #6]
 80063e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	88fa      	ldrh	r2, [r7, #6]
 80063f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063fc:	d108      	bne.n	8006410 <HAL_UART_Transmit+0x84>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d104      	bne.n	8006410 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	e003      	b.n	8006418 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006414:	2300      	movs	r3, #0
 8006416:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006420:	e02d      	b.n	800647e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2200      	movs	r2, #0
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 ffbc 	bl	80073aa <UART_WaitOnFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e03a      	b.n	80064b2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	881a      	ldrh	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800644e:	b292      	uxth	r2, r2
 8006450:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	3302      	adds	r3, #2
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	e008      	b.n	800646c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	781a      	ldrb	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	b292      	uxth	r2, r2
 8006464:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	3301      	adds	r3, #1
 800646a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1cb      	bne.n	8006422 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2200      	movs	r2, #0
 8006492:	2140      	movs	r1, #64	; 0x40
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 ff88 	bl	80073aa <UART_WaitOnFlagUntilTimeout>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e006      	b.n	80064b2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3720      	adds	r7, #32
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d142      	bne.n	800655a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_UART_Receive_IT+0x24>
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e03b      	b.n	800655c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_UART_Receive_IT+0x36>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e034      	b.n	800655c <HAL_UART_Receive_IT+0xa0>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a17      	ldr	r2, [pc, #92]	; (8006564 <HAL_UART_Receive_IT+0xa8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d01f      	beq.n	800654a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d018      	beq.n	800654a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	613b      	str	r3, [r7, #16]
   return(result);
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	623b      	str	r3, [r7, #32]
 8006538:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	69f9      	ldr	r1, [r7, #28]
 800653c:	6a3a      	ldr	r2, [r7, #32]
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	61bb      	str	r3, [r7, #24]
   return(result);
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e6      	bne.n	8006518 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800654a:	88fb      	ldrh	r3, [r7, #6]
 800654c:	461a      	mov	r2, r3
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fff3 	bl	800753c <UART_Start_Receive_IT>
 8006556:	4603      	mov	r3, r0
 8006558:	e000      	b.n	800655c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3728      	adds	r7, #40	; 0x28
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40008000 	.word	0x40008000

08006568 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b0ba      	sub	sp, #232	; 0xe8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800658e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006592:	f640 030f 	movw	r3, #2063	; 0x80f
 8006596:	4013      	ands	r3, r2
 8006598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800659c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11b      	bne.n	80065dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d015      	beq.n	80065dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d105      	bne.n	80065c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d009      	beq.n	80065dc <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 82d6 	beq.w	8006b7e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	4798      	blx	r3
      }
      return;
 80065da:	e2d0      	b.n	8006b7e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80065dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 811f 	beq.w	8006824 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065ea:	4b8b      	ldr	r3, [pc, #556]	; (8006818 <HAL_UART_IRQHandler+0x2b0>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065f6:	4b89      	ldr	r3, [pc, #548]	; (800681c <HAL_UART_IRQHandler+0x2b4>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8112 	beq.w	8006824 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d011      	beq.n	8006630 <HAL_UART_IRQHandler+0xc8>
 800660c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2201      	movs	r2, #1
 800661e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006626:	f043 0201 	orr.w	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d011      	beq.n	8006660 <HAL_UART_IRQHandler+0xf8>
 800663c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2202      	movs	r2, #2
 800664e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006656:	f043 0204 	orr.w	r2, r3, #4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d011      	beq.n	8006690 <HAL_UART_IRQHandler+0x128>
 800666c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2204      	movs	r2, #4
 800667e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006686:	f043 0202 	orr.w	r2, r3, #2
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006694:	f003 0308 	and.w	r3, r3, #8
 8006698:	2b00      	cmp	r3, #0
 800669a:	d017      	beq.n	80066cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800669c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d105      	bne.n	80066b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066ac:	4b5a      	ldr	r3, [pc, #360]	; (8006818 <HAL_UART_IRQHandler+0x2b0>)
 80066ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2208      	movs	r2, #8
 80066ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c2:	f043 0208 	orr.w	r2, r3, #8
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d012      	beq.n	80066fe <HAL_UART_IRQHandler+0x196>
 80066d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00c      	beq.n	80066fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066f4:	f043 0220 	orr.w	r2, r3, #32
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 823c 	beq.w	8006b82 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d013      	beq.n	800673e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d105      	bne.n	800672e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006744:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b40      	cmp	r3, #64	; 0x40
 8006754:	d005      	beq.n	8006762 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800675a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800675e:	2b00      	cmp	r3, #0
 8006760:	d04f      	beq.n	8006802 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 f814 	bl	8007790 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b40      	cmp	r3, #64	; 0x40
 8006774:	d141      	bne.n	80067fa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3308      	adds	r3, #8
 800677c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800678c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3308      	adds	r3, #8
 800679e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1d9      	bne.n	8006776 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d013      	beq.n	80067f2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ce:	4a14      	ldr	r2, [pc, #80]	; (8006820 <HAL_UART_IRQHandler+0x2b8>)
 80067d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fb fa87 	bl	8001cea <HAL_DMA_Abort_IT>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d017      	beq.n	8006812 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80067ec:	4610      	mov	r0, r2
 80067ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f0:	e00f      	b.n	8006812 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f9da 	bl	8006bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f8:	e00b      	b.n	8006812 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f9d6 	bl	8006bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006800:	e007      	b.n	8006812 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f9d2 	bl	8006bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006810:	e1b7      	b.n	8006b82 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006812:	bf00      	nop
    return;
 8006814:	e1b5      	b.n	8006b82 <HAL_UART_IRQHandler+0x61a>
 8006816:	bf00      	nop
 8006818:	10000001 	.word	0x10000001
 800681c:	04000120 	.word	0x04000120
 8006820:	0800785d 	.word	0x0800785d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006828:	2b01      	cmp	r3, #1
 800682a:	f040 814a 	bne.w	8006ac2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006832:	f003 0310 	and.w	r3, r3, #16
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 8143 	beq.w	8006ac2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800683c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 813c 	beq.w	8006ac2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2210      	movs	r2, #16
 8006850:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	f040 80b5 	bne.w	80069cc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800686e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 8187 	beq.w	8006b86 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800687e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006882:	429a      	cmp	r2, r3
 8006884:	f080 817f 	bcs.w	8006b86 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800688e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f040 8086 	bne.w	80069b0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1da      	bne.n	80068a4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3308      	adds	r3, #8
 80068f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006900:	f023 0301 	bic.w	r3, r3, #1
 8006904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3308      	adds	r3, #8
 800690e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006912:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006916:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800691a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e1      	bne.n	80068ee <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3308      	adds	r3, #8
 8006930:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800693a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800693c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006940:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3308      	adds	r3, #8
 800694a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800694e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006950:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006954:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800695c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e3      	bne.n	800692a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2220      	movs	r2, #32
 8006966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800697e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006980:	f023 0310 	bic.w	r3, r3, #16
 8006984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006992:	65bb      	str	r3, [r7, #88]	; 0x58
 8006994:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006998:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e4      	bne.n	8006970 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fb f941 	bl	8001c32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f8fb 	bl	8006bc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069ca:	e0dc      	b.n	8006b86 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069d8:	b29b      	uxth	r3, r3
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 80ce 	beq.w	8006b8a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80069ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 80c9 	beq.w	8006b8a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e4      	bne.n	80069f8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3308      	adds	r3, #8
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3308      	adds	r3, #8
 8006a52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a56:	633a      	str	r2, [r7, #48]	; 0x30
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e1      	bne.n	8006a2e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0310 	bic.w	r3, r3, #16
 8006a92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006aa0:	61fb      	str	r3, [r7, #28]
 8006aa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	69b9      	ldr	r1, [r7, #24]
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	617b      	str	r3, [r7, #20]
   return(result);
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e4      	bne.n	8006a7e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f880 	bl	8006bc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ac0:	e063      	b.n	8006b8a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00e      	beq.n	8006aec <HAL_UART_IRQHandler+0x584>
 8006ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ae2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 fb5f 	bl	80081a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aea:	e051      	b.n	8006b90 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d014      	beq.n	8006b22 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d008      	beq.n	8006b22 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d03a      	beq.n	8006b8e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
    }
    return;
 8006b20:	e035      	b.n	8006b8e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d009      	beq.n	8006b42 <HAL_UART_IRQHandler+0x5da>
 8006b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fea4 	bl	8007888 <UART_EndTransmit_IT>
    return;
 8006b40:	e026      	b.n	8006b90 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d009      	beq.n	8006b62 <HAL_UART_IRQHandler+0x5fa>
 8006b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 fb38 	bl	80081d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b60:	e016      	b.n	8006b90 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d010      	beq.n	8006b90 <HAL_UART_IRQHandler+0x628>
 8006b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	da0c      	bge.n	8006b90 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 fb20 	bl	80081bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b7c:	e008      	b.n	8006b90 <HAL_UART_IRQHandler+0x628>
      return;
 8006b7e:	bf00      	nop
 8006b80:	e006      	b.n	8006b90 <HAL_UART_IRQHandler+0x628>
    return;
 8006b82:	bf00      	nop
 8006b84:	e004      	b.n	8006b90 <HAL_UART_IRQHandler+0x628>
      return;
 8006b86:	bf00      	nop
 8006b88:	e002      	b.n	8006b90 <HAL_UART_IRQHandler+0x628>
      return;
 8006b8a:	bf00      	nop
 8006b8c:	e000      	b.n	8006b90 <HAL_UART_IRQHandler+0x628>
    return;
 8006b8e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b90:	37e8      	adds	r7, #232	; 0xe8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop

08006b98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bdc:	b08c      	sub	sp, #48	; 0x30
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	4baa      	ldr	r3, [pc, #680]	; (8006eb0 <UART_SetConfig+0x2d8>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	6812      	ldr	r2, [r2, #0]
 8006c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a9f      	ldr	r2, [pc, #636]	; (8006eb4 <UART_SetConfig+0x2dc>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d004      	beq.n	8006c44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c40:	4313      	orrs	r3, r2
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c4e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	6812      	ldr	r2, [r2, #0]
 8006c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c62:	f023 010f 	bic.w	r1, r3, #15
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a90      	ldr	r2, [pc, #576]	; (8006eb8 <UART_SetConfig+0x2e0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d125      	bne.n	8006cc8 <UART_SetConfig+0xf0>
 8006c7c:	4b8f      	ldr	r3, [pc, #572]	; (8006ebc <UART_SetConfig+0x2e4>)
 8006c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d81a      	bhi.n	8006cc0 <UART_SetConfig+0xe8>
 8006c8a:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <UART_SetConfig+0xb8>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006ca1 	.word	0x08006ca1
 8006c94:	08006cb1 	.word	0x08006cb1
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca6:	e116      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cae:	e112      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cb6:	e10e      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006cb8:	2308      	movs	r3, #8
 8006cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cbe:	e10a      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc6:	e106      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a7c      	ldr	r2, [pc, #496]	; (8006ec0 <UART_SetConfig+0x2e8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d138      	bne.n	8006d44 <UART_SetConfig+0x16c>
 8006cd2:	4b7a      	ldr	r3, [pc, #488]	; (8006ebc <UART_SetConfig+0x2e4>)
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd8:	f003 030c 	and.w	r3, r3, #12
 8006cdc:	2b0c      	cmp	r3, #12
 8006cde:	d82d      	bhi.n	8006d3c <UART_SetConfig+0x164>
 8006ce0:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <UART_SetConfig+0x110>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006d1d 	.word	0x08006d1d
 8006cec:	08006d3d 	.word	0x08006d3d
 8006cf0:	08006d3d 	.word	0x08006d3d
 8006cf4:	08006d3d 	.word	0x08006d3d
 8006cf8:	08006d2d 	.word	0x08006d2d
 8006cfc:	08006d3d 	.word	0x08006d3d
 8006d00:	08006d3d 	.word	0x08006d3d
 8006d04:	08006d3d 	.word	0x08006d3d
 8006d08:	08006d25 	.word	0x08006d25
 8006d0c:	08006d3d 	.word	0x08006d3d
 8006d10:	08006d3d 	.word	0x08006d3d
 8006d14:	08006d3d 	.word	0x08006d3d
 8006d18:	08006d35 	.word	0x08006d35
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d22:	e0d8      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006d24:	2302      	movs	r3, #2
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d2a:	e0d4      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d32:	e0d0      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006d34:	2308      	movs	r3, #8
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d3a:	e0cc      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d42:	e0c8      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a5e      	ldr	r2, [pc, #376]	; (8006ec4 <UART_SetConfig+0x2ec>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d125      	bne.n	8006d9a <UART_SetConfig+0x1c2>
 8006d4e:	4b5b      	ldr	r3, [pc, #364]	; (8006ebc <UART_SetConfig+0x2e4>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d58:	2b30      	cmp	r3, #48	; 0x30
 8006d5a:	d016      	beq.n	8006d8a <UART_SetConfig+0x1b2>
 8006d5c:	2b30      	cmp	r3, #48	; 0x30
 8006d5e:	d818      	bhi.n	8006d92 <UART_SetConfig+0x1ba>
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d00a      	beq.n	8006d7a <UART_SetConfig+0x1a2>
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d814      	bhi.n	8006d92 <UART_SetConfig+0x1ba>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <UART_SetConfig+0x19a>
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d008      	beq.n	8006d82 <UART_SetConfig+0x1aa>
 8006d70:	e00f      	b.n	8006d92 <UART_SetConfig+0x1ba>
 8006d72:	2300      	movs	r3, #0
 8006d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d78:	e0ad      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d80:	e0a9      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006d82:	2304      	movs	r3, #4
 8006d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d88:	e0a5      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d90:	e0a1      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006d92:	2310      	movs	r3, #16
 8006d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d98:	e09d      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a4a      	ldr	r2, [pc, #296]	; (8006ec8 <UART_SetConfig+0x2f0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d125      	bne.n	8006df0 <UART_SetConfig+0x218>
 8006da4:	4b45      	ldr	r3, [pc, #276]	; (8006ebc <UART_SetConfig+0x2e4>)
 8006da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006daa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dae:	2bc0      	cmp	r3, #192	; 0xc0
 8006db0:	d016      	beq.n	8006de0 <UART_SetConfig+0x208>
 8006db2:	2bc0      	cmp	r3, #192	; 0xc0
 8006db4:	d818      	bhi.n	8006de8 <UART_SetConfig+0x210>
 8006db6:	2b80      	cmp	r3, #128	; 0x80
 8006db8:	d00a      	beq.n	8006dd0 <UART_SetConfig+0x1f8>
 8006dba:	2b80      	cmp	r3, #128	; 0x80
 8006dbc:	d814      	bhi.n	8006de8 <UART_SetConfig+0x210>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <UART_SetConfig+0x1f0>
 8006dc2:	2b40      	cmp	r3, #64	; 0x40
 8006dc4:	d008      	beq.n	8006dd8 <UART_SetConfig+0x200>
 8006dc6:	e00f      	b.n	8006de8 <UART_SetConfig+0x210>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dce:	e082      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dd6:	e07e      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006dd8:	2304      	movs	r3, #4
 8006dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dde:	e07a      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006de0:	2308      	movs	r3, #8
 8006de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de6:	e076      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006de8:	2310      	movs	r3, #16
 8006dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dee:	e072      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a35      	ldr	r2, [pc, #212]	; (8006ecc <UART_SetConfig+0x2f4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d12a      	bne.n	8006e50 <UART_SetConfig+0x278>
 8006dfa:	4b30      	ldr	r3, [pc, #192]	; (8006ebc <UART_SetConfig+0x2e4>)
 8006dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e08:	d01a      	beq.n	8006e40 <UART_SetConfig+0x268>
 8006e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e0e:	d81b      	bhi.n	8006e48 <UART_SetConfig+0x270>
 8006e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e14:	d00c      	beq.n	8006e30 <UART_SetConfig+0x258>
 8006e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e1a:	d815      	bhi.n	8006e48 <UART_SetConfig+0x270>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <UART_SetConfig+0x250>
 8006e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e24:	d008      	beq.n	8006e38 <UART_SetConfig+0x260>
 8006e26:	e00f      	b.n	8006e48 <UART_SetConfig+0x270>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e2e:	e052      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006e30:	2302      	movs	r3, #2
 8006e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e36:	e04e      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e3e:	e04a      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e46:	e046      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e4e:	e042      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a17      	ldr	r2, [pc, #92]	; (8006eb4 <UART_SetConfig+0x2dc>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d13a      	bne.n	8006ed0 <UART_SetConfig+0x2f8>
 8006e5a:	4b18      	ldr	r3, [pc, #96]	; (8006ebc <UART_SetConfig+0x2e4>)
 8006e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e68:	d01a      	beq.n	8006ea0 <UART_SetConfig+0x2c8>
 8006e6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e6e:	d81b      	bhi.n	8006ea8 <UART_SetConfig+0x2d0>
 8006e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e74:	d00c      	beq.n	8006e90 <UART_SetConfig+0x2b8>
 8006e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e7a:	d815      	bhi.n	8006ea8 <UART_SetConfig+0x2d0>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <UART_SetConfig+0x2b0>
 8006e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e84:	d008      	beq.n	8006e98 <UART_SetConfig+0x2c0>
 8006e86:	e00f      	b.n	8006ea8 <UART_SetConfig+0x2d0>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e8e:	e022      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006e90:	2302      	movs	r3, #2
 8006e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e96:	e01e      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006e98:	2304      	movs	r3, #4
 8006e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e9e:	e01a      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ea6:	e016      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eae:	e012      	b.n	8006ed6 <UART_SetConfig+0x2fe>
 8006eb0:	cfff69f3 	.word	0xcfff69f3
 8006eb4:	40008000 	.word	0x40008000
 8006eb8:	40013800 	.word	0x40013800
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	40004400 	.word	0x40004400
 8006ec4:	40004800 	.word	0x40004800
 8006ec8:	40004c00 	.word	0x40004c00
 8006ecc:	40005000 	.word	0x40005000
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4aae      	ldr	r2, [pc, #696]	; (8007194 <UART_SetConfig+0x5bc>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	f040 8097 	bne.w	8007010 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ee2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d823      	bhi.n	8006f32 <UART_SetConfig+0x35a>
 8006eea:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <UART_SetConfig+0x318>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f15 	.word	0x08006f15
 8006ef4:	08006f33 	.word	0x08006f33
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f33 	.word	0x08006f33
 8006f00:	08006f23 	.word	0x08006f23
 8006f04:	08006f33 	.word	0x08006f33
 8006f08:	08006f33 	.word	0x08006f33
 8006f0c:	08006f33 	.word	0x08006f33
 8006f10:	08006f2b 	.word	0x08006f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f14:	f7fd ff02 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8006f18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f1a:	e010      	b.n	8006f3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f1c:	4b9e      	ldr	r3, [pc, #632]	; (8007198 <UART_SetConfig+0x5c0>)
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f20:	e00d      	b.n	8006f3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f22:	f7fd fe63 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8006f26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f28:	e009      	b.n	8006f3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f30:	e005      	b.n	8006f3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 8130 	beq.w	80071a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	4a94      	ldr	r2, [pc, #592]	; (800719c <UART_SetConfig+0x5c4>)
 8006f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f50:	461a      	mov	r2, r3
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	4413      	add	r3, r2
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d305      	bcc.n	8006f76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d903      	bls.n	8006f7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f7c:	e113      	b.n	80071a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	2200      	movs	r2, #0
 8006f82:	60bb      	str	r3, [r7, #8]
 8006f84:	60fa      	str	r2, [r7, #12]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	4a84      	ldr	r2, [pc, #528]	; (800719c <UART_SetConfig+0x5c4>)
 8006f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2200      	movs	r2, #0
 8006f94:	603b      	str	r3, [r7, #0]
 8006f96:	607a      	str	r2, [r7, #4]
 8006f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fa0:	f7f9 f996 	bl	80002d0 <__aeabi_uldivmod>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4619      	mov	r1, r3
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	f04f 0300 	mov.w	r3, #0
 8006fb4:	020b      	lsls	r3, r1, #8
 8006fb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fba:	0202      	lsls	r2, r0, #8
 8006fbc:	6979      	ldr	r1, [r7, #20]
 8006fbe:	6849      	ldr	r1, [r1, #4]
 8006fc0:	0849      	lsrs	r1, r1, #1
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	4605      	mov	r5, r0
 8006fc8:	eb12 0804 	adds.w	r8, r2, r4
 8006fcc:	eb43 0905 	adc.w	r9, r3, r5
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	469a      	mov	sl, r3
 8006fd8:	4693      	mov	fp, r2
 8006fda:	4652      	mov	r2, sl
 8006fdc:	465b      	mov	r3, fp
 8006fde:	4640      	mov	r0, r8
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	f7f9 f975 	bl	80002d0 <__aeabi_uldivmod>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4613      	mov	r3, r2
 8006fec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ff4:	d308      	bcc.n	8007008 <UART_SetConfig+0x430>
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ffc:	d204      	bcs.n	8007008 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6a3a      	ldr	r2, [r7, #32]
 8007004:	60da      	str	r2, [r3, #12]
 8007006:	e0ce      	b.n	80071a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800700e:	e0ca      	b.n	80071a6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007018:	d166      	bne.n	80070e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800701a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800701e:	2b08      	cmp	r3, #8
 8007020:	d827      	bhi.n	8007072 <UART_SetConfig+0x49a>
 8007022:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <UART_SetConfig+0x450>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	0800704d 	.word	0x0800704d
 800702c:	08007055 	.word	0x08007055
 8007030:	0800705d 	.word	0x0800705d
 8007034:	08007073 	.word	0x08007073
 8007038:	08007063 	.word	0x08007063
 800703c:	08007073 	.word	0x08007073
 8007040:	08007073 	.word	0x08007073
 8007044:	08007073 	.word	0x08007073
 8007048:	0800706b 	.word	0x0800706b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800704c:	f7fd fe66 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8007050:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007052:	e014      	b.n	800707e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007054:	f7fd fe78 	bl	8004d48 <HAL_RCC_GetPCLK2Freq>
 8007058:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800705a:	e010      	b.n	800707e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800705c:	4b4e      	ldr	r3, [pc, #312]	; (8007198 <UART_SetConfig+0x5c0>)
 800705e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007060:	e00d      	b.n	800707e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007062:	f7fd fdc3 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8007066:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007068:	e009      	b.n	800707e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800706a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007070:	e005      	b.n	800707e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800707c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 8090 	beq.w	80071a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	4a44      	ldr	r2, [pc, #272]	; (800719c <UART_SetConfig+0x5c4>)
 800708c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007090:	461a      	mov	r2, r3
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	fbb3 f3f2 	udiv	r3, r3, r2
 8007098:	005a      	lsls	r2, r3, #1
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	085b      	lsrs	r3, r3, #1
 80070a0:	441a      	add	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	2b0f      	cmp	r3, #15
 80070b0:	d916      	bls.n	80070e0 <UART_SetConfig+0x508>
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b8:	d212      	bcs.n	80070e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f023 030f 	bic.w	r3, r3, #15
 80070c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	085b      	lsrs	r3, r3, #1
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	8bfb      	ldrh	r3, [r7, #30]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	8bfa      	ldrh	r2, [r7, #30]
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	e062      	b.n	80071a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070e6:	e05e      	b.n	80071a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d828      	bhi.n	8007142 <UART_SetConfig+0x56a>
 80070f0:	a201      	add	r2, pc, #4	; (adr r2, 80070f8 <UART_SetConfig+0x520>)
 80070f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f6:	bf00      	nop
 80070f8:	0800711d 	.word	0x0800711d
 80070fc:	08007125 	.word	0x08007125
 8007100:	0800712d 	.word	0x0800712d
 8007104:	08007143 	.word	0x08007143
 8007108:	08007133 	.word	0x08007133
 800710c:	08007143 	.word	0x08007143
 8007110:	08007143 	.word	0x08007143
 8007114:	08007143 	.word	0x08007143
 8007118:	0800713b 	.word	0x0800713b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800711c:	f7fd fdfe 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8007120:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007122:	e014      	b.n	800714e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007124:	f7fd fe10 	bl	8004d48 <HAL_RCC_GetPCLK2Freq>
 8007128:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800712a:	e010      	b.n	800714e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800712c:	4b1a      	ldr	r3, [pc, #104]	; (8007198 <UART_SetConfig+0x5c0>)
 800712e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007130:	e00d      	b.n	800714e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007132:	f7fd fd5b 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8007136:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007138:	e009      	b.n	800714e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800713a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007140:	e005      	b.n	800714e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800714c:	bf00      	nop
    }

    if (pclk != 0U)
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	d028      	beq.n	80071a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	4a10      	ldr	r2, [pc, #64]	; (800719c <UART_SetConfig+0x5c4>)
 800715a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800715e:	461a      	mov	r2, r3
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	fbb3 f2f2 	udiv	r2, r3, r2
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	085b      	lsrs	r3, r3, #1
 800716c:	441a      	add	r2, r3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	fbb2 f3f3 	udiv	r3, r2, r3
 8007176:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	2b0f      	cmp	r3, #15
 800717c:	d910      	bls.n	80071a0 <UART_SetConfig+0x5c8>
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007184:	d20c      	bcs.n	80071a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	b29a      	uxth	r2, r3
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60da      	str	r2, [r3, #12]
 8007190:	e009      	b.n	80071a6 <UART_SetConfig+0x5ce>
 8007192:	bf00      	nop
 8007194:	40008000 	.word	0x40008000
 8007198:	00f42400 	.word	0x00f42400
 800719c:	08010f48 	.word	0x08010f48
      }
      else
      {
        ret = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2200      	movs	r2, #0
 80071ba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2200      	movs	r2, #0
 80071c0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80071c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3730      	adds	r7, #48	; 0x30
 80071ca:	46bd      	mov	sp, r7
 80071cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080071d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00a      	beq.n	800723e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007242:	f003 0308 	and.w	r3, r3, #8
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007264:	f003 0310 	and.w	r3, r3, #16
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d01a      	beq.n	80072e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ce:	d10a      	bne.n	80072e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	605a      	str	r2, [r3, #4]
  }
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af02      	add	r7, sp, #8
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007324:	f7f9 f982 	bl	800062c <HAL_GetTick>
 8007328:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0308 	and.w	r3, r3, #8
 8007334:	2b08      	cmp	r3, #8
 8007336:	d10e      	bne.n	8007356 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f82f 	bl	80073aa <UART_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e025      	b.n	80073a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0304 	and.w	r3, r3, #4
 8007360:	2b04      	cmp	r3, #4
 8007362:	d10e      	bne.n	8007382 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f819 	bl	80073aa <UART_WaitOnFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e00f      	b.n	80073a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2220      	movs	r2, #32
 8007386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b09c      	sub	sp, #112	; 0x70
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	603b      	str	r3, [r7, #0]
 80073b6:	4613      	mov	r3, r2
 80073b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ba:	e0a9      	b.n	8007510 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073c2:	f000 80a5 	beq.w	8007510 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c6:	f7f9 f931 	bl	800062c <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d302      	bcc.n	80073dc <UART_WaitOnFlagUntilTimeout+0x32>
 80073d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d140      	bne.n	800745e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073f0:	667b      	str	r3, [r7, #100]	; 0x64
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007400:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e6      	bne.n	80073dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	f023 0301 	bic.w	r3, r3, #1
 8007424:	663b      	str	r3, [r7, #96]	; 0x60
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3308      	adds	r3, #8
 800742c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800742e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007430:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800743c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e5      	bne.n	800740e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2220      	movs	r2, #32
 8007446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e069      	b.n	8007532 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b00      	cmp	r3, #0
 800746a:	d051      	beq.n	8007510 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800747a:	d149      	bne.n	8007510 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007484:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800749a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a4:	637b      	str	r3, [r7, #52]	; 0x34
 80074a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e6      	bne.n	8007486 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	613b      	str	r3, [r7, #16]
   return(result);
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f023 0301 	bic.w	r3, r3, #1
 80074ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3308      	adds	r3, #8
 80074d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074d8:	623a      	str	r2, [r7, #32]
 80074da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	69f9      	ldr	r1, [r7, #28]
 80074de:	6a3a      	ldr	r2, [r7, #32]
 80074e0:	e841 2300 	strex	r3, r2, [r1]
 80074e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e5      	bne.n	80074b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2220      	movs	r2, #32
 8007500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e010      	b.n	8007532 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69da      	ldr	r2, [r3, #28]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	4013      	ands	r3, r2
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	429a      	cmp	r2, r3
 800751e:	bf0c      	ite	eq
 8007520:	2301      	moveq	r3, #1
 8007522:	2300      	movne	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	429a      	cmp	r2, r3
 800752c:	f43f af46 	beq.w	80073bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3770      	adds	r7, #112	; 0x70
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800753c:	b480      	push	{r7}
 800753e:	b0a3      	sub	sp, #140	; 0x8c
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	4613      	mov	r3, r2
 8007548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	88fa      	ldrh	r2, [r7, #6]
 800755c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756e:	d10e      	bne.n	800758e <UART_Start_Receive_IT+0x52>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d105      	bne.n	8007584 <UART_Start_Receive_IT+0x48>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800757e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007582:	e02d      	b.n	80075e0 <UART_Start_Receive_IT+0xa4>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	22ff      	movs	r2, #255	; 0xff
 8007588:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800758c:	e028      	b.n	80075e0 <UART_Start_Receive_IT+0xa4>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10d      	bne.n	80075b2 <UART_Start_Receive_IT+0x76>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d104      	bne.n	80075a8 <UART_Start_Receive_IT+0x6c>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	22ff      	movs	r2, #255	; 0xff
 80075a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075a6:	e01b      	b.n	80075e0 <UART_Start_Receive_IT+0xa4>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	227f      	movs	r2, #127	; 0x7f
 80075ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075b0:	e016      	b.n	80075e0 <UART_Start_Receive_IT+0xa4>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075ba:	d10d      	bne.n	80075d8 <UART_Start_Receive_IT+0x9c>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <UART_Start_Receive_IT+0x92>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	227f      	movs	r2, #127	; 0x7f
 80075c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075cc:	e008      	b.n	80075e0 <UART_Start_Receive_IT+0xa4>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	223f      	movs	r2, #63	; 0x3f
 80075d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075d6:	e003      	b.n	80075e0 <UART_Start_Receive_IT+0xa4>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2222      	movs	r2, #34	; 0x22
 80075ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3308      	adds	r3, #8
 80075f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007602:	f043 0301 	orr.w	r3, r3, #1
 8007606:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3308      	adds	r3, #8
 8007610:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007614:	673a      	str	r2, [r7, #112]	; 0x70
 8007616:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007618:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800761a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800761c:	e841 2300 	strex	r3, r2, [r1]
 8007620:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1e3      	bne.n	80075f0 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800762c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007630:	d153      	bne.n	80076da <UART_Start_Receive_IT+0x19e>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007638:	88fa      	ldrh	r2, [r7, #6]
 800763a:	429a      	cmp	r2, r3
 800763c:	d34d      	bcc.n	80076da <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007646:	d107      	bne.n	8007658 <UART_Start_Receive_IT+0x11c>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d103      	bne.n	8007658 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4a4b      	ldr	r2, [pc, #300]	; (8007780 <UART_Start_Receive_IT+0x244>)
 8007654:	671a      	str	r2, [r3, #112]	; 0x70
 8007656:	e002      	b.n	800765e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4a4a      	ldr	r2, [pc, #296]	; (8007784 <UART_Start_Receive_IT+0x248>)
 800765c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d01a      	beq.n	80076a4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800767c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800767e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007690:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007692:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007696:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800769e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e4      	bne.n	800766e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3308      	adds	r3, #8
 80076c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80076c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80076c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e5      	bne.n	80076a4 <UART_Start_Receive_IT+0x168>
 80076d8:	e04a      	b.n	8007770 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e2:	d107      	bne.n	80076f4 <UART_Start_Receive_IT+0x1b8>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d103      	bne.n	80076f4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4a26      	ldr	r2, [pc, #152]	; (8007788 <UART_Start_Receive_IT+0x24c>)
 80076f0:	671a      	str	r2, [r3, #112]	; 0x70
 80076f2:	e002      	b.n	80076fa <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4a25      	ldr	r2, [pc, #148]	; (800778c <UART_Start_Receive_IT+0x250>)
 80076f8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d019      	beq.n	800773e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800771e:	677b      	str	r3, [r7, #116]	; 0x74
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007728:	637b      	str	r3, [r7, #52]	; 0x34
 800772a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800772e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e6      	bne.n	800770a <UART_Start_Receive_IT+0x1ce>
 800773c:	e018      	b.n	8007770 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	613b      	str	r3, [r7, #16]
   return(result);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f043 0320 	orr.w	r3, r3, #32
 8007752:	67bb      	str	r3, [r7, #120]	; 0x78
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800775c:	623b      	str	r3, [r7, #32]
 800775e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	69f9      	ldr	r1, [r7, #28]
 8007762:	6a3a      	ldr	r2, [r7, #32]
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	61bb      	str	r3, [r7, #24]
   return(result);
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e6      	bne.n	800773e <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	378c      	adds	r7, #140	; 0x8c
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	08007ea5 	.word	0x08007ea5
 8007784:	08007ba9 	.word	0x08007ba9
 8007788:	08007a43 	.word	0x08007a43
 800778c:	080078df 	.word	0x080078df

08007790 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b095      	sub	sp, #84	; 0x54
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b6:	643b      	str	r3, [r7, #64]	; 0x40
 80077b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e6      	bne.n	8007798 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3308      	adds	r3, #8
 80077d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077e0:	f023 0301 	bic.w	r3, r3, #1
 80077e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e3      	bne.n	80077ca <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007806:	2b01      	cmp	r3, #1
 8007808:	d118      	bne.n	800783c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	60bb      	str	r3, [r7, #8]
   return(result);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f023 0310 	bic.w	r3, r3, #16
 800781e:	647b      	str	r3, [r7, #68]	; 0x44
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007828:	61bb      	str	r3, [r7, #24]
 800782a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6979      	ldr	r1, [r7, #20]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	613b      	str	r3, [r7, #16]
   return(result);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e6      	bne.n	800780a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007850:	bf00      	nop
 8007852:	3754      	adds	r7, #84	; 0x54
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7ff f996 	bl	8006bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007880:	bf00      	nop
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	60bb      	str	r3, [r7, #8]
   return(result);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a4:	61fb      	str	r3, [r7, #28]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	61bb      	str	r3, [r7, #24]
 80078b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6979      	ldr	r1, [r7, #20]
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	613b      	str	r3, [r7, #16]
   return(result);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e6      	bne.n	8007890 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff f961 	bl	8006b98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078d6:	bf00      	nop
 80078d8:	3720      	adds	r7, #32
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b096      	sub	sp, #88	; 0x58
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f6:	2b22      	cmp	r3, #34	; 0x22
 80078f8:	f040 8095 	bne.w	8007a26 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007902:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007906:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800790a:	b2d9      	uxtb	r1, r3
 800790c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007910:	b2da      	uxtb	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007916:	400a      	ands	r2, r1
 8007918:	b2d2      	uxtb	r2, r2
 800791a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800792c:	b29b      	uxth	r3, r3
 800792e:	3b01      	subs	r3, #1
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d17a      	bne.n	8007a3a <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007958:	653b      	str	r3, [r7, #80]	; 0x50
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007962:	647b      	str	r3, [r7, #68]	; 0x44
 8007964:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e6      	bne.n	8007944 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3308      	adds	r3, #8
 800797c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	623b      	str	r3, [r7, #32]
   return(result);
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	f023 0301 	bic.w	r3, r3, #1
 800798c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3308      	adds	r3, #8
 8007994:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007996:	633a      	str	r2, [r7, #48]	; 0x30
 8007998:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800799c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e5      	bne.n	8007976 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d12e      	bne.n	8007a1e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	e853 3f00 	ldrex	r3, [r3]
 80079d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0310 	bic.w	r3, r3, #16
 80079da:	64bb      	str	r3, [r7, #72]	; 0x48
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	461a      	mov	r2, r3
 80079e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079e4:	61fb      	str	r3, [r7, #28]
 80079e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	69b9      	ldr	r1, [r7, #24]
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	e841 2300 	strex	r3, r2, [r1]
 80079f0:	617b      	str	r3, [r7, #20]
   return(result);
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e6      	bne.n	80079c6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	f003 0310 	and.w	r3, r3, #16
 8007a02:	2b10      	cmp	r3, #16
 8007a04:	d103      	bne.n	8007a0e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2210      	movs	r2, #16
 8007a0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff f8d2 	bl	8006bc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a1c:	e00d      	b.n	8007a3a <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f002 fca0 	bl	800a364 <HAL_UART_RxCpltCallback>
}
 8007a24:	e009      	b.n	8007a3a <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	8b1b      	ldrh	r3, [r3, #24]
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0208 	orr.w	r2, r2, #8
 8007a36:	b292      	uxth	r2, r2
 8007a38:	831a      	strh	r2, [r3, #24]
}
 8007a3a:	bf00      	nop
 8007a3c:	3758      	adds	r7, #88	; 0x58
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b096      	sub	sp, #88	; 0x58
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5a:	2b22      	cmp	r3, #34	; 0x22
 8007a5c:	f040 8095 	bne.w	8007b8a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a66:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a70:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007a74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a78:	4013      	ands	r3, r2
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a7e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a84:	1c9a      	adds	r2, r3, #2
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d17a      	bne.n	8007b9e <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007abc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ac8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e6      	bne.n	8007aa8 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	f023 0301 	bic.w	r3, r3, #1
 8007af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3308      	adds	r3, #8
 8007af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007afc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e5      	bne.n	8007ada <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d12e      	bne.n	8007b82 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f023 0310 	bic.w	r3, r3, #16
 8007b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b48:	61bb      	str	r3, [r7, #24]
 8007b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6979      	ldr	r1, [r7, #20]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	613b      	str	r3, [r7, #16]
   return(result);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e6      	bne.n	8007b2a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	2b10      	cmp	r3, #16
 8007b68:	d103      	bne.n	8007b72 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2210      	movs	r2, #16
 8007b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff f820 	bl	8006bc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b80:	e00d      	b.n	8007b9e <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f002 fbee 	bl	800a364 <HAL_UART_RxCpltCallback>
}
 8007b88:	e009      	b.n	8007b9e <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	8b1b      	ldrh	r3, [r3, #24]
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f042 0208 	orr.w	r2, r2, #8
 8007b9a:	b292      	uxth	r2, r2
 8007b9c:	831a      	strh	r2, [r3, #24]
}
 8007b9e:	bf00      	nop
 8007ba0:	3758      	adds	r7, #88	; 0x58
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b0a6      	sub	sp, #152	; 0x98
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007bb6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bde:	2b22      	cmp	r3, #34	; 0x22
 8007be0:	f040 814f 	bne.w	8007e82 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bea:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bee:	e0f6      	b.n	8007dde <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007bf6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bfa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007bfe:	b2d9      	uxtb	r1, r3
 8007c00:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0a:	400a      	ands	r2, r1
 8007c0c:	b2d2      	uxtb	r2, r2
 8007c0e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d053      	beq.n	8007cea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d011      	beq.n	8007c72 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00b      	beq.n	8007c72 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c68:	f043 0201 	orr.w	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d011      	beq.n	8007ca2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00b      	beq.n	8007ca2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c98:	f043 0204 	orr.w	r2, r3, #4
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ca2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d011      	beq.n	8007cd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00b      	beq.n	8007cd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc8:	f043 0202 	orr.w	r2, r3, #2
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d006      	beq.n	8007cea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fe ff65 	bl	8006bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d173      	bne.n	8007dde <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d1a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007d1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e4      	bne.n	8007cf6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3308      	adds	r3, #8
 8007d32:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d36:	e853 3f00 	ldrex	r3, [r3]
 8007d3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d42:	f023 0301 	bic.w	r3, r3, #1
 8007d46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d50:	657a      	str	r2, [r7, #84]	; 0x54
 8007d52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d58:	e841 2300 	strex	r3, r2, [r1]
 8007d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e3      	bne.n	8007d2c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2220      	movs	r2, #32
 8007d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d12e      	bne.n	8007dd8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	f023 0310 	bic.w	r3, r3, #16
 8007d94:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8007da0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007da4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e6      	bne.n	8007d80 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	f003 0310 	and.w	r3, r3, #16
 8007dbc:	2b10      	cmp	r3, #16
 8007dbe:	d103      	bne.n	8007dc8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2210      	movs	r2, #16
 8007dc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7fe fef5 	bl	8006bc0 <HAL_UARTEx_RxEventCallback>
 8007dd6:	e002      	b.n	8007dde <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f002 fac3 	bl	800a364 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d006      	beq.n	8007df4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007de6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f47f aefe 	bne.w	8007bf0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dfa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007dfe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d047      	beq.n	8007e96 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d240      	bcs.n	8007e96 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3308      	adds	r3, #8
 8007e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e2a:	673b      	str	r3, [r7, #112]	; 0x70
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3308      	adds	r3, #8
 8007e32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e5      	bne.n	8007e14 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a15      	ldr	r2, [pc, #84]	; (8007ea0 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8007e4c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f043 0320 	orr.w	r3, r3, #32
 8007e62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e6c:	61bb      	str	r3, [r7, #24]
 8007e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6979      	ldr	r1, [r7, #20]
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	613b      	str	r3, [r7, #16]
   return(result);
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e6      	bne.n	8007e4e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e80:	e009      	b.n	8007e96 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	8b1b      	ldrh	r3, [r3, #24]
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0208 	orr.w	r2, r2, #8
 8007e92:	b292      	uxth	r2, r2
 8007e94:	831a      	strh	r2, [r3, #24]
}
 8007e96:	bf00      	nop
 8007e98:	3798      	adds	r7, #152	; 0x98
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	080078df 	.word	0x080078df

08007ea4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b0a8      	sub	sp, #160	; 0xa0
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007eb2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eda:	2b22      	cmp	r3, #34	; 0x22
 8007edc:	f040 8153 	bne.w	8008186 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ee6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007eea:	e0fa      	b.n	80080e2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ef2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007efe:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007f02:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007f06:	4013      	ands	r3, r2
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f14:	1c9a      	adds	r2, r3, #2
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	3b01      	subs	r3, #1
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d053      	beq.n	8007fea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d011      	beq.n	8007f72 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00b      	beq.n	8007f72 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f68:	f043 0201 	orr.w	r2, r3, #1
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d011      	beq.n	8007fa2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007f7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00b      	beq.n	8007fa2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f98:	f043 0204 	orr.w	r2, r3, #4
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fa6:	f003 0304 	and.w	r3, r3, #4
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d011      	beq.n	8007fd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00b      	beq.n	8007fd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2204      	movs	r2, #4
 8007fc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fc8:	f043 0202 	orr.w	r2, r3, #2
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d006      	beq.n	8007fea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7fe fde5 	bl	8006bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d175      	bne.n	80080e2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800800a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008018:	66fb      	str	r3, [r7, #108]	; 0x6c
 800801a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800801e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008020:	e841 2300 	strex	r3, r2, [r1]
 8008024:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e4      	bne.n	8007ff6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3308      	adds	r3, #8
 8008032:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800803c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800803e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008042:	f023 0301 	bic.w	r3, r3, #1
 8008046:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3308      	adds	r3, #8
 8008050:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008054:	65ba      	str	r2, [r7, #88]	; 0x58
 8008056:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800805a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800805c:	e841 2300 	strex	r3, r2, [r1]
 8008060:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1e1      	bne.n	800802c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2220      	movs	r2, #32
 800806c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d12e      	bne.n	80080dc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008094:	f023 0310 	bic.w	r3, r3, #16
 8008098:	67fb      	str	r3, [r7, #124]	; 0x7c
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080a2:	647b      	str	r3, [r7, #68]	; 0x44
 80080a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e6      	bne.n	8008084 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b10      	cmp	r3, #16
 80080c2:	d103      	bne.n	80080cc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2210      	movs	r2, #16
 80080ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7fe fd73 	bl	8006bc0 <HAL_UARTEx_RxEventCallback>
 80080da:	e002      	b.n	80080e2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f002 f941 	bl	800a364 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d006      	beq.n	80080f8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80080ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f47f aefa 	bne.w	8007eec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080fe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008102:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008106:	2b00      	cmp	r3, #0
 8008108:	d047      	beq.n	800819a <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008110:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008114:	429a      	cmp	r2, r3
 8008116:	d240      	bcs.n	800819a <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3308      	adds	r3, #8
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	623b      	str	r3, [r7, #32]
   return(result);
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800812e:	677b      	str	r3, [r7, #116]	; 0x74
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008138:	633a      	str	r2, [r7, #48]	; 0x30
 800813a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800813e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e5      	bne.n	8008118 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a15      	ldr	r2, [pc, #84]	; (80081a4 <UART_RxISR_16BIT_FIFOEN+0x300>)
 8008150:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f043 0320 	orr.w	r3, r3, #32
 8008166:	673b      	str	r3, [r7, #112]	; 0x70
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008170:	61fb      	str	r3, [r7, #28]
 8008172:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	69b9      	ldr	r1, [r7, #24]
 8008176:	69fa      	ldr	r2, [r7, #28]
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	617b      	str	r3, [r7, #20]
   return(result);
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e6      	bne.n	8008152 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008184:	e009      	b.n	800819a <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	8b1b      	ldrh	r3, [r3, #24]
 800818c:	b29a      	uxth	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f042 0208 	orr.w	r2, r2, #8
 8008196:	b292      	uxth	r2, r2
 8008198:	831a      	strh	r2, [r3, #24]
}
 800819a:	bf00      	nop
 800819c:	37a0      	adds	r7, #160	; 0xa0
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	08007a43 	.word	0x08007a43

080081a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d101      	bne.n	80081fa <HAL_UARTEx_DisableFifoMode+0x16>
 80081f6:	2302      	movs	r3, #2
 80081f8:	e027      	b.n	800824a <HAL_UARTEx_DisableFifoMode+0x66>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2224      	movs	r2, #36	; 0x24
 8008206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0201 	bic.w	r2, r2, #1
 8008220:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008228:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2220      	movs	r2, #32
 800823c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800826a:	2302      	movs	r3, #2
 800826c:	e02d      	b.n	80082ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2224      	movs	r2, #36	; 0x24
 800827a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0201 	bic.w	r2, r2, #1
 8008294:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f850 	bl	8008350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082e6:	2302      	movs	r3, #2
 80082e8:	e02d      	b.n	8008346 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2224      	movs	r2, #36	; 0x24
 80082f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 0201 	bic.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f812 	bl	8008350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2220      	movs	r2, #32
 8008338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800835c:	2b00      	cmp	r3, #0
 800835e:	d108      	bne.n	8008372 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008370:	e031      	b.n	80083d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008372:	2308      	movs	r3, #8
 8008374:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008376:	2308      	movs	r3, #8
 8008378:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	0e5b      	lsrs	r3, r3, #25
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 0307 	and.w	r3, r3, #7
 8008388:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	0f5b      	lsrs	r3, r3, #29
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	7b3a      	ldrb	r2, [r7, #12]
 800839e:	4911      	ldr	r1, [pc, #68]	; (80083e4 <UARTEx_SetNbDataToProcess+0x94>)
 80083a0:	5c8a      	ldrb	r2, [r1, r2]
 80083a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083a6:	7b3a      	ldrb	r2, [r7, #12]
 80083a8:	490f      	ldr	r1, [pc, #60]	; (80083e8 <UARTEx_SetNbDataToProcess+0x98>)
 80083aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	7b7a      	ldrb	r2, [r7, #13]
 80083bc:	4909      	ldr	r1, [pc, #36]	; (80083e4 <UARTEx_SetNbDataToProcess+0x94>)
 80083be:	5c8a      	ldrb	r2, [r1, r2]
 80083c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083c4:	7b7a      	ldrb	r2, [r7, #13]
 80083c6:	4908      	ldr	r1, [pc, #32]	; (80083e8 <UARTEx_SetNbDataToProcess+0x98>)
 80083c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083d6:	bf00      	nop
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	08010f60 	.word	0x08010f60
 80083e8:	08010f68 	.word	0x08010f68

080083ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80083fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083fe:	2b84      	cmp	r3, #132	; 0x84
 8008400:	d005      	beq.n	800840e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008402:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4413      	add	r3, r2
 800840a:	3303      	adds	r3, #3
 800840c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800840e:	68fb      	ldr	r3, [r7, #12]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008420:	f000 fade 	bl	80089e0 <vTaskStartScheduler>
  
  return osOK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	bd80      	pop	{r7, pc}

0800842a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800842a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800842c:	b089      	sub	sp, #36	; 0x24
 800842e:	af04      	add	r7, sp, #16
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d020      	beq.n	800847e <osThreadCreate+0x54>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01c      	beq.n	800847e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685c      	ldr	r4, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681d      	ldr	r5, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691e      	ldr	r6, [r3, #16]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff ffc8 	bl	80083ec <makeFreeRtosPriority>
 800845c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008466:	9202      	str	r2, [sp, #8]
 8008468:	9301      	str	r3, [sp, #4]
 800846a:	9100      	str	r1, [sp, #0]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	4632      	mov	r2, r6
 8008470:	4629      	mov	r1, r5
 8008472:	4620      	mov	r0, r4
 8008474:	f000 f8ed 	bl	8008652 <xTaskCreateStatic>
 8008478:	4603      	mov	r3, r0
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	e01c      	b.n	80084b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685c      	ldr	r4, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800848a:	b29e      	uxth	r6, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff ffaa 	bl	80083ec <makeFreeRtosPriority>
 8008498:	4602      	mov	r2, r0
 800849a:	f107 030c 	add.w	r3, r7, #12
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	9200      	str	r2, [sp, #0]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	4632      	mov	r2, r6
 80084a6:	4629      	mov	r1, r5
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 f92f 	bl	800870c <xTaskCreate>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d001      	beq.n	80084b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80084b4:	2300      	movs	r3, #0
 80084b6:	e000      	b.n	80084ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80084b8:	68fb      	ldr	r3, [r7, #12]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <osDelay+0x16>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	e000      	b.n	80084da <osDelay+0x18>
 80084d8:	2301      	movs	r3, #1
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 fa4c 	bl	8008978 <vTaskDelay>
  
  return osOK;
 80084e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084ea:	b480      	push	{r7}
 80084ec:	b083      	sub	sp, #12
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f103 0208 	add.w	r2, r3, #8
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008502:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f103 0208 	add.w	r2, r3, #8
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f103 0208 	add.w	r2, r3, #8
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	601a      	str	r2, [r3, #0]
}
 8008580:	bf00      	nop
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085a2:	d103      	bne.n	80085ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	e00c      	b.n	80085c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	3308      	adds	r3, #8
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	e002      	b.n	80085ba <vListInsert+0x2e>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d2f6      	bcs.n	80085b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	601a      	str	r2, [r3, #0]
}
 80085f2:	bf00      	nop
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	6892      	ldr	r2, [r2, #8]
 8008614:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	6852      	ldr	r2, [r2, #4]
 800861e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d103      	bne.n	8008632 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689a      	ldr	r2, [r3, #8]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	1e5a      	subs	r2, r3, #1
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008652:	b580      	push	{r7, lr}
 8008654:	b08e      	sub	sp, #56	; 0x38
 8008656:	af04      	add	r7, sp, #16
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
 800865e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008678:	bf00      	nop
 800867a:	e7fe      	b.n	800867a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10a      	bne.n	8008698 <xTaskCreateStatic+0x46>
	__asm volatile
 8008682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	61fb      	str	r3, [r7, #28]
}
 8008694:	bf00      	nop
 8008696:	e7fe      	b.n	8008696 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008698:	2354      	movs	r3, #84	; 0x54
 800869a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b54      	cmp	r3, #84	; 0x54
 80086a0:	d00a      	beq.n	80086b8 <xTaskCreateStatic+0x66>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	61bb      	str	r3, [r7, #24]
}
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d01e      	beq.n	80086fe <xTaskCreateStatic+0xac>
 80086c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d01b      	beq.n	80086fe <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086d8:	2300      	movs	r3, #0
 80086da:	9303      	str	r3, [sp, #12]
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	9302      	str	r3, [sp, #8]
 80086e0:	f107 0314 	add.w	r3, r7, #20
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 f850 	bl	8008796 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086f8:	f000 f8d4 	bl	80088a4 <prvAddNewTaskToReadyList>
 80086fc:	e001      	b.n	8008702 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008702:	697b      	ldr	r3, [r7, #20]
	}
 8008704:	4618      	mov	r0, r3
 8008706:	3728      	adds	r7, #40	; 0x28
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08c      	sub	sp, #48	; 0x30
 8008710:	af04      	add	r7, sp, #16
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	4613      	mov	r3, r2
 800871a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800871c:	88fb      	ldrh	r3, [r7, #6]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fec9 	bl	80094b8 <pvPortMalloc>
 8008726:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00e      	beq.n	800874c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800872e:	2054      	movs	r0, #84	; 0x54
 8008730:	f000 fec2 	bl	80094b8 <pvPortMalloc>
 8008734:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	631a      	str	r2, [r3, #48]	; 0x30
 8008742:	e005      	b.n	8008750 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008744:	6978      	ldr	r0, [r7, #20]
 8008746:	f000 ff83 	bl	8009650 <vPortFree>
 800874a:	e001      	b.n	8008750 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800874c:	2300      	movs	r3, #0
 800874e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d017      	beq.n	8008786 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800875e:	88fa      	ldrh	r2, [r7, #6]
 8008760:	2300      	movs	r3, #0
 8008762:	9303      	str	r3, [sp, #12]
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	9302      	str	r3, [sp, #8]
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	9301      	str	r3, [sp, #4]
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f80e 	bl	8008796 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800877a:	69f8      	ldr	r0, [r7, #28]
 800877c:	f000 f892 	bl	80088a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008780:	2301      	movs	r3, #1
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	e002      	b.n	800878c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800878a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800878c:	69bb      	ldr	r3, [r7, #24]
	}
 800878e:	4618      	mov	r0, r3
 8008790:	3720      	adds	r7, #32
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b088      	sub	sp, #32
 800879a:	af00      	add	r7, sp, #0
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	607a      	str	r2, [r7, #4]
 80087a2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087ae:	3b01      	subs	r3, #1
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	f023 0307 	bic.w	r3, r3, #7
 80087bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00a      	beq.n	80087de <prvInitialiseNewTask+0x48>
	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	617b      	str	r3, [r7, #20]
}
 80087da:	bf00      	nop
 80087dc:	e7fe      	b.n	80087dc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d01f      	beq.n	8008824 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087e4:	2300      	movs	r3, #0
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	e012      	b.n	8008810 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	4413      	add	r3, r2
 80087f0:	7819      	ldrb	r1, [r3, #0]
 80087f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	4413      	add	r3, r2
 80087f8:	3334      	adds	r3, #52	; 0x34
 80087fa:	460a      	mov	r2, r1
 80087fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	4413      	add	r3, r2
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d006      	beq.n	8008818 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	3301      	adds	r3, #1
 800880e:	61fb      	str	r3, [r7, #28]
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	2b0f      	cmp	r3, #15
 8008814:	d9e9      	bls.n	80087ea <prvInitialiseNewTask+0x54>
 8008816:	e000      	b.n	800881a <prvInitialiseNewTask+0x84>
			{
				break;
 8008818:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008822:	e003      	b.n	800882c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800882c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882e:	2b06      	cmp	r3, #6
 8008830:	d901      	bls.n	8008836 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008832:	2306      	movs	r3, #6
 8008834:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800883a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008840:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	2200      	movs	r2, #0
 8008846:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884a:	3304      	adds	r3, #4
 800884c:	4618      	mov	r0, r3
 800884e:	f7ff fe6c 	bl	800852a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	3318      	adds	r3, #24
 8008856:	4618      	mov	r0, r3
 8008858:	f7ff fe67 	bl	800852a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008860:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	f1c3 0207 	rsb	r2, r3, #7
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008870:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	2200      	movs	r2, #0
 8008876:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	68f9      	ldr	r1, [r7, #12]
 8008884:	69b8      	ldr	r0, [r7, #24]
 8008886:	f000 fc05 	bl	8009094 <pxPortInitialiseStack>
 800888a:	4602      	mov	r2, r0
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008892:	2b00      	cmp	r3, #0
 8008894:	d002      	beq.n	800889c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800889a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800889c:	bf00      	nop
 800889e:	3720      	adds	r7, #32
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088ac:	f000 fd22 	bl	80092f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088b0:	4b2a      	ldr	r3, [pc, #168]	; (800895c <prvAddNewTaskToReadyList+0xb8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3301      	adds	r3, #1
 80088b6:	4a29      	ldr	r2, [pc, #164]	; (800895c <prvAddNewTaskToReadyList+0xb8>)
 80088b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088ba:	4b29      	ldr	r3, [pc, #164]	; (8008960 <prvAddNewTaskToReadyList+0xbc>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d109      	bne.n	80088d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088c2:	4a27      	ldr	r2, [pc, #156]	; (8008960 <prvAddNewTaskToReadyList+0xbc>)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088c8:	4b24      	ldr	r3, [pc, #144]	; (800895c <prvAddNewTaskToReadyList+0xb8>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d110      	bne.n	80088f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088d0:	f000 fabc 	bl	8008e4c <prvInitialiseTaskLists>
 80088d4:	e00d      	b.n	80088f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088d6:	4b23      	ldr	r3, [pc, #140]	; (8008964 <prvAddNewTaskToReadyList+0xc0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088de:	4b20      	ldr	r3, [pc, #128]	; (8008960 <prvAddNewTaskToReadyList+0xbc>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d802      	bhi.n	80088f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088ec:	4a1c      	ldr	r2, [pc, #112]	; (8008960 <prvAddNewTaskToReadyList+0xbc>)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088f2:	4b1d      	ldr	r3, [pc, #116]	; (8008968 <prvAddNewTaskToReadyList+0xc4>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3301      	adds	r3, #1
 80088f8:	4a1b      	ldr	r2, [pc, #108]	; (8008968 <prvAddNewTaskToReadyList+0xc4>)
 80088fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008900:	2201      	movs	r2, #1
 8008902:	409a      	lsls	r2, r3
 8008904:	4b19      	ldr	r3, [pc, #100]	; (800896c <prvAddNewTaskToReadyList+0xc8>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4313      	orrs	r3, r2
 800890a:	4a18      	ldr	r2, [pc, #96]	; (800896c <prvAddNewTaskToReadyList+0xc8>)
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008912:	4613      	mov	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4a15      	ldr	r2, [pc, #84]	; (8008970 <prvAddNewTaskToReadyList+0xcc>)
 800891c:	441a      	add	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3304      	adds	r3, #4
 8008922:	4619      	mov	r1, r3
 8008924:	4610      	mov	r0, r2
 8008926:	f7ff fe0d 	bl	8008544 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800892a:	f000 fd13 	bl	8009354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800892e:	4b0d      	ldr	r3, [pc, #52]	; (8008964 <prvAddNewTaskToReadyList+0xc0>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00e      	beq.n	8008954 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008936:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <prvAddNewTaskToReadyList+0xbc>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	429a      	cmp	r2, r3
 8008942:	d207      	bcs.n	8008954 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008944:	4b0b      	ldr	r3, [pc, #44]	; (8008974 <prvAddNewTaskToReadyList+0xd0>)
 8008946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	20000510 	.word	0x20000510
 8008960:	20000410 	.word	0x20000410
 8008964:	2000051c 	.word	0x2000051c
 8008968:	2000052c 	.word	0x2000052c
 800896c:	20000518 	.word	0x20000518
 8008970:	20000414 	.word	0x20000414
 8008974:	e000ed04 	.word	0xe000ed04

08008978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d017      	beq.n	80089ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800898a:	4b13      	ldr	r3, [pc, #76]	; (80089d8 <vTaskDelay+0x60>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <vTaskDelay+0x30>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	60bb      	str	r3, [r7, #8]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089a8:	f000 f87a 	bl	8008aa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089ac:	2100      	movs	r1, #0
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fb0a 	bl	8008fc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089b4:	f000 f882 	bl	8008abc <xTaskResumeAll>
 80089b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d107      	bne.n	80089d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80089c0:	4b06      	ldr	r3, [pc, #24]	; (80089dc <vTaskDelay+0x64>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089d0:	bf00      	nop
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000538 	.word	0x20000538
 80089dc:	e000ed04 	.word	0xe000ed04

080089e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08a      	sub	sp, #40	; 0x28
 80089e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089ee:	463a      	mov	r2, r7
 80089f0:	1d39      	adds	r1, r7, #4
 80089f2:	f107 0308 	add.w	r3, r7, #8
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 f81a 	bl	8009a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	9202      	str	r2, [sp, #8]
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	2300      	movs	r3, #0
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	460a      	mov	r2, r1
 8008a0e:	491e      	ldr	r1, [pc, #120]	; (8008a88 <vTaskStartScheduler+0xa8>)
 8008a10:	481e      	ldr	r0, [pc, #120]	; (8008a8c <vTaskStartScheduler+0xac>)
 8008a12:	f7ff fe1e 	bl	8008652 <xTaskCreateStatic>
 8008a16:	4603      	mov	r3, r0
 8008a18:	4a1d      	ldr	r2, [pc, #116]	; (8008a90 <vTaskStartScheduler+0xb0>)
 8008a1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a1c:	4b1c      	ldr	r3, [pc, #112]	; (8008a90 <vTaskStartScheduler+0xb0>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a24:	2301      	movs	r3, #1
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	e001      	b.n	8008a2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d116      	bne.n	8008a62 <vTaskStartScheduler+0x82>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	613b      	str	r3, [r7, #16]
}
 8008a46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a48:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <vTaskStartScheduler+0xb4>)
 8008a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a50:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <vTaskStartScheduler+0xb8>)
 8008a52:	2201      	movs	r2, #1
 8008a54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a56:	4b11      	ldr	r3, [pc, #68]	; (8008a9c <vTaskStartScheduler+0xbc>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a5c:	f000 fba8 	bl	80091b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a60:	e00e      	b.n	8008a80 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a68:	d10a      	bne.n	8008a80 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	60fb      	str	r3, [r7, #12]
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <vTaskStartScheduler+0x9e>
}
 8008a80:	bf00      	nop
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	08010dc0 	.word	0x08010dc0
 8008a8c:	08008e1d 	.word	0x08008e1d
 8008a90:	20000534 	.word	0x20000534
 8008a94:	20000530 	.word	0x20000530
 8008a98:	2000051c 	.word	0x2000051c
 8008a9c:	20000514 	.word	0x20000514

08008aa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008aa4:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <vTaskSuspendAll+0x18>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	4a03      	ldr	r2, [pc, #12]	; (8008ab8 <vTaskSuspendAll+0x18>)
 8008aac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008aae:	bf00      	nop
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	20000538 	.word	0x20000538

08008abc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008aca:	4b41      	ldr	r3, [pc, #260]	; (8008bd0 <xTaskResumeAll+0x114>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10a      	bne.n	8008ae8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	603b      	str	r3, [r7, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	e7fe      	b.n	8008ae6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ae8:	f000 fc04 	bl	80092f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008aec:	4b38      	ldr	r3, [pc, #224]	; (8008bd0 <xTaskResumeAll+0x114>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	4a37      	ldr	r2, [pc, #220]	; (8008bd0 <xTaskResumeAll+0x114>)
 8008af4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008af6:	4b36      	ldr	r3, [pc, #216]	; (8008bd0 <xTaskResumeAll+0x114>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d161      	bne.n	8008bc2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008afe:	4b35      	ldr	r3, [pc, #212]	; (8008bd4 <xTaskResumeAll+0x118>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d05d      	beq.n	8008bc2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b06:	e02e      	b.n	8008b66 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b08:	4b33      	ldr	r3, [pc, #204]	; (8008bd8 <xTaskResumeAll+0x11c>)
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3318      	adds	r3, #24
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff fd72 	bl	80085fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff fd6d 	bl	80085fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	2201      	movs	r2, #1
 8008b2a:	409a      	lsls	r2, r3
 8008b2c:	4b2b      	ldr	r3, [pc, #172]	; (8008bdc <xTaskResumeAll+0x120>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	4a2a      	ldr	r2, [pc, #168]	; (8008bdc <xTaskResumeAll+0x120>)
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4a27      	ldr	r2, [pc, #156]	; (8008be0 <xTaskResumeAll+0x124>)
 8008b44:	441a      	add	r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	f7ff fcf9 	bl	8008544 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b56:	4b23      	ldr	r3, [pc, #140]	; (8008be4 <xTaskResumeAll+0x128>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d302      	bcc.n	8008b66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008b60:	4b21      	ldr	r3, [pc, #132]	; (8008be8 <xTaskResumeAll+0x12c>)
 8008b62:	2201      	movs	r2, #1
 8008b64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b66:	4b1c      	ldr	r3, [pc, #112]	; (8008bd8 <xTaskResumeAll+0x11c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1cc      	bne.n	8008b08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b74:	f000 fa08 	bl	8008f88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b78:	4b1c      	ldr	r3, [pc, #112]	; (8008bec <xTaskResumeAll+0x130>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d010      	beq.n	8008ba6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b84:	f000 f836 	bl	8008bf4 <xTaskIncrementTick>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008b8e:	4b16      	ldr	r3, [pc, #88]	; (8008be8 <xTaskResumeAll+0x12c>)
 8008b90:	2201      	movs	r2, #1
 8008b92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1f1      	bne.n	8008b84 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008ba0:	4b12      	ldr	r3, [pc, #72]	; (8008bec <xTaskResumeAll+0x130>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ba6:	4b10      	ldr	r3, [pc, #64]	; (8008be8 <xTaskResumeAll+0x12c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d009      	beq.n	8008bc2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bb2:	4b0f      	ldr	r3, [pc, #60]	; (8008bf0 <xTaskResumeAll+0x134>)
 8008bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bc2:	f000 fbc7 	bl	8009354 <vPortExitCritical>

	return xAlreadyYielded;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20000538 	.word	0x20000538
 8008bd4:	20000510 	.word	0x20000510
 8008bd8:	200004d0 	.word	0x200004d0
 8008bdc:	20000518 	.word	0x20000518
 8008be0:	20000414 	.word	0x20000414
 8008be4:	20000410 	.word	0x20000410
 8008be8:	20000524 	.word	0x20000524
 8008bec:	20000520 	.word	0x20000520
 8008bf0:	e000ed04 	.word	0xe000ed04

08008bf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bfe:	4b4e      	ldr	r3, [pc, #312]	; (8008d38 <xTaskIncrementTick+0x144>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f040 808e 	bne.w	8008d24 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c08:	4b4c      	ldr	r3, [pc, #304]	; (8008d3c <xTaskIncrementTick+0x148>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c10:	4a4a      	ldr	r2, [pc, #296]	; (8008d3c <xTaskIncrementTick+0x148>)
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d120      	bne.n	8008c5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c1c:	4b48      	ldr	r3, [pc, #288]	; (8008d40 <xTaskIncrementTick+0x14c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <xTaskIncrementTick+0x48>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	603b      	str	r3, [r7, #0]
}
 8008c38:	bf00      	nop
 8008c3a:	e7fe      	b.n	8008c3a <xTaskIncrementTick+0x46>
 8008c3c:	4b40      	ldr	r3, [pc, #256]	; (8008d40 <xTaskIncrementTick+0x14c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60fb      	str	r3, [r7, #12]
 8008c42:	4b40      	ldr	r3, [pc, #256]	; (8008d44 <xTaskIncrementTick+0x150>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a3e      	ldr	r2, [pc, #248]	; (8008d40 <xTaskIncrementTick+0x14c>)
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	4a3e      	ldr	r2, [pc, #248]	; (8008d44 <xTaskIncrementTick+0x150>)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	4b3d      	ldr	r3, [pc, #244]	; (8008d48 <xTaskIncrementTick+0x154>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3301      	adds	r3, #1
 8008c56:	4a3c      	ldr	r2, [pc, #240]	; (8008d48 <xTaskIncrementTick+0x154>)
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	f000 f995 	bl	8008f88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c5e:	4b3b      	ldr	r3, [pc, #236]	; (8008d4c <xTaskIncrementTick+0x158>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d348      	bcc.n	8008cfa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c68:	4b35      	ldr	r3, [pc, #212]	; (8008d40 <xTaskIncrementTick+0x14c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d104      	bne.n	8008c7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c72:	4b36      	ldr	r3, [pc, #216]	; (8008d4c <xTaskIncrementTick+0x158>)
 8008c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c78:	601a      	str	r2, [r3, #0]
					break;
 8008c7a:	e03e      	b.n	8008cfa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c7c:	4b30      	ldr	r3, [pc, #192]	; (8008d40 <xTaskIncrementTick+0x14c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d203      	bcs.n	8008c9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c94:	4a2d      	ldr	r2, [pc, #180]	; (8008d4c <xTaskIncrementTick+0x158>)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c9a:	e02e      	b.n	8008cfa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff fcac 	bl	80085fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d004      	beq.n	8008cb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	3318      	adds	r3, #24
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff fca3 	bl	80085fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	409a      	lsls	r2, r3
 8008cc0:	4b23      	ldr	r3, [pc, #140]	; (8008d50 <xTaskIncrementTick+0x15c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	4a22      	ldr	r2, [pc, #136]	; (8008d50 <xTaskIncrementTick+0x15c>)
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4a1f      	ldr	r2, [pc, #124]	; (8008d54 <xTaskIncrementTick+0x160>)
 8008cd8:	441a      	add	r2, r3
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	f7ff fc2f 	bl	8008544 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cea:	4b1b      	ldr	r3, [pc, #108]	; (8008d58 <xTaskIncrementTick+0x164>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d3b9      	bcc.n	8008c68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cf8:	e7b6      	b.n	8008c68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008cfa:	4b17      	ldr	r3, [pc, #92]	; (8008d58 <xTaskIncrementTick+0x164>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d00:	4914      	ldr	r1, [pc, #80]	; (8008d54 <xTaskIncrementTick+0x160>)
 8008d02:	4613      	mov	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	440b      	add	r3, r1
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d901      	bls.n	8008d16 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008d12:	2301      	movs	r3, #1
 8008d14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d16:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <xTaskIncrementTick+0x168>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d007      	beq.n	8008d2e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	617b      	str	r3, [r7, #20]
 8008d22:	e004      	b.n	8008d2e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d24:	4b0e      	ldr	r3, [pc, #56]	; (8008d60 <xTaskIncrementTick+0x16c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	4a0d      	ldr	r2, [pc, #52]	; (8008d60 <xTaskIncrementTick+0x16c>)
 8008d2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d2e:	697b      	ldr	r3, [r7, #20]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20000538 	.word	0x20000538
 8008d3c:	20000514 	.word	0x20000514
 8008d40:	200004c8 	.word	0x200004c8
 8008d44:	200004cc 	.word	0x200004cc
 8008d48:	20000528 	.word	0x20000528
 8008d4c:	20000530 	.word	0x20000530
 8008d50:	20000518 	.word	0x20000518
 8008d54:	20000414 	.word	0x20000414
 8008d58:	20000410 	.word	0x20000410
 8008d5c:	20000524 	.word	0x20000524
 8008d60:	20000520 	.word	0x20000520

08008d64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b087      	sub	sp, #28
 8008d68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d6a:	4b27      	ldr	r3, [pc, #156]	; (8008e08 <vTaskSwitchContext+0xa4>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d72:	4b26      	ldr	r3, [pc, #152]	; (8008e0c <vTaskSwitchContext+0xa8>)
 8008d74:	2201      	movs	r2, #1
 8008d76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d78:	e03f      	b.n	8008dfa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008d7a:	4b24      	ldr	r3, [pc, #144]	; (8008e0c <vTaskSwitchContext+0xa8>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d80:	4b23      	ldr	r3, [pc, #140]	; (8008e10 <vTaskSwitchContext+0xac>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	fab3 f383 	clz	r3, r3
 8008d8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008d8e:	7afb      	ldrb	r3, [r7, #11]
 8008d90:	f1c3 031f 	rsb	r3, r3, #31
 8008d94:	617b      	str	r3, [r7, #20]
 8008d96:	491f      	ldr	r1, [pc, #124]	; (8008e14 <vTaskSwitchContext+0xb0>)
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	440b      	add	r3, r1
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10a      	bne.n	8008dc0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	607b      	str	r3, [r7, #4]
}
 8008dbc:	bf00      	nop
 8008dbe:	e7fe      	b.n	8008dbe <vTaskSwitchContext+0x5a>
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4a12      	ldr	r2, [pc, #72]	; (8008e14 <vTaskSwitchContext+0xb0>)
 8008dcc:	4413      	add	r3, r2
 8008dce:	613b      	str	r3, [r7, #16]
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	605a      	str	r2, [r3, #4]
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	3308      	adds	r3, #8
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d104      	bne.n	8008df0 <vTaskSwitchContext+0x8c>
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	605a      	str	r2, [r3, #4]
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	4a08      	ldr	r2, [pc, #32]	; (8008e18 <vTaskSwitchContext+0xb4>)
 8008df8:	6013      	str	r3, [r2, #0]
}
 8008dfa:	bf00      	nop
 8008dfc:	371c      	adds	r7, #28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20000538 	.word	0x20000538
 8008e0c:	20000524 	.word	0x20000524
 8008e10:	20000518 	.word	0x20000518
 8008e14:	20000414 	.word	0x20000414
 8008e18:	20000410 	.word	0x20000410

08008e1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e24:	f000 f852 	bl	8008ecc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e28:	4b06      	ldr	r3, [pc, #24]	; (8008e44 <prvIdleTask+0x28>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d9f9      	bls.n	8008e24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e30:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <prvIdleTask+0x2c>)
 8008e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e40:	e7f0      	b.n	8008e24 <prvIdleTask+0x8>
 8008e42:	bf00      	nop
 8008e44:	20000414 	.word	0x20000414
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e52:	2300      	movs	r3, #0
 8008e54:	607b      	str	r3, [r7, #4]
 8008e56:	e00c      	b.n	8008e72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4a12      	ldr	r2, [pc, #72]	; (8008eac <prvInitialiseTaskLists+0x60>)
 8008e64:	4413      	add	r3, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff fb3f 	bl	80084ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	607b      	str	r3, [r7, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b06      	cmp	r3, #6
 8008e76:	d9ef      	bls.n	8008e58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e78:	480d      	ldr	r0, [pc, #52]	; (8008eb0 <prvInitialiseTaskLists+0x64>)
 8008e7a:	f7ff fb36 	bl	80084ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e7e:	480d      	ldr	r0, [pc, #52]	; (8008eb4 <prvInitialiseTaskLists+0x68>)
 8008e80:	f7ff fb33 	bl	80084ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e84:	480c      	ldr	r0, [pc, #48]	; (8008eb8 <prvInitialiseTaskLists+0x6c>)
 8008e86:	f7ff fb30 	bl	80084ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e8a:	480c      	ldr	r0, [pc, #48]	; (8008ebc <prvInitialiseTaskLists+0x70>)
 8008e8c:	f7ff fb2d 	bl	80084ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e90:	480b      	ldr	r0, [pc, #44]	; (8008ec0 <prvInitialiseTaskLists+0x74>)
 8008e92:	f7ff fb2a 	bl	80084ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e96:	4b0b      	ldr	r3, [pc, #44]	; (8008ec4 <prvInitialiseTaskLists+0x78>)
 8008e98:	4a05      	ldr	r2, [pc, #20]	; (8008eb0 <prvInitialiseTaskLists+0x64>)
 8008e9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <prvInitialiseTaskLists+0x7c>)
 8008e9e:	4a05      	ldr	r2, [pc, #20]	; (8008eb4 <prvInitialiseTaskLists+0x68>)
 8008ea0:	601a      	str	r2, [r3, #0]
}
 8008ea2:	bf00      	nop
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20000414 	.word	0x20000414
 8008eb0:	200004a0 	.word	0x200004a0
 8008eb4:	200004b4 	.word	0x200004b4
 8008eb8:	200004d0 	.word	0x200004d0
 8008ebc:	200004e4 	.word	0x200004e4
 8008ec0:	200004fc 	.word	0x200004fc
 8008ec4:	200004c8 	.word	0x200004c8
 8008ec8:	200004cc 	.word	0x200004cc

08008ecc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ed2:	e019      	b.n	8008f08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ed4:	f000 fa0e 	bl	80092f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ed8:	4b10      	ldr	r3, [pc, #64]	; (8008f1c <prvCheckTasksWaitingTermination+0x50>)
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff fb8a 	bl	80085fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008eea:	4b0d      	ldr	r3, [pc, #52]	; (8008f20 <prvCheckTasksWaitingTermination+0x54>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	4a0b      	ldr	r2, [pc, #44]	; (8008f20 <prvCheckTasksWaitingTermination+0x54>)
 8008ef2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ef4:	4b0b      	ldr	r3, [pc, #44]	; (8008f24 <prvCheckTasksWaitingTermination+0x58>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	4a0a      	ldr	r2, [pc, #40]	; (8008f24 <prvCheckTasksWaitingTermination+0x58>)
 8008efc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008efe:	f000 fa29 	bl	8009354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f810 	bl	8008f28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f08:	4b06      	ldr	r3, [pc, #24]	; (8008f24 <prvCheckTasksWaitingTermination+0x58>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e1      	bne.n	8008ed4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f10:	bf00      	nop
 8008f12:	bf00      	nop
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	200004e4 	.word	0x200004e4
 8008f20:	20000510 	.word	0x20000510
 8008f24:	200004f8 	.word	0x200004f8

08008f28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d108      	bne.n	8008f4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fb86 	bl	8009650 <vPortFree>
				vPortFree( pxTCB );
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fb83 	bl	8009650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f4a:	e018      	b.n	8008f7e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d103      	bne.n	8008f5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fb7a 	bl	8009650 <vPortFree>
	}
 8008f5c:	e00f      	b.n	8008f7e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d00a      	beq.n	8008f7e <prvDeleteTCB+0x56>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	60fb      	str	r3, [r7, #12]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <prvDeleteTCB+0x54>
	}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
	...

08008f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <prvResetNextTaskUnblockTime+0x38>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f98:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fa0:	e008      	b.n	8008fb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa2:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <prvResetNextTaskUnblockTime+0x38>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	4a04      	ldr	r2, [pc, #16]	; (8008fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008fb2:	6013      	str	r3, [r2, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	200004c8 	.word	0x200004c8
 8008fc4:	20000530 	.word	0x20000530

08008fc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fd2:	4b29      	ldr	r3, [pc, #164]	; (8009078 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fd8:	4b28      	ldr	r3, [pc, #160]	; (800907c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7ff fb0d 	bl	80085fe <uxListRemove>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10b      	bne.n	8009002 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008fea:	4b24      	ldr	r3, [pc, #144]	; (800907c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff6:	43da      	mvns	r2, r3
 8008ff8:	4b21      	ldr	r3, [pc, #132]	; (8009080 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	4a20      	ldr	r2, [pc, #128]	; (8009080 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009000:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009008:	d10a      	bne.n	8009020 <prvAddCurrentTaskToDelayedList+0x58>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d007      	beq.n	8009020 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009010:	4b1a      	ldr	r3, [pc, #104]	; (800907c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3304      	adds	r3, #4
 8009016:	4619      	mov	r1, r3
 8009018:	481a      	ldr	r0, [pc, #104]	; (8009084 <prvAddCurrentTaskToDelayedList+0xbc>)
 800901a:	f7ff fa93 	bl	8008544 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800901e:	e026      	b.n	800906e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4413      	add	r3, r2
 8009026:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009028:	4b14      	ldr	r3, [pc, #80]	; (800907c <prvAddCurrentTaskToDelayedList+0xb4>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	429a      	cmp	r2, r3
 8009036:	d209      	bcs.n	800904c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009038:	4b13      	ldr	r3, [pc, #76]	; (8009088 <prvAddCurrentTaskToDelayedList+0xc0>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	4b0f      	ldr	r3, [pc, #60]	; (800907c <prvAddCurrentTaskToDelayedList+0xb4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3304      	adds	r3, #4
 8009042:	4619      	mov	r1, r3
 8009044:	4610      	mov	r0, r2
 8009046:	f7ff faa1 	bl	800858c <vListInsert>
}
 800904a:	e010      	b.n	800906e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800904c:	4b0f      	ldr	r3, [pc, #60]	; (800908c <prvAddCurrentTaskToDelayedList+0xc4>)
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	4b0a      	ldr	r3, [pc, #40]	; (800907c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3304      	adds	r3, #4
 8009056:	4619      	mov	r1, r3
 8009058:	4610      	mov	r0, r2
 800905a:	f7ff fa97 	bl	800858c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800905e:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	429a      	cmp	r2, r3
 8009066:	d202      	bcs.n	800906e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009068:	4a09      	ldr	r2, [pc, #36]	; (8009090 <prvAddCurrentTaskToDelayedList+0xc8>)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6013      	str	r3, [r2, #0]
}
 800906e:	bf00      	nop
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20000514 	.word	0x20000514
 800907c:	20000410 	.word	0x20000410
 8009080:	20000518 	.word	0x20000518
 8009084:	200004fc 	.word	0x200004fc
 8009088:	200004cc 	.word	0x200004cc
 800908c:	200004c8 	.word	0x200004c8
 8009090:	20000530 	.word	0x20000530

08009094 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3b04      	subs	r3, #4
 80090a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3b04      	subs	r3, #4
 80090b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f023 0201 	bic.w	r2, r3, #1
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3b04      	subs	r3, #4
 80090c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090c4:	4a0c      	ldr	r2, [pc, #48]	; (80090f8 <pxPortInitialiseStack+0x64>)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3b14      	subs	r3, #20
 80090ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3b04      	subs	r3, #4
 80090da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f06f 0202 	mvn.w	r2, #2
 80090e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3b20      	subs	r3, #32
 80090e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090ea:	68fb      	ldr	r3, [r7, #12]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	080090fd 	.word	0x080090fd

080090fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009102:	2300      	movs	r3, #0
 8009104:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009106:	4b12      	ldr	r3, [pc, #72]	; (8009150 <prvTaskExitError+0x54>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800910e:	d00a      	beq.n	8009126 <prvTaskExitError+0x2a>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	60fb      	str	r3, [r7, #12]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <prvTaskExitError+0x28>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	60bb      	str	r3, [r7, #8]
}
 8009138:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800913a:	bf00      	nop
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d0fc      	beq.n	800913c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009142:	bf00      	nop
 8009144:	bf00      	nop
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	20000008 	.word	0x20000008
	...

08009160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009160:	4b07      	ldr	r3, [pc, #28]	; (8009180 <pxCurrentTCBConst2>)
 8009162:	6819      	ldr	r1, [r3, #0]
 8009164:	6808      	ldr	r0, [r1, #0]
 8009166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916a:	f380 8809 	msr	PSP, r0
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f04f 0000 	mov.w	r0, #0
 8009176:	f380 8811 	msr	BASEPRI, r0
 800917a:	4770      	bx	lr
 800917c:	f3af 8000 	nop.w

08009180 <pxCurrentTCBConst2>:
 8009180:	20000410 	.word	0x20000410
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop

08009188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009188:	4808      	ldr	r0, [pc, #32]	; (80091ac <prvPortStartFirstTask+0x24>)
 800918a:	6800      	ldr	r0, [r0, #0]
 800918c:	6800      	ldr	r0, [r0, #0]
 800918e:	f380 8808 	msr	MSP, r0
 8009192:	f04f 0000 	mov.w	r0, #0
 8009196:	f380 8814 	msr	CONTROL, r0
 800919a:	b662      	cpsie	i
 800919c:	b661      	cpsie	f
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	df00      	svc	0
 80091a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091aa:	bf00      	nop
 80091ac:	e000ed08 	.word	0xe000ed08

080091b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80091b6:	4b46      	ldr	r3, [pc, #280]	; (80092d0 <xPortStartScheduler+0x120>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a46      	ldr	r2, [pc, #280]	; (80092d4 <xPortStartScheduler+0x124>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d10a      	bne.n	80091d6 <xPortStartScheduler+0x26>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	613b      	str	r3, [r7, #16]
}
 80091d2:	bf00      	nop
 80091d4:	e7fe      	b.n	80091d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091d6:	4b3e      	ldr	r3, [pc, #248]	; (80092d0 <xPortStartScheduler+0x120>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a3f      	ldr	r2, [pc, #252]	; (80092d8 <xPortStartScheduler+0x128>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d10a      	bne.n	80091f6 <xPortStartScheduler+0x46>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	60fb      	str	r3, [r7, #12]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091f6:	4b39      	ldr	r3, [pc, #228]	; (80092dc <xPortStartScheduler+0x12c>)
 80091f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	22ff      	movs	r2, #255	; 0xff
 8009206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	b2db      	uxtb	r3, r3
 8009214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009218:	b2da      	uxtb	r2, r3
 800921a:	4b31      	ldr	r3, [pc, #196]	; (80092e0 <xPortStartScheduler+0x130>)
 800921c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800921e:	4b31      	ldr	r3, [pc, #196]	; (80092e4 <xPortStartScheduler+0x134>)
 8009220:	2207      	movs	r2, #7
 8009222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009224:	e009      	b.n	800923a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009226:	4b2f      	ldr	r3, [pc, #188]	; (80092e4 <xPortStartScheduler+0x134>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3b01      	subs	r3, #1
 800922c:	4a2d      	ldr	r2, [pc, #180]	; (80092e4 <xPortStartScheduler+0x134>)
 800922e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009230:	78fb      	ldrb	r3, [r7, #3]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	b2db      	uxtb	r3, r3
 8009238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800923a:	78fb      	ldrb	r3, [r7, #3]
 800923c:	b2db      	uxtb	r3, r3
 800923e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009242:	2b80      	cmp	r3, #128	; 0x80
 8009244:	d0ef      	beq.n	8009226 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009246:	4b27      	ldr	r3, [pc, #156]	; (80092e4 <xPortStartScheduler+0x134>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f1c3 0307 	rsb	r3, r3, #7
 800924e:	2b04      	cmp	r3, #4
 8009250:	d00a      	beq.n	8009268 <xPortStartScheduler+0xb8>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	60bb      	str	r3, [r7, #8]
}
 8009264:	bf00      	nop
 8009266:	e7fe      	b.n	8009266 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009268:	4b1e      	ldr	r3, [pc, #120]	; (80092e4 <xPortStartScheduler+0x134>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	021b      	lsls	r3, r3, #8
 800926e:	4a1d      	ldr	r2, [pc, #116]	; (80092e4 <xPortStartScheduler+0x134>)
 8009270:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009272:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <xPortStartScheduler+0x134>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800927a:	4a1a      	ldr	r2, [pc, #104]	; (80092e4 <xPortStartScheduler+0x134>)
 800927c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	b2da      	uxtb	r2, r3
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009286:	4b18      	ldr	r3, [pc, #96]	; (80092e8 <xPortStartScheduler+0x138>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a17      	ldr	r2, [pc, #92]	; (80092e8 <xPortStartScheduler+0x138>)
 800928c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009292:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <xPortStartScheduler+0x138>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a14      	ldr	r2, [pc, #80]	; (80092e8 <xPortStartScheduler+0x138>)
 8009298:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800929c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800929e:	f000 f8dd 	bl	800945c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092a2:	4b12      	ldr	r3, [pc, #72]	; (80092ec <xPortStartScheduler+0x13c>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092a8:	f000 f8fc 	bl	80094a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092ac:	4b10      	ldr	r3, [pc, #64]	; (80092f0 <xPortStartScheduler+0x140>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a0f      	ldr	r2, [pc, #60]	; (80092f0 <xPortStartScheduler+0x140>)
 80092b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80092b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092b8:	f7ff ff66 	bl	8009188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092bc:	f7ff fd52 	bl	8008d64 <vTaskSwitchContext>
	prvTaskExitError();
 80092c0:	f7ff ff1c 	bl	80090fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	e000ed00 	.word	0xe000ed00
 80092d4:	410fc271 	.word	0x410fc271
 80092d8:	410fc270 	.word	0x410fc270
 80092dc:	e000e400 	.word	0xe000e400
 80092e0:	2000053c 	.word	0x2000053c
 80092e4:	20000540 	.word	0x20000540
 80092e8:	e000ed20 	.word	0xe000ed20
 80092ec:	20000008 	.word	0x20000008
 80092f0:	e000ef34 	.word	0xe000ef34

080092f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	607b      	str	r3, [r7, #4]
}
 800930c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800930e:	4b0f      	ldr	r3, [pc, #60]	; (800934c <vPortEnterCritical+0x58>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3301      	adds	r3, #1
 8009314:	4a0d      	ldr	r2, [pc, #52]	; (800934c <vPortEnterCritical+0x58>)
 8009316:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009318:	4b0c      	ldr	r3, [pc, #48]	; (800934c <vPortEnterCritical+0x58>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d10f      	bne.n	8009340 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009320:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <vPortEnterCritical+0x5c>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <vPortEnterCritical+0x4c>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	603b      	str	r3, [r7, #0]
}
 800933c:	bf00      	nop
 800933e:	e7fe      	b.n	800933e <vPortEnterCritical+0x4a>
	}
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	20000008 	.word	0x20000008
 8009350:	e000ed04 	.word	0xe000ed04

08009354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800935a:	4b12      	ldr	r3, [pc, #72]	; (80093a4 <vPortExitCritical+0x50>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10a      	bne.n	8009378 <vPortExitCritical+0x24>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	607b      	str	r3, [r7, #4]
}
 8009374:	bf00      	nop
 8009376:	e7fe      	b.n	8009376 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009378:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <vPortExitCritical+0x50>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3b01      	subs	r3, #1
 800937e:	4a09      	ldr	r2, [pc, #36]	; (80093a4 <vPortExitCritical+0x50>)
 8009380:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009382:	4b08      	ldr	r3, [pc, #32]	; (80093a4 <vPortExitCritical+0x50>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d105      	bne.n	8009396 <vPortExitCritical+0x42>
 800938a:	2300      	movs	r3, #0
 800938c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009394:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20000008 	.word	0x20000008
	...

080093b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093b0:	f3ef 8009 	mrs	r0, PSP
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	4b15      	ldr	r3, [pc, #84]	; (8009410 <pxCurrentTCBConst>)
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	f01e 0f10 	tst.w	lr, #16
 80093c0:	bf08      	it	eq
 80093c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ca:	6010      	str	r0, [r2, #0]
 80093cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80093d4:	f380 8811 	msr	BASEPRI, r0
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f7ff fcc0 	bl	8008d64 <vTaskSwitchContext>
 80093e4:	f04f 0000 	mov.w	r0, #0
 80093e8:	f380 8811 	msr	BASEPRI, r0
 80093ec:	bc09      	pop	{r0, r3}
 80093ee:	6819      	ldr	r1, [r3, #0]
 80093f0:	6808      	ldr	r0, [r1, #0]
 80093f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f6:	f01e 0f10 	tst.w	lr, #16
 80093fa:	bf08      	it	eq
 80093fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009400:	f380 8809 	msr	PSP, r0
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	f3af 8000 	nop.w

08009410 <pxCurrentTCBConst>:
 8009410:	20000410 	.word	0x20000410
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop

08009418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	607b      	str	r3, [r7, #4]
}
 8009430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009432:	f7ff fbdf 	bl	8008bf4 <xTaskIncrementTick>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800943c:	4b06      	ldr	r3, [pc, #24]	; (8009458 <SysTick_Handler+0x40>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	2300      	movs	r3, #0
 8009446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	f383 8811 	msr	BASEPRI, r3
}
 800944e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	e000ed04 	.word	0xe000ed04

0800945c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800945c:	b480      	push	{r7}
 800945e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009460:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <vPortSetupTimerInterrupt+0x34>)
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009466:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <vPortSetupTimerInterrupt+0x38>)
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800946c:	4b0a      	ldr	r3, [pc, #40]	; (8009498 <vPortSetupTimerInterrupt+0x3c>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a0a      	ldr	r2, [pc, #40]	; (800949c <vPortSetupTimerInterrupt+0x40>)
 8009472:	fba2 2303 	umull	r2, r3, r2, r3
 8009476:	099b      	lsrs	r3, r3, #6
 8009478:	4a09      	ldr	r2, [pc, #36]	; (80094a0 <vPortSetupTimerInterrupt+0x44>)
 800947a:	3b01      	subs	r3, #1
 800947c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800947e:	4b04      	ldr	r3, [pc, #16]	; (8009490 <vPortSetupTimerInterrupt+0x34>)
 8009480:	2207      	movs	r2, #7
 8009482:	601a      	str	r2, [r3, #0]
}
 8009484:	bf00      	nop
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	e000e010 	.word	0xe000e010
 8009494:	e000e018 	.word	0xe000e018
 8009498:	200000a8 	.word	0x200000a8
 800949c:	10624dd3 	.word	0x10624dd3
 80094a0:	e000e014 	.word	0xe000e014

080094a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80094b4 <vPortEnableVFP+0x10>
 80094a8:	6801      	ldr	r1, [r0, #0]
 80094aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80094ae:	6001      	str	r1, [r0, #0]
 80094b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80094b2:	bf00      	nop
 80094b4:	e000ed88 	.word	0xe000ed88

080094b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08a      	sub	sp, #40	; 0x28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094c0:	2300      	movs	r3, #0
 80094c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094c4:	f7ff faec 	bl	8008aa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094c8:	4b5b      	ldr	r3, [pc, #364]	; (8009638 <pvPortMalloc+0x180>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094d0:	f000 f920 	bl	8009714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094d4:	4b59      	ldr	r3, [pc, #356]	; (800963c <pvPortMalloc+0x184>)
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4013      	ands	r3, r2
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f040 8093 	bne.w	8009608 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d01d      	beq.n	8009524 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80094e8:	2208      	movs	r2, #8
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4413      	add	r3, r2
 80094ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f003 0307 	and.w	r3, r3, #7
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d014      	beq.n	8009524 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f023 0307 	bic.w	r3, r3, #7
 8009500:	3308      	adds	r3, #8
 8009502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f003 0307 	and.w	r3, r3, #7
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00a      	beq.n	8009524 <pvPortMalloc+0x6c>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	617b      	str	r3, [r7, #20]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d06e      	beq.n	8009608 <pvPortMalloc+0x150>
 800952a:	4b45      	ldr	r3, [pc, #276]	; (8009640 <pvPortMalloc+0x188>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	429a      	cmp	r2, r3
 8009532:	d869      	bhi.n	8009608 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009534:	4b43      	ldr	r3, [pc, #268]	; (8009644 <pvPortMalloc+0x18c>)
 8009536:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009538:	4b42      	ldr	r3, [pc, #264]	; (8009644 <pvPortMalloc+0x18c>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800953e:	e004      	b.n	800954a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	429a      	cmp	r2, r3
 8009552:	d903      	bls.n	800955c <pvPortMalloc+0xa4>
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1f1      	bne.n	8009540 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800955c:	4b36      	ldr	r3, [pc, #216]	; (8009638 <pvPortMalloc+0x180>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009562:	429a      	cmp	r2, r3
 8009564:	d050      	beq.n	8009608 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2208      	movs	r2, #8
 800956c:	4413      	add	r3, r2
 800956e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	1ad2      	subs	r2, r2, r3
 8009580:	2308      	movs	r3, #8
 8009582:	005b      	lsls	r3, r3, #1
 8009584:	429a      	cmp	r2, r3
 8009586:	d91f      	bls.n	80095c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4413      	add	r3, r2
 800958e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	f003 0307 	and.w	r3, r3, #7
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <pvPortMalloc+0xf8>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	613b      	str	r3, [r7, #16]
}
 80095ac:	bf00      	nop
 80095ae:	e7fe      	b.n	80095ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	1ad2      	subs	r2, r2, r3
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095c2:	69b8      	ldr	r0, [r7, #24]
 80095c4:	f000 f908 	bl	80097d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095c8:	4b1d      	ldr	r3, [pc, #116]	; (8009640 <pvPortMalloc+0x188>)
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	4a1b      	ldr	r2, [pc, #108]	; (8009640 <pvPortMalloc+0x188>)
 80095d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095d6:	4b1a      	ldr	r3, [pc, #104]	; (8009640 <pvPortMalloc+0x188>)
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	4b1b      	ldr	r3, [pc, #108]	; (8009648 <pvPortMalloc+0x190>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d203      	bcs.n	80095ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80095e2:	4b17      	ldr	r3, [pc, #92]	; (8009640 <pvPortMalloc+0x188>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a18      	ldr	r2, [pc, #96]	; (8009648 <pvPortMalloc+0x190>)
 80095e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	4b13      	ldr	r3, [pc, #76]	; (800963c <pvPortMalloc+0x184>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	2200      	movs	r2, #0
 80095fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80095fe:	4b13      	ldr	r3, [pc, #76]	; (800964c <pvPortMalloc+0x194>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3301      	adds	r3, #1
 8009604:	4a11      	ldr	r2, [pc, #68]	; (800964c <pvPortMalloc+0x194>)
 8009606:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009608:	f7ff fa58 	bl	8008abc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	f003 0307 	and.w	r3, r3, #7
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <pvPortMalloc+0x174>
	__asm volatile
 8009616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	60fb      	str	r3, [r7, #12]
}
 8009628:	bf00      	nop
 800962a:	e7fe      	b.n	800962a <pvPortMalloc+0x172>
	return pvReturn;
 800962c:	69fb      	ldr	r3, [r7, #28]
}
 800962e:	4618      	mov	r0, r3
 8009630:	3728      	adds	r7, #40	; 0x28
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	20001104 	.word	0x20001104
 800963c:	20001118 	.word	0x20001118
 8009640:	20001108 	.word	0x20001108
 8009644:	200010fc 	.word	0x200010fc
 8009648:	2000110c 	.word	0x2000110c
 800964c:	20001110 	.word	0x20001110

08009650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d04d      	beq.n	80096fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009662:	2308      	movs	r3, #8
 8009664:	425b      	negs	r3, r3
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	4413      	add	r3, r2
 800966a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	4b24      	ldr	r3, [pc, #144]	; (8009708 <vPortFree+0xb8>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4013      	ands	r3, r2
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10a      	bne.n	8009694 <vPortFree+0x44>
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	60fb      	str	r3, [r7, #12]
}
 8009690:	bf00      	nop
 8009692:	e7fe      	b.n	8009692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00a      	beq.n	80096b2 <vPortFree+0x62>
	__asm volatile
 800969c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a0:	f383 8811 	msr	BASEPRI, r3
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	60bb      	str	r3, [r7, #8]
}
 80096ae:	bf00      	nop
 80096b0:	e7fe      	b.n	80096b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	4b14      	ldr	r3, [pc, #80]	; (8009708 <vPortFree+0xb8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4013      	ands	r3, r2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01e      	beq.n	80096fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d11a      	bne.n	80096fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	4b0e      	ldr	r3, [pc, #56]	; (8009708 <vPortFree+0xb8>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	43db      	mvns	r3, r3
 80096d2:	401a      	ands	r2, r3
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096d8:	f7ff f9e2 	bl	8008aa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	685a      	ldr	r2, [r3, #4]
 80096e0:	4b0a      	ldr	r3, [pc, #40]	; (800970c <vPortFree+0xbc>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4413      	add	r3, r2
 80096e6:	4a09      	ldr	r2, [pc, #36]	; (800970c <vPortFree+0xbc>)
 80096e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80096ea:	6938      	ldr	r0, [r7, #16]
 80096ec:	f000 f874 	bl	80097d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80096f0:	4b07      	ldr	r3, [pc, #28]	; (8009710 <vPortFree+0xc0>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3301      	adds	r3, #1
 80096f6:	4a06      	ldr	r2, [pc, #24]	; (8009710 <vPortFree+0xc0>)
 80096f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80096fa:	f7ff f9df 	bl	8008abc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80096fe:	bf00      	nop
 8009700:	3718      	adds	r7, #24
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20001118 	.word	0x20001118
 800970c:	20001108 	.word	0x20001108
 8009710:	20001114 	.word	0x20001114

08009714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800971a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800971e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009720:	4b27      	ldr	r3, [pc, #156]	; (80097c0 <prvHeapInit+0xac>)
 8009722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00c      	beq.n	8009748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3307      	adds	r3, #7
 8009732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 0307 	bic.w	r3, r3, #7
 800973a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	4a1f      	ldr	r2, [pc, #124]	; (80097c0 <prvHeapInit+0xac>)
 8009744:	4413      	add	r3, r2
 8009746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800974c:	4a1d      	ldr	r2, [pc, #116]	; (80097c4 <prvHeapInit+0xb0>)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009752:	4b1c      	ldr	r3, [pc, #112]	; (80097c4 <prvHeapInit+0xb0>)
 8009754:	2200      	movs	r2, #0
 8009756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	4413      	add	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009760:	2208      	movs	r2, #8
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	1a9b      	subs	r3, r3, r2
 8009766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f023 0307 	bic.w	r3, r3, #7
 800976e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4a15      	ldr	r2, [pc, #84]	; (80097c8 <prvHeapInit+0xb4>)
 8009774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009776:	4b14      	ldr	r3, [pc, #80]	; (80097c8 <prvHeapInit+0xb4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2200      	movs	r2, #0
 800977c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800977e:	4b12      	ldr	r3, [pc, #72]	; (80097c8 <prvHeapInit+0xb4>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2200      	movs	r2, #0
 8009784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	1ad2      	subs	r2, r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009794:	4b0c      	ldr	r3, [pc, #48]	; (80097c8 <prvHeapInit+0xb4>)
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	4a0a      	ldr	r2, [pc, #40]	; (80097cc <prvHeapInit+0xb8>)
 80097a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	4a09      	ldr	r2, [pc, #36]	; (80097d0 <prvHeapInit+0xbc>)
 80097aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097ac:	4b09      	ldr	r3, [pc, #36]	; (80097d4 <prvHeapInit+0xc0>)
 80097ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097b2:	601a      	str	r2, [r3, #0]
}
 80097b4:	bf00      	nop
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr
 80097c0:	20000544 	.word	0x20000544
 80097c4:	200010fc 	.word	0x200010fc
 80097c8:	20001104 	.word	0x20001104
 80097cc:	2000110c 	.word	0x2000110c
 80097d0:	20001108 	.word	0x20001108
 80097d4:	20001118 	.word	0x20001118

080097d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097e0:	4b28      	ldr	r3, [pc, #160]	; (8009884 <prvInsertBlockIntoFreeList+0xac>)
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	e002      	b.n	80097ec <prvInsertBlockIntoFreeList+0x14>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d8f7      	bhi.n	80097e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	4413      	add	r3, r2
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	429a      	cmp	r2, r3
 8009806:	d108      	bne.n	800981a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	441a      	add	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	441a      	add	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d118      	bne.n	8009860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	4b15      	ldr	r3, [pc, #84]	; (8009888 <prvInsertBlockIntoFreeList+0xb0>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	429a      	cmp	r2, r3
 8009838:	d00d      	beq.n	8009856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	441a      	add	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	e008      	b.n	8009868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009856:	4b0c      	ldr	r3, [pc, #48]	; (8009888 <prvInsertBlockIntoFreeList+0xb0>)
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	e003      	b.n	8009868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	429a      	cmp	r2, r3
 800986e:	d002      	beq.n	8009876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009876:	bf00      	nop
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	200010fc 	.word	0x200010fc
 8009888:	20001104 	.word	0x20001104

0800988c <findIndexByElement>:

/*
Find the index of an array in an array of char array 
*/
int findIndexByElement(char **arr, int size, char *elem)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
    // for debugging purposes
    char *b = elem;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < size; i++)
 800989c:	2300      	movs	r3, #0
 800989e:	61fb      	str	r3, [r7, #28]
 80098a0:	e011      	b.n	80098c6 <findIndexByElement+0x3a>
    {
        char *a = arr[i];
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	4413      	add	r3, r2
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	617b      	str	r3, [r7, #20]
        if (strcmp(a, b) == 0)
 80098ae:	69b9      	ldr	r1, [r7, #24]
 80098b0:	6978      	ldr	r0, [r7, #20]
 80098b2:	f7f6 fca5 	bl	8000200 <strcmp>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <findIndexByElement+0x34>
        {
            return i;
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	e008      	b.n	80098d2 <findIndexByElement+0x46>
    for (int i = 0; i < size; i++)
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	3301      	adds	r3, #1
 80098c4:	61fb      	str	r3, [r7, #28]
 80098c6:	69fa      	ldr	r2, [r7, #28]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	dbe9      	blt.n	80098a2 <findIndexByElement+0x16>
        }
    }
    return -1; // element does not exist
 80098ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3720      	adds	r7, #32
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <convertMorseToText>:
int size: size of the morse code array (mArr)

Note: Ideally, buff and mArr have the same size.
*/
void convertMorseToText(char **mArr, char *buff, int size)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 80098e8:	2300      	movs	r3, #0
 80098ea:	61fb      	str	r3, [r7, #28]
 80098ec:	e02d      	b.n	800994a <convertMorseToText+0x6e>
    {
        int idx = findIndexByElement(alphabeticalMorse, 26, mArr[i]);
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4413      	add	r3, r2
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	461a      	mov	r2, r3
 80098fa:	211a      	movs	r1, #26
 80098fc:	4817      	ldr	r0, [pc, #92]	; (800995c <convertMorseToText+0x80>)
 80098fe:	f7ff ffc5 	bl	800988c <findIndexByElement>
 8009902:	61b8      	str	r0, [r7, #24]
        if (idx == -1) {
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800990a:	d113      	bne.n	8009934 <convertMorseToText+0x58>
            int idx = findIndexByElement(numericalMorse, 10, mArr[i]);
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	4413      	add	r3, r2
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	210a      	movs	r1, #10
 800991a:	4811      	ldr	r0, [pc, #68]	; (8009960 <convertMorseToText+0x84>)
 800991c:	f7ff ffb6 	bl	800988c <findIndexByElement>
 8009920:	6178      	str	r0, [r7, #20]
            buff[i] = '0' + idx;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	b2da      	uxtb	r2, r3
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	68b9      	ldr	r1, [r7, #8]
 800992a:	440b      	add	r3, r1
 800992c:	3230      	adds	r2, #48	; 0x30
 800992e:	b2d2      	uxtb	r2, r2
 8009930:	701a      	strb	r2, [r3, #0]
 8009932:	e007      	b.n	8009944 <convertMorseToText+0x68>
        } else{
            buff[i] = 'a' + idx;
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	b2da      	uxtb	r2, r3
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	68b9      	ldr	r1, [r7, #8]
 800993c:	440b      	add	r3, r1
 800993e:	3261      	adds	r2, #97	; 0x61
 8009940:	b2d2      	uxtb	r2, r2
 8009942:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	3301      	adds	r3, #1
 8009948:	61fb      	str	r3, [r7, #28]
 800994a:	69fa      	ldr	r2, [r7, #28]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	429a      	cmp	r2, r3
 8009950:	dbcd      	blt.n	80098ee <convertMorseToText+0x12>
        }
    }
}
 8009952:	bf00      	nop
 8009954:	bf00      	nop
 8009956:	3720      	adds	r7, #32
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	2000000c 	.word	0x2000000c
 8009960:	20000074 	.word	0x20000074

08009964 <convertTextToMorse>:
int size: size of text to concer (mArr)

Note: Ideally, buff and mArr have the same size.
*/
void convertTextToMorse(char *cArr, char **buff, int size)
{
 8009964:	b480      	push	{r7}
 8009966:	b089      	sub	sp, #36	; 0x24
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]

    for (int i = 0; i < size; i++)
 8009970:	2300      	movs	r3, #0
 8009972:	61fb      	str	r3, [r7, #28]
 8009974:	e04b      	b.n	8009a0e <convertTextToMorse+0xaa>
    {
        char c = cArr[i];
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	4413      	add	r3, r2
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	75fb      	strb	r3, [r7, #23]
        char *morse;
        c = tolower(c);
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	75bb      	strb	r3, [r7, #22]
 8009984:	7dbb      	ldrb	r3, [r7, #22]
 8009986:	3301      	adds	r3, #1
 8009988:	4a26      	ldr	r2, [pc, #152]	; (8009a24 <convertTextToMorse+0xc0>)
 800998a:	4413      	add	r3, r2
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	f003 0303 	and.w	r3, r3, #3
 8009992:	2b01      	cmp	r3, #1
 8009994:	d102      	bne.n	800999c <convertTextToMorse+0x38>
 8009996:	7dbb      	ldrb	r3, [r7, #22]
 8009998:	3320      	adds	r3, #32
 800999a:	e000      	b.n	800999e <convertTextToMorse+0x3a>
 800999c:	7dbb      	ldrb	r3, [r7, #22]
 800999e:	75fb      	strb	r3, [r7, #23]
        if (islower(c))
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	3301      	adds	r3, #1
 80099a4:	4a1f      	ldr	r2, [pc, #124]	; (8009a24 <convertTextToMorse+0xc0>)
 80099a6:	4413      	add	r3, r2
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	f003 0303 	and.w	r3, r3, #3
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	d106      	bne.n	80099c0 <convertTextToMorse+0x5c>
        {
            morse = alphabeticalMorse[c - 'a'];
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	3b61      	subs	r3, #97	; 0x61
 80099b6:	4a1c      	ldr	r2, [pc, #112]	; (8009a28 <convertTextToMorse+0xc4>)
 80099b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099bc:	61bb      	str	r3, [r7, #24]
 80099be:	e01d      	b.n	80099fc <convertTextToMorse+0x98>
        }
        else if (isdigit(c))
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
 80099c2:	3301      	adds	r3, #1
 80099c4:	4a17      	ldr	r2, [pc, #92]	; (8009a24 <convertTextToMorse+0xc0>)
 80099c6:	4413      	add	r3, r2
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	f003 0304 	and.w	r3, r3, #4
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d006      	beq.n	80099e0 <convertTextToMorse+0x7c>
        {
            morse = numericalMorse[c - '0'];
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
 80099d4:	3b30      	subs	r3, #48	; 0x30
 80099d6:	4a15      	ldr	r2, [pc, #84]	; (8009a2c <convertTextToMorse+0xc8>)
 80099d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099dc:	61bb      	str	r3, [r7, #24]
 80099de:	e00d      	b.n	80099fc <convertTextToMorse+0x98>
        }
        else if (isspace(c))
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
 80099e2:	3301      	adds	r3, #1
 80099e4:	4a0f      	ldr	r2, [pc, #60]	; (8009a24 <convertTextToMorse+0xc0>)
 80099e6:	4413      	add	r3, r2
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	f003 0308 	and.w	r3, r3, #8
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <convertTextToMorse+0x94>
        {
            morse = ' ';
 80099f2:	2320      	movs	r3, #32
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	e001      	b.n	80099fc <convertTextToMorse+0x98>
        }
        else
        {
            morse = ' ';
 80099f8:	2320      	movs	r3, #32
 80099fa:	61bb      	str	r3, [r7, #24]
        }

        buff[i] = morse;
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	4413      	add	r3, r2
 8009a04:	69ba      	ldr	r2, [r7, #24]
 8009a06:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	61fb      	str	r3, [r7, #28]
 8009a0e:	69fa      	ldr	r2, [r7, #28]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	dbaf      	blt.n	8009976 <convertTextToMorse+0x12>
    }
}
 8009a16:	bf00      	nop
 8009a18:	bf00      	nop
 8009a1a:	3724      	adds	r7, #36	; 0x24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	08010fb8 	.word	0x08010fb8
 8009a28:	2000000c 	.word	0x2000000c
 8009a2c:	20000074 	.word	0x20000074

08009a30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4a07      	ldr	r2, [pc, #28]	; (8009a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8009a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	4a06      	ldr	r2, [pc, #24]	; (8009a60 <vApplicationGetIdleTaskMemory+0x30>)
 8009a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2280      	movs	r2, #128	; 0x80
 8009a4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8009a4e:	bf00      	nop
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	2000111c 	.word	0x2000111c
 8009a60:	20001170 	.word	0x20001170

08009a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009a64:	b5b0      	push	{r4, r5, r7, lr}
 8009a66:	b090      	sub	sp, #64	; 0x40
 8009a68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009a6a:	f7f6 fdb3 	bl	80005d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009a6e:	f000 f8d5 	bl	8009c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009a72:	f000 fb37 	bl	800a0e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8009a76:	f000 faeb 	bl	800a050 <MX_DMA_Init>
  MX_I2C2_Init();
 8009a7a:	f000 f9bb 	bl	8009df4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8009a7e:	f000 fa9b 	bl	8009fb8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8009a82:	f000 fa4b 	bl	8009f1c <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8009a86:	f000 f94f 	bl	8009d28 <MX_DFSDM1_Init>
  MX_DAC1_Init();
 8009a8a:	f000 f919 	bl	8009cc0 <MX_DAC1_Init>
  MX_OCTOSPI1_Init();
 8009a8e:	f000 f9f1 	bl	8009e74 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
  pMyDevice->I2cHandle = &hi2c2;
 8009a92:	4b51      	ldr	r3, [pc, #324]	; (8009bd8 <main+0x174>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a51      	ldr	r2, [pc, #324]	; (8009bdc <main+0x178>)
 8009a98:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  pMyDevice->I2cDevAddr      = 0x52;
 8009a9c:	4b4e      	ldr	r3, [pc, #312]	; (8009bd8 <main+0x174>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2252      	movs	r2, #82	; 0x52
 8009aa2:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
  pMyDevice->comms_type      =  1;
 8009aa6:	4b4c      	ldr	r3, [pc, #304]	; (8009bd8 <main+0x174>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
  pMyDevice->comms_speed_khz =  400;
 8009ab0:	4b49      	ldr	r3, [pc, #292]	; (8009bd8 <main+0x174>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009ab8:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
  VL53L0X_ResetDevice(&MyDevice);
 8009abc:	4848      	ldr	r0, [pc, #288]	; (8009be0 <main+0x17c>)
 8009abe:	f002 f997 	bl	800bdf0 <VL53L0X_ResetDevice>
  status = VL53L0X_DataInit(&MyDevice);
 8009ac2:	4847      	ldr	r0, [pc, #284]	; (8009be0 <main+0x17c>)
 8009ac4:	f001 fe8a 	bl	800b7dc <VL53L0X_DataInit>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	461a      	mov	r2, r3
 8009acc:	4b45      	ldr	r3, [pc, #276]	; (8009be4 <main+0x180>)
 8009ace:	701a      	strb	r2, [r3, #0]
  status = VL53L0X_StaticInit(pMyDevice);
 8009ad0:	4b41      	ldr	r3, [pc, #260]	; (8009bd8 <main+0x174>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f002 f807 	bl	800bae8 <VL53L0X_StaticInit>
 8009ada:	4603      	mov	r3, r0
 8009adc:	461a      	mov	r2, r3
 8009ade:	4b41      	ldr	r3, [pc, #260]	; (8009be4 <main+0x180>)
 8009ae0:	701a      	strb	r2, [r3, #0]
  status = VL53L0X_PerformRefCalibration(pMyDevice,
 8009ae2:	4b3d      	ldr	r3, [pc, #244]	; (8009bd8 <main+0x174>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a40      	ldr	r2, [pc, #256]	; (8009be8 <main+0x184>)
 8009ae8:	4940      	ldr	r1, [pc, #256]	; (8009bec <main+0x188>)
 8009aea:	4618      	mov	r0, r3
 8009aec:	f002 fee8 	bl	800c8c0 <VL53L0X_PerformRefCalibration>
 8009af0:	4603      	mov	r3, r0
 8009af2:	461a      	mov	r2, r3
 8009af4:	4b3b      	ldr	r3, [pc, #236]	; (8009be4 <main+0x180>)
 8009af6:	701a      	strb	r2, [r3, #0]
          		&VhvSettings, &PhaseCal);
  status = VL53L0X_PerformRefSpadManagement(pMyDevice,
 8009af8:	4b37      	ldr	r3, [pc, #220]	; (8009bd8 <main+0x174>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a3c      	ldr	r2, [pc, #240]	; (8009bf0 <main+0x18c>)
 8009afe:	493d      	ldr	r1, [pc, #244]	; (8009bf4 <main+0x190>)
 8009b00:	4618      	mov	r0, r3
 8009b02:	f003 fbf7 	bl	800d2f4 <VL53L0X_PerformRefSpadManagement>
 8009b06:	4603      	mov	r3, r0
 8009b08:	461a      	mov	r2, r3
 8009b0a:	4b36      	ldr	r3, [pc, #216]	; (8009be4 <main+0x180>)
 8009b0c:	701a      	strb	r2, [r3, #0]
          		&refSpadCount, &isApertureSpads);
  status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8009b0e:	4b32      	ldr	r3, [pc, #200]	; (8009bd8 <main+0x174>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2100      	movs	r1, #0
 8009b14:	4618      	mov	r0, r3
 8009b16:	f002 fa69 	bl	800bfec <VL53L0X_SetDeviceMode>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	4b31      	ldr	r3, [pc, #196]	; (8009be4 <main+0x180>)
 8009b20:	701a      	strb	r2, [r3, #0]
  char ascii_char[2]; // null-terminated string of length 1.

  HAL_UART_Receive_IT(&huart1, UART2_rxBuffer, 1);
 8009b22:	2201      	movs	r2, #1
 8009b24:	4934      	ldr	r1, [pc, #208]	; (8009bf8 <main+0x194>)
 8009b26:	4835      	ldr	r0, [pc, #212]	; (8009bfc <main+0x198>)
 8009b28:	f7fc fcc8 	bl	80064bc <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of receiveTerminal */
  osThreadDef(receiveTerminal, StartReceivingTerminal, osPriorityNormal, 0, 128);
 8009b2c:	4b34      	ldr	r3, [pc, #208]	; (8009c00 <main+0x19c>)
 8009b2e:	f107 0420 	add.w	r4, r7, #32
 8009b32:	461d      	mov	r5, r3
 8009b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTerminalHandle = osThreadCreate(osThread(receiveTerminal), NULL);
 8009b40:	f107 0320 	add.w	r3, r7, #32
 8009b44:	2100      	movs	r1, #0
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fe fc6f 	bl	800842a <osThreadCreate>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	4a2d      	ldr	r2, [pc, #180]	; (8009c04 <main+0x1a0>)
 8009b50:	6013      	str	r3, [r2, #0]

  /* definition and creation of sideTask */
  osThreadDef(sideTask, StartSideTask, osPriorityNormal, 0, 128);
 8009b52:	4b2d      	ldr	r3, [pc, #180]	; (8009c08 <main+0x1a4>)
 8009b54:	1d3c      	adds	r4, r7, #4
 8009b56:	461d      	mov	r5, r3
 8009b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sideTaskHandle = osThreadCreate(osThread(sideTask), NULL);
 8009b64:	1d3b      	adds	r3, r7, #4
 8009b66:	2100      	movs	r1, #0
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe fc5e 	bl	800842a <osThreadCreate>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	4a26      	ldr	r2, [pc, #152]	; (8009c0c <main+0x1a8>)
 8009b72:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8009b74:	f7fe fc52 	bl	800841c <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	char* array[1];
	read_char_morse();
 8009b78:	f000 fb40 	bl	800a1fc <read_char_morse>
	array[0] = morse;
 8009b7c:	4b24      	ldr	r3, [pc, #144]	; (8009c10 <main+0x1ac>)
 8009b7e:	603b      	str	r3, [r7, #0]
	convertMorseToText(array, ascii_char, 1);
 8009b80:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8009b84:	463b      	mov	r3, r7
 8009b86:	2201      	movs	r2, #1
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7ff fea7 	bl	80098dc <convertMorseToText>
	ascii_char[1]='\0';
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	snprintf(output, sizeof(output), "%s\n\r", ascii_char);
 8009b94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009b98:	4a1e      	ldr	r2, [pc, #120]	; (8009c14 <main+0x1b0>)
 8009b9a:	2132      	movs	r1, #50	; 0x32
 8009b9c:	481e      	ldr	r0, [pc, #120]	; (8009c18 <main+0x1b4>)
 8009b9e:	f006 fc7d 	bl	801049c <sniprintf>
	HAL_UART_Transmit(&huart1, output, strlen(output), 100);
 8009ba2:	481d      	ldr	r0, [pc, #116]	; (8009c18 <main+0x1b4>)
 8009ba4:	f7f6 fb36 	bl	8000214 <strlen>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	2364      	movs	r3, #100	; 0x64
 8009bae:	491a      	ldr	r1, [pc, #104]	; (8009c18 <main+0x1b4>)
 8009bb0:	4812      	ldr	r0, [pc, #72]	; (8009bfc <main+0x198>)
 8009bb2:	f7fc fbeb 	bl	800638c <HAL_UART_Transmit>
	snprintf(output, sizeof(output), "%s\n\r", morse);
 8009bb6:	4b16      	ldr	r3, [pc, #88]	; (8009c10 <main+0x1ac>)
 8009bb8:	4a16      	ldr	r2, [pc, #88]	; (8009c14 <main+0x1b0>)
 8009bba:	2132      	movs	r1, #50	; 0x32
 8009bbc:	4816      	ldr	r0, [pc, #88]	; (8009c18 <main+0x1b4>)
 8009bbe:	f006 fc6d 	bl	801049c <sniprintf>
	HAL_UART_Transmit(&huart1, output, strlen(output), 100);
 8009bc2:	4815      	ldr	r0, [pc, #84]	; (8009c18 <main+0x1b4>)
 8009bc4:	f7f6 fb26 	bl	8000214 <strlen>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	2364      	movs	r3, #100	; 0x64
 8009bce:	4912      	ldr	r1, [pc, #72]	; (8009c18 <main+0x1b4>)
 8009bd0:	480a      	ldr	r0, [pc, #40]	; (8009bfc <main+0x198>)
 8009bd2:	f7fc fbdb 	bl	800638c <HAL_UART_Transmit>
  {
 8009bd6:	e7cf      	b.n	8009b78 <main+0x114>
 8009bd8:	2000009c 	.word	0x2000009c
 8009bdc:	200014d0 	.word	0x200014d0
 8009be0:	200017ac 	.word	0x200017ac
 8009be4:	20001960 	.word	0x20001960
 8009be8:	20001962 	.word	0x20001962
 8009bec:	20001961 	.word	0x20001961
 8009bf0:	20001968 	.word	0x20001968
 8009bf4:	20001964 	.word	0x20001964
 8009bf8:	2004ad84 	.word	0x2004ad84
 8009bfc:	20001620 	.word	0x20001620
 8009c00:	08010ed4 	.word	0x08010ed4
 8009c04:	20001770 	.word	0x20001770
 8009c08:	08010ef0 	.word	0x08010ef0
 8009c0c:	20001774 	.word	0x20001774
 8009c10:	20001988 	.word	0x20001988
 8009c14:	08010ecc 	.word	0x08010ecc
 8009c18:	20001778 	.word	0x20001778

08009c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b096      	sub	sp, #88	; 0x58
 8009c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009c22:	f107 0314 	add.w	r3, r7, #20
 8009c26:	2244      	movs	r2, #68	; 0x44
 8009c28:	2100      	movs	r1, #0
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f006 fc2e 	bl	801048c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009c30:	463b      	mov	r3, r7
 8009c32:	2200      	movs	r2, #0
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	605a      	str	r2, [r3, #4]
 8009c38:	609a      	str	r2, [r3, #8]
 8009c3a:	60da      	str	r2, [r3, #12]
 8009c3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8009c3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009c42:	f7fa f9db 	bl	8003ffc <HAL_PWREx_ControlVoltageScaling>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d001      	beq.n	8009c50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8009c4c:	f000 fee4 	bl	800aa18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8009c50:	2310      	movs	r3, #16
 8009c52:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009c54:	2301      	movs	r3, #1
 8009c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8009c5c:	2360      	movs	r3, #96	; 0x60
 8009c5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009c60:	2302      	movs	r3, #2
 8009c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8009c64:	2301      	movs	r3, #1
 8009c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8009c6c:	2328      	movs	r3, #40	; 0x28
 8009c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009c70:	2302      	movs	r3, #2
 8009c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009c74:	2302      	movs	r3, #2
 8009c76:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009c78:	2302      	movs	r3, #2
 8009c7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c7c:	f107 0314 	add.w	r3, r7, #20
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fa fa5f 	bl	8004144 <HAL_RCC_OscConfig>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8009c8c:	f000 fec4 	bl	800aa18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009c90:	230f      	movs	r3, #15
 8009c92:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009c94:	2303      	movs	r3, #3
 8009c96:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8009ca4:	463b      	mov	r3, r7
 8009ca6:	2103      	movs	r1, #3
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fa fe65 	bl	8004978 <HAL_RCC_ClockConfig>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8009cb4:	f000 feb0 	bl	800aa18 <Error_Handler>
  }
}
 8009cb8:	bf00      	nop
 8009cba:	3758      	adds	r7, #88	; 0x58
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08a      	sub	sp, #40	; 0x28
 8009cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8009cc6:	463b      	mov	r3, r7
 8009cc8:	2228      	movs	r2, #40	; 0x28
 8009cca:	2100      	movs	r1, #0
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f006 fbdd 	bl	801048c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8009cd2:	4b13      	ldr	r3, [pc, #76]	; (8009d20 <MX_DAC1_Init+0x60>)
 8009cd4:	4a13      	ldr	r2, [pc, #76]	; (8009d24 <MX_DAC1_Init+0x64>)
 8009cd6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8009cd8:	4811      	ldr	r0, [pc, #68]	; (8009d20 <MX_DAC1_Init+0x60>)
 8009cda:	f7f6 fdb9 	bl	8000850 <HAL_DAC_Init>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8009ce4:	f000 fe98 	bl	800aa18 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8009cec:	2300      	movs	r3, #0
 8009cee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8009cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cf4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8009d02:	463b      	mov	r3, r7
 8009d04:	2200      	movs	r2, #0
 8009d06:	4619      	mov	r1, r3
 8009d08:	4805      	ldr	r0, [pc, #20]	; (8009d20 <MX_DAC1_Init+0x60>)
 8009d0a:	f7f6 ff57 	bl	8000bbc <HAL_DAC_ConfigChannel>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8009d14:	f000 fe80 	bl	800aa18 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8009d18:	bf00      	nop
 8009d1a:	3728      	adds	r7, #40	; 0x28
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	20001370 	.word	0x20001370
 8009d24:	40007400 	.word	0x40007400

08009d28 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8009d2c:	4b2c      	ldr	r3, [pc, #176]	; (8009de0 <MX_DFSDM1_Init+0xb8>)
 8009d2e:	4a2d      	ldr	r2, [pc, #180]	; (8009de4 <MX_DFSDM1_Init+0xbc>)
 8009d30:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8009d32:	4b2b      	ldr	r3, [pc, #172]	; (8009de0 <MX_DFSDM1_Init+0xb8>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8009d38:	4b29      	ldr	r3, [pc, #164]	; (8009de0 <MX_DFSDM1_Init+0xb8>)
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8009d3e:	4b28      	ldr	r3, [pc, #160]	; (8009de0 <MX_DFSDM1_Init+0xb8>)
 8009d40:	2201      	movs	r2, #1
 8009d42:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8009d44:	4b26      	ldr	r3, [pc, #152]	; (8009de0 <MX_DFSDM1_Init+0xb8>)
 8009d46:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8009d4a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 55;
 8009d4c:	4b24      	ldr	r3, [pc, #144]	; (8009de0 <MX_DFSDM1_Init+0xb8>)
 8009d4e:	2237      	movs	r2, #55	; 0x37
 8009d50:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8009d52:	4b23      	ldr	r3, [pc, #140]	; (8009de0 <MX_DFSDM1_Init+0xb8>)
 8009d54:	2201      	movs	r2, #1
 8009d56:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8009d58:	4821      	ldr	r0, [pc, #132]	; (8009de0 <MX_DFSDM1_Init+0xb8>)
 8009d5a:	f7f7 f9d7 	bl	800110c <HAL_DFSDM_FilterInit>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8009d64:	f000 fe58 	bl	800aa18 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8009d68:	4b1f      	ldr	r3, [pc, #124]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009d6a:	4a20      	ldr	r2, [pc, #128]	; (8009dec <MX_DFSDM1_Init+0xc4>)
 8009d6c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8009d6e:	4b1e      	ldr	r3, [pc, #120]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009d70:	2201      	movs	r2, #1
 8009d72:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8009d74:	4b1c      	ldr	r3, [pc, #112]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 8009d7a:	4b1b      	ldr	r3, [pc, #108]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009d7c:	2222      	movs	r2, #34	; 0x22
 8009d7e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8009d80:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8009d86:	4b18      	ldr	r3, [pc, #96]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8009d8c:	4b16      	ldr	r3, [pc, #88]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8009d92:	4b15      	ldr	r3, [pc, #84]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8009d98:	4b13      	ldr	r3, [pc, #76]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009d9a:	2204      	movs	r2, #4
 8009d9c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8009d9e:	4b12      	ldr	r3, [pc, #72]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8009da4:	4b10      	ldr	r3, [pc, #64]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009da6:	2201      	movs	r2, #1
 8009da8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8009daa:	4b0f      	ldr	r3, [pc, #60]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8009db0:	4b0d      	ldr	r3, [pc, #52]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8009db6:	480c      	ldr	r0, [pc, #48]	; (8009de8 <MX_DFSDM1_Init+0xc0>)
 8009db8:	f7f7 f8d4 	bl	8000f64 <HAL_DFSDM_ChannelInit>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8009dc2:	f000 fe29 	bl	800aa18 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	4909      	ldr	r1, [pc, #36]	; (8009df0 <MX_DFSDM1_Init+0xc8>)
 8009dca:	4805      	ldr	r0, [pc, #20]	; (8009de0 <MX_DFSDM1_Init+0xb8>)
 8009dcc:	f7f7 fa78 	bl	80012c0 <HAL_DFSDM_FilterConfigRegChannel>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d001      	beq.n	8009dda <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8009dd6:	f000 fe1f 	bl	800aa18 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8009dda:	bf00      	nop
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	200013e4 	.word	0x200013e4
 8009de4:	40016100 	.word	0x40016100
 8009de8:	20001438 	.word	0x20001438
 8009dec:	40016040 	.word	0x40016040
 8009df0:	00020004 	.word	0x00020004

08009df4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8009df8:	4b1b      	ldr	r3, [pc, #108]	; (8009e68 <MX_I2C2_Init+0x74>)
 8009dfa:	4a1c      	ldr	r2, [pc, #112]	; (8009e6c <MX_I2C2_Init+0x78>)
 8009dfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8009dfe:	4b1a      	ldr	r3, [pc, #104]	; (8009e68 <MX_I2C2_Init+0x74>)
 8009e00:	4a1b      	ldr	r2, [pc, #108]	; (8009e70 <MX_I2C2_Init+0x7c>)
 8009e02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8009e04:	4b18      	ldr	r3, [pc, #96]	; (8009e68 <MX_I2C2_Init+0x74>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009e0a:	4b17      	ldr	r3, [pc, #92]	; (8009e68 <MX_I2C2_Init+0x74>)
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009e10:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <MX_I2C2_Init+0x74>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8009e16:	4b14      	ldr	r3, [pc, #80]	; (8009e68 <MX_I2C2_Init+0x74>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009e1c:	4b12      	ldr	r3, [pc, #72]	; (8009e68 <MX_I2C2_Init+0x74>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009e22:	4b11      	ldr	r3, [pc, #68]	; (8009e68 <MX_I2C2_Init+0x74>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009e28:	4b0f      	ldr	r3, [pc, #60]	; (8009e68 <MX_I2C2_Init+0x74>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009e2e:	480e      	ldr	r0, [pc, #56]	; (8009e68 <MX_I2C2_Init+0x74>)
 8009e30:	f7f8 fae4 	bl	80023fc <HAL_I2C_Init>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8009e3a:	f000 fded 	bl	800aa18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009e3e:	2100      	movs	r1, #0
 8009e40:	4809      	ldr	r0, [pc, #36]	; (8009e68 <MX_I2C2_Init+0x74>)
 8009e42:	f7f8 ffcd 	bl	8002de0 <HAL_I2CEx_ConfigAnalogFilter>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8009e4c:	f000 fde4 	bl	800aa18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009e50:	2100      	movs	r1, #0
 8009e52:	4805      	ldr	r0, [pc, #20]	; (8009e68 <MX_I2C2_Init+0x74>)
 8009e54:	f7f9 f80f 	bl	8002e76 <HAL_I2CEx_ConfigDigitalFilter>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8009e5e:	f000 fddb 	bl	800aa18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8009e62:	bf00      	nop
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	200014d0 	.word	0x200014d0
 8009e6c:	40005800 	.word	0x40005800
 8009e70:	10909cec 	.word	0x10909cec

08009e74 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8009e7a:	1d3b      	adds	r3, r7, #4
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	601a      	str	r2, [r3, #0]
 8009e80:	605a      	str	r2, [r3, #4]
 8009e82:	609a      	str	r2, [r3, #8]
 8009e84:	60da      	str	r2, [r3, #12]
 8009e86:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8009e88:	4b22      	ldr	r3, [pc, #136]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009e8a:	4a23      	ldr	r2, [pc, #140]	; (8009f18 <MX_OCTOSPI1_Init+0xa4>)
 8009e8c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8009e8e:	4b21      	ldr	r3, [pc, #132]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009e90:	2201      	movs	r2, #1
 8009e92:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8009e94:	4b1f      	ldr	r3, [pc, #124]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8009e9a:	4b1e      	ldr	r3, [pc, #120]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8009ea0:	4b1c      	ldr	r3, [pc, #112]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8009ea6:	4b1b      	ldr	r3, [pc, #108]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8009eac:	4b19      	ldr	r3, [pc, #100]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8009eb2:	4b18      	ldr	r3, [pc, #96]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8009eb8:	4b16      	ldr	r3, [pc, #88]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009eba:	2201      	movs	r2, #1
 8009ebc:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8009ebe:	4b15      	ldr	r3, [pc, #84]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8009ec4:	4b13      	ldr	r3, [pc, #76]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8009eca:	4b12      	ldr	r3, [pc, #72]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8009ed0:	4b10      	ldr	r3, [pc, #64]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009ed2:	2208      	movs	r2, #8
 8009ed4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8009ed6:	480f      	ldr	r0, [pc, #60]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009ed8:	f7f9 f81a 	bl	8002f10 <HAL_OSPI_Init>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <MX_OCTOSPI1_Init+0x72>
  {
    Error_Handler();
 8009ee2:	f000 fd99 	bl	800aa18 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8009eea:	2301      	movs	r3, #1
 8009eec:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8009eee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8009ef2:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ef4:	1d3b      	adds	r3, r7, #4
 8009ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009efa:	4619      	mov	r1, r3
 8009efc:	4805      	ldr	r0, [pc, #20]	; (8009f14 <MX_OCTOSPI1_Init+0xa0>)
 8009efe:	f7f9 fadf 	bl	80034c0 <HAL_OSPIM_Config>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <MX_OCTOSPI1_Init+0x98>
  {
    Error_Handler();
 8009f08:	f000 fd86 	bl	800aa18 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8009f0c:	bf00      	nop
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	20001524 	.word	0x20001524
 8009f18:	a0001000 	.word	0xa0001000

08009f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f22:	f107 0310 	add.w	r3, r7, #16
 8009f26:	2200      	movs	r2, #0
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	605a      	str	r2, [r3, #4]
 8009f2c:	609a      	str	r2, [r3, #8]
 8009f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f30:	1d3b      	adds	r3, r7, #4
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	605a      	str	r2, [r3, #4]
 8009f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009f3a:	4b1e      	ldr	r3, [pc, #120]	; (8009fb4 <MX_TIM2_Init+0x98>)
 8009f3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009f40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009f42:	4b1c      	ldr	r3, [pc, #112]	; (8009fb4 <MX_TIM2_Init+0x98>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f48:	4b1a      	ldr	r3, [pc, #104]	; (8009fb4 <MX_TIM2_Init+0x98>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8009f4e:	4b19      	ldr	r3, [pc, #100]	; (8009fb4 <MX_TIM2_Init+0x98>)
 8009f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f56:	4b17      	ldr	r3, [pc, #92]	; (8009fb4 <MX_TIM2_Init+0x98>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f5c:	4b15      	ldr	r3, [pc, #84]	; (8009fb4 <MX_TIM2_Init+0x98>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009f62:	4814      	ldr	r0, [pc, #80]	; (8009fb4 <MX_TIM2_Init+0x98>)
 8009f64:	f7fb fd10 	bl	8005988 <HAL_TIM_Base_Init>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8009f6e:	f000 fd53 	bl	800aa18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009f78:	f107 0310 	add.w	r3, r7, #16
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	480d      	ldr	r0, [pc, #52]	; (8009fb4 <MX_TIM2_Init+0x98>)
 8009f80:	f7fb fee9 	bl	8005d56 <HAL_TIM_ConfigClockSource>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8009f8a:	f000 fd45 	bl	800aa18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f92:	2300      	movs	r3, #0
 8009f94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009f96:	1d3b      	adds	r3, r7, #4
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4806      	ldr	r0, [pc, #24]	; (8009fb4 <MX_TIM2_Init+0x98>)
 8009f9c:	f7fc f900 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8009fa6:	f000 fd37 	bl	800aa18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009faa:	bf00      	nop
 8009fac:	3720      	adds	r7, #32
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20001574 	.word	0x20001574

08009fb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009fbc:	4b22      	ldr	r3, [pc, #136]	; (800a048 <MX_USART1_UART_Init+0x90>)
 8009fbe:	4a23      	ldr	r2, [pc, #140]	; (800a04c <MX_USART1_UART_Init+0x94>)
 8009fc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009fc2:	4b21      	ldr	r3, [pc, #132]	; (800a048 <MX_USART1_UART_Init+0x90>)
 8009fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009fc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009fca:	4b1f      	ldr	r3, [pc, #124]	; (800a048 <MX_USART1_UART_Init+0x90>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009fd0:	4b1d      	ldr	r3, [pc, #116]	; (800a048 <MX_USART1_UART_Init+0x90>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009fd6:	4b1c      	ldr	r3, [pc, #112]	; (800a048 <MX_USART1_UART_Init+0x90>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009fdc:	4b1a      	ldr	r3, [pc, #104]	; (800a048 <MX_USART1_UART_Init+0x90>)
 8009fde:	220c      	movs	r2, #12
 8009fe0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009fe2:	4b19      	ldr	r3, [pc, #100]	; (800a048 <MX_USART1_UART_Init+0x90>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009fe8:	4b17      	ldr	r3, [pc, #92]	; (800a048 <MX_USART1_UART_Init+0x90>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009fee:	4b16      	ldr	r3, [pc, #88]	; (800a048 <MX_USART1_UART_Init+0x90>)
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009ff4:	4b14      	ldr	r3, [pc, #80]	; (800a048 <MX_USART1_UART_Init+0x90>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009ffa:	4b13      	ldr	r3, [pc, #76]	; (800a048 <MX_USART1_UART_Init+0x90>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a000:	4811      	ldr	r0, [pc, #68]	; (800a048 <MX_USART1_UART_Init+0x90>)
 800a002:	f7fc f973 	bl	80062ec <HAL_UART_Init>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800a00c:	f000 fd04 	bl	800aa18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a010:	2100      	movs	r1, #0
 800a012:	480d      	ldr	r0, [pc, #52]	; (800a048 <MX_USART1_UART_Init+0x90>)
 800a014:	f7fe f91f 	bl	8008256 <HAL_UARTEx_SetTxFifoThreshold>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800a01e:	f000 fcfb 	bl	800aa18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a022:	2100      	movs	r1, #0
 800a024:	4808      	ldr	r0, [pc, #32]	; (800a048 <MX_USART1_UART_Init+0x90>)
 800a026:	f7fe f954 	bl	80082d2 <HAL_UARTEx_SetRxFifoThreshold>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800a030:	f000 fcf2 	bl	800aa18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a034:	4804      	ldr	r0, [pc, #16]	; (800a048 <MX_USART1_UART_Init+0x90>)
 800a036:	f7fe f8d5 	bl	80081e4 <HAL_UARTEx_DisableFifoMode>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800a040:	f000 fcea 	bl	800aa18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a044:	bf00      	nop
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20001620 	.word	0x20001620
 800a04c:	40013800 	.word	0x40013800

0800a050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a056:	4b22      	ldr	r3, [pc, #136]	; (800a0e0 <MX_DMA_Init+0x90>)
 800a058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a05a:	4a21      	ldr	r2, [pc, #132]	; (800a0e0 <MX_DMA_Init+0x90>)
 800a05c:	f043 0304 	orr.w	r3, r3, #4
 800a060:	6493      	str	r3, [r2, #72]	; 0x48
 800a062:	4b1f      	ldr	r3, [pc, #124]	; (800a0e0 <MX_DMA_Init+0x90>)
 800a064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a066:	f003 0304 	and.w	r3, r3, #4
 800a06a:	607b      	str	r3, [r7, #4]
 800a06c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a06e:	4b1c      	ldr	r3, [pc, #112]	; (800a0e0 <MX_DMA_Init+0x90>)
 800a070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a072:	4a1b      	ldr	r2, [pc, #108]	; (800a0e0 <MX_DMA_Init+0x90>)
 800a074:	f043 0301 	orr.w	r3, r3, #1
 800a078:	6493      	str	r3, [r2, #72]	; 0x48
 800a07a:	4b19      	ldr	r3, [pc, #100]	; (800a0e0 <MX_DMA_Init+0x90>)
 800a07c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a07e:	f003 0301 	and.w	r3, r3, #1
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800a086:	2200      	movs	r2, #0
 800a088:	2105      	movs	r1, #5
 800a08a:	200b      	movs	r0, #11
 800a08c:	f7f6 fbb6 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a090:	200b      	movs	r0, #11
 800a092:	f7f6 fbcf 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800a096:	2200      	movs	r2, #0
 800a098:	2105      	movs	r1, #5
 800a09a:	200c      	movs	r0, #12
 800a09c:	f7f6 fbae 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a0a0:	200c      	movs	r0, #12
 800a0a2:	f7f6 fbc7 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2105      	movs	r1, #5
 800a0aa:	200d      	movs	r0, #13
 800a0ac:	f7f6 fba6 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800a0b0:	200d      	movs	r0, #13
 800a0b2:	f7f6 fbbf 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	2105      	movs	r1, #5
 800a0ba:	200e      	movs	r0, #14
 800a0bc:	f7f6 fb9e 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800a0c0:	200e      	movs	r0, #14
 800a0c2:	f7f6 fbb7 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2105      	movs	r1, #5
 800a0ca:	200f      	movs	r0, #15
 800a0cc:	f7f6 fb96 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800a0d0:	200f      	movs	r0, #15
 800a0d2:	f7f6 fbaf 	bl	8000834 <HAL_NVIC_EnableIRQ>

}
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	40021000 	.word	0x40021000

0800a0e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08a      	sub	sp, #40	; 0x28
 800a0e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0ea:	f107 0314 	add.w	r3, r7, #20
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	605a      	str	r2, [r3, #4]
 800a0f4:	609a      	str	r2, [r3, #8]
 800a0f6:	60da      	str	r2, [r3, #12]
 800a0f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a0fa:	4b3c      	ldr	r3, [pc, #240]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0fe:	4a3b      	ldr	r2, [pc, #236]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a100:	f043 0304 	orr.w	r3, r3, #4
 800a104:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a106:	4b39      	ldr	r3, [pc, #228]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a10a:	f003 0304 	and.w	r3, r3, #4
 800a10e:	613b      	str	r3, [r7, #16]
 800a110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a112:	4b36      	ldr	r3, [pc, #216]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a116:	4a35      	ldr	r2, [pc, #212]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a118:	f043 0301 	orr.w	r3, r3, #1
 800a11c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a11e:	4b33      	ldr	r3, [pc, #204]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a12a:	4b30      	ldr	r3, [pc, #192]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a12c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a12e:	4a2f      	ldr	r2, [pc, #188]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a130:	f043 0310 	orr.w	r3, r3, #16
 800a134:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a136:	4b2d      	ldr	r3, [pc, #180]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a13a:	f003 0310 	and.w	r3, r3, #16
 800a13e:	60bb      	str	r3, [r7, #8]
 800a140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a142:	4b2a      	ldr	r3, [pc, #168]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a146:	4a29      	ldr	r2, [pc, #164]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a148:	f043 0302 	orr.w	r3, r3, #2
 800a14c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a14e:	4b27      	ldr	r3, [pc, #156]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a152:	f003 0302 	and.w	r3, r3, #2
 800a156:	607b      	str	r3, [r7, #4]
 800a158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a15a:	4b24      	ldr	r3, [pc, #144]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a15e:	4a23      	ldr	r2, [pc, #140]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a160:	f043 0308 	orr.w	r3, r3, #8
 800a164:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a166:	4b21      	ldr	r3, [pc, #132]	; (800a1ec <MX_GPIO_Init+0x108>)
 800a168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a16a:	f003 0308 	and.w	r3, r3, #8
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800a172:	2200      	movs	r2, #0
 800a174:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a178:	481d      	ldr	r0, [pc, #116]	; (800a1f0 <MX_GPIO_Init+0x10c>)
 800a17a:	f7f8 f90f 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUEBUTTON_Pin */
  GPIO_InitStruct.Pin = BLUEBUTTON_Pin;
 800a17e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a184:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a18a:	2300      	movs	r3, #0
 800a18c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUEBUTTON_GPIO_Port, &GPIO_InitStruct);
 800a18e:	f107 0314 	add.w	r3, r7, #20
 800a192:	4619      	mov	r1, r3
 800a194:	4817      	ldr	r0, [pc, #92]	; (800a1f4 <MX_GPIO_Init+0x110>)
 800a196:	f7f7 ff57 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800a19a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a19e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800a1ac:	f107 0314 	add.w	r3, r7, #20
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	480f      	ldr	r0, [pc, #60]	; (800a1f0 <MX_GPIO_Init+0x10c>)
 800a1b4:	f7f7 ff48 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a1b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a1be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a1c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a1c8:	f107 0314 	add.w	r3, r7, #20
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	480a      	ldr	r0, [pc, #40]	; (800a1f8 <MX_GPIO_Init+0x114>)
 800a1d0:	f7f7 ff3a 	bl	8002048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2105      	movs	r1, #5
 800a1d8:	2028      	movs	r0, #40	; 0x28
 800a1da:	f7f6 fb0f 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a1de:	2028      	movs	r0, #40	; 0x28
 800a1e0:	f7f6 fb28 	bl	8000834 <HAL_NVIC_EnableIRQ>

}
 800a1e4:	bf00      	nop
 800a1e6:	3728      	adds	r7, #40	; 0x28
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	40021000 	.word	0x40021000
 800a1f0:	48000400 	.word	0x48000400
 800a1f4:	48000800 	.word	0x48000800
 800a1f8:	48000c00 	.word	0x48000c00

0800a1fc <read_char_morse>:
    VL53L0X_GetPalErrorString(status, buffer);
    printf("API Status: %i : %s\n", status, buffer);
}

void read_char_morse() // reads a single ascii character (multiple morse codes)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
	int mode = 0; // 0=not started reading. 1=reading(waiting for hand to leave sensor). 2=waiting for additional morse code
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
	int i = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	60bb      	str	r3, [r7, #8]
	int counter = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	607b      	str	r3, [r7, #4]
	while(1)
	{
		  status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice, &rangeData);
 800a20e:	4b2d      	ldr	r3, [pc, #180]	; (800a2c4 <read_char_morse+0xc8>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	492d      	ldr	r1, [pc, #180]	; (800a2c8 <read_char_morse+0xcc>)
 800a214:	4618      	mov	r0, r3
 800a216:	f002 fe81 	bl	800cf1c <VL53L0X_PerformSingleRangingMeasurement>
 800a21a:	4603      	mov	r3, r0
 800a21c:	461a      	mov	r2, r3
 800a21e:	4b2b      	ldr	r3, [pc, #172]	; (800a2cc <read_char_morse+0xd0>)
 800a220:	701a      	strb	r2, [r3, #0]
		  distance_output = pRangeData->RangeMilliMeter;
 800a222:	4b2b      	ldr	r3, [pc, #172]	; (800a2d0 <read_char_morse+0xd4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	891a      	ldrh	r2, [r3, #8]
 800a228:	4b2a      	ldr	r3, [pc, #168]	; (800a2d4 <read_char_morse+0xd8>)
 800a22a:	801a      	strh	r2, [r3, #0]
		  if (distance_output>THRES_DISTANCE)
 800a22c:	4b29      	ldr	r3, [pc, #164]	; (800a2d4 <read_char_morse+0xd8>)
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	2b64      	cmp	r3, #100	; 0x64
 800a232:	d924      	bls.n	800a27e <read_char_morse+0x82>
		  {
			  if (mode==1){
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b01      	cmp	r3, #1
 800a238:	d112      	bne.n	800a260 <read_char_morse+0x64>
				  mode = 2;
 800a23a:	2302      	movs	r3, #2
 800a23c:	60fb      	str	r3, [r7, #12]
				  morse[i] = (counter>=DURATION_THRES) ? '-' : '.';
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b07      	cmp	r3, #7
 800a242:	dd01      	ble.n	800a248 <read_char_morse+0x4c>
 800a244:	212d      	movs	r1, #45	; 0x2d
 800a246:	e000      	b.n	800a24a <read_char_morse+0x4e>
 800a248:	212e      	movs	r1, #46	; 0x2e
 800a24a:	4a23      	ldr	r2, [pc, #140]	; (800a2d8 <read_char_morse+0xdc>)
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	4413      	add	r3, r2
 800a250:	460a      	mov	r2, r1
 800a252:	701a      	strb	r2, [r3, #0]
				  i++;
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	3301      	adds	r3, #1
 800a258:	60bb      	str	r3, [r7, #8]
				  counter = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	607b      	str	r3, [r7, #4]
 800a25e:	e028      	b.n	800a2b2 <read_char_morse+0xb6>
			  } else if (mode==2){
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2b02      	cmp	r3, #2
 800a264:	d125      	bne.n	800a2b2 <read_char_morse+0xb6>
				  counter++;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	3301      	adds	r3, #1
 800a26a:	607b      	str	r3, [r7, #4]
				  if (counter>14){
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b0e      	cmp	r3, #14
 800a270:	dd1f      	ble.n	800a2b2 <read_char_morse+0xb6>
					  morse[i]='\0';
 800a272:	4a19      	ldr	r2, [pc, #100]	; (800a2d8 <read_char_morse+0xdc>)
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	4413      	add	r3, r2
 800a278:	2200      	movs	r2, #0
 800a27a:	701a      	strb	r2, [r3, #0]
					  break;
 800a27c:	e01d      	b.n	800a2ba <read_char_morse+0xbe>
				  }
			  }


		  } else  if (distance_output<THRES_DISTANCE && (mode==0||mode==2)) {
 800a27e:	4b15      	ldr	r3, [pc, #84]	; (800a2d4 <read_char_morse+0xd8>)
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	2b63      	cmp	r3, #99	; 0x63
 800a284:	d80b      	bhi.n	800a29e <read_char_morse+0xa2>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <read_char_morse+0x96>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d105      	bne.n	800a29e <read_char_morse+0xa2>
			  counter++;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3301      	adds	r3, #1
 800a296:	607b      	str	r3, [r7, #4]
			  mode = 1;
 800a298:	2301      	movs	r3, #1
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	e009      	b.n	800a2b2 <read_char_morse+0xb6>
		  } else if (distance_output<THRES_DISTANCE && mode==1) {
 800a29e:	4b0d      	ldr	r3, [pc, #52]	; (800a2d4 <read_char_morse+0xd8>)
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	2b63      	cmp	r3, #99	; 0x63
 800a2a4:	d805      	bhi.n	800a2b2 <read_char_morse+0xb6>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d102      	bne.n	800a2b2 <read_char_morse+0xb6>
			  counter++;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	607b      	str	r3, [r7, #4]
		  }
		  HAL_Delay(WAITTIME);
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	f7f6 f9c6 	bl	8000644 <HAL_Delay>
		  status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice, &rangeData);
 800a2b8:	e7a9      	b.n	800a20e <read_char_morse+0x12>
	}



}
 800a2ba:	bf00      	nop
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	2000009c 	.word	0x2000009c
 800a2c8:	2000196c 	.word	0x2000196c
 800a2cc:	20001960 	.word	0x20001960
 800a2d0:	200000a0 	.word	0x200000a0
 800a2d4:	200000a4 	.word	0x200000a4
 800a2d8:	20001988 	.word	0x20001988

0800a2dc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	80fb      	strh	r3, [r7, #6]
//	}
//    sprintf(buff, "Board\n\r");
//    HAL_UART_Transmit_DMA(&huart1, &buff, strlen(buff));

//
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	481a      	ldr	r0, [pc, #104]	; (800a354 <HAL_GPIO_EXTI_Callback+0x78>)
 800a2ea:	f7f6 fb9f 	bl	8000a2c <HAL_DAC_Stop_DMA>
	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 800a2ee:	481a      	ldr	r0, [pc, #104]	; (800a358 <HAL_GPIO_EXTI_Callback+0x7c>)
 800a2f0:	f7f7 f8ae 	bl	8001450 <HAL_DFSDM_FilterRegularStop_DMA>
	for (int i = 0; i < 50000 ; i++){
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	e007      	b.n	800a30a <HAL_GPIO_EXTI_Callback+0x2e>
		arrayOne[i] = (int32_t)0;
 800a2fa:	4a18      	ldr	r2, [pc, #96]	; (800a35c <HAL_GPIO_EXTI_Callback+0x80>)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2100      	movs	r1, #0
 800a300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 50000 ; i++){
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	3301      	adds	r3, #1
 800a308:	60fb      	str	r3, [r7, #12]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800a310:	4293      	cmp	r3, r2
 800a312:	ddf2      	ble.n	800a2fa <HAL_GPIO_EXTI_Callback+0x1e>
	}
	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, &arrayOne, 50000);
 800a314:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a318:	4910      	ldr	r1, [pc, #64]	; (800a35c <HAL_GPIO_EXTI_Callback+0x80>)
 800a31a:	480f      	ldr	r0, [pc, #60]	; (800a358 <HAL_GPIO_EXTI_Callback+0x7c>)
 800a31c:	f7f7 f816 	bl	800134c <HAL_DFSDM_FilterRegularStart_DMA>

	if(HAL_GPIO_ReadPin(GPIOB, LED_Pin) == GPIO_PIN_SET) {
 800a320:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a324:	480e      	ldr	r0, [pc, #56]	; (800a360 <HAL_GPIO_EXTI_Callback+0x84>)
 800a326:	f7f8 f821 	bl	800236c <HAL_GPIO_ReadPin>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d106      	bne.n	800a33e <HAL_GPIO_EXTI_Callback+0x62>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 800a330:	2200      	movs	r2, #0
 800a332:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a336:	480a      	ldr	r0, [pc, #40]	; (800a360 <HAL_GPIO_EXTI_Callback+0x84>)
 800a338:	f7f8 f830 	bl	800239c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
	}

}
 800a33c:	e005      	b.n	800a34a <HAL_GPIO_EXTI_Callback+0x6e>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 800a33e:	2201      	movs	r2, #1
 800a340:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a344:	4806      	ldr	r0, [pc, #24]	; (800a360 <HAL_GPIO_EXTI_Callback+0x84>)
 800a346:	f7f8 f829 	bl	800239c <HAL_GPIO_WritePin>
}
 800a34a:	bf00      	nop
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20001370 	.word	0x20001370
 800a358:	200013e4 	.word	0x200013e4
 800a35c:	200019a0 	.word	0x200019a0
 800a360:	48000400 	.word	0x48000400

0800a364 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
	interruptFlag = 1;
 800a36c:	4b05      	ldr	r3, [pc, #20]	; (800a384 <HAL_UART_RxCpltCallback+0x20>)
 800a36e:	2201      	movs	r2, #1
 800a370:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, UART2_rxBuffer, 1);
 800a372:	2201      	movs	r2, #1
 800a374:	4904      	ldr	r1, [pc, #16]	; (800a388 <HAL_UART_RxCpltCallback+0x24>)
 800a376:	4805      	ldr	r0, [pc, #20]	; (800a38c <HAL_UART_RxCpltCallback+0x28>)
 800a378:	f7fc f8a0 	bl	80064bc <HAL_UART_Receive_IT>

}
 800a37c:	bf00      	nop
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	2000199c 	.word	0x2000199c
 800a388:	2004ad84 	.word	0x2004ad84
 800a38c:	20001620 	.word	0x20001620

0800a390 <HAL_DFSDM_FilterRegConvCpltCallback>:
//
void HAL_DFSDM_FilterRegConvCpltCallback (DFSDM_Filter_HandleTypeDef * hdfsdm_filter) {
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < 50000 ; i++){
 800a398:	2300      	movs	r3, #0
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	e024      	b.n	800a3e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x58>

		micValue = arrayOne[i];
 800a39e:	4a1e      	ldr	r2, [pc, #120]	; (800a418 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3a6:	4a1d      	ldr	r2, [pc, #116]	; (800a41c <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 800a3a8:	6013      	str	r3, [r2, #0]

		int32_t temp = arrayOne[i] >> 8;
 800a3aa:	4a1b      	ldr	r2, [pc, #108]	; (800a418 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3b2:	121b      	asrs	r3, r3, #8
 800a3b4:	60bb      	str	r3, [r7, #8]
//		if(temp < -30000) { temp = -30000; }
//		else if(temp > 30000) { temp = 30000; }
		temp = (temp/256)/*max here is 32768*/ + 32768; // total max is 65536 <= 2^16 for 16 bits.
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	da00      	bge.n	800a3be <HAL_DFSDM_FilterRegConvCpltCallback+0x2e>
 800a3bc:	33ff      	adds	r3, #255	; 0xff
 800a3be:	121b      	asrs	r3, r3, #8
 800a3c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a3c4:	60bb      	str	r3, [r7, #8]

		forDac[i] = (uint16_t)((int16_t)(arrayOne[i] >> 8) + 32748);
 800a3c6:	4a14      	ldr	r2, [pc, #80]	; (800a418 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3ce:	121b      	asrs	r3, r3, #8
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800a3d6:	336c      	adds	r3, #108	; 0x6c
 800a3d8:	b299      	uxth	r1, r3
 800a3da:	4a11      	ldr	r2, [pc, #68]	; (800a420 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 50000 ; i++){
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	ddd5      	ble.n	800a39e <HAL_DFSDM_FilterRegConvCpltCallback+0xe>

		//dacValue = (uint16_t) temp;
	}


	BSP_QSPI_Erase_Block(0x330000);
 800a3f2:	f44f 104c 	mov.w	r0, #3342336	; 0x330000
 800a3f6:	f000 fbed 	bl	800abd4 <BSP_QSPI_Erase_Block>
	if (BSP_QSPI_Write(&forDac, 0x330000, 100000) != QSPI_OK) Error_Handler();
 800a3fa:	4a0a      	ldr	r2, [pc, #40]	; (800a424 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 800a3fc:	f44f 114c 	mov.w	r1, #3342336	; 0x330000
 800a400:	4807      	ldr	r0, [pc, #28]	; (800a420 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 800a402:	f000 fb61 	bl	800aac8 <BSP_QSPI_Write>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <HAL_DFSDM_FilterRegConvCpltCallback+0x80>
 800a40c:	f000 fb04 	bl	800aa18 <Error_Handler>

//	if (BSP_QSPI_Read(&forDac, 0x210000, 100000) != 0) Error_Handler();
//	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);

}
 800a410:	bf00      	nop
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	200019a0 	.word	0x200019a0
 800a41c:	2004ad80 	.word	0x2004ad80
 800a420:	200326e0 	.word	0x200326e0
 800a424:	000186a0 	.word	0x000186a0

0800a428 <StartReceivingTerminal>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceivingTerminal */
void StartReceivingTerminal(void const * argument)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b088      	sub	sp, #32
 800a42c:	af02      	add	r7, sp, #8
 800a42e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a430:	2001      	movs	r0, #1
 800a432:	f7fe f846 	bl	80084c2 <osDelay>
    if (interruptFlag == 1) {
 800a436:	4b18      	ldr	r3, [pc, #96]	; (800a498 <StartReceivingTerminal+0x70>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d1f8      	bne.n	800a430 <StartReceivingTerminal+0x8>
    	HAL_UART_Transmit(&huart1, UART2_rxBuffer, 1, 100);
 800a43e:	2364      	movs	r3, #100	; 0x64
 800a440:	2201      	movs	r2, #1
 800a442:	4916      	ldr	r1, [pc, #88]	; (800a49c <StartReceivingTerminal+0x74>)
 800a444:	4816      	ldr	r0, [pc, #88]	; (800a4a0 <StartReceivingTerminal+0x78>)
 800a446:	f7fb ffa1 	bl	800638c <HAL_UART_Transmit>
    	char* morse[1];
    	morse[0] = morseBuffer;
 800a44a:	4b16      	ldr	r3, [pc, #88]	; (800a4a4 <StartReceivingTerminal+0x7c>)
 800a44c:	60fb      	str	r3, [r7, #12]
    	//convertMorseToText(array, ascii_char, 1);
    	convertTextToMorse(UART2_rxBuffer, morse, 1);
 800a44e:	f107 030c 	add.w	r3, r7, #12
 800a452:	2201      	movs	r2, #1
 800a454:	4619      	mov	r1, r3
 800a456:	4811      	ldr	r0, [pc, #68]	; (800a49c <StartReceivingTerminal+0x74>)
 800a458:	f7ff fa84 	bl	8009964 <convertTextToMorse>
    	i = morse[0];
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4a12      	ldr	r2, [pc, #72]	; (800a4a8 <StartReceivingTerminal+0x80>)
 800a460:	6013      	str	r3, [r2, #0]
    	//HAL_UART_Transmit(&huart1, morse, strlen(morse), 100);

    	for(int x = 0; x < strlen(*(morse)); x++) {
 800a462:	2300      	movs	r3, #0
 800a464:	617b      	str	r3, [r7, #20]
 800a466:	e041      	b.n	800a4ec <StartReceivingTerminal+0xc4>
    		char m = (*(morse))[x];
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	4413      	add	r3, r2
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	74bb      	strb	r3, [r7, #18]

    		if(strcmp(m, '-') == 0) {
 800a472:	7cbb      	ldrb	r3, [r7, #18]
 800a474:	212d      	movs	r1, #45	; 0x2d
 800a476:	4618      	mov	r0, r3
 800a478:	f7f5 fec2 	bl	8000200 <strcmp>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d116      	bne.n	800a4b0 <StartReceivingTerminal+0x88>
    			HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 800a482:	2201      	movs	r2, #1
 800a484:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a488:	4808      	ldr	r0, [pc, #32]	; (800a4ac <StartReceivingTerminal+0x84>)
 800a48a:	f7f7 ff87 	bl	800239c <HAL_GPIO_WritePin>
    			osDelay(1500);
 800a48e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800a492:	f7fe f816 	bl	80084c2 <osDelay>
 800a496:	e01d      	b.n	800a4d4 <StartReceivingTerminal+0xac>
 800a498:	2000199c 	.word	0x2000199c
 800a49c:	2004ad84 	.word	0x2004ad84
 800a4a0:	20001620 	.word	0x20001620
 800a4a4:	20001990 	.word	0x20001990
 800a4a8:	20001998 	.word	0x20001998
 800a4ac:	48000400 	.word	0x48000400
    		} else if(strcmp(m, '.') == 0) {
 800a4b0:	7cbb      	ldrb	r3, [r7, #18]
 800a4b2:	212e      	movs	r1, #46	; 0x2e
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7f5 fea3 	bl	8000200 <strcmp>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d109      	bne.n	800a4d4 <StartReceivingTerminal+0xac>
    			HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a4c6:	48aa      	ldr	r0, [pc, #680]	; (800a770 <StartReceivingTerminal+0x348>)
 800a4c8:	f7f7 ff68 	bl	800239c <HAL_GPIO_WritePin>
    			osDelay(700);
 800a4cc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800a4d0:	f7fd fff7 	bl	80084c2 <osDelay>
    		}
    		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a4da:	48a5      	ldr	r0, [pc, #660]	; (800a770 <StartReceivingTerminal+0x348>)
 800a4dc:	f7f7 ff5e 	bl	800239c <HAL_GPIO_WritePin>
    		osDelay(200);
 800a4e0:	20c8      	movs	r0, #200	; 0xc8
 800a4e2:	f7fd ffee 	bl	80084c2 <osDelay>
    	for(int x = 0; x < strlen(*(morse)); x++) {
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	617b      	str	r3, [r7, #20]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7f5 fe90 	bl	8000214 <strlen>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d8b5      	bhi.n	800a468 <StartReceivingTerminal+0x40>
    	}

    	// read out loud the passed letter to DAC
    	char toRead = tolower(UART2_rxBuffer);
 800a4fc:	489d      	ldr	r0, [pc, #628]	; (800a774 <StartReceivingTerminal+0x34c>)
 800a4fe:	f006 f809 	bl	8010514 <tolower>
 800a502:	4603      	mov	r3, r0
 800a504:	74fb      	strb	r3, [r7, #19]
//    	int offset = toRead - 'a';
    	if (toRead == 'a'){
 800a506:	7cfb      	ldrb	r3, [r7, #19]
 800a508:	2b61      	cmp	r3, #97	; 0x61
 800a50a:	d111      	bne.n	800a530 <StartReceivingTerminal+0x108>
			if (BSP_QSPI_Read(&forDac, 0x000000, 100000) != 0) Error_Handler();
 800a50c:	4a9a      	ldr	r2, [pc, #616]	; (800a778 <StartReceivingTerminal+0x350>)
 800a50e:	2100      	movs	r1, #0
 800a510:	489a      	ldr	r0, [pc, #616]	; (800a77c <StartReceivingTerminal+0x354>)
 800a512:	f000 fa87 	bl	800aa24 <BSP_QSPI_Read>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <StartReceivingTerminal+0xf8>
 800a51c:	f000 fa7c 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a520:	2300      	movs	r3, #0
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	4b94      	ldr	r3, [pc, #592]	; (800a778 <StartReceivingTerminal+0x350>)
 800a526:	4a95      	ldr	r2, [pc, #596]	; (800a77c <StartReceivingTerminal+0x354>)
 800a528:	2100      	movs	r1, #0
 800a52a:	4895      	ldr	r0, [pc, #596]	; (800a780 <StartReceivingTerminal+0x358>)
 800a52c:	f7f6 f9b2 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'b'){
 800a530:	7cfb      	ldrb	r3, [r7, #19]
 800a532:	2b62      	cmp	r3, #98	; 0x62
 800a534:	d112      	bne.n	800a55c <StartReceivingTerminal+0x134>
			if (BSP_QSPI_Read(&forDac, 0x020000, 100000) != 0) Error_Handler();
 800a536:	4a90      	ldr	r2, [pc, #576]	; (800a778 <StartReceivingTerminal+0x350>)
 800a538:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800a53c:	488f      	ldr	r0, [pc, #572]	; (800a77c <StartReceivingTerminal+0x354>)
 800a53e:	f000 fa71 	bl	800aa24 <BSP_QSPI_Read>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <StartReceivingTerminal+0x124>
 800a548:	f000 fa66 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a54c:	2300      	movs	r3, #0
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	4b89      	ldr	r3, [pc, #548]	; (800a778 <StartReceivingTerminal+0x350>)
 800a552:	4a8a      	ldr	r2, [pc, #552]	; (800a77c <StartReceivingTerminal+0x354>)
 800a554:	2100      	movs	r1, #0
 800a556:	488a      	ldr	r0, [pc, #552]	; (800a780 <StartReceivingTerminal+0x358>)
 800a558:	f7f6 f99c 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'c'){
 800a55c:	7cfb      	ldrb	r3, [r7, #19]
 800a55e:	2b63      	cmp	r3, #99	; 0x63
 800a560:	d112      	bne.n	800a588 <StartReceivingTerminal+0x160>
			if (BSP_QSPI_Read(&forDac, 0x040000, 100000) != 0) Error_Handler();
 800a562:	4a85      	ldr	r2, [pc, #532]	; (800a778 <StartReceivingTerminal+0x350>)
 800a564:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800a568:	4884      	ldr	r0, [pc, #528]	; (800a77c <StartReceivingTerminal+0x354>)
 800a56a:	f000 fa5b 	bl	800aa24 <BSP_QSPI_Read>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d001      	beq.n	800a578 <StartReceivingTerminal+0x150>
 800a574:	f000 fa50 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a578:	2300      	movs	r3, #0
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	4b7e      	ldr	r3, [pc, #504]	; (800a778 <StartReceivingTerminal+0x350>)
 800a57e:	4a7f      	ldr	r2, [pc, #508]	; (800a77c <StartReceivingTerminal+0x354>)
 800a580:	2100      	movs	r1, #0
 800a582:	487f      	ldr	r0, [pc, #508]	; (800a780 <StartReceivingTerminal+0x358>)
 800a584:	f7f6 f986 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'd'){
 800a588:	7cfb      	ldrb	r3, [r7, #19]
 800a58a:	2b64      	cmp	r3, #100	; 0x64
 800a58c:	d112      	bne.n	800a5b4 <StartReceivingTerminal+0x18c>
			if (BSP_QSPI_Read(&forDac, 0x060000, 100000) != 0) Error_Handler();
 800a58e:	4a7a      	ldr	r2, [pc, #488]	; (800a778 <StartReceivingTerminal+0x350>)
 800a590:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800a594:	4879      	ldr	r0, [pc, #484]	; (800a77c <StartReceivingTerminal+0x354>)
 800a596:	f000 fa45 	bl	800aa24 <BSP_QSPI_Read>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <StartReceivingTerminal+0x17c>
 800a5a0:	f000 fa3a 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	4b73      	ldr	r3, [pc, #460]	; (800a778 <StartReceivingTerminal+0x350>)
 800a5aa:	4a74      	ldr	r2, [pc, #464]	; (800a77c <StartReceivingTerminal+0x354>)
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	4874      	ldr	r0, [pc, #464]	; (800a780 <StartReceivingTerminal+0x358>)
 800a5b0:	f7f6 f970 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'e'){
 800a5b4:	7cfb      	ldrb	r3, [r7, #19]
 800a5b6:	2b65      	cmp	r3, #101	; 0x65
 800a5b8:	d112      	bne.n	800a5e0 <StartReceivingTerminal+0x1b8>
			if (BSP_QSPI_Read(&forDac, 0x080000, 100000) != 0) Error_Handler();
 800a5ba:	4a6f      	ldr	r2, [pc, #444]	; (800a778 <StartReceivingTerminal+0x350>)
 800a5bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a5c0:	486e      	ldr	r0, [pc, #440]	; (800a77c <StartReceivingTerminal+0x354>)
 800a5c2:	f000 fa2f 	bl	800aa24 <BSP_QSPI_Read>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <StartReceivingTerminal+0x1a8>
 800a5cc:	f000 fa24 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	4b68      	ldr	r3, [pc, #416]	; (800a778 <StartReceivingTerminal+0x350>)
 800a5d6:	4a69      	ldr	r2, [pc, #420]	; (800a77c <StartReceivingTerminal+0x354>)
 800a5d8:	2100      	movs	r1, #0
 800a5da:	4869      	ldr	r0, [pc, #420]	; (800a780 <StartReceivingTerminal+0x358>)
 800a5dc:	f7f6 f95a 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'f'){
 800a5e0:	7cfb      	ldrb	r3, [r7, #19]
 800a5e2:	2b66      	cmp	r3, #102	; 0x66
 800a5e4:	d112      	bne.n	800a60c <StartReceivingTerminal+0x1e4>
			if (BSP_QSPI_Read(&forDac, 0x0A0000, 100000) != 0) Error_Handler();
 800a5e6:	4a64      	ldr	r2, [pc, #400]	; (800a778 <StartReceivingTerminal+0x350>)
 800a5e8:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800a5ec:	4863      	ldr	r0, [pc, #396]	; (800a77c <StartReceivingTerminal+0x354>)
 800a5ee:	f000 fa19 	bl	800aa24 <BSP_QSPI_Read>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <StartReceivingTerminal+0x1d4>
 800a5f8:	f000 fa0e 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	4b5d      	ldr	r3, [pc, #372]	; (800a778 <StartReceivingTerminal+0x350>)
 800a602:	4a5e      	ldr	r2, [pc, #376]	; (800a77c <StartReceivingTerminal+0x354>)
 800a604:	2100      	movs	r1, #0
 800a606:	485e      	ldr	r0, [pc, #376]	; (800a780 <StartReceivingTerminal+0x358>)
 800a608:	f7f6 f944 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'g'){
 800a60c:	7cfb      	ldrb	r3, [r7, #19]
 800a60e:	2b67      	cmp	r3, #103	; 0x67
 800a610:	d112      	bne.n	800a638 <StartReceivingTerminal+0x210>
			if (BSP_QSPI_Read(&forDac, 0x0C0000, 100000) != 0) Error_Handler();
 800a612:	4a59      	ldr	r2, [pc, #356]	; (800a778 <StartReceivingTerminal+0x350>)
 800a614:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800a618:	4858      	ldr	r0, [pc, #352]	; (800a77c <StartReceivingTerminal+0x354>)
 800a61a:	f000 fa03 	bl	800aa24 <BSP_QSPI_Read>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <StartReceivingTerminal+0x200>
 800a624:	f000 f9f8 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a628:	2300      	movs	r3, #0
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	4b52      	ldr	r3, [pc, #328]	; (800a778 <StartReceivingTerminal+0x350>)
 800a62e:	4a53      	ldr	r2, [pc, #332]	; (800a77c <StartReceivingTerminal+0x354>)
 800a630:	2100      	movs	r1, #0
 800a632:	4853      	ldr	r0, [pc, #332]	; (800a780 <StartReceivingTerminal+0x358>)
 800a634:	f7f6 f92e 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'h'){
 800a638:	7cfb      	ldrb	r3, [r7, #19]
 800a63a:	2b68      	cmp	r3, #104	; 0x68
 800a63c:	d112      	bne.n	800a664 <StartReceivingTerminal+0x23c>
			if (BSP_QSPI_Read(&forDac, 0x0E0000, 100000) != 0) Error_Handler();
 800a63e:	4a4e      	ldr	r2, [pc, #312]	; (800a778 <StartReceivingTerminal+0x350>)
 800a640:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800a644:	484d      	ldr	r0, [pc, #308]	; (800a77c <StartReceivingTerminal+0x354>)
 800a646:	f000 f9ed 	bl	800aa24 <BSP_QSPI_Read>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <StartReceivingTerminal+0x22c>
 800a650:	f000 f9e2 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a654:	2300      	movs	r3, #0
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	4b47      	ldr	r3, [pc, #284]	; (800a778 <StartReceivingTerminal+0x350>)
 800a65a:	4a48      	ldr	r2, [pc, #288]	; (800a77c <StartReceivingTerminal+0x354>)
 800a65c:	2100      	movs	r1, #0
 800a65e:	4848      	ldr	r0, [pc, #288]	; (800a780 <StartReceivingTerminal+0x358>)
 800a660:	f7f6 f918 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'i'){
 800a664:	7cfb      	ldrb	r3, [r7, #19]
 800a666:	2b69      	cmp	r3, #105	; 0x69
 800a668:	d112      	bne.n	800a690 <StartReceivingTerminal+0x268>
			if (BSP_QSPI_Read(&forDac, 0x100000, 100000) != 0) Error_Handler();
 800a66a:	4a43      	ldr	r2, [pc, #268]	; (800a778 <StartReceivingTerminal+0x350>)
 800a66c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800a670:	4842      	ldr	r0, [pc, #264]	; (800a77c <StartReceivingTerminal+0x354>)
 800a672:	f000 f9d7 	bl	800aa24 <BSP_QSPI_Read>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <StartReceivingTerminal+0x258>
 800a67c:	f000 f9cc 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a680:	2300      	movs	r3, #0
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	4b3c      	ldr	r3, [pc, #240]	; (800a778 <StartReceivingTerminal+0x350>)
 800a686:	4a3d      	ldr	r2, [pc, #244]	; (800a77c <StartReceivingTerminal+0x354>)
 800a688:	2100      	movs	r1, #0
 800a68a:	483d      	ldr	r0, [pc, #244]	; (800a780 <StartReceivingTerminal+0x358>)
 800a68c:	f7f6 f902 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'j'){
 800a690:	7cfb      	ldrb	r3, [r7, #19]
 800a692:	2b6a      	cmp	r3, #106	; 0x6a
 800a694:	d112      	bne.n	800a6bc <StartReceivingTerminal+0x294>
			if (BSP_QSPI_Read(&forDac, 0x120000, 100000) != 0) Error_Handler();
 800a696:	4a38      	ldr	r2, [pc, #224]	; (800a778 <StartReceivingTerminal+0x350>)
 800a698:	f44f 1190 	mov.w	r1, #1179648	; 0x120000
 800a69c:	4837      	ldr	r0, [pc, #220]	; (800a77c <StartReceivingTerminal+0x354>)
 800a69e:	f000 f9c1 	bl	800aa24 <BSP_QSPI_Read>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <StartReceivingTerminal+0x284>
 800a6a8:	f000 f9b6 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	4b31      	ldr	r3, [pc, #196]	; (800a778 <StartReceivingTerminal+0x350>)
 800a6b2:	4a32      	ldr	r2, [pc, #200]	; (800a77c <StartReceivingTerminal+0x354>)
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	4832      	ldr	r0, [pc, #200]	; (800a780 <StartReceivingTerminal+0x358>)
 800a6b8:	f7f6 f8ec 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'k'){
 800a6bc:	7cfb      	ldrb	r3, [r7, #19]
 800a6be:	2b6b      	cmp	r3, #107	; 0x6b
 800a6c0:	d112      	bne.n	800a6e8 <StartReceivingTerminal+0x2c0>
			if (BSP_QSPI_Read(&forDac, 0x140000, 100000) != 0) Error_Handler();
 800a6c2:	4a2d      	ldr	r2, [pc, #180]	; (800a778 <StartReceivingTerminal+0x350>)
 800a6c4:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800a6c8:	482c      	ldr	r0, [pc, #176]	; (800a77c <StartReceivingTerminal+0x354>)
 800a6ca:	f000 f9ab 	bl	800aa24 <BSP_QSPI_Read>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <StartReceivingTerminal+0x2b0>
 800a6d4:	f000 f9a0 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	4b26      	ldr	r3, [pc, #152]	; (800a778 <StartReceivingTerminal+0x350>)
 800a6de:	4a27      	ldr	r2, [pc, #156]	; (800a77c <StartReceivingTerminal+0x354>)
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	4827      	ldr	r0, [pc, #156]	; (800a780 <StartReceivingTerminal+0x358>)
 800a6e4:	f7f6 f8d6 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'l'){
 800a6e8:	7cfb      	ldrb	r3, [r7, #19]
 800a6ea:	2b6c      	cmp	r3, #108	; 0x6c
 800a6ec:	d112      	bne.n	800a714 <StartReceivingTerminal+0x2ec>
			if (BSP_QSPI_Read(&forDac, 0x160000, 100000) != 0) Error_Handler();
 800a6ee:	4a22      	ldr	r2, [pc, #136]	; (800a778 <StartReceivingTerminal+0x350>)
 800a6f0:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800a6f4:	4821      	ldr	r0, [pc, #132]	; (800a77c <StartReceivingTerminal+0x354>)
 800a6f6:	f000 f995 	bl	800aa24 <BSP_QSPI_Read>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <StartReceivingTerminal+0x2dc>
 800a700:	f000 f98a 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a704:	2300      	movs	r3, #0
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	4b1b      	ldr	r3, [pc, #108]	; (800a778 <StartReceivingTerminal+0x350>)
 800a70a:	4a1c      	ldr	r2, [pc, #112]	; (800a77c <StartReceivingTerminal+0x354>)
 800a70c:	2100      	movs	r1, #0
 800a70e:	481c      	ldr	r0, [pc, #112]	; (800a780 <StartReceivingTerminal+0x358>)
 800a710:	f7f6 f8c0 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'm'){
 800a714:	7cfb      	ldrb	r3, [r7, #19]
 800a716:	2b6d      	cmp	r3, #109	; 0x6d
 800a718:	d112      	bne.n	800a740 <StartReceivingTerminal+0x318>
			if (BSP_QSPI_Read(&forDac, 0x180000, 100000) != 0) Error_Handler();
 800a71a:	4a17      	ldr	r2, [pc, #92]	; (800a778 <StartReceivingTerminal+0x350>)
 800a71c:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800a720:	4816      	ldr	r0, [pc, #88]	; (800a77c <StartReceivingTerminal+0x354>)
 800a722:	f000 f97f 	bl	800aa24 <BSP_QSPI_Read>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <StartReceivingTerminal+0x308>
 800a72c:	f000 f974 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a730:	2300      	movs	r3, #0
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	4b10      	ldr	r3, [pc, #64]	; (800a778 <StartReceivingTerminal+0x350>)
 800a736:	4a11      	ldr	r2, [pc, #68]	; (800a77c <StartReceivingTerminal+0x354>)
 800a738:	2100      	movs	r1, #0
 800a73a:	4811      	ldr	r0, [pc, #68]	; (800a780 <StartReceivingTerminal+0x358>)
 800a73c:	f7f6 f8aa 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'n'){
 800a740:	7cfb      	ldrb	r3, [r7, #19]
 800a742:	2b6e      	cmp	r3, #110	; 0x6e
 800a744:	d11e      	bne.n	800a784 <StartReceivingTerminal+0x35c>
			if (BSP_QSPI_Read(&forDac, 0x1A0000, 100000) != 0) Error_Handler();
 800a746:	4a0c      	ldr	r2, [pc, #48]	; (800a778 <StartReceivingTerminal+0x350>)
 800a748:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800a74c:	480b      	ldr	r0, [pc, #44]	; (800a77c <StartReceivingTerminal+0x354>)
 800a74e:	f000 f969 	bl	800aa24 <BSP_QSPI_Read>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <StartReceivingTerminal+0x334>
 800a758:	f000 f95e 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a75c:	2300      	movs	r3, #0
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	4b05      	ldr	r3, [pc, #20]	; (800a778 <StartReceivingTerminal+0x350>)
 800a762:	4a06      	ldr	r2, [pc, #24]	; (800a77c <StartReceivingTerminal+0x354>)
 800a764:	2100      	movs	r1, #0
 800a766:	4806      	ldr	r0, [pc, #24]	; (800a780 <StartReceivingTerminal+0x358>)
 800a768:	f7f6 f894 	bl	8000894 <HAL_DAC_Start_DMA>
 800a76c:	e00a      	b.n	800a784 <StartReceivingTerminal+0x35c>
 800a76e:	bf00      	nop
 800a770:	48000400 	.word	0x48000400
 800a774:	2004ad84 	.word	0x2004ad84
 800a778:	000186a0 	.word	0x000186a0
 800a77c:	200326e0 	.word	0x200326e0
 800a780:	20001370 	.word	0x20001370

    	}
    	if (toRead == 'o'){
 800a784:	7cfb      	ldrb	r3, [r7, #19]
 800a786:	2b6f      	cmp	r3, #111	; 0x6f
 800a788:	d112      	bne.n	800a7b0 <StartReceivingTerminal+0x388>
			if (BSP_QSPI_Read(&forDac, 0x1C0000, 100000) != 0) Error_Handler();
 800a78a:	4a84      	ldr	r2, [pc, #528]	; (800a99c <StartReceivingTerminal+0x574>)
 800a78c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800a790:	4883      	ldr	r0, [pc, #524]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a792:	f000 f947 	bl	800aa24 <BSP_QSPI_Read>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <StartReceivingTerminal+0x378>
 800a79c:	f000 f93c 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	4b7d      	ldr	r3, [pc, #500]	; (800a99c <StartReceivingTerminal+0x574>)
 800a7a6:	4a7e      	ldr	r2, [pc, #504]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	487e      	ldr	r0, [pc, #504]	; (800a9a4 <StartReceivingTerminal+0x57c>)
 800a7ac:	f7f6 f872 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'p'){
 800a7b0:	7cfb      	ldrb	r3, [r7, #19]
 800a7b2:	2b70      	cmp	r3, #112	; 0x70
 800a7b4:	d112      	bne.n	800a7dc <StartReceivingTerminal+0x3b4>
			if (BSP_QSPI_Read(&forDac, 0x1E0000, 100000) != 0) Error_Handler();
 800a7b6:	4a79      	ldr	r2, [pc, #484]	; (800a99c <StartReceivingTerminal+0x574>)
 800a7b8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a7bc:	4878      	ldr	r0, [pc, #480]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a7be:	f000 f931 	bl	800aa24 <BSP_QSPI_Read>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <StartReceivingTerminal+0x3a4>
 800a7c8:	f000 f926 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	4b72      	ldr	r3, [pc, #456]	; (800a99c <StartReceivingTerminal+0x574>)
 800a7d2:	4a73      	ldr	r2, [pc, #460]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	4873      	ldr	r0, [pc, #460]	; (800a9a4 <StartReceivingTerminal+0x57c>)
 800a7d8:	f7f6 f85c 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'q'){
 800a7dc:	7cfb      	ldrb	r3, [r7, #19]
 800a7de:	2b71      	cmp	r3, #113	; 0x71
 800a7e0:	d112      	bne.n	800a808 <StartReceivingTerminal+0x3e0>
			if (BSP_QSPI_Read(&forDac, 0x210000, 100000) != 0) Error_Handler();
 800a7e2:	4a6e      	ldr	r2, [pc, #440]	; (800a99c <StartReceivingTerminal+0x574>)
 800a7e4:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
 800a7e8:	486d      	ldr	r0, [pc, #436]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a7ea:	f000 f91b 	bl	800aa24 <BSP_QSPI_Read>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d001      	beq.n	800a7f8 <StartReceivingTerminal+0x3d0>
 800a7f4:	f000 f910 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	4b67      	ldr	r3, [pc, #412]	; (800a99c <StartReceivingTerminal+0x574>)
 800a7fe:	4a68      	ldr	r2, [pc, #416]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a800:	2100      	movs	r1, #0
 800a802:	4868      	ldr	r0, [pc, #416]	; (800a9a4 <StartReceivingTerminal+0x57c>)
 800a804:	f7f6 f846 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'r'){
 800a808:	7cfb      	ldrb	r3, [r7, #19]
 800a80a:	2b72      	cmp	r3, #114	; 0x72
 800a80c:	d112      	bne.n	800a834 <StartReceivingTerminal+0x40c>
			if (BSP_QSPI_Read(&forDac, 0x330000, 100000) != 0) Error_Handler();
 800a80e:	4a63      	ldr	r2, [pc, #396]	; (800a99c <StartReceivingTerminal+0x574>)
 800a810:	f44f 114c 	mov.w	r1, #3342336	; 0x330000
 800a814:	4862      	ldr	r0, [pc, #392]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a816:	f000 f905 	bl	800aa24 <BSP_QSPI_Read>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <StartReceivingTerminal+0x3fc>
 800a820:	f000 f8fa 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a824:	2300      	movs	r3, #0
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	4b5c      	ldr	r3, [pc, #368]	; (800a99c <StartReceivingTerminal+0x574>)
 800a82a:	4a5d      	ldr	r2, [pc, #372]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a82c:	2100      	movs	r1, #0
 800a82e:	485d      	ldr	r0, [pc, #372]	; (800a9a4 <StartReceivingTerminal+0x57c>)
 800a830:	f7f6 f830 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 's'){
 800a834:	7cfb      	ldrb	r3, [r7, #19]
 800a836:	2b73      	cmp	r3, #115	; 0x73
 800a838:	d112      	bne.n	800a860 <StartReceivingTerminal+0x438>
			if (BSP_QSPI_Read(&forDac, 0x230000, 100000) != 0) Error_Handler();
 800a83a:	4a58      	ldr	r2, [pc, #352]	; (800a99c <StartReceivingTerminal+0x574>)
 800a83c:	f44f 110c 	mov.w	r1, #2293760	; 0x230000
 800a840:	4857      	ldr	r0, [pc, #348]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a842:	f000 f8ef 	bl	800aa24 <BSP_QSPI_Read>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d001      	beq.n	800a850 <StartReceivingTerminal+0x428>
 800a84c:	f000 f8e4 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a850:	2300      	movs	r3, #0
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	4b51      	ldr	r3, [pc, #324]	; (800a99c <StartReceivingTerminal+0x574>)
 800a856:	4a52      	ldr	r2, [pc, #328]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a858:	2100      	movs	r1, #0
 800a85a:	4852      	ldr	r0, [pc, #328]	; (800a9a4 <StartReceivingTerminal+0x57c>)
 800a85c:	f7f6 f81a 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 't'){
 800a860:	7cfb      	ldrb	r3, [r7, #19]
 800a862:	2b74      	cmp	r3, #116	; 0x74
 800a864:	d112      	bne.n	800a88c <StartReceivingTerminal+0x464>
			if (BSP_QSPI_Read(&forDac, 0x250000, 100000) != 0) Error_Handler();
 800a866:	4a4d      	ldr	r2, [pc, #308]	; (800a99c <StartReceivingTerminal+0x574>)
 800a868:	f44f 1114 	mov.w	r1, #2424832	; 0x250000
 800a86c:	484c      	ldr	r0, [pc, #304]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a86e:	f000 f8d9 	bl	800aa24 <BSP_QSPI_Read>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <StartReceivingTerminal+0x454>
 800a878:	f000 f8ce 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a87c:	2300      	movs	r3, #0
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	4b46      	ldr	r3, [pc, #280]	; (800a99c <StartReceivingTerminal+0x574>)
 800a882:	4a47      	ldr	r2, [pc, #284]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a884:	2100      	movs	r1, #0
 800a886:	4847      	ldr	r0, [pc, #284]	; (800a9a4 <StartReceivingTerminal+0x57c>)
 800a888:	f7f6 f804 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'u'){
 800a88c:	7cfb      	ldrb	r3, [r7, #19]
 800a88e:	2b75      	cmp	r3, #117	; 0x75
 800a890:	d112      	bne.n	800a8b8 <StartReceivingTerminal+0x490>
			if (BSP_QSPI_Read(&forDac, 0x270000, 100000) != 0) Error_Handler();
 800a892:	4a42      	ldr	r2, [pc, #264]	; (800a99c <StartReceivingTerminal+0x574>)
 800a894:	f44f 111c 	mov.w	r1, #2555904	; 0x270000
 800a898:	4841      	ldr	r0, [pc, #260]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a89a:	f000 f8c3 	bl	800aa24 <BSP_QSPI_Read>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <StartReceivingTerminal+0x480>
 800a8a4:	f000 f8b8 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	4b3b      	ldr	r3, [pc, #236]	; (800a99c <StartReceivingTerminal+0x574>)
 800a8ae:	4a3c      	ldr	r2, [pc, #240]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	483c      	ldr	r0, [pc, #240]	; (800a9a4 <StartReceivingTerminal+0x57c>)
 800a8b4:	f7f5 ffee 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
    	if (toRead == 'v'){
 800a8b8:	7cfb      	ldrb	r3, [r7, #19]
 800a8ba:	2b76      	cmp	r3, #118	; 0x76
 800a8bc:	d112      	bne.n	800a8e4 <StartReceivingTerminal+0x4bc>
			if (BSP_QSPI_Read(&forDac, 0x290000, 100000) != 0) Error_Handler();
 800a8be:	4a37      	ldr	r2, [pc, #220]	; (800a99c <StartReceivingTerminal+0x574>)
 800a8c0:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
 800a8c4:	4836      	ldr	r0, [pc, #216]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a8c6:	f000 f8ad 	bl	800aa24 <BSP_QSPI_Read>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <StartReceivingTerminal+0x4ac>
 800a8d0:	f000 f8a2 	bl	800aa18 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	4b30      	ldr	r3, [pc, #192]	; (800a99c <StartReceivingTerminal+0x574>)
 800a8da:	4a31      	ldr	r2, [pc, #196]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a8dc:	2100      	movs	r1, #0
 800a8de:	4831      	ldr	r0, [pc, #196]	; (800a9a4 <StartReceivingTerminal+0x57c>)
 800a8e0:	f7f5 ffd8 	bl	8000894 <HAL_DAC_Start_DMA>

    	}
       	if (toRead == 'w'){
 800a8e4:	7cfb      	ldrb	r3, [r7, #19]
 800a8e6:	2b77      	cmp	r3, #119	; 0x77
 800a8e8:	d112      	bne.n	800a910 <StartReceivingTerminal+0x4e8>
    			if (BSP_QSPI_Read(&forDac, 0x2B0000, 100000) != 0) Error_Handler();
 800a8ea:	4a2c      	ldr	r2, [pc, #176]	; (800a99c <StartReceivingTerminal+0x574>)
 800a8ec:	f44f 112c 	mov.w	r1, #2818048	; 0x2b0000
 800a8f0:	482b      	ldr	r0, [pc, #172]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a8f2:	f000 f897 	bl	800aa24 <BSP_QSPI_Read>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <StartReceivingTerminal+0x4d8>
 800a8fc:	f000 f88c 	bl	800aa18 <Error_Handler>
    			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a900:	2300      	movs	r3, #0
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	4b25      	ldr	r3, [pc, #148]	; (800a99c <StartReceivingTerminal+0x574>)
 800a906:	4a26      	ldr	r2, [pc, #152]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a908:	2100      	movs	r1, #0
 800a90a:	4826      	ldr	r0, [pc, #152]	; (800a9a4 <StartReceivingTerminal+0x57c>)
 800a90c:	f7f5 ffc2 	bl	8000894 <HAL_DAC_Start_DMA>

		}
       	if (toRead == 'x'){
 800a910:	7cfb      	ldrb	r3, [r7, #19]
 800a912:	2b78      	cmp	r3, #120	; 0x78
 800a914:	d112      	bne.n	800a93c <StartReceivingTerminal+0x514>
    			if (BSP_QSPI_Read(&forDac, 0x2D0000, 100000) != 0) Error_Handler();
 800a916:	4a21      	ldr	r2, [pc, #132]	; (800a99c <StartReceivingTerminal+0x574>)
 800a918:	f44f 1134 	mov.w	r1, #2949120	; 0x2d0000
 800a91c:	4820      	ldr	r0, [pc, #128]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a91e:	f000 f881 	bl	800aa24 <BSP_QSPI_Read>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <StartReceivingTerminal+0x504>
 800a928:	f000 f876 	bl	800aa18 <Error_Handler>
    			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a92c:	2300      	movs	r3, #0
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	4b1a      	ldr	r3, [pc, #104]	; (800a99c <StartReceivingTerminal+0x574>)
 800a932:	4a1b      	ldr	r2, [pc, #108]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a934:	2100      	movs	r1, #0
 800a936:	481b      	ldr	r0, [pc, #108]	; (800a9a4 <StartReceivingTerminal+0x57c>)
 800a938:	f7f5 ffac 	bl	8000894 <HAL_DAC_Start_DMA>

		}
       	if (toRead == 'y'){
 800a93c:	7cfb      	ldrb	r3, [r7, #19]
 800a93e:	2b79      	cmp	r3, #121	; 0x79
 800a940:	d112      	bne.n	800a968 <StartReceivingTerminal+0x540>
    			if (BSP_QSPI_Read(&forDac, 0x2F0000, 100000) != 0) Error_Handler();
 800a942:	4a16      	ldr	r2, [pc, #88]	; (800a99c <StartReceivingTerminal+0x574>)
 800a944:	f44f 113c 	mov.w	r1, #3080192	; 0x2f0000
 800a948:	4815      	ldr	r0, [pc, #84]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a94a:	f000 f86b 	bl	800aa24 <BSP_QSPI_Read>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <StartReceivingTerminal+0x530>
 800a954:	f000 f860 	bl	800aa18 <Error_Handler>
    			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a958:	2300      	movs	r3, #0
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	4b0f      	ldr	r3, [pc, #60]	; (800a99c <StartReceivingTerminal+0x574>)
 800a95e:	4a10      	ldr	r2, [pc, #64]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a960:	2100      	movs	r1, #0
 800a962:	4810      	ldr	r0, [pc, #64]	; (800a9a4 <StartReceivingTerminal+0x57c>)
 800a964:	f7f5 ff96 	bl	8000894 <HAL_DAC_Start_DMA>

		}
       	if (toRead == 'z'){
 800a968:	7cfb      	ldrb	r3, [r7, #19]
 800a96a:	2b7a      	cmp	r3, #122	; 0x7a
 800a96c:	d112      	bne.n	800a994 <StartReceivingTerminal+0x56c>
    			if (BSP_QSPI_Read(&forDac, 0x310000, 100000) != 0) Error_Handler();
 800a96e:	4a0b      	ldr	r2, [pc, #44]	; (800a99c <StartReceivingTerminal+0x574>)
 800a970:	f44f 1144 	mov.w	r1, #3211264	; 0x310000
 800a974:	480a      	ldr	r0, [pc, #40]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a976:	f000 f855 	bl	800aa24 <BSP_QSPI_Read>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <StartReceivingTerminal+0x55c>
 800a980:	f000 f84a 	bl	800aa18 <Error_Handler>
    			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);
 800a984:	2300      	movs	r3, #0
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	4b04      	ldr	r3, [pc, #16]	; (800a99c <StartReceivingTerminal+0x574>)
 800a98a:	4a05      	ldr	r2, [pc, #20]	; (800a9a0 <StartReceivingTerminal+0x578>)
 800a98c:	2100      	movs	r1, #0
 800a98e:	4805      	ldr	r0, [pc, #20]	; (800a9a4 <StartReceivingTerminal+0x57c>)
 800a990:	f7f5 ff80 	bl	8000894 <HAL_DAC_Start_DMA>

		}


    	interruptFlag = 0;
 800a994:	4b04      	ldr	r3, [pc, #16]	; (800a9a8 <StartReceivingTerminal+0x580>)
 800a996:	2200      	movs	r2, #0
 800a998:	601a      	str	r2, [r3, #0]
    osDelay(1);
 800a99a:	e549      	b.n	800a430 <StartReceivingTerminal+0x8>
 800a99c:	000186a0 	.word	0x000186a0
 800a9a0:	200326e0 	.word	0x200326e0
 800a9a4:	20001370 	.word	0x20001370
 800a9a8:	2000199c 	.word	0x2000199c

0800a9ac <StartSideTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSideTask */
void StartSideTask(void const * argument)
{
 800a9ac:	b5b0      	push	{r4, r5, r7, lr}
 800a9ae:	b08c      	sub	sp, #48	; 0x30
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSideTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800a9b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a9b8:	f7fd fd83 	bl	80084c2 <osDelay>
    char Message[] = "Write anything on Serial Terminal\r\n";
 800a9bc:	4b0b      	ldr	r3, [pc, #44]	; (800a9ec <StartSideTask+0x40>)
 800a9be:	f107 040c 	add.w	r4, r7, #12
 800a9c2:	461d      	mov	r5, r3
 800a9c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	6023      	str	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)Message, strlen(Message), 10);
 800a9d0:	f107 030c 	add.w	r3, r7, #12
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7f5 fc1d 	bl	8000214 <strlen>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	f107 010c 	add.w	r1, r7, #12
 800a9e2:	230a      	movs	r3, #10
 800a9e4:	4802      	ldr	r0, [pc, #8]	; (800a9f0 <StartSideTask+0x44>)
 800a9e6:	f7fb fcd1 	bl	800638c <HAL_UART_Transmit>
  {
 800a9ea:	e7e3      	b.n	800a9b4 <StartSideTask+0x8>
 800a9ec:	08010f24 	.word	0x08010f24
 800a9f0:	20001620 	.word	0x20001620

0800a9f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a04      	ldr	r2, [pc, #16]	; (800aa14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d101      	bne.n	800aa0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800aa06:	f7f5 fdfd 	bl	8000604 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800aa0a:	bf00      	nop
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	40001000 	.word	0x40001000

0800aa18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800aa1c:	b672      	cpsid	i
}
 800aa1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800aa20:	e7fe      	b.n	800aa20 <Error_Handler+0x8>
	...

0800aa24 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b098      	sub	sp, #96	; 0x60
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 800aa30:	2300      	movs	r3, #0
 800aa32:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 800aa34:	2300      	movs	r3, #0
 800aa36:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 800aa38:	23eb      	movs	r3, #235	; 0xeb
 800aa3a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 800aa40:	2300      	movs	r3, #0
 800aa42:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800aa44:	2300      	movs	r3, #0
 800aa46:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 800aa4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aa50:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 800aa52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa56:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 800aa5c:	23aa      	movs	r3, #170	; 0xaa
 800aa5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 800aa60:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800aa64:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 800aa66:	2300      	movs	r3, #0
 800aa68:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 800aa6e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800aa72:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 800aa80:	2300      	movs	r3, #0
 800aa82:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800aa84:	2300      	movs	r3, #0
 800aa86:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aa88:	f107 0310 	add.w	r3, r7, #16
 800aa8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa90:	4619      	mov	r1, r3
 800aa92:	480c      	ldr	r0, [pc, #48]	; (800aac4 <BSP_QSPI_Read+0xa0>)
 800aa94:	f7f8 fae6 	bl	8003064 <HAL_OSPI_Command>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d001      	beq.n	800aaa2 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e00b      	b.n	800aaba <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aaa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaa6:	68f9      	ldr	r1, [r7, #12]
 800aaa8:	4806      	ldr	r0, [pc, #24]	; (800aac4 <BSP_QSPI_Read+0xa0>)
 800aaaa:	f7f8 fbcf 	bl	800324c <HAL_OSPI_Receive>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e000      	b.n	800aaba <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3760      	adds	r7, #96	; 0x60
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	2004ad88 	.word	0x2004ad88

0800aac8 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b09c      	sub	sp, #112	; 0x70
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800aadc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800aade:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d901      	bls.n	800aaea <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800aafa:	2300      	movs	r3, #0
 800aafc:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 800aafe:	2338      	movs	r3, #56	; 0x38
 800ab00:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800ab02:	2301      	movs	r3, #1
 800ab04:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800ab06:	2300      	movs	r3, #0
 800ab08:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 800ab0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab12:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800ab14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab18:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 800ab22:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ab26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800ab30:	2300      	movs	r3, #0
 800ab32:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ab34:	2300      	movs	r3, #0
 800ab36:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 800ab38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 800ab3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab3e:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 800ab40:	4823      	ldr	r0, [pc, #140]	; (800abd0 <BSP_QSPI_Write+0x108>)
 800ab42:	f000 f891 	bl	800ac68 <QSPI_WriteEnable>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e03b      	b.n	800abc8 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab50:	f107 0314 	add.w	r3, r7, #20
 800ab54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab58:	4619      	mov	r1, r3
 800ab5a:	481d      	ldr	r0, [pc, #116]	; (800abd0 <BSP_QSPI_Write+0x108>)
 800ab5c:	f7f8 fa82 	bl	8003064 <HAL_OSPI_Command>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e02e      	b.n	800abc8 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab6e:	68f9      	ldr	r1, [r7, #12]
 800ab70:	4817      	ldr	r0, [pc, #92]	; (800abd0 <BSP_QSPI_Write+0x108>)
 800ab72:	f7f8 faf8 	bl	8003166 <HAL_OSPI_Transmit>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e023      	b.n	800abc8 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800ab80:	f241 3188 	movw	r1, #5000	; 0x1388
 800ab84:	4812      	ldr	r0, [pc, #72]	; (800abd0 <BSP_QSPI_Write+0x108>)
 800ab86:	f000 f8cb 	bl	800ad20 <QSPI_AutoPollingMemReady>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e019      	b.n	800abc8 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800ab94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab98:	4413      	add	r3, r2
 800ab9a:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba0:	4413      	add	r3, r2
 800aba2:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 800aba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aba6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800abaa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800abac:	429a      	cmp	r2, r3
 800abae:	d203      	bcs.n	800abb8 <BSP_QSPI_Write+0xf0>
 800abb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800abb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	e001      	b.n	800abbc <BSP_QSPI_Write+0xf4>
 800abb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 800abbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800abc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d3b8      	bcc.n	800ab38 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3770      	adds	r7, #112	; 0x70
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	2004ad88 	.word	0x2004ad88

0800abd4 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b096      	sub	sp, #88	; 0x58
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800abdc:	2300      	movs	r3, #0
 800abde:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800abe0:	2300      	movs	r3, #0
 800abe2:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 800abe4:	23d8      	movs	r3, #216	; 0xd8
 800abe6:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800abe8:	2301      	movs	r3, #1
 800abea:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800abec:	2300      	movs	r3, #0
 800abee:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800abf0:	2300      	movs	r3, #0
 800abf2:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 800abf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abfc:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800abfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac02:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800ac04:	2300      	movs	r3, #0
 800ac06:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 800ac10:	2300      	movs	r3, #0
 800ac12:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800ac14:	2300      	movs	r3, #0
 800ac16:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 800ac1c:	4811      	ldr	r0, [pc, #68]	; (800ac64 <BSP_QSPI_Erase_Block+0x90>)
 800ac1e:	f000 f823 	bl	800ac68 <QSPI_WriteEnable>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d001      	beq.n	800ac2c <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e017      	b.n	800ac5c <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ac2c:	f107 0308 	add.w	r3, r7, #8
 800ac30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac34:	4619      	mov	r1, r3
 800ac36:	480b      	ldr	r0, [pc, #44]	; (800ac64 <BSP_QSPI_Erase_Block+0x90>)
 800ac38:	f7f8 fa14 	bl	8003064 <HAL_OSPI_Command>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e00a      	b.n	800ac5c <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 800ac46:	f640 51ac 	movw	r1, #3500	; 0xdac
 800ac4a:	4806      	ldr	r0, [pc, #24]	; (800ac64 <BSP_QSPI_Erase_Block+0x90>)
 800ac4c:	f000 f868 	bl	800ad20 <QSPI_AutoPollingMemReady>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	e000      	b.n	800ac5c <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3758      	adds	r7, #88	; 0x58
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	2004ad88 	.word	0x2004ad88

0800ac68 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b09c      	sub	sp, #112	; 0x70
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800ac70:	2300      	movs	r3, #0
 800ac72:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800ac74:	2300      	movs	r3, #0
 800ac76:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 800ac78:	2306      	movs	r3, #6
 800ac7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800ac80:	2300      	movs	r3, #0
 800ac82:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ac84:	2300      	movs	r3, #0
 800ac86:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800ac90:	2300      	movs	r3, #0
 800ac92:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aca0:	f107 0320 	add.w	r3, r7, #32
 800aca4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aca8:	4619      	mov	r1, r3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7f8 f9da 	bl	8003064 <HAL_OSPI_Command>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d001      	beq.n	800acba <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e02e      	b.n	800ad18 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 800acba:	2302      	movs	r3, #2
 800acbc:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 800acbe:	2302      	movs	r3, #2
 800acc0:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800acc2:	2300      	movs	r3, #0
 800acc4:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800acc6:	2310      	movs	r3, #16
 800acc8:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800acca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800acce:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800acd0:	2305      	movs	r3, #5
 800acd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800acd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800acd8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 800acda:	2301      	movs	r3, #1
 800acdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 800acde:	2300      	movs	r3, #0
 800ace0:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ace2:	f107 0320 	add.w	r3, r7, #32
 800ace6:	f241 3288 	movw	r2, #5000	; 0x1388
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7f8 f9b9 	bl	8003064 <HAL_OSPI_Command>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e00d      	b.n	800ad18 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800acfc:	f107 030c 	add.w	r3, r7, #12
 800ad00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7f8 fb43 	bl	8003392 <HAL_OSPI_AutoPolling>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e000      	b.n	800ad18 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3770      	adds	r7, #112	; 0x70
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b09c      	sub	sp, #112	; 0x70
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800ad32:	2305      	movs	r3, #5
 800ad34:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800ad36:	2301      	movs	r3, #1
 800ad38:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800ad42:	2300      	movs	r3, #0
 800ad44:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ad46:	2300      	movs	r3, #0
 800ad48:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800ad4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad4e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800ad50:	2301      	movs	r3, #1
 800ad52:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800ad54:	2300      	movs	r3, #0
 800ad56:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ad60:	2300      	movs	r3, #0
 800ad62:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800ad70:	2310      	movs	r3, #16
 800ad72:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800ad74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad78:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad7a:	f107 0320 	add.w	r3, r7, #32
 800ad7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7f8 f96d 	bl	8003064 <HAL_OSPI_Command>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e00c      	b.n	800adae <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 800ad94:	f107 030c 	add.w	r3, r7, #12
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7f8 faf8 	bl	8003392 <HAL_OSPI_AutoPolling>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d001      	beq.n	800adac <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	e000      	b.n	800adae <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3770      	adds	r7, #112	; 0x70
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
	...

0800adb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800adbe:	4b11      	ldr	r3, [pc, #68]	; (800ae04 <HAL_MspInit+0x4c>)
 800adc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adc2:	4a10      	ldr	r2, [pc, #64]	; (800ae04 <HAL_MspInit+0x4c>)
 800adc4:	f043 0301 	orr.w	r3, r3, #1
 800adc8:	6613      	str	r3, [r2, #96]	; 0x60
 800adca:	4b0e      	ldr	r3, [pc, #56]	; (800ae04 <HAL_MspInit+0x4c>)
 800adcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	607b      	str	r3, [r7, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800add6:	4b0b      	ldr	r3, [pc, #44]	; (800ae04 <HAL_MspInit+0x4c>)
 800add8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adda:	4a0a      	ldr	r2, [pc, #40]	; (800ae04 <HAL_MspInit+0x4c>)
 800addc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ade0:	6593      	str	r3, [r2, #88]	; 0x58
 800ade2:	4b08      	ldr	r3, [pc, #32]	; (800ae04 <HAL_MspInit+0x4c>)
 800ade4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800adee:	2200      	movs	r2, #0
 800adf0:	210f      	movs	r1, #15
 800adf2:	f06f 0001 	mvn.w	r0, #1
 800adf6:	f7f5 fd01 	bl	80007fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800adfa:	bf00      	nop
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	40021000 	.word	0x40021000

0800ae08 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08a      	sub	sp, #40	; 0x28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae10:	f107 0314 	add.w	r3, r7, #20
 800ae14:	2200      	movs	r2, #0
 800ae16:	601a      	str	r2, [r3, #0]
 800ae18:	605a      	str	r2, [r3, #4]
 800ae1a:	609a      	str	r2, [r3, #8]
 800ae1c:	60da      	str	r2, [r3, #12]
 800ae1e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a2f      	ldr	r2, [pc, #188]	; (800aee4 <HAL_DAC_MspInit+0xdc>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d157      	bne.n	800aeda <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800ae2a:	4b2f      	ldr	r3, [pc, #188]	; (800aee8 <HAL_DAC_MspInit+0xe0>)
 800ae2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2e:	4a2e      	ldr	r2, [pc, #184]	; (800aee8 <HAL_DAC_MspInit+0xe0>)
 800ae30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae34:	6593      	str	r3, [r2, #88]	; 0x58
 800ae36:	4b2c      	ldr	r3, [pc, #176]	; (800aee8 <HAL_DAC_MspInit+0xe0>)
 800ae38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae3e:	613b      	str	r3, [r7, #16]
 800ae40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae42:	4b29      	ldr	r3, [pc, #164]	; (800aee8 <HAL_DAC_MspInit+0xe0>)
 800ae44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae46:	4a28      	ldr	r2, [pc, #160]	; (800aee8 <HAL_DAC_MspInit+0xe0>)
 800ae48:	f043 0301 	orr.w	r3, r3, #1
 800ae4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae4e:	4b26      	ldr	r3, [pc, #152]	; (800aee8 <HAL_DAC_MspInit+0xe0>)
 800ae50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae52:	f003 0301 	and.w	r3, r3, #1
 800ae56:	60fb      	str	r3, [r7, #12]
 800ae58:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800ae5a:	2310      	movs	r3, #16
 800ae5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae66:	f107 0314 	add.w	r3, r7, #20
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae70:	f7f7 f8ea 	bl	8002048 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 800ae74:	4b1d      	ldr	r3, [pc, #116]	; (800aeec <HAL_DAC_MspInit+0xe4>)
 800ae76:	4a1e      	ldr	r2, [pc, #120]	; (800aef0 <HAL_DAC_MspInit+0xe8>)
 800ae78:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800ae7a:	4b1c      	ldr	r3, [pc, #112]	; (800aeec <HAL_DAC_MspInit+0xe4>)
 800ae7c:	2206      	movs	r2, #6
 800ae7e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae80:	4b1a      	ldr	r3, [pc, #104]	; (800aeec <HAL_DAC_MspInit+0xe4>)
 800ae82:	2210      	movs	r2, #16
 800ae84:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae86:	4b19      	ldr	r3, [pc, #100]	; (800aeec <HAL_DAC_MspInit+0xe4>)
 800ae88:	2200      	movs	r2, #0
 800ae8a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ae8c:	4b17      	ldr	r3, [pc, #92]	; (800aeec <HAL_DAC_MspInit+0xe4>)
 800ae8e:	2280      	movs	r2, #128	; 0x80
 800ae90:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ae92:	4b16      	ldr	r3, [pc, #88]	; (800aeec <HAL_DAC_MspInit+0xe4>)
 800ae94:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae98:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ae9a:	4b14      	ldr	r3, [pc, #80]	; (800aeec <HAL_DAC_MspInit+0xe4>)
 800ae9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aea0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800aea2:	4b12      	ldr	r3, [pc, #72]	; (800aeec <HAL_DAC_MspInit+0xe4>)
 800aea4:	2220      	movs	r2, #32
 800aea6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800aea8:	4b10      	ldr	r3, [pc, #64]	; (800aeec <HAL_DAC_MspInit+0xe4>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800aeae:	480f      	ldr	r0, [pc, #60]	; (800aeec <HAL_DAC_MspInit+0xe4>)
 800aeb0:	f7f6 fd9c 	bl	80019ec <HAL_DMA_Init>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800aeba:	f7ff fdad 	bl	800aa18 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a0a      	ldr	r2, [pc, #40]	; (800aeec <HAL_DAC_MspInit+0xe4>)
 800aec2:	609a      	str	r2, [r3, #8]
 800aec4:	4a09      	ldr	r2, [pc, #36]	; (800aeec <HAL_DAC_MspInit+0xe4>)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800aeca:	2200      	movs	r2, #0
 800aecc:	2105      	movs	r1, #5
 800aece:	2036      	movs	r0, #54	; 0x36
 800aed0:	f7f5 fc94 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800aed4:	2036      	movs	r0, #54	; 0x36
 800aed6:	f7f5 fcad 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800aeda:	bf00      	nop
 800aedc:	3728      	adds	r7, #40	; 0x28
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	40007400 	.word	0x40007400
 800aee8:	40021000 	.word	0x40021000
 800aeec:	20001384 	.word	0x20001384
 800aef0:	40020044 	.word	0x40020044

0800aef4 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b0ae      	sub	sp, #184	; 0xb8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aefc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800af00:	2200      	movs	r2, #0
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	605a      	str	r2, [r3, #4]
 800af06:	609a      	str	r2, [r3, #8]
 800af08:	60da      	str	r2, [r3, #12]
 800af0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800af0c:	f107 0310 	add.w	r3, r7, #16
 800af10:	2294      	movs	r2, #148	; 0x94
 800af12:	2100      	movs	r1, #0
 800af14:	4618      	mov	r0, r3
 800af16:	f005 fab9 	bl	801048c <memset>
  if(DFSDM1_Init == 0)
 800af1a:	4b49      	ldr	r3, [pc, #292]	; (800b040 <HAL_DFSDM_FilterMspInit+0x14c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d153      	bne.n	800afca <HAL_DFSDM_FilterMspInit+0xd6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800af22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800af26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800af28:	2300      	movs	r3, #0
 800af2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800af2e:	f107 0310 	add.w	r3, r7, #16
 800af32:	4618      	mov	r0, r3
 800af34:	f7fa f810 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800af3e:	f7ff fd6b 	bl	800aa18 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800af42:	4b40      	ldr	r3, [pc, #256]	; (800b044 <HAL_DFSDM_FilterMspInit+0x150>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	3301      	adds	r3, #1
 800af48:	4a3e      	ldr	r2, [pc, #248]	; (800b044 <HAL_DFSDM_FilterMspInit+0x150>)
 800af4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800af4c:	4b3d      	ldr	r3, [pc, #244]	; (800b044 <HAL_DFSDM_FilterMspInit+0x150>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d10b      	bne.n	800af6c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800af54:	4b3c      	ldr	r3, [pc, #240]	; (800b048 <HAL_DFSDM_FilterMspInit+0x154>)
 800af56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af58:	4a3b      	ldr	r2, [pc, #236]	; (800b048 <HAL_DFSDM_FilterMspInit+0x154>)
 800af5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af5e:	6613      	str	r3, [r2, #96]	; 0x60
 800af60:	4b39      	ldr	r3, [pc, #228]	; (800b048 <HAL_DFSDM_FilterMspInit+0x154>)
 800af62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800af6c:	4b36      	ldr	r3, [pc, #216]	; (800b048 <HAL_DFSDM_FilterMspInit+0x154>)
 800af6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af70:	4a35      	ldr	r2, [pc, #212]	; (800b048 <HAL_DFSDM_FilterMspInit+0x154>)
 800af72:	f043 0310 	orr.w	r3, r3, #16
 800af76:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af78:	4b33      	ldr	r3, [pc, #204]	; (800b048 <HAL_DFSDM_FilterMspInit+0x154>)
 800af7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af7c:	f003 0310 	and.w	r3, r3, #16
 800af80:	60bb      	str	r3, [r7, #8]
 800af82:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800af84:	f44f 7320 	mov.w	r3, #640	; 0x280
 800af88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af8c:	2302      	movs	r3, #2
 800af8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af92:	2300      	movs	r3, #0
 800af94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af98:	2300      	movs	r3, #0
 800af9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800af9e:	2306      	movs	r3, #6
 800afa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800afa4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800afa8:	4619      	mov	r1, r3
 800afaa:	4828      	ldr	r0, [pc, #160]	; (800b04c <HAL_DFSDM_FilterMspInit+0x158>)
 800afac:	f7f7 f84c 	bl	8002048 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 5, 0);
 800afb0:	2200      	movs	r2, #0
 800afb2:	2105      	movs	r1, #5
 800afb4:	203d      	movs	r0, #61	; 0x3d
 800afb6:	f7f5 fc21 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 800afba:	203d      	movs	r0, #61	; 0x3d
 800afbc:	f7f5 fc3a 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800afc0:	4b1f      	ldr	r3, [pc, #124]	; (800b040 <HAL_DFSDM_FilterMspInit+0x14c>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3301      	adds	r3, #1
 800afc6:	4a1e      	ldr	r2, [pc, #120]	; (800b040 <HAL_DFSDM_FilterMspInit+0x14c>)
 800afc8:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a20      	ldr	r2, [pc, #128]	; (800b050 <HAL_DFSDM_FilterMspInit+0x15c>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d130      	bne.n	800b036 <HAL_DFSDM_FilterMspInit+0x142>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel3;
 800afd4:	4b1f      	ldr	r3, [pc, #124]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800afd6:	4a20      	ldr	r2, [pc, #128]	; (800b058 <HAL_DFSDM_FilterMspInit+0x164>)
 800afd8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 800afda:	4b1e      	ldr	r3, [pc, #120]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800afdc:	2256      	movs	r2, #86	; 0x56
 800afde:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800afe0:	4b1c      	ldr	r3, [pc, #112]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800afe6:	4b1b      	ldr	r3, [pc, #108]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800afe8:	2200      	movs	r2, #0
 800afea:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800afec:	4b19      	ldr	r3, [pc, #100]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800afee:	2280      	movs	r2, #128	; 0x80
 800aff0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800aff2:	4b18      	ldr	r3, [pc, #96]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800aff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aff8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800affa:	4b16      	ldr	r3, [pc, #88]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800affc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b000:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 800b002:	4b14      	ldr	r3, [pc, #80]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800b004:	2200      	movs	r2, #0
 800b006:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 800b008:	4b12      	ldr	r3, [pc, #72]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800b00a:	2200      	movs	r2, #0
 800b00c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800b00e:	4811      	ldr	r0, [pc, #68]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800b010:	f7f6 fcec 	bl	80019ec <HAL_DMA_Init>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <HAL_DFSDM_FilterMspInit+0x12a>
    {
      Error_Handler();
 800b01a:	f7ff fcfd 	bl	800aa18 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a0c      	ldr	r2, [pc, #48]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800b022:	62da      	str	r2, [r3, #44]	; 0x2c
 800b024:	4a0b      	ldr	r2, [pc, #44]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4a09      	ldr	r2, [pc, #36]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800b02e:	629a      	str	r2, [r3, #40]	; 0x28
 800b030:	4a08      	ldr	r2, [pc, #32]	; (800b054 <HAL_DFSDM_FilterMspInit+0x160>)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800b036:	bf00      	nop
 800b038:	37b8      	adds	r7, #184	; 0xb8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	2004addc 	.word	0x2004addc
 800b044:	2004add8 	.word	0x2004add8
 800b048:	40021000 	.word	0x40021000
 800b04c:	48001000 	.word	0x48001000
 800b050:	40016100 	.word	0x40016100
 800b054:	20001470 	.word	0x20001470
 800b058:	40020030 	.word	0x40020030

0800b05c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b0ae      	sub	sp, #184	; 0xb8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b064:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	605a      	str	r2, [r3, #4]
 800b06e:	609a      	str	r2, [r3, #8]
 800b070:	60da      	str	r2, [r3, #12]
 800b072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b074:	f107 0310 	add.w	r3, r7, #16
 800b078:	2294      	movs	r2, #148	; 0x94
 800b07a:	2100      	movs	r1, #0
 800b07c:	4618      	mov	r0, r3
 800b07e:	f005 fa05 	bl	801048c <memset>
  if(DFSDM1_Init == 0)
 800b082:	4b2a      	ldr	r3, [pc, #168]	; (800b12c <HAL_DFSDM_ChannelMspInit+0xd0>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d14b      	bne.n	800b122 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800b08a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b08e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800b090:	2300      	movs	r3, #0
 800b092:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b096:	f107 0310 	add.w	r3, r7, #16
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7f9 ff5c 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800b0a6:	f7ff fcb7 	bl	800aa18 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800b0aa:	4b21      	ldr	r3, [pc, #132]	; (800b130 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	4a1f      	ldr	r2, [pc, #124]	; (800b130 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800b0b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800b0b4:	4b1e      	ldr	r3, [pc, #120]	; (800b130 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d10b      	bne.n	800b0d4 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800b0bc:	4b1d      	ldr	r3, [pc, #116]	; (800b134 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800b0be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0c0:	4a1c      	ldr	r2, [pc, #112]	; (800b134 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800b0c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0c6:	6613      	str	r3, [r2, #96]	; 0x60
 800b0c8:	4b1a      	ldr	r3, [pc, #104]	; (800b134 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800b0ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b0d4:	4b17      	ldr	r3, [pc, #92]	; (800b134 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800b0d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0d8:	4a16      	ldr	r2, [pc, #88]	; (800b134 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800b0da:	f043 0310 	orr.w	r3, r3, #16
 800b0de:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0e0:	4b14      	ldr	r3, [pc, #80]	; (800b134 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800b0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0e4:	f003 0310 	and.w	r3, r3, #16
 800b0e8:	60bb      	str	r3, [r7, #8]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800b0ec:	f44f 7320 	mov.w	r3, #640	; 0x280
 800b0f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b100:	2300      	movs	r3, #0
 800b102:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800b106:	2306      	movs	r3, #6
 800b108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b10c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b110:	4619      	mov	r1, r3
 800b112:	4809      	ldr	r0, [pc, #36]	; (800b138 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800b114:	f7f6 ff98 	bl	8002048 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800b118:	4b04      	ldr	r3, [pc, #16]	; (800b12c <HAL_DFSDM_ChannelMspInit+0xd0>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3301      	adds	r3, #1
 800b11e:	4a03      	ldr	r2, [pc, #12]	; (800b12c <HAL_DFSDM_ChannelMspInit+0xd0>)
 800b120:	6013      	str	r3, [r2, #0]
  }

}
 800b122:	bf00      	nop
 800b124:	37b8      	adds	r7, #184	; 0xb8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	2004addc 	.word	0x2004addc
 800b130:	2004add8 	.word	0x2004add8
 800b134:	40021000 	.word	0x40021000
 800b138:	48001000 	.word	0x48001000

0800b13c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b0ae      	sub	sp, #184	; 0xb8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b144:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b148:	2200      	movs	r2, #0
 800b14a:	601a      	str	r2, [r3, #0]
 800b14c:	605a      	str	r2, [r3, #4]
 800b14e:	609a      	str	r2, [r3, #8]
 800b150:	60da      	str	r2, [r3, #12]
 800b152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b154:	f107 0310 	add.w	r3, r7, #16
 800b158:	2294      	movs	r2, #148	; 0x94
 800b15a:	2100      	movs	r1, #0
 800b15c:	4618      	mov	r0, r3
 800b15e:	f005 f995 	bl	801048c <memset>
  if(hi2c->Instance==I2C2)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a21      	ldr	r2, [pc, #132]	; (800b1ec <HAL_I2C_MspInit+0xb0>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d13b      	bne.n	800b1e4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800b16c:	2380      	movs	r3, #128	; 0x80
 800b16e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800b170:	2300      	movs	r3, #0
 800b172:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b174:	f107 0310 	add.w	r3, r7, #16
 800b178:	4618      	mov	r0, r3
 800b17a:	f7f9 feed 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800b184:	f7ff fc48 	bl	800aa18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b188:	4b19      	ldr	r3, [pc, #100]	; (800b1f0 <HAL_I2C_MspInit+0xb4>)
 800b18a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b18c:	4a18      	ldr	r2, [pc, #96]	; (800b1f0 <HAL_I2C_MspInit+0xb4>)
 800b18e:	f043 0302 	orr.w	r3, r3, #2
 800b192:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b194:	4b16      	ldr	r3, [pc, #88]	; (800b1f0 <HAL_I2C_MspInit+0xb4>)
 800b196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b198:	f003 0302 	and.w	r3, r3, #2
 800b19c:	60fb      	str	r3, [r7, #12]
 800b19e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b1a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b1a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b1a8:	2312      	movs	r3, #18
 800b1aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b1ba:	2304      	movs	r3, #4
 800b1bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b1c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	480b      	ldr	r0, [pc, #44]	; (800b1f4 <HAL_I2C_MspInit+0xb8>)
 800b1c8:	f7f6 ff3e 	bl	8002048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b1cc:	4b08      	ldr	r3, [pc, #32]	; (800b1f0 <HAL_I2C_MspInit+0xb4>)
 800b1ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d0:	4a07      	ldr	r2, [pc, #28]	; (800b1f0 <HAL_I2C_MspInit+0xb4>)
 800b1d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b1d6:	6593      	str	r3, [r2, #88]	; 0x58
 800b1d8:	4b05      	ldr	r3, [pc, #20]	; (800b1f0 <HAL_I2C_MspInit+0xb4>)
 800b1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1e0:	60bb      	str	r3, [r7, #8]
 800b1e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b1e4:	bf00      	nop
 800b1e6:	37b8      	adds	r7, #184	; 0xb8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	40005800 	.word	0x40005800
 800b1f0:	40021000 	.word	0x40021000
 800b1f4:	48000400 	.word	0x48000400

0800b1f8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b0b0      	sub	sp, #192	; 0xc0
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b200:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b204:	2200      	movs	r2, #0
 800b206:	601a      	str	r2, [r3, #0]
 800b208:	605a      	str	r2, [r3, #4]
 800b20a:	609a      	str	r2, [r3, #8]
 800b20c:	60da      	str	r2, [r3, #12]
 800b20e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b210:	f107 0318 	add.w	r3, r7, #24
 800b214:	2294      	movs	r2, #148	; 0x94
 800b216:	2100      	movs	r1, #0
 800b218:	4618      	mov	r0, r3
 800b21a:	f005 f937 	bl	801048c <memset>
  if(hospi->Instance==OCTOSPI1)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a39      	ldr	r2, [pc, #228]	; (800b308 <HAL_OSPI_MspInit+0x110>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d16b      	bne.n	800b300 <HAL_OSPI_MspInit+0x108>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800b228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b22c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800b22e:	2300      	movs	r3, #0
 800b230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b234:	f107 0318 	add.w	r3, r7, #24
 800b238:	4618      	mov	r0, r3
 800b23a:	f7f9 fe8d 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 800b244:	f7ff fbe8 	bl	800aa18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800b248:	4b30      	ldr	r3, [pc, #192]	; (800b30c <HAL_OSPI_MspInit+0x114>)
 800b24a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b24c:	4a2f      	ldr	r2, [pc, #188]	; (800b30c <HAL_OSPI_MspInit+0x114>)
 800b24e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b252:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b254:	4b2d      	ldr	r3, [pc, #180]	; (800b30c <HAL_OSPI_MspInit+0x114>)
 800b256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b25c:	617b      	str	r3, [r7, #20]
 800b25e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800b260:	4b2a      	ldr	r3, [pc, #168]	; (800b30c <HAL_OSPI_MspInit+0x114>)
 800b262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b264:	4a29      	ldr	r2, [pc, #164]	; (800b30c <HAL_OSPI_MspInit+0x114>)
 800b266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b26a:	6513      	str	r3, [r2, #80]	; 0x50
 800b26c:	4b27      	ldr	r3, [pc, #156]	; (800b30c <HAL_OSPI_MspInit+0x114>)
 800b26e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b274:	613b      	str	r3, [r7, #16]
 800b276:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b278:	4b24      	ldr	r3, [pc, #144]	; (800b30c <HAL_OSPI_MspInit+0x114>)
 800b27a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b27c:	4a23      	ldr	r2, [pc, #140]	; (800b30c <HAL_OSPI_MspInit+0x114>)
 800b27e:	f043 0301 	orr.w	r3, r3, #1
 800b282:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b284:	4b21      	ldr	r3, [pc, #132]	; (800b30c <HAL_OSPI_MspInit+0x114>)
 800b286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b288:	f003 0301 	and.w	r3, r3, #1
 800b28c:	60fb      	str	r3, [r7, #12]
 800b28e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b290:	4b1e      	ldr	r3, [pc, #120]	; (800b30c <HAL_OSPI_MspInit+0x114>)
 800b292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b294:	4a1d      	ldr	r2, [pc, #116]	; (800b30c <HAL_OSPI_MspInit+0x114>)
 800b296:	f043 0310 	orr.w	r3, r3, #16
 800b29a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b29c:	4b1b      	ldr	r3, [pc, #108]	; (800b30c <HAL_OSPI_MspInit+0x114>)
 800b29e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2a0:	f003 0310 	and.w	r3, r3, #16
 800b2a4:	60bb      	str	r3, [r7, #8]
 800b2a6:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b2a8:	230c      	movs	r3, #12
 800b2aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800b2c0:	230a      	movs	r3, #10
 800b2c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b2d0:	f7f6 feba 	bl	8002048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800b2d4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b2d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2dc:	2302      	movs	r3, #2
 800b2de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800b2ee:	230a      	movs	r3, #10
 800b2f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b2f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	4805      	ldr	r0, [pc, #20]	; (800b310 <HAL_OSPI_MspInit+0x118>)
 800b2fc:	f7f6 fea4 	bl	8002048 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800b300:	bf00      	nop
 800b302:	37c0      	adds	r7, #192	; 0xc0
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	a0001000 	.word	0xa0001000
 800b30c:	40021000 	.word	0x40021000
 800b310:	48001000 	.word	0x48001000

0800b314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b324:	d13e      	bne.n	800b3a4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b326:	4b21      	ldr	r3, [pc, #132]	; (800b3ac <HAL_TIM_Base_MspInit+0x98>)
 800b328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b32a:	4a20      	ldr	r2, [pc, #128]	; (800b3ac <HAL_TIM_Base_MspInit+0x98>)
 800b32c:	f043 0301 	orr.w	r3, r3, #1
 800b330:	6593      	str	r3, [r2, #88]	; 0x58
 800b332:	4b1e      	ldr	r3, [pc, #120]	; (800b3ac <HAL_TIM_Base_MspInit+0x98>)
 800b334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b336:	f003 0301 	and.w	r3, r3, #1
 800b33a:	60fb      	str	r3, [r7, #12]
 800b33c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel5;
 800b33e:	4b1c      	ldr	r3, [pc, #112]	; (800b3b0 <HAL_TIM_Base_MspInit+0x9c>)
 800b340:	4a1c      	ldr	r2, [pc, #112]	; (800b3b4 <HAL_TIM_Base_MspInit+0xa0>)
 800b342:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 800b344:	4b1a      	ldr	r3, [pc, #104]	; (800b3b0 <HAL_TIM_Base_MspInit+0x9c>)
 800b346:	223c      	movs	r2, #60	; 0x3c
 800b348:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b34a:	4b19      	ldr	r3, [pc, #100]	; (800b3b0 <HAL_TIM_Base_MspInit+0x9c>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800b350:	4b17      	ldr	r3, [pc, #92]	; (800b3b0 <HAL_TIM_Base_MspInit+0x9c>)
 800b352:	2200      	movs	r2, #0
 800b354:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 800b356:	4b16      	ldr	r3, [pc, #88]	; (800b3b0 <HAL_TIM_Base_MspInit+0x9c>)
 800b358:	2280      	movs	r2, #128	; 0x80
 800b35a:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b35c:	4b14      	ldr	r3, [pc, #80]	; (800b3b0 <HAL_TIM_Base_MspInit+0x9c>)
 800b35e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b362:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b364:	4b12      	ldr	r3, [pc, #72]	; (800b3b0 <HAL_TIM_Base_MspInit+0x9c>)
 800b366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b36a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 800b36c:	4b10      	ldr	r3, [pc, #64]	; (800b3b0 <HAL_TIM_Base_MspInit+0x9c>)
 800b36e:	2200      	movs	r2, #0
 800b370:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 800b372:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <HAL_TIM_Base_MspInit+0x9c>)
 800b374:	2200      	movs	r2, #0
 800b376:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 800b378:	480d      	ldr	r0, [pc, #52]	; (800b3b0 <HAL_TIM_Base_MspInit+0x9c>)
 800b37a:	f7f6 fb37 	bl	80019ec <HAL_DMA_Init>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 800b384:	f7ff fb48 	bl	800aa18 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a09      	ldr	r2, [pc, #36]	; (800b3b0 <HAL_TIM_Base_MspInit+0x9c>)
 800b38c:	621a      	str	r2, [r3, #32]
 800b38e:	4a08      	ldr	r2, [pc, #32]	; (800b3b0 <HAL_TIM_Base_MspInit+0x9c>)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800b394:	2200      	movs	r2, #0
 800b396:	2105      	movs	r1, #5
 800b398:	201c      	movs	r0, #28
 800b39a:	f7f5 fa2f 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b39e:	201c      	movs	r0, #28
 800b3a0:	f7f5 fa48 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b3a4:	bf00      	nop
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	40021000 	.word	0x40021000
 800b3b0:	200015c0 	.word	0x200015c0
 800b3b4:	40020058 	.word	0x40020058

0800b3b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b0ae      	sub	sp, #184	; 0xb8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	601a      	str	r2, [r3, #0]
 800b3c8:	605a      	str	r2, [r3, #4]
 800b3ca:	609a      	str	r2, [r3, #8]
 800b3cc:	60da      	str	r2, [r3, #12]
 800b3ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b3d0:	f107 0310 	add.w	r3, r7, #16
 800b3d4:	2294      	movs	r2, #148	; 0x94
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f005 f857 	bl	801048c <memset>
  if(huart->Instance==USART1)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a4e      	ldr	r2, [pc, #312]	; (800b51c <HAL_UART_MspInit+0x164>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	f040 8095 	bne.w	800b514 <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b3f2:	f107 0310 	add.w	r3, r7, #16
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7f9 fdae 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800b402:	f7ff fb09 	bl	800aa18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b406:	4b46      	ldr	r3, [pc, #280]	; (800b520 <HAL_UART_MspInit+0x168>)
 800b408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b40a:	4a45      	ldr	r2, [pc, #276]	; (800b520 <HAL_UART_MspInit+0x168>)
 800b40c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b410:	6613      	str	r3, [r2, #96]	; 0x60
 800b412:	4b43      	ldr	r3, [pc, #268]	; (800b520 <HAL_UART_MspInit+0x168>)
 800b414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b41e:	4b40      	ldr	r3, [pc, #256]	; (800b520 <HAL_UART_MspInit+0x168>)
 800b420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b422:	4a3f      	ldr	r2, [pc, #252]	; (800b520 <HAL_UART_MspInit+0x168>)
 800b424:	f043 0302 	orr.w	r3, r3, #2
 800b428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b42a:	4b3d      	ldr	r3, [pc, #244]	; (800b520 <HAL_UART_MspInit+0x168>)
 800b42c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b42e:	f003 0302 	and.w	r3, r3, #2
 800b432:	60bb      	str	r3, [r7, #8]
 800b434:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b436:	23c0      	movs	r3, #192	; 0xc0
 800b438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b43c:	2302      	movs	r3, #2
 800b43e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b442:	2300      	movs	r3, #0
 800b444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b448:	2303      	movs	r3, #3
 800b44a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b44e:	2307      	movs	r3, #7
 800b450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b454:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b458:	4619      	mov	r1, r3
 800b45a:	4832      	ldr	r0, [pc, #200]	; (800b524 <HAL_UART_MspInit+0x16c>)
 800b45c:	f7f6 fdf4 	bl	8002048 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800b460:	4b31      	ldr	r3, [pc, #196]	; (800b528 <HAL_UART_MspInit+0x170>)
 800b462:	4a32      	ldr	r2, [pc, #200]	; (800b52c <HAL_UART_MspInit+0x174>)
 800b464:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800b466:	4b30      	ldr	r3, [pc, #192]	; (800b528 <HAL_UART_MspInit+0x170>)
 800b468:	2218      	movs	r2, #24
 800b46a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b46c:	4b2e      	ldr	r3, [pc, #184]	; (800b528 <HAL_UART_MspInit+0x170>)
 800b46e:	2200      	movs	r2, #0
 800b470:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b472:	4b2d      	ldr	r3, [pc, #180]	; (800b528 <HAL_UART_MspInit+0x170>)
 800b474:	2200      	movs	r2, #0
 800b476:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b478:	4b2b      	ldr	r3, [pc, #172]	; (800b528 <HAL_UART_MspInit+0x170>)
 800b47a:	2280      	movs	r2, #128	; 0x80
 800b47c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b47e:	4b2a      	ldr	r3, [pc, #168]	; (800b528 <HAL_UART_MspInit+0x170>)
 800b480:	2200      	movs	r2, #0
 800b482:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b484:	4b28      	ldr	r3, [pc, #160]	; (800b528 <HAL_UART_MspInit+0x170>)
 800b486:	2200      	movs	r2, #0
 800b488:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800b48a:	4b27      	ldr	r3, [pc, #156]	; (800b528 <HAL_UART_MspInit+0x170>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b490:	4b25      	ldr	r3, [pc, #148]	; (800b528 <HAL_UART_MspInit+0x170>)
 800b492:	2200      	movs	r2, #0
 800b494:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800b496:	4824      	ldr	r0, [pc, #144]	; (800b528 <HAL_UART_MspInit+0x170>)
 800b498:	f7f6 faa8 	bl	80019ec <HAL_DMA_Init>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800b4a2:	f7ff fab9 	bl	800aa18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a1f      	ldr	r2, [pc, #124]	; (800b528 <HAL_UART_MspInit+0x170>)
 800b4aa:	67da      	str	r2, [r3, #124]	; 0x7c
 800b4ac:	4a1e      	ldr	r2, [pc, #120]	; (800b528 <HAL_UART_MspInit+0x170>)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800b4b2:	4b1f      	ldr	r3, [pc, #124]	; (800b530 <HAL_UART_MspInit+0x178>)
 800b4b4:	4a1f      	ldr	r2, [pc, #124]	; (800b534 <HAL_UART_MspInit+0x17c>)
 800b4b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800b4b8:	4b1d      	ldr	r3, [pc, #116]	; (800b530 <HAL_UART_MspInit+0x178>)
 800b4ba:	2219      	movs	r2, #25
 800b4bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b4be:	4b1c      	ldr	r3, [pc, #112]	; (800b530 <HAL_UART_MspInit+0x178>)
 800b4c0:	2210      	movs	r2, #16
 800b4c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b4c4:	4b1a      	ldr	r3, [pc, #104]	; (800b530 <HAL_UART_MspInit+0x178>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b4ca:	4b19      	ldr	r3, [pc, #100]	; (800b530 <HAL_UART_MspInit+0x178>)
 800b4cc:	2280      	movs	r2, #128	; 0x80
 800b4ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b4d0:	4b17      	ldr	r3, [pc, #92]	; (800b530 <HAL_UART_MspInit+0x178>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b4d6:	4b16      	ldr	r3, [pc, #88]	; (800b530 <HAL_UART_MspInit+0x178>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800b4dc:	4b14      	ldr	r3, [pc, #80]	; (800b530 <HAL_UART_MspInit+0x178>)
 800b4de:	2200      	movs	r2, #0
 800b4e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b4e2:	4b13      	ldr	r3, [pc, #76]	; (800b530 <HAL_UART_MspInit+0x178>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800b4e8:	4811      	ldr	r0, [pc, #68]	; (800b530 <HAL_UART_MspInit+0x178>)
 800b4ea:	f7f6 fa7f 	bl	80019ec <HAL_DMA_Init>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d001      	beq.n	800b4f8 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 800b4f4:	f7ff fa90 	bl	800aa18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4a0d      	ldr	r2, [pc, #52]	; (800b530 <HAL_UART_MspInit+0x178>)
 800b4fc:	679a      	str	r2, [r3, #120]	; 0x78
 800b4fe:	4a0c      	ldr	r2, [pc, #48]	; (800b530 <HAL_UART_MspInit+0x178>)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800b504:	2200      	movs	r2, #0
 800b506:	2105      	movs	r1, #5
 800b508:	2025      	movs	r0, #37	; 0x25
 800b50a:	f7f5 f977 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b50e:	2025      	movs	r0, #37	; 0x25
 800b510:	f7f5 f990 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b514:	bf00      	nop
 800b516:	37b8      	adds	r7, #184	; 0xb8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	40013800 	.word	0x40013800
 800b520:	40021000 	.word	0x40021000
 800b524:	48000400 	.word	0x48000400
 800b528:	200016b0 	.word	0x200016b0
 800b52c:	40020008 	.word	0x40020008
 800b530:	20001710 	.word	0x20001710
 800b534:	4002001c 	.word	0x4002001c

0800b538 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b08e      	sub	sp, #56	; 0x38
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800b540:	2300      	movs	r3, #0
 800b542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b546:	4b34      	ldr	r3, [pc, #208]	; (800b618 <HAL_InitTick+0xe0>)
 800b548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b54a:	4a33      	ldr	r2, [pc, #204]	; (800b618 <HAL_InitTick+0xe0>)
 800b54c:	f043 0310 	orr.w	r3, r3, #16
 800b550:	6593      	str	r3, [r2, #88]	; 0x58
 800b552:	4b31      	ldr	r3, [pc, #196]	; (800b618 <HAL_InitTick+0xe0>)
 800b554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b556:	f003 0310 	and.w	r3, r3, #16
 800b55a:	60fb      	str	r3, [r7, #12]
 800b55c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b55e:	f107 0210 	add.w	r2, r7, #16
 800b562:	f107 0314 	add.w	r3, r7, #20
 800b566:	4611      	mov	r1, r2
 800b568:	4618      	mov	r0, r3
 800b56a:	f7f9 fc03 	bl	8004d74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800b56e:	6a3b      	ldr	r3, [r7, #32]
 800b570:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800b572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b574:	2b00      	cmp	r3, #0
 800b576:	d103      	bne.n	800b580 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800b578:	f7f9 fbd0 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 800b57c:	6378      	str	r0, [r7, #52]	; 0x34
 800b57e:	e004      	b.n	800b58a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800b580:	f7f9 fbcc 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 800b584:	4603      	mov	r3, r0
 800b586:	005b      	lsls	r3, r3, #1
 800b588:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58c:	4a23      	ldr	r2, [pc, #140]	; (800b61c <HAL_InitTick+0xe4>)
 800b58e:	fba2 2303 	umull	r2, r3, r2, r3
 800b592:	0c9b      	lsrs	r3, r3, #18
 800b594:	3b01      	subs	r3, #1
 800b596:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b598:	4b21      	ldr	r3, [pc, #132]	; (800b620 <HAL_InitTick+0xe8>)
 800b59a:	4a22      	ldr	r2, [pc, #136]	; (800b624 <HAL_InitTick+0xec>)
 800b59c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b59e:	4b20      	ldr	r3, [pc, #128]	; (800b620 <HAL_InitTick+0xe8>)
 800b5a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b5a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b5a6:	4a1e      	ldr	r2, [pc, #120]	; (800b620 <HAL_InitTick+0xe8>)
 800b5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b5ac:	4b1c      	ldr	r3, [pc, #112]	; (800b620 <HAL_InitTick+0xe8>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5b2:	4b1b      	ldr	r3, [pc, #108]	; (800b620 <HAL_InitTick+0xe8>)
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b5b8:	4b19      	ldr	r3, [pc, #100]	; (800b620 <HAL_InitTick+0xe8>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800b5be:	4818      	ldr	r0, [pc, #96]	; (800b620 <HAL_InitTick+0xe8>)
 800b5c0:	f7fa f9e2 	bl	8005988 <HAL_TIM_Base_Init>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800b5ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d11b      	bne.n	800b60a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800b5d2:	4813      	ldr	r0, [pc, #76]	; (800b620 <HAL_InitTick+0xe8>)
 800b5d4:	f7fa fa30 	bl	8005a38 <HAL_TIM_Base_Start_IT>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800b5de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d111      	bne.n	800b60a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b5e6:	2036      	movs	r0, #54	; 0x36
 800b5e8:	f7f5 f924 	bl	8000834 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b0f      	cmp	r3, #15
 800b5f0:	d808      	bhi.n	800b604 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	6879      	ldr	r1, [r7, #4]
 800b5f6:	2036      	movs	r0, #54	; 0x36
 800b5f8:	f7f5 f900 	bl	80007fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b5fc:	4a0a      	ldr	r2, [pc, #40]	; (800b628 <HAL_InitTick+0xf0>)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6013      	str	r3, [r2, #0]
 800b602:	e002      	b.n	800b60a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800b60a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3738      	adds	r7, #56	; 0x38
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	40021000 	.word	0x40021000
 800b61c:	431bde83 	.word	0x431bde83
 800b620:	2004ade0 	.word	0x2004ade0
 800b624:	40001000 	.word	0x40001000
 800b628:	20000000 	.word	0x20000000

0800b62c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b62c:	b480      	push	{r7}
 800b62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b630:	e7fe      	b.n	800b630 <NMI_Handler+0x4>

0800b632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b632:	b480      	push	{r7}
 800b634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b636:	e7fe      	b.n	800b636 <HardFault_Handler+0x4>

0800b638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b638:	b480      	push	{r7}
 800b63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b63c:	e7fe      	b.n	800b63c <MemManage_Handler+0x4>

0800b63e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b63e:	b480      	push	{r7}
 800b640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b642:	e7fe      	b.n	800b642 <BusFault_Handler+0x4>

0800b644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b644:	b480      	push	{r7}
 800b646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b648:	e7fe      	b.n	800b648 <UsageFault_Handler+0x4>

0800b64a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b64a:	b480      	push	{r7}
 800b64c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b64e:	bf00      	nop
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800b65c:	4802      	ldr	r0, [pc, #8]	; (800b668 <DMA1_Channel1_IRQHandler+0x10>)
 800b65e:	f7f6 fba3 	bl	8001da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b662:	bf00      	nop
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	200016b0 	.word	0x200016b0

0800b66c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800b670:	4802      	ldr	r0, [pc, #8]	; (800b67c <DMA1_Channel2_IRQHandler+0x10>)
 800b672:	f7f6 fb99 	bl	8001da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800b676:	bf00      	nop
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20001710 	.word	0x20001710

0800b680 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800b684:	4802      	ldr	r0, [pc, #8]	; (800b690 <DMA1_Channel3_IRQHandler+0x10>)
 800b686:	f7f6 fb8f 	bl	8001da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800b68a:	bf00      	nop
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	20001470 	.word	0x20001470

0800b694 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800b698:	4802      	ldr	r0, [pc, #8]	; (800b6a4 <DMA1_Channel4_IRQHandler+0x10>)
 800b69a:	f7f6 fb85 	bl	8001da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800b69e:	bf00      	nop
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20001384 	.word	0x20001384

0800b6a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 800b6ac:	4802      	ldr	r0, [pc, #8]	; (800b6b8 <DMA1_Channel5_IRQHandler+0x10>)
 800b6ae:	f7f6 fb7b 	bl	8001da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800b6b2:	bf00      	nop
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	200015c0 	.word	0x200015c0

0800b6bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b6c0:	4802      	ldr	r0, [pc, #8]	; (800b6cc <TIM2_IRQHandler+0x10>)
 800b6c2:	f7fa fa29 	bl	8005b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b6c6:	bf00      	nop
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20001574 	.word	0x20001574

0800b6d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b6d4:	4802      	ldr	r0, [pc, #8]	; (800b6e0 <USART1_IRQHandler+0x10>)
 800b6d6:	f7fa ff47 	bl	8006568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b6da:	bf00      	nop
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20001620 	.word	0x20001620

0800b6e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUEBUTTON_Pin);
 800b6e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b6ec:	f7f6 fe6e 	bl	80023cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b6f0:	bf00      	nop
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b6f8:	4803      	ldr	r0, [pc, #12]	; (800b708 <TIM6_DAC_IRQHandler+0x14>)
 800b6fa:	f7fa fa0d 	bl	8005b18 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800b6fe:	4803      	ldr	r0, [pc, #12]	; (800b70c <TIM6_DAC_IRQHandler+0x18>)
 800b700:	f7f5 f9d9 	bl	8000ab6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b704:	bf00      	nop
 800b706:	bd80      	pop	{r7, pc}
 800b708:	2004ade0 	.word	0x2004ade0
 800b70c:	20001370 	.word	0x20001370

0800b710 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 800b714:	4802      	ldr	r0, [pc, #8]	; (800b720 <DFSDM1_FLT0_IRQHandler+0x10>)
 800b716:	f7f5 febb 	bl	8001490 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 800b71a:	bf00      	nop
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	200013e4 	.word	0x200013e4

0800b724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b72c:	4a14      	ldr	r2, [pc, #80]	; (800b780 <_sbrk+0x5c>)
 800b72e:	4b15      	ldr	r3, [pc, #84]	; (800b784 <_sbrk+0x60>)
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b738:	4b13      	ldr	r3, [pc, #76]	; (800b788 <_sbrk+0x64>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d102      	bne.n	800b746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b740:	4b11      	ldr	r3, [pc, #68]	; (800b788 <_sbrk+0x64>)
 800b742:	4a12      	ldr	r2, [pc, #72]	; (800b78c <_sbrk+0x68>)
 800b744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b746:	4b10      	ldr	r3, [pc, #64]	; (800b788 <_sbrk+0x64>)
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4413      	add	r3, r2
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	429a      	cmp	r2, r3
 800b752:	d207      	bcs.n	800b764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b754:	f004 fe62 	bl	801041c <__errno>
 800b758:	4603      	mov	r3, r0
 800b75a:	220c      	movs	r2, #12
 800b75c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b75e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b762:	e009      	b.n	800b778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b764:	4b08      	ldr	r3, [pc, #32]	; (800b788 <_sbrk+0x64>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b76a:	4b07      	ldr	r3, [pc, #28]	; (800b788 <_sbrk+0x64>)
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4413      	add	r3, r2
 800b772:	4a05      	ldr	r2, [pc, #20]	; (800b788 <_sbrk+0x64>)
 800b774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b776:	68fb      	ldr	r3, [r7, #12]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	200a0000 	.word	0x200a0000
 800b784:	00000400 	.word	0x00000400
 800b788:	2004ae2c 	.word	0x2004ae2c
 800b78c:	2004ae80 	.word	0x2004ae80

0800b790 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b790:	b480      	push	{r7}
 800b792:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b794:	4b06      	ldr	r3, [pc, #24]	; (800b7b0 <SystemInit+0x20>)
 800b796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b79a:	4a05      	ldr	r2, [pc, #20]	; (800b7b0 <SystemInit+0x20>)
 800b79c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b7a4:	bf00      	nop
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	e000ed00 	.word	0xe000ed00

0800b7b4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f001 fdaa 	bl	800d31e <VL53L0X_get_offset_calibration_data_micro_meter>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800b7ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
	...

0800b7dc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b0a4      	sub	sp, #144	; 0x90
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800b7ea:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d107      	bne.n	800b802 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2188      	movs	r1, #136	; 0x88
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f004 fcb6 	bl	8010168 <VL53L0X_WrByte>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2200      	movs	r2, #0
 800b806:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b810:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4aae      	ldr	r2, [pc, #696]	; (800bad0 <VL53L0X_DataInit+0x2f4>)
 800b818:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b822:	f107 0310 	add.w	r3, r7, #16
 800b826:	4619      	mov	r1, r3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 fb29 	bl	800be80 <VL53L0X_GetDeviceParameters>
 800b82e:	4603      	mov	r3, r0
 800b830:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 800b834:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d130      	bne.n	800b89e <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 800b83c:	2300      	movs	r3, #0
 800b83e:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 800b840:	2300      	movs	r3, #0
 800b842:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 800b844:	2300      	movs	r3, #0
 800b846:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 800b848:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 800b84c:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 800b84e:	f24b 3333 	movw	r3, #45875	; 0xb333
 800b852:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 800b854:	4b9f      	ldr	r3, [pc, #636]	; (800bad4 <VL53L0X_DataInit+0x2f8>)
 800b856:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 800b858:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b85c:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 800b85e:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 800b862:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 800b864:	4b9c      	ldr	r3, [pc, #624]	; (800bad8 <VL53L0X_DataInit+0x2fc>)
 800b866:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 800b868:	4b9c      	ldr	r3, [pc, #624]	; (800badc <VL53L0X_DataInit+0x300>)
 800b86a:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 800b86c:	4b9c      	ldr	r3, [pc, #624]	; (800bae0 <VL53L0X_DataInit+0x304>)
 800b86e:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 800b870:	4b9c      	ldr	r3, [pc, #624]	; (800bae4 <VL53L0X_DataInit+0x308>)
 800b872:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 800b874:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800b878:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 800b87a:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 800b87e:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 800b880:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800b884:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 800b886:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 800b88a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	3308      	adds	r3, #8
 800b892:	f107 0110 	add.w	r1, r7, #16
 800b896:	2278      	movs	r2, #120	; 0x78
 800b898:	4618      	mov	r0, r3
 800b89a:	f004 fde9 	bl	8010470 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2264      	movs	r2, #100	; 0x64
 800b8a2:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b8ac:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b8b6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b8c0:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	2180      	movs	r1, #128	; 0x80
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f004 fc49 	bl	8010168 <VL53L0X_WrByte>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	461a      	mov	r2, r3
 800b8da:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	21ff      	movs	r1, #255	; 0xff
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f004 fc3d 	bl	8010168 <VL53L0X_WrByte>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	2100      	movs	r1, #0
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f004 fc31 	bl	8010168 <VL53L0X_WrByte>
 800b906:	4603      	mov	r3, r0
 800b908:	461a      	mov	r2, r3
 800b90a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b90e:	4313      	orrs	r3, r2
 800b910:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800b914:	f107 030f 	add.w	r3, r7, #15
 800b918:	461a      	mov	r2, r3
 800b91a:	2191      	movs	r1, #145	; 0x91
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f004 fca5 	bl	801026c <VL53L0X_RdByte>
 800b922:	4603      	mov	r3, r0
 800b924:	461a      	mov	r2, r3
 800b926:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b92a:	4313      	orrs	r3, r2
 800b92c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800b930:	7bfa      	ldrb	r2, [r7, #15]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b938:	2201      	movs	r2, #1
 800b93a:	2100      	movs	r1, #0
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f004 fc13 	bl	8010168 <VL53L0X_WrByte>
 800b942:	4603      	mov	r3, r0
 800b944:	461a      	mov	r2, r3
 800b946:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b94a:	4313      	orrs	r3, r2
 800b94c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b950:	2200      	movs	r2, #0
 800b952:	21ff      	movs	r1, #255	; 0xff
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f004 fc07 	bl	8010168 <VL53L0X_WrByte>
 800b95a:	4603      	mov	r3, r0
 800b95c:	461a      	mov	r2, r3
 800b95e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b962:	4313      	orrs	r3, r2
 800b964:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b968:	2200      	movs	r2, #0
 800b96a:	2180      	movs	r1, #128	; 0x80
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f004 fbfb 	bl	8010168 <VL53L0X_WrByte>
 800b972:	4603      	mov	r3, r0
 800b974:	461a      	mov	r2, r3
 800b976:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b97a:	4313      	orrs	r3, r2
 800b97c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b980:	2300      	movs	r3, #0
 800b982:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b986:	e017      	b.n	800b9b8 <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 800b988:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d118      	bne.n	800b9c2 <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800b990:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b994:	b29b      	uxth	r3, r3
 800b996:	2201      	movs	r2, #1
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 fd8a 	bl	800c4b4 <VL53L0X_SetLimitCheckEnable>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b9ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9bc:	2b05      	cmp	r3, #5
 800b9be:	dde3      	ble.n	800b988 <VL53L0X_DataInit+0x1ac>
 800b9c0:	e000      	b.n	800b9c4 <VL53L0X_DataInit+0x1e8>
		else
			break;
 800b9c2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800b9c4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d107      	bne.n	800b9dc <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2102      	movs	r1, #2
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fd6f 	bl	800c4b4 <VL53L0X_SetLimitCheckEnable>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b9dc:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d107      	bne.n	800b9f4 <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	2103      	movs	r1, #3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 fd63 	bl	800c4b4 <VL53L0X_SetLimitCheckEnable>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b9f4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d107      	bne.n	800ba0c <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	2104      	movs	r1, #4
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 fd57 	bl	800c4b4 <VL53L0X_SetLimitCheckEnable>
 800ba06:	4603      	mov	r3, r0
 800ba08:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800ba0c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d107      	bne.n	800ba24 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ba14:	2200      	movs	r2, #0
 800ba16:	2105      	movs	r1, #5
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fd4b 	bl	800c4b4 <VL53L0X_SetLimitCheckEnable>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800ba24:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d108      	bne.n	800ba3e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ba2c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800ba30:	2100      	movs	r1, #0
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fdee 	bl	800c614 <VL53L0X_SetLimitCheckValue>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ba3e:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d108      	bne.n	800ba58 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ba46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fde1 	bl	800c614 <VL53L0X_SetLimitCheckValue>
 800ba52:	4603      	mov	r3, r0
 800ba54:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba58:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d108      	bne.n	800ba72 <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ba60:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800ba64:	2102      	movs	r1, #2
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fdd4 	bl	800c614 <VL53L0X_SetLimitCheckValue>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba72:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d107      	bne.n	800ba8a <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	2103      	movs	r1, #3
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fdc8 	bl	800c614 <VL53L0X_SetLimitCheckValue>
 800ba84:	4603      	mov	r3, r0
 800ba86:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba8a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10f      	bne.n	800bab2 <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	22ff      	movs	r2, #255	; 0xff
 800ba96:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ba9a:	22ff      	movs	r2, #255	; 0xff
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f004 fb62 	bl	8010168 <VL53L0X_WrByte>
 800baa4:	4603      	mov	r3, r0
 800baa6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2201      	movs	r2, #1
 800baae:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 800bab2:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d103      	bne.n	800bac2 <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 800bac2:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3790      	adds	r7, #144	; 0x90
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	000970a4 	.word	0x000970a4
 800bad4:	044c0000 	.word	0x044c0000
 800bad8:	0003cccc 	.word	0x0003cccc
 800badc:	02ee0000 	.word	0x02ee0000
 800bae0:	00074ccc 	.word	0x00074ccc
 800bae4:	02260000 	.word	0x02260000

0800bae8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b0ac      	sub	sp, #176	; 0xb0
 800baec:	af02      	add	r7, sp, #8
 800baee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800baf0:	2300      	movs	r3, #0
 800baf2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800baf6:	f107 031c 	add.w	r3, r7, #28
 800bafa:	2278      	movs	r2, #120	; 0x78
 800bafc:	2100      	movs	r1, #0
 800bafe:	4618      	mov	r0, r3
 800bb00:	f004 fcc4 	bl	801048c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800bb04:	2300      	movs	r3, #0
 800bb06:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800bb20:	2300      	movs	r3, #0
 800bb22:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800bb26:	2101      	movs	r1, #1
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f002 fb3b 	bl	800e1a4 <VL53L0X_get_info_from_device>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800bb3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800bb44:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800bb48:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d80f      	bhi.n	800bb70 <VL53L0X_StaticInit+0x88>
 800bb50:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d103      	bne.n	800bb60 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 800bb58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb5c:	2b20      	cmp	r3, #32
 800bb5e:	d807      	bhi.n	800bb70 <VL53L0X_StaticInit+0x88>
 800bb60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10f      	bne.n	800bb88 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 800bb68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb6c:	2b0c      	cmp	r3, #12
 800bb6e:	d90b      	bls.n	800bb88 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800bb70:	f107 0218 	add.w	r2, r7, #24
 800bb74:	f107 0314 	add.w	r3, r7, #20
 800bb78:	4619      	mov	r1, r3
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f001 fdca 	bl	800d714 <VL53L0X_perform_ref_spad_management>
 800bb80:	4603      	mov	r3, r0
 800bb82:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800bb86:	e00a      	b.n	800bb9e <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800bb88:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f001 ffca 	bl	800db2c <VL53L0X_set_reference_spads>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800bb9e:	4b93      	ldr	r3, [pc, #588]	; (800bdec <VL53L0X_StaticInit+0x304>)
 800bba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800bba4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d111      	bne.n	800bbd0 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800bbb2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800bbb6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d105      	bne.n	800bbca <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800bbc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bbc8:	e002      	b.n	800bbd0 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800bbca:	4b88      	ldr	r3, [pc, #544]	; (800bdec <VL53L0X_StaticInit+0x304>)
 800bbcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 800bbd0:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d107      	bne.n	800bbe8 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 800bbd8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f003 fbf1 	bl	800f3c4 <VL53L0X_load_tuning_settings>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800bbe8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10a      	bne.n	800bc06 <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	2304      	movs	r3, #4
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f001 f9be 	bl	800cf7c <VL53L0X_SetGpioConfig>
 800bc00:	4603      	mov	r3, r0
 800bc02:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bc06:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d121      	bne.n	800bc52 <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bc0e:	2201      	movs	r2, #1
 800bc10:	21ff      	movs	r1, #255	; 0xff
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f004 faa8 	bl	8010168 <VL53L0X_WrByte>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800bc1e:	f107 031a 	add.w	r3, r7, #26
 800bc22:	461a      	mov	r2, r3
 800bc24:	2184      	movs	r1, #132	; 0x84
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f004 fb4a 	bl	80102c0 <VL53L0X_RdWord>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	461a      	mov	r2, r3
 800bc30:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800bc34:	4313      	orrs	r3, r2
 800bc36:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	21ff      	movs	r1, #255	; 0xff
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f004 fa92 	bl	8010168 <VL53L0X_WrByte>
 800bc44:	4603      	mov	r3, r0
 800bc46:	461a      	mov	r2, r3
 800bc48:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bc52:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d105      	bne.n	800bc66 <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800bc5a:	8b7b      	ldrh	r3, [r7, #26]
 800bc5c:	011b      	lsls	r3, r3, #4
 800bc5e:	461a      	mov	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bc66:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d108      	bne.n	800bc80 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800bc6e:	f107 031c 	add.w	r3, r7, #28
 800bc72:	4619      	mov	r1, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f903 	bl	800be80 <VL53L0X_GetDeviceParameters>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 800bc80:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d110      	bne.n	800bcaa <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800bc88:	f107 0319 	add.w	r3, r7, #25
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 f9eb 	bl	800c06a <VL53L0X_GetFractionEnable>
 800bc94:	4603      	mov	r3, r0
 800bc96:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 800bc9a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d103      	bne.n	800bcaa <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800bca2:	7e7a      	ldrb	r2, [r7, #25]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 800bcaa:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d107      	bne.n	800bcc2 <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	f107 011c 	add.w	r1, r7, #28
 800bcba:	2278      	movs	r2, #120	; 0x78
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f004 fbd7 	bl	8010470 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800bcc2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d111      	bne.n	800bcee <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 800bcca:	f107 0319 	add.w	r3, r7, #25
 800bcce:	461a      	mov	r2, r3
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f004 faca 	bl	801026c <VL53L0X_RdByte>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800bcde:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d103      	bne.n	800bcee <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800bce6:	7e7a      	ldrb	r2, [r7, #25]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800bcee:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d107      	bne.n	800bd06 <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fa12 	bl	800c124 <VL53L0X_SetSequenceStepEnable>
 800bd00:	4603      	mov	r3, r0
 800bd02:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800bd06:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d107      	bne.n	800bd1e <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800bd0e:	2200      	movs	r2, #0
 800bd10:	2102      	movs	r1, #2
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fa06 	bl	800c124 <VL53L0X_SetSequenceStepEnable>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800bd1e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d103      	bne.n	800bd2e <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2203      	movs	r2, #3
 800bd2a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800bd2e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d109      	bne.n	800bd4a <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 800bd36:	f107 0313 	add.w	r3, r7, #19
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f9d8 	bl	800c0f4 <VL53L0X_GetVcselPulsePeriod>
 800bd44:	4603      	mov	r3, r0
 800bd46:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bd4a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d103      	bne.n	800bd5a <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800bd52:	7cfa      	ldrb	r2, [r7, #19]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800bd5a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d109      	bne.n	800bd76 <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800bd62:	f107 0313 	add.w	r3, r7, #19
 800bd66:	461a      	mov	r2, r3
 800bd68:	2101      	movs	r1, #1
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 f9c2 	bl	800c0f4 <VL53L0X_GetVcselPulsePeriod>
 800bd70:	4603      	mov	r3, r0
 800bd72:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bd76:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d103      	bne.n	800bd86 <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800bd7e:	7cfa      	ldrb	r2, [r7, #19]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800bd86:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d109      	bne.n	800bda2 <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 800bd8e:	f107 030c 	add.w	r3, r7, #12
 800bd92:	461a      	mov	r2, r3
 800bd94:	2103      	movs	r1, #3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f002 ff86 	bl	800eca8 <get_sequence_step_timeout>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bda2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d103      	bne.n	800bdb2 <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800bdb2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d109      	bne.n	800bdce <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 800bdba:	f107 030c 	add.w	r3, r7, #12
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	2104      	movs	r1, #4
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f002 ff70 	bl	800eca8 <get_sequence_step_timeout>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bdce:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d103      	bne.n	800bdde <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bdde:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	37a8      	adds	r7, #168	; 0xa8
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	200000ac 	.word	0x200000ac

0800bdf0 <VL53L0X_ResetDevice>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_ResetDevice(VL53L0X_DEV Dev)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* Set reset bit */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	21bf      	movs	r1, #191	; 0xbf
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f004 f9b1 	bl	8010168 <VL53L0X_WrByte>
 800be06:	4603      	mov	r3, r0
 800be08:	73fb      	strb	r3, [r7, #15]
		0x00);

	/* Wait for some time */
	if (Status == VL53L0X_ERROR_NONE) {
 800be0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10b      	bne.n	800be2a <VL53L0X_ResetDevice+0x3a>
		do {
			Status = VL53L0X_RdByte(Dev,
 800be12:	f107 030e 	add.w	r3, r7, #14
 800be16:	461a      	mov	r2, r3
 800be18:	21c0      	movs	r1, #192	; 0xc0
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f004 fa26 	bl	801026c <VL53L0X_RdByte>
 800be20:	4603      	mov	r3, r0
 800be22:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Byte);
		} while (Byte != 0x00);
 800be24:	7bbb      	ldrb	r3, [r7, #14]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1f3      	bne.n	800be12 <VL53L0X_ResetDevice+0x22>
	}

	VL53L0X_PollingDelay(Dev);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f004 fabc 	bl	80103a8 <VL53L0X_PollingDelay>

	/* Release reset */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 800be30:	2201      	movs	r2, #1
 800be32:	21bf      	movs	r1, #191	; 0xbf
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f004 f997 	bl	8010168 <VL53L0X_WrByte>
 800be3a:	4603      	mov	r3, r0
 800be3c:	73fb      	strb	r3, [r7, #15]
		0x01);

	/* Wait until correct boot-up of the device */
	if (Status == VL53L0X_ERROR_NONE) {
 800be3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10b      	bne.n	800be5e <VL53L0X_ResetDevice+0x6e>
		do {
			Status = VL53L0X_RdByte(Dev,
 800be46:	f107 030e 	add.w	r3, r7, #14
 800be4a:	461a      	mov	r2, r3
 800be4c:	21c0      	movs	r1, #192	; 0xc0
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f004 fa0c 	bl	801026c <VL53L0X_RdByte>
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Byte);
		} while (Byte == 0x00);
 800be58:	7bbb      	ldrb	r3, [r7, #14]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d0f3      	beq.n	800be46 <VL53L0X_ResetDevice+0x56>
	}

	VL53L0X_PollingDelay(Dev);
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f004 faa2 	bl	80103a8 <VL53L0X_PollingDelay>

	/* Set PAL State to VL53L0X_STATE_POWERDOWN */
	if (Status == VL53L0X_ERROR_NONE)
 800be64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d103      	bne.n	800be74 <VL53L0X_ResetDevice+0x84>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_POWERDOWN);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 800be74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be8a:	2300      	movs	r3, #0
 800be8c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	4619      	mov	r1, r3
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f8d6 	bl	800c044 <VL53L0X_GetDeviceMode>
 800be98:	4603      	mov	r3, r0
 800be9a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800be9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d107      	bne.n	800beb4 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	3308      	adds	r3, #8
 800bea8:	4619      	mov	r1, r3
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fa86 	bl	800c3bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800beb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d102      	bne.n	800bec2 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	2200      	movs	r2, #0
 800bec0:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800bec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d107      	bne.n	800beda <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	3310      	adds	r3, #16
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fabc 	bl	800c44e <VL53L0X_GetXTalkCompensationRateMegaCps>
 800bed6:	4603      	mov	r3, r0
 800bed8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800beda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d107      	bne.n	800bef2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	3314      	adds	r3, #20
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff fc63 	bl	800b7b4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800beee:	4603      	mov	r3, r0
 800bef0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800bef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d134      	bne.n	800bf64 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800befa:	2300      	movs	r3, #0
 800befc:	60bb      	str	r3, [r7, #8]
 800befe:	e02a      	b.n	800bf56 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800bf00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d12a      	bne.n	800bf5e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	b299      	uxth	r1, r3
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	3308      	adds	r3, #8
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	683a      	ldr	r2, [r7, #0]
 800bf14:	4413      	add	r3, r2
 800bf16:	3304      	adds	r3, #4
 800bf18:	461a      	mov	r2, r3
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fbdc 	bl	800c6d8 <VL53L0X_GetLimitCheckValue>
 800bf20:	4603      	mov	r3, r0
 800bf22:	461a      	mov	r2, r3
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800bf2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d117      	bne.n	800bf62 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	b299      	uxth	r1, r3
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	3318      	adds	r3, #24
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	461a      	mov	r2, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fb43 	bl	800c5cc <VL53L0X_GetLimitCheckEnable>
 800bf46:	4603      	mov	r3, r0
 800bf48:	461a      	mov	r2, r3
 800bf4a:	7bfb      	ldrb	r3, [r7, #15]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	3301      	adds	r3, #1
 800bf54:	60bb      	str	r3, [r7, #8]
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	2b05      	cmp	r3, #5
 800bf5a:	ddd1      	ble.n	800bf00 <VL53L0X_GetDeviceParameters+0x80>
 800bf5c:	e002      	b.n	800bf64 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800bf5e:	bf00      	nop
 800bf60:	e000      	b.n	800bf64 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800bf62:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bf64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d107      	bne.n	800bf7c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	3374      	adds	r3, #116	; 0x74
 800bf70:	4619      	mov	r1, r3
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fc3e 	bl	800c7f4 <VL53L0X_GetWrapAroundCheckEnable>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800bf7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d107      	bne.n	800bf94 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	3304      	adds	r3, #4
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f89f 	bl	800c0ce <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800bf90:	4603      	mov	r3, r0
 800bf92:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bf94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d120      	bne.n	800bfde <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	60bb      	str	r3, [r7, #8]
 800bfa0:	e01a      	b.n	800bfd8 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	3310      	adds	r3, #16
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4413      	add	r3, r2
 800bfac:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 800bfae:	6839      	ldr	r1, [r7, #0]
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	330e      	adds	r3, #14
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	440b      	add	r3, r1
 800bfb8:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	3316      	adds	r3, #22
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 800bfc6:	6839      	ldr	r1, [r7, #0]
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	3314      	adds	r3, #20
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	440b      	add	r3, r1
 800bfd0:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	60bb      	str	r3, [r7, #8]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	2b06      	cmp	r3, #6
 800bfdc:	dde1      	ble.n	800bfa2 <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bfde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	460b      	mov	r3, r1
 800bff6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bff8:	2300      	movs	r3, #0
 800bffa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	2b15      	cmp	r3, #21
 800c000:	bf8c      	ite	hi
 800c002:	2201      	movhi	r2, #1
 800c004:	2200      	movls	r2, #0
 800c006:	b2d2      	uxtb	r2, r2
 800c008:	2a00      	cmp	r2, #0
 800c00a:	d10e      	bne.n	800c02a <VL53L0X_SetDeviceMode+0x3e>
 800c00c:	2201      	movs	r2, #1
 800c00e:	409a      	lsls	r2, r3
 800c010:	4b0b      	ldr	r3, [pc, #44]	; (800c040 <VL53L0X_SetDeviceMode+0x54>)
 800c012:	4013      	ands	r3, r2
 800c014:	2b00      	cmp	r3, #0
 800c016:	bf14      	ite	ne
 800c018:	2301      	movne	r3, #1
 800c01a:	2300      	moveq	r3, #0
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d003      	beq.n	800c02a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	78fa      	ldrb	r2, [r7, #3]
 800c026:	721a      	strb	r2, [r3, #8]
		break;
 800c028:	e001      	b.n	800c02e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800c02a:	23f8      	movs	r3, #248	; 0xf8
 800c02c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3714      	adds	r7, #20
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	0030000b 	.word	0x0030000b

0800c044 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c04e:	2300      	movs	r3, #0
 800c050:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	7a1a      	ldrb	r2, [r3, #8]
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800c05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3714      	adds	r7, #20
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b084      	sub	sp, #16
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c074:	2300      	movs	r3, #0
 800c076:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	2109      	movs	r1, #9
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f004 f8f5 	bl	801026c <VL53L0X_RdByte>
 800c082:	4603      	mov	r3, r0
 800c084:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d106      	bne.n	800c09c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	f003 0301 	and.w	r3, r3, #1
 800c096:	b2da      	uxtb	r2, r3
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800c09c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800c0b6:	6839      	ldr	r1, [r7, #0]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f002 ffff 	bl	800f0bc <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800c0c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b084      	sub	sp, #16
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f003 f8bf 	bl	800f262 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800c0e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	607a      	str	r2, [r7, #4]
 800c100:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c102:	2300      	movs	r3, #0
 800c104:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800c106:	7afb      	ldrb	r3, [r7, #11]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	4619      	mov	r1, r3
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f002 ff9e 	bl	800f04e <VL53L0X_get_vcsel_pulse_period>
 800c112:	4603      	mov	r3, r0
 800c114:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800c116:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3718      	adds	r7, #24
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
	...

0800c124 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	460b      	mov	r3, r1
 800c12e:	70fb      	strb	r3, [r7, #3]
 800c130:	4613      	mov	r3, r2
 800c132:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c134:	2300      	movs	r3, #0
 800c136:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c140:	f107 030f 	add.w	r3, r7, #15
 800c144:	461a      	mov	r2, r3
 800c146:	2101      	movs	r1, #1
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f004 f88f 	bl	801026c <VL53L0X_RdByte>
 800c14e:	4603      	mov	r3, r0
 800c150:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800c152:	7bfb      	ldrb	r3, [r7, #15]
 800c154:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800c156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d15a      	bne.n	800c214 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800c15e:	78bb      	ldrb	r3, [r7, #2]
 800c160:	2b01      	cmp	r3, #1
 800c162:	d12b      	bne.n	800c1bc <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800c164:	78fb      	ldrb	r3, [r7, #3]
 800c166:	2b04      	cmp	r3, #4
 800c168:	d825      	bhi.n	800c1b6 <VL53L0X_SetSequenceStepEnable+0x92>
 800c16a:	a201      	add	r2, pc, #4	; (adr r2, 800c170 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c185 	.word	0x0800c185
 800c174:	0800c18f 	.word	0x0800c18f
 800c178:	0800c199 	.word	0x0800c199
 800c17c:	0800c1a3 	.word	0x0800c1a3
 800c180:	0800c1ad 	.word	0x0800c1ad
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800c184:	7dbb      	ldrb	r3, [r7, #22]
 800c186:	f043 0310 	orr.w	r3, r3, #16
 800c18a:	75bb      	strb	r3, [r7, #22]
				break;
 800c18c:	e043      	b.n	800c216 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800c18e:	7dbb      	ldrb	r3, [r7, #22]
 800c190:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800c194:	75bb      	strb	r3, [r7, #22]
				break;
 800c196:	e03e      	b.n	800c216 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800c198:	7dbb      	ldrb	r3, [r7, #22]
 800c19a:	f043 0304 	orr.w	r3, r3, #4
 800c19e:	75bb      	strb	r3, [r7, #22]
				break;
 800c1a0:	e039      	b.n	800c216 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800c1a2:	7dbb      	ldrb	r3, [r7, #22]
 800c1a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1a8:	75bb      	strb	r3, [r7, #22]
				break;
 800c1aa:	e034      	b.n	800c216 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800c1ac:	7dbb      	ldrb	r3, [r7, #22]
 800c1ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1b2:	75bb      	strb	r3, [r7, #22]
				break;
 800c1b4:	e02f      	b.n	800c216 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c1b6:	23fc      	movs	r3, #252	; 0xfc
 800c1b8:	75fb      	strb	r3, [r7, #23]
 800c1ba:	e02c      	b.n	800c216 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800c1bc:	78fb      	ldrb	r3, [r7, #3]
 800c1be:	2b04      	cmp	r3, #4
 800c1c0:	d825      	bhi.n	800c20e <VL53L0X_SetSequenceStepEnable+0xea>
 800c1c2:	a201      	add	r2, pc, #4	; (adr r2, 800c1c8 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c1dd 	.word	0x0800c1dd
 800c1cc:	0800c1e7 	.word	0x0800c1e7
 800c1d0:	0800c1f1 	.word	0x0800c1f1
 800c1d4:	0800c1fb 	.word	0x0800c1fb
 800c1d8:	0800c205 	.word	0x0800c205
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800c1dc:	7dbb      	ldrb	r3, [r7, #22]
 800c1de:	f023 0310 	bic.w	r3, r3, #16
 800c1e2:	75bb      	strb	r3, [r7, #22]
				break;
 800c1e4:	e017      	b.n	800c216 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800c1e6:	7dbb      	ldrb	r3, [r7, #22]
 800c1e8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800c1ec:	75bb      	strb	r3, [r7, #22]
				break;
 800c1ee:	e012      	b.n	800c216 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800c1f0:	7dbb      	ldrb	r3, [r7, #22]
 800c1f2:	f023 0304 	bic.w	r3, r3, #4
 800c1f6:	75bb      	strb	r3, [r7, #22]
				break;
 800c1f8:	e00d      	b.n	800c216 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800c1fa:	7dbb      	ldrb	r3, [r7, #22]
 800c1fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c200:	75bb      	strb	r3, [r7, #22]
				break;
 800c202:	e008      	b.n	800c216 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800c204:	7dbb      	ldrb	r3, [r7, #22]
 800c206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c20a:	75bb      	strb	r3, [r7, #22]
				break;
 800c20c:	e003      	b.n	800c216 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c20e:	23fc      	movs	r3, #252	; 0xfc
 800c210:	75fb      	strb	r3, [r7, #23]
 800c212:	e000      	b.n	800c216 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800c214:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800c216:	7bfb      	ldrb	r3, [r7, #15]
 800c218:	7dba      	ldrb	r2, [r7, #22]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d01e      	beq.n	800c25c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800c21e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d107      	bne.n	800c236 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800c226:	7dbb      	ldrb	r3, [r7, #22]
 800c228:	461a      	mov	r2, r3
 800c22a:	2101      	movs	r1, #1
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f003 ff9b 	bl	8010168 <VL53L0X_WrByte>
 800c232:	4603      	mov	r3, r0
 800c234:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800c236:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d103      	bne.n	800c246 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	7dba      	ldrb	r2, [r7, #22]
 800c242:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800c246:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d106      	bne.n	800c25c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800c254:	6939      	ldr	r1, [r7, #16]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7ff ff26 	bl	800c0a8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800c25c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3718      	adds	r7, #24
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800c268:	b480      	push	{r7}
 800c26a:	b087      	sub	sp, #28
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	607b      	str	r3, [r7, #4]
 800c272:	460b      	mov	r3, r1
 800c274:	72fb      	strb	r3, [r7, #11]
 800c276:	4613      	mov	r3, r2
 800c278:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c27a:	2300      	movs	r3, #0
 800c27c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800c284:	7afb      	ldrb	r3, [r7, #11]
 800c286:	2b04      	cmp	r3, #4
 800c288:	d836      	bhi.n	800c2f8 <sequence_step_enabled+0x90>
 800c28a:	a201      	add	r2, pc, #4	; (adr r2, 800c290 <sequence_step_enabled+0x28>)
 800c28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c290:	0800c2a5 	.word	0x0800c2a5
 800c294:	0800c2b7 	.word	0x0800c2b7
 800c298:	0800c2c9 	.word	0x0800c2c9
 800c29c:	0800c2db 	.word	0x0800c2db
 800c2a0:	0800c2ed 	.word	0x0800c2ed
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800c2a4:	7abb      	ldrb	r3, [r7, #10]
 800c2a6:	111b      	asrs	r3, r3, #4
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	f003 0301 	and.w	r3, r3, #1
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	701a      	strb	r2, [r3, #0]
		break;
 800c2b4:	e022      	b.n	800c2fc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800c2b6:	7abb      	ldrb	r3, [r7, #10]
 800c2b8:	10db      	asrs	r3, r3, #3
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	f003 0301 	and.w	r3, r3, #1
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	701a      	strb	r2, [r3, #0]
		break;
 800c2c6:	e019      	b.n	800c2fc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800c2c8:	7abb      	ldrb	r3, [r7, #10]
 800c2ca:	109b      	asrs	r3, r3, #2
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	f003 0301 	and.w	r3, r3, #1
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	701a      	strb	r2, [r3, #0]
		break;
 800c2d8:	e010      	b.n	800c2fc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800c2da:	7abb      	ldrb	r3, [r7, #10]
 800c2dc:	119b      	asrs	r3, r3, #6
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	f003 0301 	and.w	r3, r3, #1
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	701a      	strb	r2, [r3, #0]
		break;
 800c2ea:	e007      	b.n	800c2fc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800c2ec:	7abb      	ldrb	r3, [r7, #10]
 800c2ee:	09db      	lsrs	r3, r3, #7
 800c2f0:	b2da      	uxtb	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	701a      	strb	r2, [r3, #0]
		break;
 800c2f6:	e001      	b.n	800c2fc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c2f8:	23fc      	movs	r3, #252	; 0xfc
 800c2fa:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c2fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c300:	4618      	mov	r0, r3
 800c302:	371c      	adds	r7, #28
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c316:	2300      	movs	r3, #0
 800c318:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c31e:	f107 030e 	add.w	r3, r7, #14
 800c322:	461a      	mov	r2, r3
 800c324:	2101      	movs	r1, #1
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f003 ffa0 	bl	801026c <VL53L0X_RdByte>
 800c32c:	4603      	mov	r3, r0
 800c32e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800c330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d107      	bne.n	800c348 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800c338:	7bba      	ldrb	r2, [r7, #14]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2100      	movs	r1, #0
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f7ff ff92 	bl	800c268 <sequence_step_enabled>
 800c344:	4603      	mov	r3, r0
 800c346:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d108      	bne.n	800c362 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800c350:	7bba      	ldrb	r2, [r7, #14]
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	3302      	adds	r3, #2
 800c356:	2101      	movs	r1, #1
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7ff ff85 	bl	800c268 <sequence_step_enabled>
 800c35e:	4603      	mov	r3, r0
 800c360:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d108      	bne.n	800c37c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800c36a:	7bba      	ldrb	r2, [r7, #14]
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	3301      	adds	r3, #1
 800c370:	2102      	movs	r1, #2
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff ff78 	bl	800c268 <sequence_step_enabled>
 800c378:	4603      	mov	r3, r0
 800c37a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c37c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d108      	bne.n	800c396 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800c384:	7bba      	ldrb	r2, [r7, #14]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	3303      	adds	r3, #3
 800c38a:	2103      	movs	r1, #3
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7ff ff6b 	bl	800c268 <sequence_step_enabled>
 800c392:	4603      	mov	r3, r0
 800c394:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d108      	bne.n	800c3b0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800c39e:	7bba      	ldrb	r2, [r7, #14]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	2104      	movs	r1, #4
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f7ff ff5e 	bl	800c268 <sequence_step_enabled>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c3b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800c3ca:	f107 030c 	add.w	r3, r7, #12
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	21f8      	movs	r1, #248	; 0xf8
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f003 ff74 	bl	80102c0 <VL53L0X_RdWord>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800c3dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d108      	bne.n	800c3f6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800c3e4:	f107 0308 	add.w	r3, r7, #8
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	2104      	movs	r1, #4
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f003 ff9f 	bl	8010330 <VL53L0X_RdDWord>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c3f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10c      	bne.n	800c418 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800c3fe:	89bb      	ldrh	r3, [r7, #12]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d005      	beq.n	800c410 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	89ba      	ldrh	r2, [r7, #12]
 800c408:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c418:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c42e:	2300      	movs	r3, #0
 800c430:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	7d1b      	ldrb	r3, [r3, #20]
 800c436:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	7bba      	ldrb	r2, [r7, #14]
 800c43c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800c43e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3714      	adds	r7, #20
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b086      	sub	sp, #24
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
 800c456:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c458:	2300      	movs	r3, #0
 800c45a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800c45c:	f107 030e 	add.w	r3, r7, #14
 800c460:	461a      	mov	r2, r3
 800c462:	2120      	movs	r1, #32
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f003 ff2b 	bl	80102c0 <VL53L0X_RdWord>
 800c46a:	4603      	mov	r3, r0
 800c46c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800c46e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d118      	bne.n	800c4a8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800c476:	89fb      	ldrh	r3, [r7, #14]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d109      	bne.n	800c490 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	699b      	ldr	r3, [r3, #24]
 800c480:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	693a      	ldr	r2, [r7, #16]
 800c486:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	751a      	strb	r2, [r3, #20]
 800c48e:	e00b      	b.n	800c4a8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800c490:	89fb      	ldrh	r3, [r7, #14]
 800c492:	00db      	lsls	r3, r3, #3
 800c494:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	693a      	ldr	r2, [r7, #16]
 800c49a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	693a      	ldr	r2, [r7, #16]
 800c4a0:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c4a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3718      	adds	r7, #24
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	460b      	mov	r3, r1
 800c4be:	807b      	strh	r3, [r7, #2]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800c4d4:	887b      	ldrh	r3, [r7, #2]
 800c4d6:	2b05      	cmp	r3, #5
 800c4d8:	d902      	bls.n	800c4e0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c4da:	23fc      	movs	r3, #252	; 0xfc
 800c4dc:	75fb      	strb	r3, [r7, #23]
 800c4de:	e05b      	b.n	800c598 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800c4e0:	787b      	ldrb	r3, [r7, #1]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d106      	bne.n	800c4f4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	73bb      	strb	r3, [r7, #14]
 800c4f2:	e00a      	b.n	800c50a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c4f4:	887b      	ldrh	r3, [r7, #2]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	330a      	adds	r3, #10
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800c502:	2300      	movs	r3, #0
 800c504:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800c506:	2301      	movs	r3, #1
 800c508:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800c50a:	887b      	ldrh	r3, [r7, #2]
 800c50c:	2b05      	cmp	r3, #5
 800c50e:	d841      	bhi.n	800c594 <VL53L0X_SetLimitCheckEnable+0xe0>
 800c510:	a201      	add	r2, pc, #4	; (adr r2, 800c518 <VL53L0X_SetLimitCheckEnable+0x64>)
 800c512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c516:	bf00      	nop
 800c518:	0800c531 	.word	0x0800c531
 800c51c:	0800c53b 	.word	0x0800c53b
 800c520:	0800c551 	.word	0x0800c551
 800c524:	0800c55b 	.word	0x0800c55b
 800c528:	0800c565 	.word	0x0800c565
 800c52c:	0800c57d 	.word	0x0800c57d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	7bfa      	ldrb	r2, [r7, #15]
 800c534:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800c538:	e02e      	b.n	800c598 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800c53e:	b29b      	uxth	r3, r3
 800c540:	461a      	mov	r2, r3
 800c542:	2144      	movs	r1, #68	; 0x44
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f003 fe33 	bl	80101b0 <VL53L0X_WrWord>
 800c54a:	4603      	mov	r3, r0
 800c54c:	75fb      	strb	r3, [r7, #23]

			break;
 800c54e:	e023      	b.n	800c598 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	7bfa      	ldrb	r2, [r7, #15]
 800c554:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800c558:	e01e      	b.n	800c598 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	7bfa      	ldrb	r2, [r7, #15]
 800c55e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800c562:	e019      	b.n	800c598 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800c564:	7bbb      	ldrb	r3, [r7, #14]
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800c56a:	7b7b      	ldrb	r3, [r7, #13]
 800c56c:	22fe      	movs	r2, #254	; 0xfe
 800c56e:	2160      	movs	r1, #96	; 0x60
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f003 fe47 	bl	8010204 <VL53L0X_UpdateByte>
 800c576:	4603      	mov	r3, r0
 800c578:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800c57a:	e00d      	b.n	800c598 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800c57c:	7bbb      	ldrb	r3, [r7, #14]
 800c57e:	011b      	lsls	r3, r3, #4
 800c580:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800c582:	7b7b      	ldrb	r3, [r7, #13]
 800c584:	22ef      	movs	r2, #239	; 0xef
 800c586:	2160      	movs	r1, #96	; 0x60
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f003 fe3b 	bl	8010204 <VL53L0X_UpdateByte>
 800c58e:	4603      	mov	r3, r0
 800c590:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800c592:	e001      	b.n	800c598 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c594:	23fc      	movs	r3, #252	; 0xfc
 800c596:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c598:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10f      	bne.n	800c5c0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800c5a0:	787b      	ldrb	r3, [r7, #1]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d106      	bne.n	800c5b4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c5a6:	887b      	ldrh	r3, [r7, #2]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f883 2020 	strb.w	r2, [r3, #32]
 800c5b2:	e005      	b.n	800c5c0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c5b4:	887b      	ldrh	r3, [r7, #2]
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c5c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3718      	adds	r7, #24
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b087      	sub	sp, #28
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	607a      	str	r2, [r7, #4]
 800c5d8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800c5de:	897b      	ldrh	r3, [r7, #10]
 800c5e0:	2b05      	cmp	r3, #5
 800c5e2:	d905      	bls.n	800c5f0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c5e4:	23fc      	movs	r3, #252	; 0xfc
 800c5e6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	701a      	strb	r2, [r3, #0]
 800c5ee:	e008      	b.n	800c602 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c5f0:	897b      	ldrh	r3, [r7, #10]
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c5fa:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	7dba      	ldrb	r2, [r7, #22]
 800c600:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c602:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c606:	4618      	mov	r0, r3
 800c608:	371c      	adds	r7, #28
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
	...

0800c614 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b086      	sub	sp, #24
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	460b      	mov	r3, r1
 800c61e:	607a      	str	r2, [r7, #4]
 800c620:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c622:	2300      	movs	r3, #0
 800c624:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800c626:	897b      	ldrh	r3, [r7, #10]
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	4413      	add	r3, r2
 800c62c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c630:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800c632:	7dbb      	ldrb	r3, [r7, #22]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d107      	bne.n	800c648 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c638:	897b      	ldrh	r3, [r7, #10]
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	330a      	adds	r3, #10
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4413      	add	r3, r2
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	605a      	str	r2, [r3, #4]
 800c646:	e040      	b.n	800c6ca <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800c648:	897b      	ldrh	r3, [r7, #10]
 800c64a:	2b05      	cmp	r3, #5
 800c64c:	d830      	bhi.n	800c6b0 <VL53L0X_SetLimitCheckValue+0x9c>
 800c64e:	a201      	add	r2, pc, #4	; (adr r2, 800c654 <VL53L0X_SetLimitCheckValue+0x40>)
 800c650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c654:	0800c66d 	.word	0x0800c66d
 800c658:	0800c675 	.word	0x0800c675
 800c65c:	0800c68b 	.word	0x0800c68b
 800c660:	0800c693 	.word	0x0800c693
 800c664:	0800c69b 	.word	0x0800c69b
 800c668:	0800c69b 	.word	0x0800c69b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800c672:	e01f      	b.n	800c6b4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800c678:	b29b      	uxth	r3, r3
 800c67a:	461a      	mov	r2, r3
 800c67c:	2144      	movs	r1, #68	; 0x44
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	f003 fd96 	bl	80101b0 <VL53L0X_WrWord>
 800c684:	4603      	mov	r3, r0
 800c686:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800c688:	e014      	b.n	800c6b4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800c690:	e010      	b.n	800c6b4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800c698:	e00c      	b.n	800c6b4 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	2164      	movs	r1, #100	; 0x64
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f003 fd83 	bl	80101b0 <VL53L0X_WrWord>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800c6ae:	e001      	b.n	800c6b4 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c6b0:	23fc      	movs	r3, #252	; 0xfc
 800c6b2:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c6b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d106      	bne.n	800c6ca <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c6bc:	897b      	ldrh	r3, [r7, #10]
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	330a      	adds	r3, #10
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4413      	add	r3, r2
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c6ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3718      	adds	r7, #24
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop

0800c6d8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800c6ee:	897b      	ldrh	r3, [r7, #10]
 800c6f0:	2b05      	cmp	r3, #5
 800c6f2:	d847      	bhi.n	800c784 <VL53L0X_GetLimitCheckValue+0xac>
 800c6f4:	a201      	add	r2, pc, #4	; (adr r2, 800c6fc <VL53L0X_GetLimitCheckValue+0x24>)
 800c6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6fa:	bf00      	nop
 800c6fc:	0800c715 	.word	0x0800c715
 800c700:	0800c721 	.word	0x0800c721
 800c704:	0800c747 	.word	0x0800c747
 800c708:	0800c753 	.word	0x0800c753
 800c70c:	0800c75f 	.word	0x0800c75f
 800c710:	0800c75f 	.word	0x0800c75f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c718:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	77bb      	strb	r3, [r7, #30]
		break;
 800c71e:	e033      	b.n	800c788 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800c720:	f107 0316 	add.w	r3, r7, #22
 800c724:	461a      	mov	r2, r3
 800c726:	2144      	movs	r1, #68	; 0x44
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f003 fdc9 	bl	80102c0 <VL53L0X_RdWord>
 800c72e:	4603      	mov	r3, r0
 800c730:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800c732:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d102      	bne.n	800c740 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800c73a:	8afb      	ldrh	r3, [r7, #22]
 800c73c:	025b      	lsls	r3, r3, #9
 800c73e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800c740:	2301      	movs	r3, #1
 800c742:	77bb      	strb	r3, [r7, #30]
		break;
 800c744:	e020      	b.n	800c788 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c74a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	77bb      	strb	r3, [r7, #30]
		break;
 800c750:	e01a      	b.n	800c788 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c756:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 800c758:	2300      	movs	r3, #0
 800c75a:	77bb      	strb	r3, [r7, #30]
		break;
 800c75c:	e014      	b.n	800c788 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800c75e:	f107 0316 	add.w	r3, r7, #22
 800c762:	461a      	mov	r2, r3
 800c764:	2164      	movs	r1, #100	; 0x64
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f003 fdaa 	bl	80102c0 <VL53L0X_RdWord>
 800c76c:	4603      	mov	r3, r0
 800c76e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800c770:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d102      	bne.n	800c77e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800c778:	8afb      	ldrh	r3, [r7, #22]
 800c77a:	025b      	lsls	r3, r3, #9
 800c77c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	77bb      	strb	r3, [r7, #30]
		break;
 800c782:	e001      	b.n	800c788 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c784:	23fc      	movs	r3, #252	; 0xfc
 800c786:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c788:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d12a      	bne.n	800c7e6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800c790:	7fbb      	ldrb	r3, [r7, #30]
 800c792:	2b01      	cmp	r3, #1
 800c794:	d124      	bne.n	800c7e0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d110      	bne.n	800c7be <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800c79c:	897b      	ldrh	r3, [r7, #10]
 800c79e:	68fa      	ldr	r2, [r7, #12]
 800c7a0:	330a      	adds	r3, #10
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	4413      	add	r3, r2
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	69ba      	ldr	r2, [r7, #24]
 800c7ae:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c7b0:	897b      	ldrh	r3, [r7, #10]
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 2020 	strb.w	r2, [r3, #32]
 800c7bc:	e013      	b.n	800c7e6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	69ba      	ldr	r2, [r7, #24]
 800c7c2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c7c4:	897b      	ldrh	r3, [r7, #10]
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	330a      	adds	r3, #10
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4413      	add	r3, r2
 800c7ce:	69ba      	ldr	r2, [r7, #24]
 800c7d0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c7d2:	897b      	ldrh	r3, [r7, #10]
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	2201      	movs	r2, #1
 800c7da:	f883 2020 	strb.w	r2, [r3, #32]
 800c7de:	e002      	b.n	800c7e6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	69ba      	ldr	r2, [r7, #24]
 800c7e4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c7e6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3720      	adds	r7, #32
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop

0800c7f4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c7fe:	2300      	movs	r3, #0
 800c800:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800c802:	f107 030e 	add.w	r3, r7, #14
 800c806:	461a      	mov	r2, r3
 800c808:	2101      	movs	r1, #1
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f003 fd2e 	bl	801026c <VL53L0X_RdByte>
 800c810:	4603      	mov	r3, r0
 800c812:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800c814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10e      	bne.n	800c83a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800c81c:	7bba      	ldrb	r2, [r7, #14]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 800c824:	7bbb      	ldrb	r3, [r7, #14]
 800c826:	b25b      	sxtb	r3, r3
 800c828:	2b00      	cmp	r3, #0
 800c82a:	da03      	bge.n	800c834 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	2201      	movs	r2, #1
 800c830:	701a      	strb	r2, [r3, #0]
 800c832:	e002      	b.n	800c83a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	2200      	movs	r2, #0
 800c838:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c83a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d104      	bne.n	800c84c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	781a      	ldrb	r2, [r3, #0]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c84c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c860:	2300      	movs	r3, #0
 800c862:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c864:	f107 030e 	add.w	r3, r7, #14
 800c868:	4619      	mov	r1, r3
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7ff fbea 	bl	800c044 <VL53L0X_GetDeviceMode>
 800c870:	4603      	mov	r3, r0
 800c872:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 800c874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d107      	bne.n	800c88c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c87c:	7bbb      	ldrb	r3, [r7, #14]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d104      	bne.n	800c88c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f924 	bl	800cad0 <VL53L0X_StartMeasurement>
 800c888:	4603      	mov	r3, r0
 800c88a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c88c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d104      	bne.n	800c89e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f001 fbcb 	bl	800e030 <VL53L0X_measurement_poll_for_completion>
 800c89a:	4603      	mov	r3, r0
 800c89c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800c89e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d106      	bne.n	800c8b4 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c8a6:	7bbb      	ldrb	r3, [r7, #14]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d103      	bne.n	800c8b4 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2203      	movs	r2, #3
 800c8b0:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 800c8b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3710      	adds	r7, #16
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b086      	sub	sp, #24
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	68b9      	ldr	r1, [r7, #8]
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f001 fb6d 	bl	800dfb6 <VL53L0X_perform_ref_calibration>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800c8e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3718      	adds	r7, #24
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800c902:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 800c904:	7dbb      	ldrb	r3, [r7, #22]
 800c906:	2b03      	cmp	r3, #3
 800c908:	f000 8093 	beq.w	800ca32 <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 800c90c:	2b03      	cmp	r3, #3
 800c90e:	f300 80d6 	bgt.w	800cabe <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 800c912:	2b01      	cmp	r3, #1
 800c914:	d002      	beq.n	800c91c <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 800c916:	2b02      	cmp	r3, #2
 800c918:	d047      	beq.n	800c9aa <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 800c91a:	e0d0      	b.n	800cabe <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800c91c:	f107 030c 	add.w	r3, r7, #12
 800c920:	f107 0210 	add.w	r2, r7, #16
 800c924:	2101      	movs	r1, #1
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fc4c 	bl	800d1c4 <VL53L0X_GetInterruptThresholds>
 800c92c:	4603      	mov	r3, r0
 800c92e:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c936:	f240 80bd 	bls.w	800cab4 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 800c93a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f040 80b8 	bne.w	800cab4 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800c944:	78fb      	ldrb	r3, [r7, #3]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d006      	beq.n	800c958 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 800c94a:	4960      	ldr	r1, [pc, #384]	; (800cacc <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f002 fd39 	bl	800f3c4 <VL53L0X_load_tuning_settings>
 800c952:	4603      	mov	r3, r0
 800c954:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800c956:	e0ad      	b.n	800cab4 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800c958:	2204      	movs	r2, #4
 800c95a:	21ff      	movs	r1, #255	; 0xff
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f003 fc03 	bl	8010168 <VL53L0X_WrByte>
 800c962:	4603      	mov	r3, r0
 800c964:	461a      	mov	r2, r3
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	4313      	orrs	r3, r2
 800c96a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800c96c:	2200      	movs	r2, #0
 800c96e:	2170      	movs	r1, #112	; 0x70
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f003 fbf9 	bl	8010168 <VL53L0X_WrByte>
 800c976:	4603      	mov	r3, r0
 800c978:	461a      	mov	r2, r3
 800c97a:	7dfb      	ldrb	r3, [r7, #23]
 800c97c:	4313      	orrs	r3, r2
 800c97e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c980:	2200      	movs	r2, #0
 800c982:	21ff      	movs	r1, #255	; 0xff
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f003 fbef 	bl	8010168 <VL53L0X_WrByte>
 800c98a:	4603      	mov	r3, r0
 800c98c:	461a      	mov	r2, r3
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
 800c990:	4313      	orrs	r3, r2
 800c992:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c994:	2200      	movs	r2, #0
 800c996:	2180      	movs	r1, #128	; 0x80
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f003 fbe5 	bl	8010168 <VL53L0X_WrByte>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	7dfb      	ldrb	r3, [r7, #23]
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	75fb      	strb	r3, [r7, #23]
		break;
 800c9a8:	e084      	b.n	800cab4 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800c9aa:	f107 030c 	add.w	r3, r7, #12
 800c9ae:	f107 0210 	add.w	r2, r7, #16
 800c9b2:	2101      	movs	r1, #1
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 fc05 	bl	800d1c4 <VL53L0X_GetInterruptThresholds>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d079      	beq.n	800cab8 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 800c9c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d175      	bne.n	800cab8 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800c9cc:	78fb      	ldrb	r3, [r7, #3]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d006      	beq.n	800c9e0 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 800c9d2:	493e      	ldr	r1, [pc, #248]	; (800cacc <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f002 fcf5 	bl	800f3c4 <VL53L0X_load_tuning_settings>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800c9de:	e06b      	b.n	800cab8 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800c9e0:	2204      	movs	r2, #4
 800c9e2:	21ff      	movs	r1, #255	; 0xff
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f003 fbbf 	bl	8010168 <VL53L0X_WrByte>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	2170      	movs	r1, #112	; 0x70
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f003 fbb5 	bl	8010168 <VL53L0X_WrByte>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	461a      	mov	r2, r3
 800ca02:	7dfb      	ldrb	r3, [r7, #23]
 800ca04:	4313      	orrs	r3, r2
 800ca06:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ca08:	2200      	movs	r2, #0
 800ca0a:	21ff      	movs	r1, #255	; 0xff
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f003 fbab 	bl	8010168 <VL53L0X_WrByte>
 800ca12:	4603      	mov	r3, r0
 800ca14:	461a      	mov	r2, r3
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	2180      	movs	r1, #128	; 0x80
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f003 fba1 	bl	8010168 <VL53L0X_WrByte>
 800ca26:	4603      	mov	r3, r0
 800ca28:	461a      	mov	r2, r3
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	75fb      	strb	r3, [r7, #23]
		break;
 800ca30:	e042      	b.n	800cab8 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800ca32:	f107 030c 	add.w	r3, r7, #12
 800ca36:	f107 0210 	add.w	r2, r7, #16
 800ca3a:	2101      	movs	r1, #1
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 fbc1 	bl	800d1c4 <VL53L0X_GetInterruptThresholds>
 800ca42:	4603      	mov	r3, r0
 800ca44:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 800ca46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d136      	bne.n	800cabc <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 800ca4e:	78fb      	ldrb	r3, [r7, #3]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d006      	beq.n	800ca62 <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 800ca54:	491d      	ldr	r1, [pc, #116]	; (800cacc <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f002 fcb4 	bl	800f3c4 <VL53L0X_load_tuning_settings>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800ca60:	e02c      	b.n	800cabc <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800ca62:	2204      	movs	r2, #4
 800ca64:	21ff      	movs	r1, #255	; 0xff
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f003 fb7e 	bl	8010168 <VL53L0X_WrByte>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	461a      	mov	r2, r3
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800ca76:	2200      	movs	r2, #0
 800ca78:	2170      	movs	r1, #112	; 0x70
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f003 fb74 	bl	8010168 <VL53L0X_WrByte>
 800ca80:	4603      	mov	r3, r0
 800ca82:	461a      	mov	r2, r3
 800ca84:	7dfb      	ldrb	r3, [r7, #23]
 800ca86:	4313      	orrs	r3, r2
 800ca88:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	21ff      	movs	r1, #255	; 0xff
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f003 fb6a 	bl	8010168 <VL53L0X_WrByte>
 800ca94:	4603      	mov	r3, r0
 800ca96:	461a      	mov	r2, r3
 800ca98:	7dfb      	ldrb	r3, [r7, #23]
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ca9e:	2200      	movs	r2, #0
 800caa0:	2180      	movs	r1, #128	; 0x80
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f003 fb60 	bl	8010168 <VL53L0X_WrByte>
 800caa8:	4603      	mov	r3, r0
 800caaa:	461a      	mov	r2, r3
 800caac:	7dfb      	ldrb	r3, [r7, #23]
 800caae:	4313      	orrs	r3, r2
 800cab0:	75fb      	strb	r3, [r7, #23]
		break;
 800cab2:	e003      	b.n	800cabc <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 800cab4:	bf00      	nop
 800cab6:	e002      	b.n	800cabe <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 800cab8:	bf00      	nop
 800caba:	e000      	b.n	800cabe <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 800cabc:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cabe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3718      	adds	r7, #24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	200001a0 	.word	0x200001a0

0800cad0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cad8:	2300      	movs	r3, #0
 800cada:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800cadc:	2301      	movs	r3, #1
 800cade:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800cae0:	f107 030e 	add.w	r3, r7, #14
 800cae4:	4619      	mov	r1, r3
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff faac 	bl	800c044 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800caec:	2201      	movs	r2, #1
 800caee:	2180      	movs	r1, #128	; 0x80
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f003 fb39 	bl	8010168 <VL53L0X_WrByte>
 800caf6:	4603      	mov	r3, r0
 800caf8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cafa:	2201      	movs	r2, #1
 800cafc:	21ff      	movs	r1, #255	; 0xff
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f003 fb32 	bl	8010168 <VL53L0X_WrByte>
 800cb04:	4603      	mov	r3, r0
 800cb06:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800cb08:	2200      	movs	r2, #0
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f003 fb2b 	bl	8010168 <VL53L0X_WrByte>
 800cb12:	4603      	mov	r3, r0
 800cb14:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	2191      	movs	r1, #145	; 0x91
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f003 fb21 	bl	8010168 <VL53L0X_WrByte>
 800cb26:	4603      	mov	r3, r0
 800cb28:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f003 fb1a 	bl	8010168 <VL53L0X_WrByte>
 800cb34:	4603      	mov	r3, r0
 800cb36:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cb38:	2200      	movs	r2, #0
 800cb3a:	21ff      	movs	r1, #255	; 0xff
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f003 fb13 	bl	8010168 <VL53L0X_WrByte>
 800cb42:	4603      	mov	r3, r0
 800cb44:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800cb46:	2200      	movs	r2, #0
 800cb48:	2180      	movs	r1, #128	; 0x80
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f003 fb0c 	bl	8010168 <VL53L0X_WrByte>
 800cb50:	4603      	mov	r3, r0
 800cb52:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800cb54:	7bbb      	ldrb	r3, [r7, #14]
 800cb56:	2b03      	cmp	r3, #3
 800cb58:	d054      	beq.n	800cc04 <VL53L0X_StartMeasurement+0x134>
 800cb5a:	2b03      	cmp	r3, #3
 800cb5c:	dc6c      	bgt.n	800cc38 <VL53L0X_StartMeasurement+0x168>
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d002      	beq.n	800cb68 <VL53L0X_StartMeasurement+0x98>
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d034      	beq.n	800cbd0 <VL53L0X_StartMeasurement+0x100>
 800cb66:	e067      	b.n	800cc38 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800cb68:	2201      	movs	r2, #1
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f003 fafb 	bl	8010168 <VL53L0X_WrByte>
 800cb72:	4603      	mov	r3, r0
 800cb74:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800cb76:	7bfb      	ldrb	r3, [r7, #15]
 800cb78:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800cb7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d15d      	bne.n	800cc3e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d008      	beq.n	800cb9e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800cb8c:	f107 030d 	add.w	r3, r7, #13
 800cb90:	461a      	mov	r2, r3
 800cb92:	2100      	movs	r1, #0
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f003 fb69 	bl	801026c <VL53L0X_RdByte>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	3301      	adds	r3, #1
 800cba2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800cba4:	7b7a      	ldrb	r2, [r7, #13]
 800cba6:	7bfb      	ldrb	r3, [r7, #15]
 800cba8:	4013      	ands	r3, r2
 800cbaa:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800cbac:	7bfa      	ldrb	r2, [r7, #15]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d107      	bne.n	800cbc2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800cbb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d103      	bne.n	800cbc2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800cbc0:	d3e1      	bcc.n	800cb86 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800cbc8:	d339      	bcc.n	800cc3e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800cbca:	23f9      	movs	r3, #249	; 0xf9
 800cbcc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800cbce:	e036      	b.n	800cc3e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800cbd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d105      	bne.n	800cbe4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800cbd8:	2101      	movs	r1, #1
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f7ff fe86 	bl	800c8ec <VL53L0X_CheckAndLoadInterruptSettings>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f003 fabd 	bl	8010168 <VL53L0X_WrByte>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800cbf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d123      	bne.n	800cc42 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2204      	movs	r2, #4
 800cbfe:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 800cc02:	e01e      	b.n	800cc42 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800cc04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d105      	bne.n	800cc18 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800cc0c:	2101      	movs	r1, #1
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7ff fe6c 	bl	800c8ec <VL53L0X_CheckAndLoadInterruptSettings>
 800cc14:	4603      	mov	r3, r0
 800cc16:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800cc18:	2204      	movs	r2, #4
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f003 faa3 	bl	8010168 <VL53L0X_WrByte>
 800cc22:	4603      	mov	r3, r0
 800cc24:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800cc26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d10b      	bne.n	800cc46 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2204      	movs	r2, #4
 800cc32:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 800cc36:	e006      	b.n	800cc46 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800cc38:	23f8      	movs	r3, #248	; 0xf8
 800cc3a:	75fb      	strb	r3, [r7, #23]
 800cc3c:	e004      	b.n	800cc48 <VL53L0X_StartMeasurement+0x178>
		break;
 800cc3e:	bf00      	nop
 800cc40:	e002      	b.n	800cc48 <VL53L0X_StartMeasurement+0x178>
		break;
 800cc42:	bf00      	nop
 800cc44:	e000      	b.n	800cc48 <VL53L0X_StartMeasurement+0x178>
		break;
 800cc46:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800cc48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3718      	adds	r7, #24
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800cc68:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800cc6a:	7bbb      	ldrb	r3, [r7, #14]
 800cc6c:	2b04      	cmp	r3, #4
 800cc6e:	d112      	bne.n	800cc96 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800cc70:	f107 0308 	add.w	r3, r7, #8
 800cc74:	4619      	mov	r1, r3
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 fb1a 	bl	800d2b0 <VL53L0X_GetInterruptMaskStatus>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	2b04      	cmp	r3, #4
 800cc84:	d103      	bne.n	800cc8e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	701a      	strb	r2, [r3, #0]
 800cc8c:	e01c      	b.n	800ccc8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2200      	movs	r2, #0
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	e018      	b.n	800ccc8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800cc96:	f107 030d 	add.w	r3, r7, #13
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	2114      	movs	r1, #20
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f003 fae4 	bl	801026c <VL53L0X_RdByte>
 800cca4:	4603      	mov	r3, r0
 800cca6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800cca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10b      	bne.n	800ccc8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800ccb0:	7b7b      	ldrb	r3, [r7, #13]
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d003      	beq.n	800ccc2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	701a      	strb	r2, [r3, #0]
 800ccc0:	e002      	b.n	800ccc8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ccc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800ccd4:	b5b0      	push	{r4, r5, r7, lr}
 800ccd6:	b096      	sub	sp, #88	; 0x58
 800ccd8:	af02      	add	r7, sp, #8
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ccde:	2300      	movs	r3, #0
 800cce0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800cce4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cce8:	230c      	movs	r3, #12
 800ccea:	2114      	movs	r1, #20
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f003 fa0f 	bl	8010110 <VL53L0X_ReadMulti>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800ccf8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f040 80d1 	bne.w	800cea4 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	2200      	movs	r2, #0
 800cd06:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 800cd0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	021b      	lsls	r3, r3, #8
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	4413      	add	r3, r2
 800cd20:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	2200      	movs	r2, #0
 800cd28:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800cd2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	021b      	lsls	r3, r3, #8
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	4413      	add	r3, r2
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	025b      	lsls	r3, r3, #9
 800cd40:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd46:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 800cd48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	021b      	lsls	r3, r3, #8
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	4413      	add	r3, r2
 800cd5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800cd5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cd62:	025b      	lsls	r3, r3, #9
 800cd64:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800cd6a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	021b      	lsls	r3, r3, #8
 800cd72:	b29a      	uxth	r2, r3
 800cd74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cd86:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800cd88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cd8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 800cd96:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 800cd9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800cda2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cda4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cda8:	d046      	beq.n	800ce38 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800cdaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cdac:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800cdb0:	fb02 f303 	mul.w	r3, r2, r3
 800cdb4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cdb8:	4a57      	ldr	r2, [pc, #348]	; (800cf18 <VL53L0X_GetRangingMeasurementData+0x244>)
 800cdba:	fb82 1203 	smull	r1, r2, r2, r3
 800cdbe:	1192      	asrs	r2, r2, #6
 800cdc0:	17db      	asrs	r3, r3, #31
 800cdc2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800cdc4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	699b      	ldr	r3, [r3, #24]
 800cdcc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	7d1b      	ldrb	r3, [r3, #20]
 800cdd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800cdd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d02c      	beq.n	800ce38 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800cdde:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cde0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cde4:	fb02 f303 	mul.w	r3, r2, r3
 800cde8:	121a      	asrs	r2, r3, #8
					<= 0) {
 800cdea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d10d      	bne.n	800ce0c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800cdf0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d004      	beq.n	800ce02 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800cdf8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800cdfc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ce00:	e016      	b.n	800ce30 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800ce02:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800ce06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ce0a:	e011      	b.n	800ce30 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800ce0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ce10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce12:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800ce16:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ce18:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800ce1c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800ce20:	121b      	asrs	r3, r3, #8
 800ce22:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800ce24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce26:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800ce28:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800ce2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800ce30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ce34:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800ce38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00d      	beq.n	800ce5c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800ce40:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ce44:	089b      	lsrs	r3, r3, #2
 800ce46:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800ce4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	019b      	lsls	r3, r3, #6
 800ce54:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	75da      	strb	r2, [r3, #23]
 800ce5a:	e006      	b.n	800ce6a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800ce62:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	2200      	movs	r2, #0
 800ce68:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800ce6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ce6e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800ce72:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800ce76:	9301      	str	r3, [sp, #4]
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f002 fef1 	bl	800fc68 <VL53L0X_get_pal_range_status>
 800ce86:	4603      	mov	r3, r0
 800ce88:	461a      	mov	r2, r3
 800ce8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800ce94:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d103      	bne.n	800cea4 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800ce9c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cea4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d12f      	bne.n	800cf0c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f107 040c 	add.w	r4, r7, #12
 800ceb2:	f103 0580 	add.w	r5, r3, #128	; 0x80
 800ceb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ceb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ceba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800cec6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800cecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800ced4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800ceda:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800cee0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800cee6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800ceec:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800cef2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800cefc:	f107 050c 	add.w	r5, r7, #12
 800cf00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cf08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cf0c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3750      	adds	r7, #80	; 0x50
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bdb0      	pop	{r4, r5, r7, pc}
 800cf18:	10624dd3 	.word	0x10624dd3

0800cf1c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f7ff f85d 	bl	800bfec <VL53L0X_SetDeviceMode>
 800cf32:	4603      	mov	r3, r0
 800cf34:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800cf36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d104      	bne.n	800cf48 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7ff fc8a 	bl	800c858 <VL53L0X_PerformSingleMeasurement>
 800cf44:	4603      	mov	r3, r0
 800cf46:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800cf48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d105      	bne.n	800cf5c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800cf50:	6839      	ldr	r1, [r7, #0]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f7ff febe 	bl	800ccd4 <VL53L0X_GetRangingMeasurementData>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800cf5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d105      	bne.n	800cf70 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800cf64:	2100      	movs	r1, #0
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 f962 	bl	800d230 <VL53L0X_ClearInterruptMask>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800cf70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	4608      	mov	r0, r1
 800cf86:	4611      	mov	r1, r2
 800cf88:	461a      	mov	r2, r3
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	70fb      	strb	r3, [r7, #3]
 800cf8e:	460b      	mov	r3, r1
 800cf90:	70bb      	strb	r3, [r7, #2]
 800cf92:	4613      	mov	r3, r2
 800cf94:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf96:	2300      	movs	r3, #0
 800cf98:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800cf9a:	78fb      	ldrb	r3, [r7, #3]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d002      	beq.n	800cfa6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800cfa0:	23f6      	movs	r3, #246	; 0xf6
 800cfa2:	73fb      	strb	r3, [r7, #15]
 800cfa4:	e107      	b.n	800d1b6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800cfa6:	78bb      	ldrb	r3, [r7, #2]
 800cfa8:	2b14      	cmp	r3, #20
 800cfaa:	d110      	bne.n	800cfce <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800cfac:	7e3b      	ldrb	r3, [r7, #24]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d102      	bne.n	800cfb8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800cfb2:	2310      	movs	r3, #16
 800cfb4:	73bb      	strb	r3, [r7, #14]
 800cfb6:	e001      	b.n	800cfbc <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800cfbc:	7bbb      	ldrb	r3, [r7, #14]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	2184      	movs	r1, #132	; 0x84
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f003 f8d0 	bl	8010168 <VL53L0X_WrByte>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	73fb      	strb	r3, [r7, #15]
 800cfcc:	e0f3      	b.n	800d1b6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800cfce:	78bb      	ldrb	r3, [r7, #2]
 800cfd0:	2b15      	cmp	r3, #21
 800cfd2:	f040 8097 	bne.w	800d104 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	21ff      	movs	r1, #255	; 0xff
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f003 f8c4 	bl	8010168 <VL53L0X_WrByte>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	7bfb      	ldrb	r3, [r7, #15]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800cfea:	2200      	movs	r2, #0
 800cfec:	2100      	movs	r1, #0
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f003 f8ba 	bl	8010168 <VL53L0X_WrByte>
 800cff4:	4603      	mov	r3, r0
 800cff6:	461a      	mov	r2, r3
 800cff8:	7bfb      	ldrb	r3, [r7, #15]
 800cffa:	4313      	orrs	r3, r2
 800cffc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cffe:	2200      	movs	r2, #0
 800d000:	21ff      	movs	r1, #255	; 0xff
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f003 f8b0 	bl	8010168 <VL53L0X_WrByte>
 800d008:	4603      	mov	r3, r0
 800d00a:	461a      	mov	r2, r3
 800d00c:	7bfb      	ldrb	r3, [r7, #15]
 800d00e:	4313      	orrs	r3, r2
 800d010:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d012:	2201      	movs	r2, #1
 800d014:	2180      	movs	r1, #128	; 0x80
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f003 f8a6 	bl	8010168 <VL53L0X_WrByte>
 800d01c:	4603      	mov	r3, r0
 800d01e:	461a      	mov	r2, r3
 800d020:	7bfb      	ldrb	r3, [r7, #15]
 800d022:	4313      	orrs	r3, r2
 800d024:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800d026:	2202      	movs	r2, #2
 800d028:	2185      	movs	r1, #133	; 0x85
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f003 f89c 	bl	8010168 <VL53L0X_WrByte>
 800d030:	4603      	mov	r3, r0
 800d032:	461a      	mov	r2, r3
 800d034:	7bfb      	ldrb	r3, [r7, #15]
 800d036:	4313      	orrs	r3, r2
 800d038:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800d03a:	2204      	movs	r2, #4
 800d03c:	21ff      	movs	r1, #255	; 0xff
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f003 f892 	bl	8010168 <VL53L0X_WrByte>
 800d044:	4603      	mov	r3, r0
 800d046:	461a      	mov	r2, r3
 800d048:	7bfb      	ldrb	r3, [r7, #15]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800d04e:	2200      	movs	r2, #0
 800d050:	21cd      	movs	r1, #205	; 0xcd
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f003 f888 	bl	8010168 <VL53L0X_WrByte>
 800d058:	4603      	mov	r3, r0
 800d05a:	461a      	mov	r2, r3
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
 800d05e:	4313      	orrs	r3, r2
 800d060:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800d062:	2211      	movs	r2, #17
 800d064:	21cc      	movs	r1, #204	; 0xcc
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f003 f87e 	bl	8010168 <VL53L0X_WrByte>
 800d06c:	4603      	mov	r3, r0
 800d06e:	461a      	mov	r2, r3
 800d070:	7bfb      	ldrb	r3, [r7, #15]
 800d072:	4313      	orrs	r3, r2
 800d074:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800d076:	2207      	movs	r2, #7
 800d078:	21ff      	movs	r1, #255	; 0xff
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f003 f874 	bl	8010168 <VL53L0X_WrByte>
 800d080:	4603      	mov	r3, r0
 800d082:	461a      	mov	r2, r3
 800d084:	7bfb      	ldrb	r3, [r7, #15]
 800d086:	4313      	orrs	r3, r2
 800d088:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800d08a:	2200      	movs	r2, #0
 800d08c:	21be      	movs	r1, #190	; 0xbe
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f003 f86a 	bl	8010168 <VL53L0X_WrByte>
 800d094:	4603      	mov	r3, r0
 800d096:	461a      	mov	r2, r3
 800d098:	7bfb      	ldrb	r3, [r7, #15]
 800d09a:	4313      	orrs	r3, r2
 800d09c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800d09e:	2206      	movs	r2, #6
 800d0a0:	21ff      	movs	r1, #255	; 0xff
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f003 f860 	bl	8010168 <VL53L0X_WrByte>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	7bfb      	ldrb	r3, [r7, #15]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800d0b2:	2209      	movs	r2, #9
 800d0b4:	21cc      	movs	r1, #204	; 0xcc
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f003 f856 	bl	8010168 <VL53L0X_WrByte>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	461a      	mov	r2, r3
 800d0c0:	7bfb      	ldrb	r3, [r7, #15]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	21ff      	movs	r1, #255	; 0xff
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f003 f84c 	bl	8010168 <VL53L0X_WrByte>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d0da:	2201      	movs	r2, #1
 800d0dc:	21ff      	movs	r1, #255	; 0xff
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f003 f842 	bl	8010168 <VL53L0X_WrByte>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f003 f838 	bl	8010168 <VL53L0X_WrByte>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	7bfb      	ldrb	r3, [r7, #15]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	73fb      	strb	r3, [r7, #15]
 800d102:	e058      	b.n	800d1b6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800d104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d121      	bne.n	800d150 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800d10c:	787b      	ldrb	r3, [r7, #1]
 800d10e:	2b04      	cmp	r3, #4
 800d110:	d81b      	bhi.n	800d14a <VL53L0X_SetGpioConfig+0x1ce>
 800d112:	a201      	add	r2, pc, #4	; (adr r2, 800d118 <VL53L0X_SetGpioConfig+0x19c>)
 800d114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d118:	0800d12d 	.word	0x0800d12d
 800d11c:	0800d133 	.word	0x0800d133
 800d120:	0800d139 	.word	0x0800d139
 800d124:	0800d13f 	.word	0x0800d13f
 800d128:	0800d145 	.word	0x0800d145
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800d12c:	2300      	movs	r3, #0
 800d12e:	73bb      	strb	r3, [r7, #14]
				break;
 800d130:	e00f      	b.n	800d152 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800d132:	2301      	movs	r3, #1
 800d134:	73bb      	strb	r3, [r7, #14]
				break;
 800d136:	e00c      	b.n	800d152 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800d138:	2302      	movs	r3, #2
 800d13a:	73bb      	strb	r3, [r7, #14]
				break;
 800d13c:	e009      	b.n	800d152 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800d13e:	2303      	movs	r3, #3
 800d140:	73bb      	strb	r3, [r7, #14]
				break;
 800d142:	e006      	b.n	800d152 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800d144:	2304      	movs	r3, #4
 800d146:	73bb      	strb	r3, [r7, #14]
				break;
 800d148:	e003      	b.n	800d152 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800d14a:	23f5      	movs	r3, #245	; 0xf5
 800d14c:	73fb      	strb	r3, [r7, #15]
 800d14e:	e000      	b.n	800d152 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800d150:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800d152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d107      	bne.n	800d16a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800d15a:	7bbb      	ldrb	r3, [r7, #14]
 800d15c:	461a      	mov	r2, r3
 800d15e:	210a      	movs	r1, #10
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f003 f801 	bl	8010168 <VL53L0X_WrByte>
 800d166:	4603      	mov	r3, r0
 800d168:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800d16a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d10f      	bne.n	800d192 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800d172:	7e3b      	ldrb	r3, [r7, #24]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d102      	bne.n	800d17e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800d178:	2300      	movs	r3, #0
 800d17a:	73bb      	strb	r3, [r7, #14]
 800d17c:	e001      	b.n	800d182 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800d17e:	2310      	movs	r3, #16
 800d180:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800d182:	7bbb      	ldrb	r3, [r7, #14]
 800d184:	22ef      	movs	r2, #239	; 0xef
 800d186:	2184      	movs	r1, #132	; 0x84
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f003 f83b 	bl	8010204 <VL53L0X_UpdateByte>
 800d18e:	4603      	mov	r3, r0
 800d190:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800d192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d103      	bne.n	800d1a2 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	787a      	ldrb	r2, [r7, #1]
 800d19e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800d1a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d105      	bne.n	800d1b6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 f83f 	bl	800d230 <VL53L0X_ClearInterruptMask>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d1b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop

0800d1c4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b086      	sub	sp, #24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	607a      	str	r2, [r7, #4]
 800d1ce:	603b      	str	r3, [r7, #0]
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 800d1d8:	f107 0314 	add.w	r3, r7, #20
 800d1dc:	461a      	mov	r2, r3
 800d1de:	210e      	movs	r1, #14
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f003 f86d 	bl	80102c0 <VL53L0X_RdWord>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800d1ea:	8abb      	ldrh	r3, [r7, #20]
 800d1ec:	045b      	lsls	r3, r3, #17
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	4b0e      	ldr	r3, [pc, #56]	; (800d22c <VL53L0X_GetInterruptThresholds+0x68>)
 800d1f2:	4013      	ands	r3, r2
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800d1f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d10f      	bne.n	800d220 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800d200:	f107 0314 	add.w	r3, r7, #20
 800d204:	461a      	mov	r2, r3
 800d206:	210c      	movs	r1, #12
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f003 f859 	bl	80102c0 <VL53L0X_RdWord>
 800d20e:	4603      	mov	r3, r0
 800d210:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800d212:	8abb      	ldrh	r3, [r7, #20]
 800d214:	045b      	lsls	r3, r3, #17
 800d216:	461a      	mov	r2, r3
 800d218:	4b04      	ldr	r3, [pc, #16]	; (800d22c <VL53L0X_GetInterruptThresholds+0x68>)
 800d21a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800d21c:	683a      	ldr	r2, [r7, #0]
 800d21e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d220:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3718      	adds	r7, #24
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	1ffe0000 	.word	0x1ffe0000

0800d230 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d23a:	2300      	movs	r3, #0
 800d23c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800d242:	2201      	movs	r2, #1
 800d244:	210b      	movs	r1, #11
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f002 ff8e 	bl	8010168 <VL53L0X_WrByte>
 800d24c:	4603      	mov	r3, r0
 800d24e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800d250:	2200      	movs	r2, #0
 800d252:	210b      	movs	r1, #11
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f002 ff87 	bl	8010168 <VL53L0X_WrByte>
 800d25a:	4603      	mov	r3, r0
 800d25c:	461a      	mov	r2, r3
 800d25e:	7bfb      	ldrb	r3, [r7, #15]
 800d260:	4313      	orrs	r3, r2
 800d262:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800d264:	f107 030d 	add.w	r3, r7, #13
 800d268:	461a      	mov	r2, r3
 800d26a:	2113      	movs	r1, #19
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f002 fffd 	bl	801026c <VL53L0X_RdByte>
 800d272:	4603      	mov	r3, r0
 800d274:	461a      	mov	r2, r3
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	4313      	orrs	r3, r2
 800d27a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800d27c:	7bbb      	ldrb	r3, [r7, #14]
 800d27e:	3301      	adds	r3, #1
 800d280:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800d282:	7b7b      	ldrb	r3, [r7, #13]
 800d284:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d006      	beq.n	800d29a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800d28c:	7bbb      	ldrb	r3, [r7, #14]
 800d28e:	2b02      	cmp	r3, #2
 800d290:	d803      	bhi.n	800d29a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800d292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d0d3      	beq.n	800d242 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800d29a:	7bbb      	ldrb	r3, [r7, #14]
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d901      	bls.n	800d2a4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800d2a0:	23f4      	movs	r3, #244	; 0xf4
 800d2a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800d2a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3710      	adds	r7, #16
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 800d2be:	f107 030e 	add.w	r3, r7, #14
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	2113      	movs	r1, #19
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f002 ffd0 	bl	801026c <VL53L0X_RdByte>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 800d2d0:	7bbb      	ldrb	r3, [r7, #14]
 800d2d2:	f003 0207 	and.w	r2, r3, #7
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800d2da:	7bbb      	ldrb	r3, [r7, #14]
 800d2dc:	f003 0318 	and.w	r3, r3, #24
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d001      	beq.n	800d2e8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800d2e4:	23fa      	movs	r3, #250	; 0xfa
 800d2e6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800d2e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b086      	sub	sp, #24
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d300:	2300      	movs	r3, #0
 800d302:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	68b9      	ldr	r1, [r7, #8]
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f000 fa03 	bl	800d714 <VL53L0X_perform_ref_spad_management>
 800d30e:	4603      	mov	r3, r0
 800d310:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800d312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3718      	adds	r7, #24
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b084      	sub	sp, #16
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
 800d326:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d328:	2300      	movs	r3, #0
 800d32a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800d32c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800d330:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800d332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d336:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800d338:	f107 0308 	add.w	r3, r7, #8
 800d33c:	461a      	mov	r2, r3
 800d33e:	2128      	movs	r1, #40	; 0x28
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f002 ffbd 	bl	80102c0 <VL53L0X_RdWord>
 800d346:	4603      	mov	r3, r0
 800d348:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800d34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d11e      	bne.n	800d390 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800d352:	893b      	ldrh	r3, [r7, #8]
 800d354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d358:	b29b      	uxth	r3, r3
 800d35a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800d35c:	893b      	ldrh	r3, [r7, #8]
 800d35e:	461a      	mov	r2, r3
 800d360:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d364:	429a      	cmp	r2, r3
 800d366:	dd0b      	ble.n	800d380 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800d368:	893a      	ldrh	r2, [r7, #8]
 800d36a:	897b      	ldrh	r3, [r7, #10]
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	b29b      	uxth	r3, r3
 800d370:	b21b      	sxth	r3, r3
 800d372:	461a      	mov	r2, r3
					* 250;
 800d374:	23fa      	movs	r3, #250	; 0xfa
 800d376:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	601a      	str	r2, [r3, #0]
 800d37e:	e007      	b.n	800d390 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800d380:	893b      	ldrh	r3, [r7, #8]
 800d382:	b21b      	sxth	r3, r3
 800d384:	461a      	mov	r2, r3
 800d386:	23fa      	movs	r3, #250	; 0xfa
 800d388:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800d390:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d394:	4618      	mov	r0, r3
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b08b      	sub	sp, #44	; 0x2c
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
 800d3a8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800d3aa:	2308      	movs	r3, #8
 800d3ac:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3b8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3c2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	69ba      	ldr	r2, [r7, #24]
 800d3c8:	fbb3 f2f2 	udiv	r2, r3, r2
 800d3cc:	69b9      	ldr	r1, [r7, #24]
 800d3ce:	fb01 f202 	mul.w	r2, r1, r2
 800d3d2:	1a9b      	subs	r3, r3, r2
 800d3d4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	627b      	str	r3, [r7, #36]	; 0x24
 800d3da:	e030      	b.n	800d43e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e4:	4413      	add	r3, r2
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800d3ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d11e      	bne.n	800d430 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 800d3f2:	7ffa      	ldrb	r2, [r7, #31]
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	fa42 f303 	asr.w	r3, r2, r3
 800d3fa:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800d400:	e016      	b.n	800d430 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800d402:	7ffb      	ldrb	r3, [r7, #31]
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00b      	beq.n	800d424 <get_next_good_spad+0x88>
				success = 1;
 800d40c:	2301      	movs	r3, #1
 800d40e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	69ba      	ldr	r2, [r7, #24]
 800d414:	fb03 f202 	mul.w	r2, r3, r2
 800d418:	6a3b      	ldr	r3, [r7, #32]
 800d41a:	4413      	add	r3, r2
 800d41c:	461a      	mov	r2, r3
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	601a      	str	r2, [r3, #0]
				break;
 800d422:	e009      	b.n	800d438 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800d424:	7ffb      	ldrb	r3, [r7, #31]
 800d426:	085b      	lsrs	r3, r3, #1
 800d428:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800d42a:	6a3b      	ldr	r3, [r7, #32]
 800d42c:	3301      	adds	r3, #1
 800d42e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800d430:	6a3a      	ldr	r2, [r7, #32]
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	429a      	cmp	r2, r3
 800d436:	d3e4      	bcc.n	800d402 <get_next_good_spad+0x66>
				coarseIndex++) {
 800d438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43a:	3301      	adds	r3, #1
 800d43c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800d43e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	429a      	cmp	r2, r3
 800d444:	d202      	bcs.n	800d44c <get_next_good_spad+0xb0>
 800d446:	7fbb      	ldrb	r3, [r7, #30]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d0c7      	beq.n	800d3dc <get_next_good_spad+0x40>
		}
	}
}
 800d44c:	bf00      	nop
 800d44e:	372c      	adds	r7, #44	; 0x2c
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800d460:	2301      	movs	r3, #1
 800d462:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	099b      	lsrs	r3, r3, #6
 800d468:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800d46a:	4a07      	ldr	r2, [pc, #28]	; (800d488 <is_aperture+0x30>)
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <is_aperture+0x22>
		isAperture = 0;
 800d476:	2300      	movs	r3, #0
 800d478:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800d47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3714      	adds	r7, #20
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr
 800d488:	20000358 	.word	0x20000358

0800d48c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b089      	sub	sp, #36	; 0x24
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d498:	2300      	movs	r3, #0
 800d49a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800d49c:	2308      	movs	r3, #8
 800d49e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4a8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	69ba      	ldr	r2, [r7, #24]
 800d4ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800d4b2:	69b9      	ldr	r1, [r7, #24]
 800d4b4:	fb01 f202 	mul.w	r2, r1, r2
 800d4b8:	1a9b      	subs	r3, r3, r2
 800d4ba:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800d4bc:	697a      	ldr	r2, [r7, #20]
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d302      	bcc.n	800d4ca <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d4c4:	23ce      	movs	r3, #206	; 0xce
 800d4c6:	77fb      	strb	r3, [r7, #31]
 800d4c8:	e010      	b.n	800d4ec <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800d4ca:	68fa      	ldr	r2, [r7, #12]
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	b25a      	sxtb	r2, r3
 800d4d4:	2101      	movs	r1, #1
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d4dc:	b25b      	sxtb	r3, r3
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	b259      	sxtb	r1, r3
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	b2ca      	uxtb	r2, r1
 800d4ea:	701a      	strb	r2, [r3, #0]

	return status;
 800d4ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3724      	adds	r7, #36	; 0x24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800d506:	2306      	movs	r3, #6
 800d508:	683a      	ldr	r2, [r7, #0]
 800d50a:	21b0      	movs	r1, #176	; 0xb0
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f002 fdcf 	bl	80100b0 <VL53L0X_WriteMulti>
 800d512:	4603      	mov	r3, r0
 800d514:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800d516:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b084      	sub	sp, #16
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
 800d52a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800d52c:	2306      	movs	r3, #6
 800d52e:	683a      	ldr	r2, [r7, #0]
 800d530:	21b0      	movs	r1, #176	; 0xb0
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f002 fdec 	bl	8010110 <VL53L0X_ReadMulti>
 800d538:	4603      	mov	r3, r0
 800d53a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800d53c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b08c      	sub	sp, #48	; 0x30
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	607a      	str	r2, [r7, #4]
 800d552:	603b      	str	r3, [r7, #0]
 800d554:	460b      	mov	r3, r1
 800d556:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d558:	2300      	movs	r3, #0
 800d55a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800d55e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d560:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800d562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d564:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800d566:	2300      	movs	r3, #0
 800d568:	62bb      	str	r3, [r7, #40]	; 0x28
 800d56a:	e02b      	b.n	800d5c4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800d56c:	f107 031c 	add.w	r3, r7, #28
 800d570:	6a3a      	ldr	r2, [r7, #32]
 800d572:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff ff11 	bl	800d39c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d580:	d103      	bne.n	800d58a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d582:	23ce      	movs	r3, #206	; 0xce
 800d584:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800d588:	e020      	b.n	800d5cc <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	461a      	mov	r2, r3
 800d58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d590:	4413      	add	r3, r2
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff ff60 	bl	800d458 <is_aperture>
 800d598:	4603      	mov	r3, r0
 800d59a:	461a      	mov	r2, r3
 800d59c:	7afb      	ldrb	r3, [r7, #11]
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d003      	beq.n	800d5aa <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d5a2:	23ce      	movs	r3, #206	; 0xce
 800d5a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800d5a8:	e010      	b.n	800d5cc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800d5ae:	6a3a      	ldr	r2, [r7, #32]
 800d5b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5b2:	6838      	ldr	r0, [r7, #0]
 800d5b4:	f7ff ff6a 	bl	800d48c <enable_spad_bit>
		currentSpad++;
 800d5b8:	6a3b      	ldr	r3, [r7, #32]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800d5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d3cf      	bcc.n	800d56c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800d5cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5ce:	6a3a      	ldr	r2, [r7, #32]
 800d5d0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800d5d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d106      	bne.n	800d5e8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800d5da:	6839      	ldr	r1, [r7, #0]
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f7ff ff8d 	bl	800d4fc <set_ref_spad_map>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800d5e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d121      	bne.n	800d634 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800d5f0:	f107 0314 	add.w	r3, r7, #20
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	f7ff ff93 	bl	800d522 <get_ref_spad_map>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800d602:	2300      	movs	r3, #0
 800d604:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800d606:	e011      	b.n	800d62c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	4413      	add	r3, r2
 800d60e:	781a      	ldrb	r2, [r3, #0]
 800d610:	f107 0114 	add.w	r1, r7, #20
 800d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d616:	440b      	add	r3, r1
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d003      	beq.n	800d626 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d61e:	23ce      	movs	r3, #206	; 0xce
 800d620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800d624:	e006      	b.n	800d634 <enable_ref_spads+0xec>
			}
			i++;
 800d626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d628:	3301      	adds	r3, #1
 800d62a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800d62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d630:	429a      	cmp	r2, r3
 800d632:	d3e9      	bcc.n	800d608 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800d634:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3730      	adds	r7, #48	; 0x30
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b08a      	sub	sp, #40	; 0x28
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d64a:	2300      	movs	r3, #0
 800d64c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800d650:	2300      	movs	r3, #0
 800d652:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800d65c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800d660:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d664:	2b00      	cmp	r3, #0
 800d666:	d107      	bne.n	800d678 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800d668:	22c0      	movs	r2, #192	; 0xc0
 800d66a:	2101      	movs	r1, #1
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f002 fd7b 	bl	8010168 <VL53L0X_WrByte>
 800d672:	4603      	mov	r3, r0
 800d674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800d678:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d108      	bne.n	800d692 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800d680:	f107 0308 	add.w	r3, r7, #8
 800d684:	4619      	mov	r1, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7ff fc48 	bl	800cf1c <VL53L0X_PerformSingleRangingMeasurement>
 800d68c:	4603      	mov	r3, r0
 800d68e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800d692:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d696:	2b00      	cmp	r3, #0
 800d698:	d107      	bne.n	800d6aa <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d69a:	2201      	movs	r2, #1
 800d69c:	21ff      	movs	r1, #255	; 0xff
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f002 fd62 	bl	8010168 <VL53L0X_WrByte>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800d6aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d107      	bne.n	800d6c2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800d6b2:	683a      	ldr	r2, [r7, #0]
 800d6b4:	21b6      	movs	r1, #182	; 0xb6
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f002 fe02 	bl	80102c0 <VL53L0X_RdWord>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800d6c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d107      	bne.n	800d6da <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	21ff      	movs	r1, #255	; 0xff
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f002 fd4a 	bl	8010168 <VL53L0X_WrByte>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800d6da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d112      	bne.n	800d708 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d6e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	2101      	movs	r1, #1
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f002 fd3c 	bl	8010168 <VL53L0X_WrByte>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800d6f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d104      	bne.n	800d708 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d704:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 800d708:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3728      	adds	r7, #40	; 0x28
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800d714:	b590      	push	{r4, r7, lr}
 800d716:	b09d      	sub	sp, #116	; 0x74
 800d718:	af06      	add	r7, sp, #24
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d720:	2300      	movs	r3, #0
 800d722:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800d726:	23b4      	movs	r3, #180	; 0xb4
 800d728:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800d72c:	2303      	movs	r3, #3
 800d72e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800d730:	232c      	movs	r3, #44	; 0x2c
 800d732:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800d734:	2300      	movs	r3, #0
 800d736:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800d738:	2300      	movs	r3, #0
 800d73a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800d73c:	2300      	movs	r3, #0
 800d73e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800d740:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800d744:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800d746:	2300      	movs	r3, #0
 800d748:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800d74a:	2300      	movs	r3, #0
 800d74c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800d74e:	2306      	movs	r3, #6
 800d750:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800d756:	2300      	movs	r3, #0
 800d758:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800d760:	2300      	movs	r3, #0
 800d762:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800d764:	2300      	movs	r3, #0
 800d766:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800d76c:	2300      	movs	r3, #0
 800d76e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 800d778:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800d77a:	2300      	movs	r3, #0
 800d77c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d77e:	e009      	b.n	800d794 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d784:	4413      	add	r3, r2
 800d786:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d78a:	2200      	movs	r2, #0
 800d78c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800d78e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d790:	3301      	adds	r3, #1
 800d792:	64bb      	str	r3, [r7, #72]	; 0x48
 800d794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	429a      	cmp	r2, r3
 800d79a:	d3f1      	bcc.n	800d780 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d79c:	2201      	movs	r2, #1
 800d79e:	21ff      	movs	r1, #255	; 0xff
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f002 fce1 	bl	8010168 <VL53L0X_WrByte>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800d7ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d107      	bne.n	800d7c4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	214f      	movs	r1, #79	; 0x4f
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f002 fcd5 	bl	8010168 <VL53L0X_WrByte>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800d7c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d107      	bne.n	800d7dc <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800d7cc:	222c      	movs	r2, #44	; 0x2c
 800d7ce:	214e      	movs	r1, #78	; 0x4e
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f002 fcc9 	bl	8010168 <VL53L0X_WrByte>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800d7dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d107      	bne.n	800d7f4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	21ff      	movs	r1, #255	; 0xff
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f002 fcbd 	bl	8010168 <VL53L0X_WrByte>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800d7f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d109      	bne.n	800d810 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800d7fc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d800:	461a      	mov	r2, r3
 800d802:	21b6      	movs	r1, #182	; 0xb6
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f002 fcaf 	bl	8010168 <VL53L0X_WrByte>
 800d80a:	4603      	mov	r3, r0
 800d80c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800d810:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d814:	2b00      	cmp	r3, #0
 800d816:	d107      	bne.n	800d828 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800d818:	2200      	movs	r2, #0
 800d81a:	2180      	movs	r1, #128	; 0x80
 800d81c:	68f8      	ldr	r0, [r7, #12]
 800d81e:	f002 fca3 	bl	8010168 <VL53L0X_WrByte>
 800d822:	4603      	mov	r3, r0
 800d824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800d828:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d10a      	bne.n	800d846 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800d830:	f107 0210 	add.w	r2, r7, #16
 800d834:	f107 0111 	add.w	r1, r7, #17
 800d838:	2300      	movs	r3, #0
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f000 fbbb 	bl	800dfb6 <VL53L0X_perform_ref_calibration>
 800d840:	4603      	mov	r3, r0
 800d842:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800d846:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d121      	bne.n	800d892 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800d84e:	2300      	movs	r3, #0
 800d850:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800d852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d854:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800d856:	2300      	movs	r3, #0
 800d858:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800d85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d85c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 800d86a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d86e:	f107 0218 	add.w	r2, r7, #24
 800d872:	9204      	str	r2, [sp, #16]
 800d874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d876:	9203      	str	r2, [sp, #12]
 800d878:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d87a:	9202      	str	r2, [sp, #8]
 800d87c:	9301      	str	r3, [sp, #4]
 800d87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	4623      	mov	r3, r4
 800d884:	4602      	mov	r2, r0
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	f7ff fe5e 	bl	800d548 <enable_ref_spads>
 800d88c:	4603      	mov	r3, r0
 800d88e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d892:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d896:	2b00      	cmp	r3, #0
 800d898:	d174      	bne.n	800d984 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800d89e:	f107 0312 	add.w	r3, r7, #18
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	f7ff fecb 	bl	800d640 <perform_ref_signal_measurement>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800d8b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d161      	bne.n	800d97c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800d8b8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800d8ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d25d      	bcs.n	800d97c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8c4:	e009      	b.n	800d8da <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d8c6:	68fa      	ldr	r2, [r7, #12]
 800d8c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8ca:	4413      	add	r3, r2
 800d8cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800d8d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d3f1      	bcc.n	800d8c6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800d8e2:	e002      	b.n	800d8ea <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800d8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800d8ea:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800d8ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8f0:	4413      	add	r3, r2
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7ff fdb0 	bl	800d458 <is_aperture>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d103      	bne.n	800d906 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800d8fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d902:	429a      	cmp	r2, r3
 800d904:	d3ee      	bcc.n	800d8e4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800d906:	2301      	movs	r3, #1
 800d908:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800d90a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d90c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 800d91a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d91e:	f107 0218 	add.w	r2, r7, #24
 800d922:	9204      	str	r2, [sp, #16]
 800d924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d926:	9203      	str	r2, [sp, #12]
 800d928:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d92a:	9202      	str	r2, [sp, #8]
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	4623      	mov	r3, r4
 800d934:	4602      	mov	r2, r0
 800d936:	68f8      	ldr	r0, [r7, #12]
 800d938:	f7ff fe06 	bl	800d548 <enable_ref_spads>
 800d93c:	4603      	mov	r3, r0
 800d93e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d942:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d946:	2b00      	cmp	r3, #0
 800d948:	d11b      	bne.n	800d982 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800d94e:	f107 0312 	add.w	r3, r7, #18
 800d952:	4619      	mov	r1, r3
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	f7ff fe73 	bl	800d640 <perform_ref_signal_measurement>
 800d95a:	4603      	mov	r3, r0
 800d95c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800d960:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d964:	2b00      	cmp	r3, #0
 800d966:	d10c      	bne.n	800d982 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800d968:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800d96a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d208      	bcs.n	800d982 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800d970:	2301      	movs	r3, #1
 800d972:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800d976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d978:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800d97a:	e002      	b.n	800d982 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800d97c:	2300      	movs	r3, #0
 800d97e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d980:	e000      	b.n	800d984 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800d982:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d984:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f040 80af 	bne.w	800daec <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800d98e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800d990:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d992:	429a      	cmp	r2, r3
 800d994:	f240 80aa 	bls.w	800daec <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800d998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d99a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800d99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9a0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 800d9a8:	f107 031c 	add.w	r3, r7, #28
 800d9ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f002 fd5e 	bl	8010470 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800d9b4:	8a7b      	ldrh	r3, [r7, #18]
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	bfb8      	it	lt
 800d9c0:	425b      	neglt	r3, r3
 800d9c2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800d9ca:	e086      	b.n	800dada <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 800d9d2:	f107 0314 	add.w	r3, r7, #20
 800d9d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9da:	f7ff fcdf 	bl	800d39c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9e4:	d103      	bne.n	800d9ee <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d9e6:	23ce      	movs	r3, #206	; 0xce
 800d9e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800d9ec:	e07e      	b.n	800daec <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800d9ee:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d9f2:	697a      	ldr	r2, [r7, #20]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7ff fd2e 	bl	800d458 <is_aperture>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	461a      	mov	r2, r3
 800da00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da02:	4293      	cmp	r3, r2
 800da04:	d003      	beq.n	800da0e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800da06:	2301      	movs	r3, #1
 800da08:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800da0c:	e06e      	b.n	800daec <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800da0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da10:	3301      	adds	r3, #1
 800da12:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 800da1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da22:	4618      	mov	r0, r3
 800da24:	f7ff fd32 	bl	800d48c <enable_spad_bit>
 800da28:	4603      	mov	r3, r0
 800da2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800da2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800da32:	2b00      	cmp	r3, #0
 800da34:	d10c      	bne.n	800da50 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800da36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da38:	3301      	adds	r3, #1
 800da3a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 800da42:	4619      	mov	r1, r3
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	f7ff fd59 	bl	800d4fc <set_ref_spad_map>
 800da4a:	4603      	mov	r3, r0
 800da4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800da50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800da54:	2b00      	cmp	r3, #0
 800da56:	d146      	bne.n	800dae6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800da58:	f107 0312 	add.w	r3, r7, #18
 800da5c:	4619      	mov	r1, r3
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f7ff fdee 	bl	800d640 <perform_ref_signal_measurement>
 800da64:	4603      	mov	r3, r0
 800da66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800da6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d13b      	bne.n	800daea <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800da72:	8a7b      	ldrh	r3, [r7, #18]
 800da74:	461a      	mov	r2, r3
 800da76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da78:	1ad3      	subs	r3, r2, r3
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	bfb8      	it	lt
 800da7e:	425b      	neglt	r3, r3
 800da80:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800da82:	8a7b      	ldrh	r3, [r7, #18]
 800da84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800da86:	429a      	cmp	r2, r3
 800da88:	d21c      	bcs.n	800dac4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800da8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da8e:	429a      	cmp	r2, r3
 800da90:	d914      	bls.n	800dabc <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 800da92:	f107 031c 	add.w	r3, r7, #28
 800da96:	4619      	mov	r1, r3
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f7ff fd2f 	bl	800d4fc <set_ref_spad_map>
 800da9e:	4603      	mov	r3, r0
 800daa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 800daaa:	f107 011c 	add.w	r1, r7, #28
 800daae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dab0:	4618      	mov	r0, r3
 800dab2:	f002 fcdd 	bl	8010470 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800dab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab8:	3b01      	subs	r3, #1
 800daba:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800dabc:	2301      	movs	r3, #1
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dac2:	e00a      	b.n	800dada <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 800dace:	f107 031c 	add.w	r3, r7, #28
 800dad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dad4:	4618      	mov	r0, r3
 800dad6:	f002 fccb 	bl	8010470 <memcpy>
		while (!complete) {
 800dada:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f43f af74 	beq.w	800d9cc <VL53L0X_perform_ref_spad_management+0x2b8>
 800dae4:	e002      	b.n	800daec <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800dae6:	bf00      	nop
 800dae8:	e000      	b.n	800daec <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800daea:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800daec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d115      	bne.n	800db20 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800daf8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800db00:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2201      	movs	r2, #1
 800db06:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	b2da      	uxtb	r2, r3
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	781a      	ldrb	r2, [r3, #0]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800db20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800db24:	4618      	mov	r0, r3
 800db26:	375c      	adds	r7, #92	; 0x5c
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd90      	pop	{r4, r7, pc}

0800db2c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800db2c:	b590      	push	{r4, r7, lr}
 800db2e:	b093      	sub	sp, #76	; 0x4c
 800db30:	af06      	add	r7, sp, #24
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	4613      	mov	r3, r2
 800db38:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db3a:	2300      	movs	r3, #0
 800db3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800db40:	2300      	movs	r3, #0
 800db42:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800db44:	23b4      	movs	r3, #180	; 0xb4
 800db46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800db4a:	2306      	movs	r3, #6
 800db4c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800db4e:	232c      	movs	r3, #44	; 0x2c
 800db50:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800db52:	2201      	movs	r2, #1
 800db54:	21ff      	movs	r1, #255	; 0xff
 800db56:	68f8      	ldr	r0, [r7, #12]
 800db58:	f002 fb06 	bl	8010168 <VL53L0X_WrByte>
 800db5c:	4603      	mov	r3, r0
 800db5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800db62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800db66:	2b00      	cmp	r3, #0
 800db68:	d107      	bne.n	800db7a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800db6a:	2200      	movs	r2, #0
 800db6c:	214f      	movs	r1, #79	; 0x4f
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f002 fafa 	bl	8010168 <VL53L0X_WrByte>
 800db74:	4603      	mov	r3, r0
 800db76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800db7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d107      	bne.n	800db92 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800db82:	222c      	movs	r2, #44	; 0x2c
 800db84:	214e      	movs	r1, #78	; 0x4e
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f002 faee 	bl	8010168 <VL53L0X_WrByte>
 800db8c:	4603      	mov	r3, r0
 800db8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800db92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800db96:	2b00      	cmp	r3, #0
 800db98:	d107      	bne.n	800dbaa <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800db9a:	2200      	movs	r2, #0
 800db9c:	21ff      	movs	r1, #255	; 0xff
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f002 fae2 	bl	8010168 <VL53L0X_WrByte>
 800dba4:	4603      	mov	r3, r0
 800dba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800dbaa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d109      	bne.n	800dbc6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800dbb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	21b6      	movs	r1, #182	; 0xb6
 800dbba:	68f8      	ldr	r0, [r7, #12]
 800dbbc:	f002 fad4 	bl	8010168 <VL53L0X_WrByte>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	627b      	str	r3, [r7, #36]	; 0x24
 800dbca:	e009      	b.n	800dbe0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd0:	4413      	add	r3, r2
 800dbd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800dbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbdc:	3301      	adds	r3, #1
 800dbde:	627b      	str	r3, [r7, #36]	; 0x24
 800dbe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d3f1      	bcc.n	800dbcc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800dbe8:	79fb      	ldrb	r3, [r7, #7]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d011      	beq.n	800dc12 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800dbee:	e002      	b.n	800dbf6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800dbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800dbf6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800dbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfc:	4413      	add	r3, r2
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff fc2a 	bl	800d458 <is_aperture>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d103      	bne.n	800dc12 <VL53L0X_set_reference_spads+0xe6>
 800dc0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d3ee      	bcc.n	800dbf0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 800dc1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc22:	79f9      	ldrb	r1, [r7, #7]
 800dc24:	f107 0214 	add.w	r2, r7, #20
 800dc28:	9204      	str	r2, [sp, #16]
 800dc2a:	68ba      	ldr	r2, [r7, #8]
 800dc2c:	9203      	str	r2, [sp, #12]
 800dc2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc30:	9202      	str	r2, [sp, #8]
 800dc32:	9301      	str	r3, [sp, #4]
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	4623      	mov	r3, r4
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	f7ff fc83 	bl	800d548 <enable_ref_spads>
 800dc42:	4603      	mov	r3, r0
 800dc44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800dc48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10c      	bne.n	800dc6a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2201      	movs	r2, #1
 800dc54:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	b2da      	uxtb	r2, r3
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	79fa      	ldrb	r2, [r7, #7]
 800dc66:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800dc6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3734      	adds	r7, #52	; 0x34
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd90      	pop	{r4, r7, pc}

0800dc76 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b084      	sub	sp, #16
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]
 800dc7e:	460b      	mov	r3, r1
 800dc80:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dc82:	2300      	movs	r3, #0
 800dc84:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800dc86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d10a      	bne.n	800dca4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800dc8e:	78fb      	ldrb	r3, [r7, #3]
 800dc90:	f043 0301 	orr.w	r3, r3, #1
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	461a      	mov	r2, r3
 800dc98:	2100      	movs	r1, #0
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f002 fa64 	bl	8010168 <VL53L0X_WrByte>
 800dca0:	4603      	mov	r3, r0
 800dca2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800dca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d104      	bne.n	800dcb6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f9bf 	bl	800e030 <VL53L0X_measurement_poll_for_completion>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800dcb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d105      	bne.n	800dcca <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7ff fab5 	bl	800d230 <VL53L0X_ClearInterruptMask>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800dcca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d106      	bne.n	800dce0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f002 fa46 	bl	8010168 <VL53L0X_WrByte>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	73fb      	strb	r3, [r7, #15]

	return Status;
 800dce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	4608      	mov	r0, r1
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	70fb      	strb	r3, [r7, #3]
 800dcfe:	460b      	mov	r3, r1
 800dd00:	70bb      	strb	r3, [r7, #2]
 800dd02:	4613      	mov	r3, r2
 800dd04:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd06:	2300      	movs	r3, #0
 800dd08:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800dd0e:	2201      	movs	r2, #1
 800dd10:	21ff      	movs	r1, #255	; 0xff
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f002 fa28 	bl	8010168 <VL53L0X_WrByte>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	7bfb      	ldrb	r3, [r7, #15]
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800dd22:	2200      	movs	r2, #0
 800dd24:	2100      	movs	r1, #0
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f002 fa1e 	bl	8010168 <VL53L0X_WrByte>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	461a      	mov	r2, r3
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
 800dd32:	4313      	orrs	r3, r2
 800dd34:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800dd36:	2200      	movs	r2, #0
 800dd38:	21ff      	movs	r1, #255	; 0xff
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f002 fa14 	bl	8010168 <VL53L0X_WrByte>
 800dd40:	4603      	mov	r3, r0
 800dd42:	461a      	mov	r2, r3
 800dd44:	7bfb      	ldrb	r3, [r7, #15]
 800dd46:	4313      	orrs	r3, r2
 800dd48:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800dd4a:	78fb      	ldrb	r3, [r7, #3]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d01e      	beq.n	800dd8e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800dd50:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d009      	beq.n	800dd6c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800dd58:	69ba      	ldr	r2, [r7, #24]
 800dd5a:	21cb      	movs	r1, #203	; 0xcb
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f002 fa85 	bl	801026c <VL53L0X_RdByte>
 800dd62:	4603      	mov	r3, r0
 800dd64:	461a      	mov	r2, r3
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800dd6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d02a      	beq.n	800ddca <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800dd74:	f107 030e 	add.w	r3, r7, #14
 800dd78:	461a      	mov	r2, r3
 800dd7a:	21ee      	movs	r1, #238	; 0xee
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f002 fa75 	bl	801026c <VL53L0X_RdByte>
 800dd82:	4603      	mov	r3, r0
 800dd84:	461a      	mov	r2, r3
 800dd86:	7bfb      	ldrb	r3, [r7, #15]
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	73fb      	strb	r3, [r7, #15]
 800dd8c:	e01d      	b.n	800ddca <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800dd8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00a      	beq.n	800ddac <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800dd96:	78bb      	ldrb	r3, [r7, #2]
 800dd98:	461a      	mov	r2, r3
 800dd9a:	21cb      	movs	r1, #203	; 0xcb
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f002 f9e3 	bl	8010168 <VL53L0X_WrByte>
 800dda2:	4603      	mov	r3, r0
 800dda4:	461a      	mov	r2, r3
 800dda6:	7bfb      	ldrb	r3, [r7, #15]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800ddac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00a      	beq.n	800ddca <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800ddb4:	787b      	ldrb	r3, [r7, #1]
 800ddb6:	2280      	movs	r2, #128	; 0x80
 800ddb8:	21ee      	movs	r1, #238	; 0xee
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f002 fa22 	bl	8010204 <VL53L0X_UpdateByte>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	7bfb      	ldrb	r3, [r7, #15]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ddca:	2201      	movs	r2, #1
 800ddcc:	21ff      	movs	r1, #255	; 0xff
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f002 f9ca 	bl	8010168 <VL53L0X_WrByte>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	7bfb      	ldrb	r3, [r7, #15]
 800ddda:	4313      	orrs	r3, r2
 800dddc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ddde:	2201      	movs	r2, #1
 800dde0:	2100      	movs	r1, #0
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f002 f9c0 	bl	8010168 <VL53L0X_WrByte>
 800dde8:	4603      	mov	r3, r0
 800ddea:	461a      	mov	r2, r3
 800ddec:	7bfb      	ldrb	r3, [r7, #15]
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	21ff      	movs	r1, #255	; 0xff
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f002 f9b6 	bl	8010168 <VL53L0X_WrByte>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	461a      	mov	r2, r3
 800de00:	7bfb      	ldrb	r3, [r7, #15]
 800de02:	4313      	orrs	r3, r2
 800de04:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800de06:	7bbb      	ldrb	r3, [r7, #14]
 800de08:	f023 0310 	bic.w	r3, r3, #16
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	701a      	strb	r2, [r3, #0]

	return Status;
 800de12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b08a      	sub	sp, #40	; 0x28
 800de22:	af04      	add	r7, sp, #16
 800de24:	60f8      	str	r0, [r7, #12]
 800de26:	60b9      	str	r1, [r7, #8]
 800de28:	4611      	mov	r1, r2
 800de2a:	461a      	mov	r2, r3
 800de2c:	460b      	mov	r3, r1
 800de2e:	71fb      	strb	r3, [r7, #7]
 800de30:	4613      	mov	r3, r2
 800de32:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de34:	2300      	movs	r3, #0
 800de36:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800de38:	2300      	movs	r3, #0
 800de3a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800de3c:	2300      	movs	r3, #0
 800de3e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800de40:	2300      	movs	r3, #0
 800de42:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800de44:	2300      	movs	r3, #0
 800de46:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800de48:	79bb      	ldrb	r3, [r7, #6]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d003      	beq.n	800de56 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800de54:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800de56:	2201      	movs	r2, #1
 800de58:	2101      	movs	r1, #1
 800de5a:	68f8      	ldr	r0, [r7, #12]
 800de5c:	f002 f984 	bl	8010168 <VL53L0X_WrByte>
 800de60:	4603      	mov	r3, r0
 800de62:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800de64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d105      	bne.n	800de78 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800de6c:	2140      	movs	r1, #64	; 0x40
 800de6e:	68f8      	ldr	r0, [r7, #12]
 800de70:	f7ff ff01 	bl	800dc76 <VL53L0X_perform_single_ref_calibration>
 800de74:	4603      	mov	r3, r0
 800de76:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800de78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d115      	bne.n	800deac <VL53L0X_perform_vhv_calibration+0x8e>
 800de80:	79fb      	ldrb	r3, [r7, #7]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d112      	bne.n	800deac <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800de86:	7d39      	ldrb	r1, [r7, #20]
 800de88:	7d7a      	ldrb	r2, [r7, #21]
 800de8a:	2300      	movs	r3, #0
 800de8c:	9303      	str	r3, [sp, #12]
 800de8e:	2301      	movs	r3, #1
 800de90:	9302      	str	r3, [sp, #8]
 800de92:	f107 0313 	add.w	r3, r7, #19
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	460b      	mov	r3, r1
 800de9e:	2101      	movs	r1, #1
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f7ff ff23 	bl	800dcec <VL53L0X_ref_calibration_io>
 800dea6:	4603      	mov	r3, r0
 800dea8:	75fb      	strb	r3, [r7, #23]
 800deaa:	e002      	b.n	800deb2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	2200      	movs	r2, #0
 800deb0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800deb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d112      	bne.n	800dee0 <VL53L0X_perform_vhv_calibration+0xc2>
 800deba:	79bb      	ldrb	r3, [r7, #6]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d00f      	beq.n	800dee0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800dec0:	7dbb      	ldrb	r3, [r7, #22]
 800dec2:	461a      	mov	r2, r3
 800dec4:	2101      	movs	r1, #1
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	f002 f94e 	bl	8010168 <VL53L0X_WrByte>
 800decc:	4603      	mov	r3, r0
 800dece:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800ded0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d103      	bne.n	800dee0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	7dba      	ldrb	r2, [r7, #22]
 800dedc:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800dee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3718      	adds	r7, #24
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08a      	sub	sp, #40	; 0x28
 800def0:	af04      	add	r7, sp, #16
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	4611      	mov	r1, r2
 800def8:	461a      	mov	r2, r3
 800defa:	460b      	mov	r3, r1
 800defc:	71fb      	strb	r3, [r7, #7]
 800defe:	4613      	mov	r3, r2
 800df00:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df02:	2300      	movs	r3, #0
 800df04:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800df06:	2300      	movs	r3, #0
 800df08:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800df0a:	2300      	movs	r3, #0
 800df0c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800df12:	79bb      	ldrb	r3, [r7, #6]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d003      	beq.n	800df20 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800df1e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800df20:	2202      	movs	r2, #2
 800df22:	2101      	movs	r1, #1
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f002 f91f 	bl	8010168 <VL53L0X_WrByte>
 800df2a:	4603      	mov	r3, r0
 800df2c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800df2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d105      	bne.n	800df42 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800df36:	2100      	movs	r1, #0
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f7ff fe9c 	bl	800dc76 <VL53L0X_perform_single_ref_calibration>
 800df3e:	4603      	mov	r3, r0
 800df40:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800df42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d115      	bne.n	800df76 <VL53L0X_perform_phase_calibration+0x8a>
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d112      	bne.n	800df76 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800df50:	7d39      	ldrb	r1, [r7, #20]
 800df52:	7d7a      	ldrb	r2, [r7, #21]
 800df54:	2301      	movs	r3, #1
 800df56:	9303      	str	r3, [sp, #12]
 800df58:	2300      	movs	r3, #0
 800df5a:	9302      	str	r3, [sp, #8]
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	9301      	str	r3, [sp, #4]
 800df60:	f107 0313 	add.w	r3, r7, #19
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	460b      	mov	r3, r1
 800df68:	2101      	movs	r1, #1
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f7ff febe 	bl	800dcec <VL53L0X_ref_calibration_io>
 800df70:	4603      	mov	r3, r0
 800df72:	75fb      	strb	r3, [r7, #23]
 800df74:	e002      	b.n	800df7c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2200      	movs	r2, #0
 800df7a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800df7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d112      	bne.n	800dfaa <VL53L0X_perform_phase_calibration+0xbe>
 800df84:	79bb      	ldrb	r3, [r7, #6]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00f      	beq.n	800dfaa <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800df8a:	7dbb      	ldrb	r3, [r7, #22]
 800df8c:	461a      	mov	r2, r3
 800df8e:	2101      	movs	r1, #1
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	f002 f8e9 	bl	8010168 <VL53L0X_WrByte>
 800df96:	4603      	mov	r3, r0
 800df98:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800df9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d103      	bne.n	800dfaa <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	7dba      	ldrb	r2, [r7, #22]
 800dfa6:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800dfaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3718      	adds	r7, #24
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b086      	sub	sp, #24
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	60f8      	str	r0, [r7, #12]
 800dfbe:	60b9      	str	r1, [r7, #8]
 800dfc0:	607a      	str	r2, [r7, #4]
 800dfc2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800dfd2:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 800dfd4:	78fa      	ldrb	r2, [r7, #3]
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	68b9      	ldr	r1, [r7, #8]
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	f7ff ff1f 	bl	800de1e <VL53L0X_perform_vhv_calibration>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800dfe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d107      	bne.n	800dffc <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800dfec:	78fa      	ldrb	r2, [r7, #3]
 800dfee:	2300      	movs	r3, #0
 800dff0:	6879      	ldr	r1, [r7, #4]
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f7ff ff7a 	bl	800deec <VL53L0X_perform_phase_calibration>
 800dff8:	4603      	mov	r3, r0
 800dffa:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800dffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d10f      	bne.n	800e024 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800e004:	7dbb      	ldrb	r3, [r7, #22]
 800e006:	461a      	mov	r2, r3
 800e008:	2101      	movs	r1, #1
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f002 f8ac 	bl	8010168 <VL53L0X_WrByte>
 800e010:	4603      	mov	r3, r0
 800e012:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800e014:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d103      	bne.n	800e024 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	7dba      	ldrb	r2, [r7, #22]
 800e020:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800e024:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3718      	adds	r7, #24
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e038:	2300      	movs	r3, #0
 800e03a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800e03c:	2300      	movs	r3, #0
 800e03e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800e040:	2300      	movs	r3, #0
 800e042:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800e044:	f107 030f 	add.w	r3, r7, #15
 800e048:	4619      	mov	r1, r3
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f7fe fe02 	bl	800cc54 <VL53L0X_GetMeasurementDataReady>
 800e050:	4603      	mov	r3, r0
 800e052:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800e054:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d110      	bne.n	800e07e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800e05c:	7bfb      	ldrb	r3, [r7, #15]
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d00f      	beq.n	800e082 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	3301      	adds	r3, #1
 800e066:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e06e:	d302      	bcc.n	800e076 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800e070:	23f9      	movs	r3, #249	; 0xf9
 800e072:	75fb      	strb	r3, [r7, #23]
			break;
 800e074:	e006      	b.n	800e084 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f002 f996 	bl	80103a8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800e07c:	e7e2      	b.n	800e044 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800e07e:	bf00      	nop
 800e080:	e000      	b.n	800e084 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800e082:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800e084:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3718      	adds	r7, #24
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	4603      	mov	r3, r0
 800e098:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800e09e:	79fb      	ldrb	r3, [r7, #7]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	005b      	lsls	r3, r3, #1
 800e0a6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800e0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3714      	adds	r7, #20
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr

0800e0b6 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800e0b6:	b480      	push	{r7}
 800e0b8:	b085      	sub	sp, #20
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800e0c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e0c6:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800e0c8:	e002      	b.n	800e0d0 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	089b      	lsrs	r3, r3, #2
 800e0ce:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800e0d0:	68ba      	ldr	r2, [r7, #8]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d8f8      	bhi.n	800e0ca <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800e0d8:	e017      	b.n	800e10a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	4413      	add	r3, r2
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d30b      	bcc.n	800e0fe <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	1ad3      	subs	r3, r2, r3
 800e0f0:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	085b      	lsrs	r3, r3, #1
 800e0f6:	68ba      	ldr	r2, [r7, #8]
 800e0f8:	4413      	add	r3, r2
 800e0fa:	60fb      	str	r3, [r7, #12]
 800e0fc:	e002      	b.n	800e104 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	085b      	lsrs	r3, r3, #1
 800e102:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	089b      	lsrs	r3, r3, #2
 800e108:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d1e4      	bne.n	800e0da <VL53L0X_isqrt+0x24>
	}

	return res;
 800e110:	68fb      	ldr	r3, [r7, #12]
}
 800e112:	4618      	mov	r0, r3
 800e114:	3714      	adds	r7, #20
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr

0800e11e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b086      	sub	sp, #24
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e126:	2300      	movs	r3, #0
 800e128:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800e12a:	2200      	movs	r2, #0
 800e12c:	2183      	movs	r1, #131	; 0x83
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f002 f81a 	bl	8010168 <VL53L0X_WrByte>
 800e134:	4603      	mov	r3, r0
 800e136:	461a      	mov	r2, r3
 800e138:	7dfb      	ldrb	r3, [r7, #23]
 800e13a:	4313      	orrs	r3, r2
 800e13c:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 800e13e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d11e      	bne.n	800e184 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800e146:	2300      	movs	r3, #0
 800e148:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800e14a:	f107 030f 	add.w	r3, r7, #15
 800e14e:	461a      	mov	r2, r3
 800e150:	2183      	movs	r1, #131	; 0x83
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f002 f88a 	bl	801026c <VL53L0X_RdByte>
 800e158:	4603      	mov	r3, r0
 800e15a:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d10a      	bne.n	800e178 <VL53L0X_device_read_strobe+0x5a>
 800e162:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d106      	bne.n	800e178 <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	3301      	adds	r3, #1
 800e16e:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e176:	d3e8      	bcc.n	800e14a <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e17e:	d301      	bcc.n	800e184 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800e180:	23f9      	movs	r3, #249	; 0xf9
 800e182:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800e184:	2201      	movs	r2, #1
 800e186:	2183      	movs	r1, #131	; 0x83
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f001 ffed 	bl	8010168 <VL53L0X_WrByte>
 800e18e:	4603      	mov	r3, r0
 800e190:	461a      	mov	r2, r3
 800e192:	7dfb      	ldrb	r3, [r7, #23]
 800e194:	4313      	orrs	r3, r2
 800e196:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800e198:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3718      	adds	r7, #24
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b098      	sub	sp, #96	; 0x60
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800e1d4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800e1d8:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800e1ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 800e1f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1f4:	2b07      	cmp	r3, #7
 800e1f6:	f000 8408 	beq.w	800ea0a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	2180      	movs	r1, #128	; 0x80
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f001 ffb2 	bl	8010168 <VL53L0X_WrByte>
 800e204:	4603      	mov	r3, r0
 800e206:	461a      	mov	r2, r3
 800e208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e20c:	4313      	orrs	r3, r2
 800e20e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e212:	2201      	movs	r2, #1
 800e214:	21ff      	movs	r1, #255	; 0xff
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f001 ffa6 	bl	8010168 <VL53L0X_WrByte>
 800e21c:	4603      	mov	r3, r0
 800e21e:	461a      	mov	r2, r3
 800e220:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e224:	4313      	orrs	r3, r2
 800e226:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800e22a:	2200      	movs	r2, #0
 800e22c:	2100      	movs	r1, #0
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f001 ff9a 	bl	8010168 <VL53L0X_WrByte>
 800e234:	4603      	mov	r3, r0
 800e236:	461a      	mov	r2, r3
 800e238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e23c:	4313      	orrs	r3, r2
 800e23e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800e242:	2206      	movs	r2, #6
 800e244:	21ff      	movs	r1, #255	; 0xff
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f001 ff8e 	bl	8010168 <VL53L0X_WrByte>
 800e24c:	4603      	mov	r3, r0
 800e24e:	461a      	mov	r2, r3
 800e250:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e254:	4313      	orrs	r3, r2
 800e256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800e25a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800e25e:	461a      	mov	r2, r3
 800e260:	2183      	movs	r1, #131	; 0x83
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f002 f802 	bl	801026c <VL53L0X_RdByte>
 800e268:	4603      	mov	r3, r0
 800e26a:	461a      	mov	r2, r3
 800e26c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e270:	4313      	orrs	r3, r2
 800e272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800e276:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e27a:	f043 0304 	orr.w	r3, r3, #4
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	461a      	mov	r2, r3
 800e282:	2183      	movs	r1, #131	; 0x83
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f001 ff6f 	bl	8010168 <VL53L0X_WrByte>
 800e28a:	4603      	mov	r3, r0
 800e28c:	461a      	mov	r2, r3
 800e28e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e292:	4313      	orrs	r3, r2
 800e294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800e298:	2207      	movs	r2, #7
 800e29a:	21ff      	movs	r1, #255	; 0xff
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f001 ff63 	bl	8010168 <VL53L0X_WrByte>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	2181      	movs	r1, #129	; 0x81
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f001 ff57 	bl	8010168 <VL53L0X_WrByte>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	461a      	mov	r2, r3
 800e2be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f002 f86d 	bl	80103a8 <VL53L0X_PollingDelay>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800e2dc:	2201      	movs	r2, #1
 800e2de:	2180      	movs	r1, #128	; 0x80
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f001 ff41 	bl	8010168 <VL53L0X_WrByte>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800e2f4:	78fb      	ldrb	r3, [r7, #3]
 800e2f6:	f003 0301 	and.w	r3, r3, #1
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	f000 8098 	beq.w	800e430 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800e300:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e304:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800e308:	2b00      	cmp	r3, #0
 800e30a:	f040 8091 	bne.w	800e430 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800e30e:	226b      	movs	r2, #107	; 0x6b
 800e310:	2194      	movs	r1, #148	; 0x94
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f001 ff28 	bl	8010168 <VL53L0X_WrByte>
 800e318:	4603      	mov	r3, r0
 800e31a:	461a      	mov	r2, r3
 800e31c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e320:	4313      	orrs	r3, r2
 800e322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7ff fef9 	bl	800e11e <VL53L0X_device_read_strobe>
 800e32c:	4603      	mov	r3, r0
 800e32e:	461a      	mov	r2, r3
 800e330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e334:	4313      	orrs	r3, r2
 800e336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e33a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e33e:	461a      	mov	r2, r3
 800e340:	2190      	movs	r1, #144	; 0x90
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f001 fff4 	bl	8010330 <VL53L0X_RdDWord>
 800e348:	4603      	mov	r3, r0
 800e34a:	461a      	mov	r2, r3
 800e34c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e350:	4313      	orrs	r3, r2
 800e352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800e356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e358:	0a1b      	lsrs	r3, r3, #8
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e360:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800e364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e366:	0bdb      	lsrs	r3, r3, #15
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800e372:	2224      	movs	r2, #36	; 0x24
 800e374:	2194      	movs	r1, #148	; 0x94
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f001 fef6 	bl	8010168 <VL53L0X_WrByte>
 800e37c:	4603      	mov	r3, r0
 800e37e:	461a      	mov	r2, r3
 800e380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e384:	4313      	orrs	r3, r2
 800e386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f7ff fec7 	bl	800e11e <VL53L0X_device_read_strobe>
 800e390:	4603      	mov	r3, r0
 800e392:	461a      	mov	r2, r3
 800e394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e398:	4313      	orrs	r3, r2
 800e39a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e39e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	2190      	movs	r1, #144	; 0x90
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f001 ffc2 	bl	8010330 <VL53L0X_RdDWord>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800e3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3bc:	0e1b      	lsrs	r3, r3, #24
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c4:	0c1b      	lsrs	r3, r3, #16
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800e3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3cc:	0a1b      	lsrs	r3, r3, #8
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800e3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800e3d8:	2225      	movs	r2, #37	; 0x25
 800e3da:	2194      	movs	r1, #148	; 0x94
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f001 fec3 	bl	8010168 <VL53L0X_WrByte>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7ff fe94 	bl	800e11e <VL53L0X_device_read_strobe>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3fe:	4313      	orrs	r3, r2
 800e400:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e404:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e408:	461a      	mov	r2, r3
 800e40a:	2190      	movs	r1, #144	; 0x90
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f001 ff8f 	bl	8010330 <VL53L0X_RdDWord>
 800e412:	4603      	mov	r3, r0
 800e414:	461a      	mov	r2, r3
 800e416:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e41a:	4313      	orrs	r3, r2
 800e41c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800e420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e422:	0e1b      	lsrs	r3, r3, #24
 800e424:	b2db      	uxtb	r3, r3
 800e426:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800e428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42a:	0c1b      	lsrs	r3, r3, #16
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800e430:	78fb      	ldrb	r3, [r7, #3]
 800e432:	f003 0302 	and.w	r3, r3, #2
 800e436:	2b00      	cmp	r3, #0
 800e438:	f000 8189 	beq.w	800e74e <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800e43c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e440:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800e444:	2b00      	cmp	r3, #0
 800e446:	f040 8182 	bne.w	800e74e <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800e44a:	2202      	movs	r2, #2
 800e44c:	2194      	movs	r1, #148	; 0x94
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f001 fe8a 	bl	8010168 <VL53L0X_WrByte>
 800e454:	4603      	mov	r3, r0
 800e456:	461a      	mov	r2, r3
 800e458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e45c:	4313      	orrs	r3, r2
 800e45e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7ff fe5b 	bl	800e11e <VL53L0X_device_read_strobe>
 800e468:	4603      	mov	r3, r0
 800e46a:	461a      	mov	r2, r3
 800e46c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e470:	4313      	orrs	r3, r2
 800e472:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800e476:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800e47a:	461a      	mov	r2, r3
 800e47c:	2190      	movs	r1, #144	; 0x90
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f001 fef4 	bl	801026c <VL53L0X_RdByte>
 800e484:	4603      	mov	r3, r0
 800e486:	461a      	mov	r2, r3
 800e488:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e48c:	4313      	orrs	r3, r2
 800e48e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800e492:	227b      	movs	r2, #123	; 0x7b
 800e494:	2194      	movs	r1, #148	; 0x94
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f001 fe66 	bl	8010168 <VL53L0X_WrByte>
 800e49c:	4603      	mov	r3, r0
 800e49e:	461a      	mov	r2, r3
 800e4a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7ff fe37 	bl	800e11e <VL53L0X_device_read_strobe>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800e4be:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	2190      	movs	r1, #144	; 0x90
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f001 fed0 	bl	801026c <VL53L0X_RdByte>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800e4da:	2277      	movs	r2, #119	; 0x77
 800e4dc:	2194      	movs	r1, #148	; 0x94
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f001 fe42 	bl	8010168 <VL53L0X_WrByte>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7ff fe13 	bl	800e11e <VL53L0X_device_read_strobe>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e500:	4313      	orrs	r3, r2
 800e502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e50a:	461a      	mov	r2, r3
 800e50c:	2190      	movs	r1, #144	; 0x90
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f001 ff0e 	bl	8010330 <VL53L0X_RdDWord>
 800e514:	4603      	mov	r3, r0
 800e516:	461a      	mov	r2, r3
 800e518:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e51c:	4313      	orrs	r3, r2
 800e51e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800e522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e524:	0e5b      	lsrs	r3, r3, #25
 800e526:	b2db      	uxtb	r3, r3
 800e528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800e530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e532:	0c9b      	lsrs	r3, r3, #18
 800e534:	b2db      	uxtb	r3, r3
 800e536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800e53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e540:	0adb      	lsrs	r3, r3, #11
 800e542:	b2db      	uxtb	r3, r3
 800e544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800e54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54e:	091b      	lsrs	r3, r3, #4
 800e550:	b2db      	uxtb	r3, r3
 800e552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e556:	b2db      	uxtb	r3, r3
 800e558:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800e55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55c:	b2db      	uxtb	r3, r3
 800e55e:	00db      	lsls	r3, r3, #3
 800e560:	b2db      	uxtb	r3, r3
 800e562:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800e566:	b2db      	uxtb	r3, r3
 800e568:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800e56c:	2278      	movs	r2, #120	; 0x78
 800e56e:	2194      	movs	r1, #148	; 0x94
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f001 fdf9 	bl	8010168 <VL53L0X_WrByte>
 800e576:	4603      	mov	r3, r0
 800e578:	461a      	mov	r2, r3
 800e57a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e57e:	4313      	orrs	r3, r2
 800e580:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7ff fdca 	bl	800e11e <VL53L0X_device_read_strobe>
 800e58a:	4603      	mov	r3, r0
 800e58c:	461a      	mov	r2, r3
 800e58e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e592:	4313      	orrs	r3, r2
 800e594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e59c:	461a      	mov	r2, r3
 800e59e:	2190      	movs	r1, #144	; 0x90
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f001 fec5 	bl	8010330 <VL53L0X_RdDWord>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800e5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b6:	0f5b      	lsrs	r3, r3, #29
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5be:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800e5c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e5c4:	4413      	add	r3, r2
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800e5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5cc:	0d9b      	lsrs	r3, r3, #22
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800e5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5da:	0bdb      	lsrs	r3, r3, #15
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800e5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e8:	0a1b      	lsrs	r3, r3, #8
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800e5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f6:	085b      	lsrs	r3, r3, #1
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e604:	b2db      	uxtb	r3, r3
 800e606:	019b      	lsls	r3, r3, #6
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800e614:	2279      	movs	r2, #121	; 0x79
 800e616:	2194      	movs	r1, #148	; 0x94
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f001 fda5 	bl	8010168 <VL53L0X_WrByte>
 800e61e:	4603      	mov	r3, r0
 800e620:	461a      	mov	r2, r3
 800e622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e626:	4313      	orrs	r3, r2
 800e628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f7ff fd76 	bl	800e11e <VL53L0X_device_read_strobe>
 800e632:	4603      	mov	r3, r0
 800e634:	461a      	mov	r2, r3
 800e636:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e63a:	4313      	orrs	r3, r2
 800e63c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e640:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e644:	461a      	mov	r2, r3
 800e646:	2190      	movs	r1, #144	; 0x90
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f001 fe71 	bl	8010330 <VL53L0X_RdDWord>
 800e64e:	4603      	mov	r3, r0
 800e650:	461a      	mov	r2, r3
 800e652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e656:	4313      	orrs	r3, r2
 800e658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800e65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65e:	0e9b      	lsrs	r3, r3, #26
 800e660:	b2db      	uxtb	r3, r3
 800e662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e666:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800e668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e66c:	4413      	add	r3, r2
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800e672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e674:	0cdb      	lsrs	r3, r3, #19
 800e676:	b2db      	uxtb	r3, r3
 800e678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800e680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e682:	0b1b      	lsrs	r3, r3, #12
 800e684:	b2db      	uxtb	r3, r3
 800e686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800e68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e690:	095b      	lsrs	r3, r3, #5
 800e692:	b2db      	uxtb	r3, r3
 800e694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	009b      	lsls	r3, r3, #2
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800e6ae:	227a      	movs	r2, #122	; 0x7a
 800e6b0:	2194      	movs	r1, #148	; 0x94
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f001 fd58 	bl	8010168 <VL53L0X_WrByte>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7ff fd29 	bl	800e11e <VL53L0X_device_read_strobe>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e6da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e6de:	461a      	mov	r2, r3
 800e6e0:	2190      	movs	r1, #144	; 0x90
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f001 fe24 	bl	8010330 <VL53L0X_RdDWord>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f8:	0f9b      	lsrs	r3, r3, #30
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e700:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800e702:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e706:	4413      	add	r3, r2
 800e708:	b2db      	uxtb	r3, r3
 800e70a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800e70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70e:	0ddb      	lsrs	r3, r3, #23
 800e710:	b2db      	uxtb	r3, r3
 800e712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e716:	b2db      	uxtb	r3, r3
 800e718:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800e71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71c:	0c1b      	lsrs	r3, r3, #16
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e724:	b2db      	uxtb	r3, r3
 800e726:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800e728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e72a:	0a5b      	lsrs	r3, r3, #9
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e732:	b2db      	uxtb	r3, r3
 800e734:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73a:	089b      	lsrs	r3, r3, #2
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e742:	b2db      	uxtb	r3, r3
 800e744:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800e748:	2300      	movs	r3, #0
 800e74a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800e74e:	78fb      	ldrb	r3, [r7, #3]
 800e750:	f003 0304 	and.w	r3, r3, #4
 800e754:	2b00      	cmp	r3, #0
 800e756:	f000 80f1 	beq.w	800e93c <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800e75a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e75e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800e762:	2b00      	cmp	r3, #0
 800e764:	f040 80ea 	bne.w	800e93c <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800e768:	227b      	movs	r2, #123	; 0x7b
 800e76a:	2194      	movs	r1, #148	; 0x94
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f001 fcfb 	bl	8010168 <VL53L0X_WrByte>
 800e772:	4603      	mov	r3, r0
 800e774:	461a      	mov	r2, r3
 800e776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e77a:	4313      	orrs	r3, r2
 800e77c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7ff fccc 	bl	800e11e <VL53L0X_device_read_strobe>
 800e786:	4603      	mov	r3, r0
 800e788:	461a      	mov	r2, r3
 800e78a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e78e:	4313      	orrs	r3, r2
 800e790:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800e794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e798:	461a      	mov	r2, r3
 800e79a:	2190      	movs	r1, #144	; 0x90
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f001 fdc7 	bl	8010330 <VL53L0X_RdDWord>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800e7b0:	227c      	movs	r2, #124	; 0x7c
 800e7b2:	2194      	movs	r1, #148	; 0x94
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f001 fcd7 	bl	8010168 <VL53L0X_WrByte>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	461a      	mov	r2, r3
 800e7be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7ff fca8 	bl	800e11e <VL53L0X_device_read_strobe>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800e7dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	2190      	movs	r1, #144	; 0x90
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f001 fda3 	bl	8010330 <VL53L0X_RdDWord>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800e7f8:	2273      	movs	r2, #115	; 0x73
 800e7fa:	2194      	movs	r1, #148	; 0x94
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f001 fcb3 	bl	8010168 <VL53L0X_WrByte>
 800e802:	4603      	mov	r3, r0
 800e804:	461a      	mov	r2, r3
 800e806:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e80a:	4313      	orrs	r3, r2
 800e80c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f7ff fc84 	bl	800e11e <VL53L0X_device_read_strobe>
 800e816:	4603      	mov	r3, r0
 800e818:	461a      	mov	r2, r3
 800e81a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e81e:	4313      	orrs	r3, r2
 800e820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e824:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e828:	461a      	mov	r2, r3
 800e82a:	2190      	movs	r1, #144	; 0x90
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f001 fd7f 	bl	8010330 <VL53L0X_RdDWord>
 800e832:	4603      	mov	r3, r0
 800e834:	461a      	mov	r2, r3
 800e836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e83a:	4313      	orrs	r3, r2
 800e83c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800e840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e842:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800e844:	b29b      	uxth	r3, r3
 800e846:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800e848:	2274      	movs	r2, #116	; 0x74
 800e84a:	2194      	movs	r1, #148	; 0x94
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f001 fc8b 	bl	8010168 <VL53L0X_WrByte>
 800e852:	4603      	mov	r3, r0
 800e854:	461a      	mov	r2, r3
 800e856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e85a:	4313      	orrs	r3, r2
 800e85c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7ff fc5c 	bl	800e11e <VL53L0X_device_read_strobe>
 800e866:	4603      	mov	r3, r0
 800e868:	461a      	mov	r2, r3
 800e86a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e86e:	4313      	orrs	r3, r2
 800e870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e878:	461a      	mov	r2, r3
 800e87a:	2190      	movs	r1, #144	; 0x90
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f001 fd57 	bl	8010330 <VL53L0X_RdDWord>
 800e882:	4603      	mov	r3, r0
 800e884:	461a      	mov	r2, r3
 800e886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e88a:	4313      	orrs	r3, r2
 800e88c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800e890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e892:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800e894:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e896:	4313      	orrs	r3, r2
 800e898:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800e89a:	2275      	movs	r2, #117	; 0x75
 800e89c:	2194      	movs	r1, #148	; 0x94
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f001 fc62 	bl	8010168 <VL53L0X_WrByte>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8ac:	4313      	orrs	r3, r2
 800e8ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7ff fc33 	bl	800e11e <VL53L0X_device_read_strobe>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e8c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	2190      	movs	r1, #144	; 0x90
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f001 fd2e 	bl	8010330 <VL53L0X_RdDWord>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8dc:	4313      	orrs	r3, r2
 800e8de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800e8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e4:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800e8ea:	2276      	movs	r2, #118	; 0x76
 800e8ec:	2194      	movs	r1, #148	; 0x94
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f001 fc3a 	bl	8010168 <VL53L0X_WrByte>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f7ff fc0b 	bl	800e11e <VL53L0X_device_read_strobe>
 800e908:	4603      	mov	r3, r0
 800e90a:	461a      	mov	r2, r3
 800e90c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e910:	4313      	orrs	r3, r2
 800e912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e91a:	461a      	mov	r2, r3
 800e91c:	2190      	movs	r1, #144	; 0x90
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f001 fd06 	bl	8010330 <VL53L0X_RdDWord>
 800e924:	4603      	mov	r3, r0
 800e926:	461a      	mov	r2, r3
 800e928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e92c:	4313      	orrs	r3, r2
 800e92e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800e932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e934:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800e936:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e938:	4313      	orrs	r3, r2
 800e93a:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800e93c:	2200      	movs	r2, #0
 800e93e:	2181      	movs	r1, #129	; 0x81
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f001 fc11 	bl	8010168 <VL53L0X_WrByte>
 800e946:	4603      	mov	r3, r0
 800e948:	461a      	mov	r2, r3
 800e94a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e94e:	4313      	orrs	r3, r2
 800e950:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800e954:	2206      	movs	r2, #6
 800e956:	21ff      	movs	r1, #255	; 0xff
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f001 fc05 	bl	8010168 <VL53L0X_WrByte>
 800e95e:	4603      	mov	r3, r0
 800e960:	461a      	mov	r2, r3
 800e962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e966:	4313      	orrs	r3, r2
 800e968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800e96c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800e970:	461a      	mov	r2, r3
 800e972:	2183      	movs	r1, #131	; 0x83
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f001 fc79 	bl	801026c <VL53L0X_RdByte>
 800e97a:	4603      	mov	r3, r0
 800e97c:	461a      	mov	r2, r3
 800e97e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e982:	4313      	orrs	r3, r2
 800e984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800e988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e98c:	f023 0304 	bic.w	r3, r3, #4
 800e990:	b2db      	uxtb	r3, r3
 800e992:	461a      	mov	r2, r3
 800e994:	2183      	movs	r1, #131	; 0x83
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f001 fbe6 	bl	8010168 <VL53L0X_WrByte>
 800e99c:	4603      	mov	r3, r0
 800e99e:	461a      	mov	r2, r3
 800e9a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	21ff      	movs	r1, #255	; 0xff
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f001 fbda 	bl	8010168 <VL53L0X_WrByte>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f001 fbce 	bl	8010168 <VL53L0X_WrByte>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e9da:	2200      	movs	r2, #0
 800e9dc:	21ff      	movs	r1, #255	; 0xff
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f001 fbc2 	bl	8010168 <VL53L0X_WrByte>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	2180      	movs	r1, #128	; 0x80
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f001 fbb6 	bl	8010168 <VL53L0X_WrByte>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	461a      	mov	r2, r3
 800ea00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ea04:	4313      	orrs	r3, r2
 800ea06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800ea0a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	f040 8090 	bne.w	800eb34 <VL53L0X_get_info_from_device+0x990>
 800ea14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ea18:	2b07      	cmp	r3, #7
 800ea1a:	f000 808b 	beq.w	800eb34 <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800ea1e:	78fb      	ldrb	r3, [r7, #3]
 800ea20:	f003 0301 	and.w	r3, r3, #1
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d024      	beq.n	800ea72 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800ea28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ea2c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d11e      	bne.n	800ea72 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800ea3a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800ea44:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ea48:	2300      	movs	r3, #0
 800ea4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea4c:	e00e      	b.n	800ea6c <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800ea4e:	f107 0208 	add.w	r2, r7, #8
 800ea52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea54:	4413      	add	r3, r2
 800ea56:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea5c:	4413      	add	r3, r2
 800ea5e:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 800ea62:	460a      	mov	r2, r1
 800ea64:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ea66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea68:	3301      	adds	r3, #1
 800ea6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea6e:	2b05      	cmp	r3, #5
 800ea70:	dded      	ble.n	800ea4e <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800ea72:	78fb      	ldrb	r3, [r7, #3]
 800ea74:	f003 0302 	and.w	r3, r3, #2
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d019      	beq.n	800eab0 <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ea7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ea80:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d113      	bne.n	800eab0 <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ea88:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ea92:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f203 131f 	addw	r3, r3, #287	; 0x11f
 800eaa2:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800eaa4:	f107 0310 	add.w	r3, r7, #16
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eaac:	f001 fd2a 	bl	8010504 <strcpy>

		}

		if (((option & 4) == 4) &&
 800eab0:	78fb      	ldrb	r3, [r7, #3]
 800eab2:	f003 0304 	and.w	r3, r3, #4
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d030      	beq.n	800eb1c <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800eaba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eabe:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d12a      	bne.n	800eb1c <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800eac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800eace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800ead6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead8:	025b      	lsls	r3, r3, #9
 800eada:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eae0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800eae4:	2300      	movs	r3, #0
 800eae6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800eaea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d011      	beq.n	800eb14 <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 800eaf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eaf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaf4:	1ad3      	subs	r3, r2, r3
 800eaf6:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800eaf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eafa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eafe:	fb02 f303 	mul.w	r3, r2, r3
 800eb02:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 800eb04:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 800eb08:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800eb0c:	425b      	negs	r3, r3
 800eb0e:	b29b      	uxth	r3, r3
 800eb10:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800eb14:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800eb1c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800eb20:	78fb      	ldrb	r3, [r7, #3]
 800eb22:	4313      	orrs	r3, r2
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800eb2a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800eb34:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3760      	adds	r7, #96	; 0x60
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b087      	sub	sp, #28
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	460b      	mov	r3, r1
 800eb4a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 800eb4c:	f240 6277 	movw	r2, #1655	; 0x677
 800eb50:	f04f 0300 	mov.w	r3, #0
 800eb54:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800eb58:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800eb5c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800eb5e:	78fb      	ldrb	r3, [r7, #3]
 800eb60:	68fa      	ldr	r2, [r7, #12]
 800eb62:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800eb66:	693a      	ldr	r2, [r7, #16]
 800eb68:	fb02 f303 	mul.w	r3, r2, r3
 800eb6c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800eb6e:	68bb      	ldr	r3, [r7, #8]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	371c      	adds	r7, #28
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b087      	sub	sp, #28
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800eb84:	2300      	movs	r3, #0
 800eb86:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d017      	beq.n	800ebc6 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	3b01      	subs	r3, #1
 800eb9a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800eb9c:	e005      	b.n	800ebaa <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	085b      	lsrs	r3, r3, #1
 800eba2:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800eba4:	89fb      	ldrh	r3, [r7, #14]
 800eba6:	3301      	adds	r3, #1
 800eba8:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d1f4      	bne.n	800eb9e <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800ebb4:	89fb      	ldrh	r3, [r7, #14]
 800ebb6:	021b      	lsls	r3, r3, #8
 800ebb8:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800ebc2:	4413      	add	r3, r2
 800ebc4:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800ebc6:	8afb      	ldrh	r3, [r7, #22]

}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	371c      	adds	r7, #28
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	4603      	mov	r3, r0
 800ebdc:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ebe2:	88fb      	ldrh	r3, [r7, #6]
 800ebe4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800ebe6:	88fa      	ldrh	r2, [r7, #6]
 800ebe8:	0a12      	lsrs	r2, r2, #8
 800ebea:	b292      	uxth	r2, r2
 800ebec:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ebee:	3301      	adds	r3, #1
 800ebf0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3714      	adds	r7, #20
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b088      	sub	sp, #32
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800ec12:	79fb      	ldrb	r3, [r7, #7]
 800ec14:	4619      	mov	r1, r3
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f7ff ff92 	bl	800eb40 <VL53L0X_calc_macro_period_ps>
 800ec1c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800ec1e:	69bb      	ldr	r3, [r7, #24]
 800ec20:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ec24:	4a0a      	ldr	r2, [pc, #40]	; (800ec50 <VL53L0X_calc_timeout_mclks+0x50>)
 800ec26:	fba2 2303 	umull	r2, r3, r2, r3
 800ec2a:	099b      	lsrs	r3, r3, #6
 800ec2c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec34:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	085b      	lsrs	r3, r3, #1
 800ec3c:	441a      	add	r2, r3
	timeout_period_mclks =
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec44:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800ec46:	69fb      	ldr	r3, [r7, #28]
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3720      	adds	r7, #32
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	10624dd3 	.word	0x10624dd3

0800ec54 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b086      	sub	sp, #24
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	807b      	strh	r3, [r7, #2]
 800ec60:	4613      	mov	r3, r2
 800ec62:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800ec64:	2300      	movs	r3, #0
 800ec66:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800ec68:	787b      	ldrb	r3, [r7, #1]
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7ff ff67 	bl	800eb40 <VL53L0X_calc_macro_period_ps>
 800ec72:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ec7a:	4a0a      	ldr	r2, [pc, #40]	; (800eca4 <VL53L0X_calc_timeout_us+0x50>)
 800ec7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ec80:	099b      	lsrs	r3, r3, #6
 800ec82:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800ec84:	887b      	ldrh	r3, [r7, #2]
 800ec86:	68fa      	ldr	r2, [r7, #12]
 800ec88:	fb02 f303 	mul.w	r3, r2, r3
 800ec8c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800ec90:	4a04      	ldr	r2, [pc, #16]	; (800eca4 <VL53L0X_calc_timeout_us+0x50>)
 800ec92:	fba2 2303 	umull	r2, r3, r2, r3
 800ec96:	099b      	lsrs	r3, r3, #6
 800ec98:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800ec9a:	697b      	ldr	r3, [r7, #20]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3718      	adds	r7, #24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	10624dd3 	.word	0x10624dd3

0800eca8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b08c      	sub	sp, #48	; 0x30
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	607a      	str	r2, [r7, #4]
 800ecb4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800ecca:	2300      	movs	r3, #0
 800eccc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800ecce:	7afb      	ldrb	r3, [r7, #11]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d005      	beq.n	800ece0 <get_sequence_step_timeout+0x38>
 800ecd4:	7afb      	ldrb	r3, [r7, #11]
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d002      	beq.n	800ece0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800ecda:	7afb      	ldrb	r3, [r7, #11]
 800ecdc:	2b02      	cmp	r3, #2
 800ecde:	d128      	bne.n	800ed32 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ece0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ece4:	461a      	mov	r2, r3
 800ece6:	2100      	movs	r1, #0
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f7fd fa03 	bl	800c0f4 <VL53L0X_GetVcselPulsePeriod>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800ecf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d109      	bne.n	800ed10 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800ecfc:	f107 0320 	add.w	r3, r7, #32
 800ed00:	461a      	mov	r2, r3
 800ed02:	2146      	movs	r1, #70	; 0x46
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	f001 fab1 	bl	801026c <VL53L0X_RdByte>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800ed10:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7ff ff5c 	bl	800ebd4 <VL53L0X_decode_timeout>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ed20:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ed24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed26:	4619      	mov	r1, r3
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f7ff ff93 	bl	800ec54 <VL53L0X_calc_timeout_us>
 800ed2e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ed30:	e092      	b.n	800ee58 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800ed32:	7afb      	ldrb	r3, [r7, #11]
 800ed34:	2b03      	cmp	r3, #3
 800ed36:	d135      	bne.n	800eda4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ed38:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	2100      	movs	r1, #0
 800ed40:	68f8      	ldr	r0, [r7, #12]
 800ed42:	f7fd f9d7 	bl	800c0f4 <VL53L0X_GetVcselPulsePeriod>
 800ed46:	4603      	mov	r3, r0
 800ed48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800ed4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	f040 8081 	bne.w	800ee58 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ed56:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	2100      	movs	r1, #0
 800ed5e:	68f8      	ldr	r0, [r7, #12]
 800ed60:	f7fd f9c8 	bl	800c0f4 <VL53L0X_GetVcselPulsePeriod>
 800ed64:	4603      	mov	r3, r0
 800ed66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800ed6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d109      	bne.n	800ed86 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800ed72:	f107 031e 	add.w	r3, r7, #30
 800ed76:	461a      	mov	r2, r3
 800ed78:	2151      	movs	r1, #81	; 0x51
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f001 faa0 	bl	80102c0 <VL53L0X_RdWord>
 800ed80:	4603      	mov	r3, r0
 800ed82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800ed86:	8bfb      	ldrh	r3, [r7, #30]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7ff ff23 	bl	800ebd4 <VL53L0X_decode_timeout>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ed92:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ed96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ed98:	4619      	mov	r1, r3
 800ed9a:	68f8      	ldr	r0, [r7, #12]
 800ed9c:	f7ff ff5a 	bl	800ec54 <VL53L0X_calc_timeout_us>
 800eda0:	62b8      	str	r0, [r7, #40]	; 0x28
 800eda2:	e059      	b.n	800ee58 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800eda4:	7afb      	ldrb	r3, [r7, #11]
 800eda6:	2b04      	cmp	r3, #4
 800eda8:	d156      	bne.n	800ee58 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800edaa:	f107 0314 	add.w	r3, r7, #20
 800edae:	4619      	mov	r1, r3
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f7fd faab 	bl	800c30c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800edb6:	2300      	movs	r3, #0
 800edb8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800edba:	7dfb      	ldrb	r3, [r7, #23]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d01d      	beq.n	800edfc <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800edc0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800edc4:	461a      	mov	r2, r3
 800edc6:	2100      	movs	r1, #0
 800edc8:	68f8      	ldr	r0, [r7, #12]
 800edca:	f7fd f993 	bl	800c0f4 <VL53L0X_GetVcselPulsePeriod>
 800edce:	4603      	mov	r3, r0
 800edd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800edd4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10f      	bne.n	800edfc <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800eddc:	f107 031e 	add.w	r3, r7, #30
 800ede0:	461a      	mov	r2, r3
 800ede2:	2151      	movs	r1, #81	; 0x51
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f001 fa6b 	bl	80102c0 <VL53L0X_RdWord>
 800edea:	4603      	mov	r3, r0
 800edec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800edf0:	8bfb      	ldrh	r3, [r7, #30]
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7ff feee 	bl	800ebd4 <VL53L0X_decode_timeout>
 800edf8:	4603      	mov	r3, r0
 800edfa:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800edfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d109      	bne.n	800ee18 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ee04:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ee08:	461a      	mov	r2, r3
 800ee0a:	2101      	movs	r1, #1
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f7fd f971 	bl	800c0f4 <VL53L0X_GetVcselPulsePeriod>
 800ee12:	4603      	mov	r3, r0
 800ee14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800ee18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d10f      	bne.n	800ee40 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800ee20:	f107 031c 	add.w	r3, r7, #28
 800ee24:	461a      	mov	r2, r3
 800ee26:	2171      	movs	r1, #113	; 0x71
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f001 fa49 	bl	80102c0 <VL53L0X_RdWord>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800ee34:	8bbb      	ldrh	r3, [r7, #28]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7ff fecc 	bl	800ebd4 <VL53L0X_decode_timeout>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800ee40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee44:	1ad3      	subs	r3, r2, r3
 800ee46:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ee48:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ee4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee4e:	4619      	mov	r1, r3
 800ee50:	68f8      	ldr	r0, [r7, #12]
 800ee52:	f7ff feff 	bl	800ec54 <VL53L0X_calc_timeout_us>
 800ee56:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee5c:	601a      	str	r2, [r3, #0]

	return Status;
 800ee5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3730      	adds	r7, #48	; 0x30
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}

0800ee6a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800ee6a:	b580      	push	{r7, lr}
 800ee6c:	b08a      	sub	sp, #40	; 0x28
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	60f8      	str	r0, [r7, #12]
 800ee72:	460b      	mov	r3, r1
 800ee74:	607a      	str	r2, [r7, #4]
 800ee76:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800ee7e:	7afb      	ldrb	r3, [r7, #11]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d005      	beq.n	800ee90 <set_sequence_step_timeout+0x26>
 800ee84:	7afb      	ldrb	r3, [r7, #11]
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d002      	beq.n	800ee90 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800ee8a:	7afb      	ldrb	r3, [r7, #11]
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	d138      	bne.n	800ef02 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ee90:	f107 031b 	add.w	r3, r7, #27
 800ee94:	461a      	mov	r2, r3
 800ee96:	2100      	movs	r1, #0
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f7fd f92b 	bl	800c0f4 <VL53L0X_GetVcselPulsePeriod>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800eea4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d11a      	bne.n	800eee2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800eeac:	7efb      	ldrb	r3, [r7, #27]
 800eeae:	461a      	mov	r2, r3
 800eeb0:	6879      	ldr	r1, [r7, #4]
 800eeb2:	68f8      	ldr	r0, [r7, #12]
 800eeb4:	f7ff fea4 	bl	800ec00 <VL53L0X_calc_timeout_mclks>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800eebc:	8bbb      	ldrh	r3, [r7, #28]
 800eebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eec2:	d903      	bls.n	800eecc <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800eec4:	23ff      	movs	r3, #255	; 0xff
 800eec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eeca:	e004      	b.n	800eed6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800eecc:	8bbb      	ldrh	r3, [r7, #28]
 800eece:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800eed0:	3b01      	subs	r3, #1
 800eed2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800eed6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800eee2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f040 80ab 	bne.w	800f042 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800eeec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eef0:	461a      	mov	r2, r3
 800eef2:	2146      	movs	r1, #70	; 0x46
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f001 f937 	bl	8010168 <VL53L0X_WrByte>
 800eefa:	4603      	mov	r3, r0
 800eefc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800ef00:	e09f      	b.n	800f042 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800ef02:	7afb      	ldrb	r3, [r7, #11]
 800ef04:	2b03      	cmp	r3, #3
 800ef06:	d135      	bne.n	800ef74 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800ef08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d11b      	bne.n	800ef48 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ef10:	f107 031b 	add.w	r3, r7, #27
 800ef14:	461a      	mov	r2, r3
 800ef16:	2100      	movs	r1, #0
 800ef18:	68f8      	ldr	r0, [r7, #12]
 800ef1a:	f7fd f8eb 	bl	800c0f4 <VL53L0X_GetVcselPulsePeriod>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800ef24:	7efb      	ldrb	r3, [r7, #27]
 800ef26:	461a      	mov	r2, r3
 800ef28:	6879      	ldr	r1, [r7, #4]
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f7ff fe68 	bl	800ec00 <VL53L0X_calc_timeout_mclks>
 800ef30:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800ef32:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800ef34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7ff fe20 	bl	800eb7c <VL53L0X_encode_timeout>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ef40:	8b3a      	ldrh	r2, [r7, #24]
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800ef48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d108      	bne.n	800ef62 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800ef50:	8b3b      	ldrh	r3, [r7, #24]
 800ef52:	461a      	mov	r2, r3
 800ef54:	2151      	movs	r1, #81	; 0x51
 800ef56:	68f8      	ldr	r0, [r7, #12]
 800ef58:	f001 f92a 	bl	80101b0 <VL53L0X_WrWord>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800ef62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d16b      	bne.n	800f042 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800ef72:	e066      	b.n	800f042 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800ef74:	7afb      	ldrb	r3, [r7, #11]
 800ef76:	2b04      	cmp	r3, #4
 800ef78:	d160      	bne.n	800f03c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800ef7a:	f107 0310 	add.w	r3, r7, #16
 800ef7e:	4619      	mov	r1, r3
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f7fd f9c3 	bl	800c30c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800ef8a:	7cfb      	ldrb	r3, [r7, #19]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d01d      	beq.n	800efcc <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ef90:	f107 031b 	add.w	r3, r7, #27
 800ef94:	461a      	mov	r2, r3
 800ef96:	2100      	movs	r1, #0
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f7fd f8ab 	bl	800c0f4 <VL53L0X_GetVcselPulsePeriod>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 800efa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d10f      	bne.n	800efcc <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800efac:	f107 0318 	add.w	r3, r7, #24
 800efb0:	461a      	mov	r2, r3
 800efb2:	2151      	movs	r1, #81	; 0x51
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f001 f983 	bl	80102c0 <VL53L0X_RdWord>
 800efba:	4603      	mov	r3, r0
 800efbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800efc0:	8b3b      	ldrh	r3, [r7, #24]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7ff fe06 	bl	800ebd4 <VL53L0X_decode_timeout>
 800efc8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800efca:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800efcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d109      	bne.n	800efe8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800efd4:	f107 031b 	add.w	r3, r7, #27
 800efd8:	461a      	mov	r2, r3
 800efda:	2101      	movs	r1, #1
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f7fd f889 	bl	800c0f4 <VL53L0X_GetVcselPulsePeriod>
 800efe2:	4603      	mov	r3, r0
 800efe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800efe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800efec:	2b00      	cmp	r3, #0
 800efee:	d128      	bne.n	800f042 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800eff0:	7efb      	ldrb	r3, [r7, #27]
 800eff2:	461a      	mov	r2, r3
 800eff4:	6879      	ldr	r1, [r7, #4]
 800eff6:	68f8      	ldr	r0, [r7, #12]
 800eff8:	f7ff fe02 	bl	800ec00 <VL53L0X_calc_timeout_mclks>
 800effc:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800effe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f000:	6a3a      	ldr	r2, [r7, #32]
 800f002:	4413      	add	r3, r2
 800f004:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800f006:	6a38      	ldr	r0, [r7, #32]
 800f008:	f7ff fdb8 	bl	800eb7c <VL53L0X_encode_timeout>
 800f00c:	4603      	mov	r3, r0
 800f00e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800f010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f014:	2b00      	cmp	r3, #0
 800f016:	d108      	bne.n	800f02a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800f018:	8bfb      	ldrh	r3, [r7, #30]
 800f01a:	461a      	mov	r2, r3
 800f01c:	2171      	movs	r1, #113	; 0x71
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f001 f8c6 	bl	80101b0 <VL53L0X_WrWord>
 800f024:	4603      	mov	r3, r0
 800f026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800f02a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d107      	bne.n	800f042 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800f03a:	e002      	b.n	800f042 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f03c:	23fc      	movs	r3, #252	; 0xfc
 800f03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800f042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f046:	4618      	mov	r0, r3
 800f048:	3728      	adds	r7, #40	; 0x28
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}

0800f04e <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800f04e:	b580      	push	{r7, lr}
 800f050:	b086      	sub	sp, #24
 800f052:	af00      	add	r7, sp, #0
 800f054:	60f8      	str	r0, [r7, #12]
 800f056:	460b      	mov	r3, r1
 800f058:	607a      	str	r2, [r7, #4]
 800f05a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f05c:	2300      	movs	r3, #0
 800f05e:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800f060:	7afb      	ldrb	r3, [r7, #11]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d002      	beq.n	800f06c <VL53L0X_get_vcsel_pulse_period+0x1e>
 800f066:	2b01      	cmp	r3, #1
 800f068:	d00a      	beq.n	800f080 <VL53L0X_get_vcsel_pulse_period+0x32>
 800f06a:	e013      	b.n	800f094 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800f06c:	f107 0316 	add.w	r3, r7, #22
 800f070:	461a      	mov	r2, r3
 800f072:	2150      	movs	r1, #80	; 0x50
 800f074:	68f8      	ldr	r0, [r7, #12]
 800f076:	f001 f8f9 	bl	801026c <VL53L0X_RdByte>
 800f07a:	4603      	mov	r3, r0
 800f07c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800f07e:	e00b      	b.n	800f098 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800f080:	f107 0316 	add.w	r3, r7, #22
 800f084:	461a      	mov	r2, r3
 800f086:	2170      	movs	r1, #112	; 0x70
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f001 f8ef 	bl	801026c <VL53L0X_RdByte>
 800f08e:	4603      	mov	r3, r0
 800f090:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800f092:	e001      	b.n	800f098 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f094:	23fc      	movs	r3, #252	; 0xfc
 800f096:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800f098:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d107      	bne.n	800f0b0 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800f0a0:	7dbb      	ldrb	r3, [r7, #22]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7fe fff4 	bl	800e090 <VL53L0X_decode_vcsel_period>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	701a      	strb	r2, [r3, #0]

	return Status;
 800f0b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3718      	adds	r7, #24
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b090      	sub	sp, #64	; 0x40
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800f0cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f0d0:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800f0d2:	f240 7376 	movw	r3, #1910	; 0x776
 800f0d6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 800f0d8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800f0dc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800f0de:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 800f0e4:	f240 234e 	movw	r3, #590	; 0x24e
 800f0e8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 800f0ea:	f240 23b2 	movw	r3, #690	; 0x2b2
 800f0ee:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800f0f0:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f0f4:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800f0f6:	f240 2326 	movw	r3, #550	; 0x226
 800f0fa:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 800f100:	2300      	movs	r3, #0
 800f102:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800f104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f108:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800f10a:	683a      	ldr	r2, [r7, #0]
 800f10c:	1ad3      	subs	r3, r2, r3
 800f10e:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800f110:	f107 0310 	add.w	r3, r7, #16
 800f114:	4619      	mov	r1, r3
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f7fd f8f8 	bl	800c30c <VL53L0X_GetSequenceStepEnables>
 800f11c:	4603      	mov	r3, r0
 800f11e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 800f122:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f126:	2b00      	cmp	r3, #0
 800f128:	d15b      	bne.n	800f1e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 800f12a:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d105      	bne.n	800f13c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800f130:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 800f132:	2b00      	cmp	r3, #0
 800f134:	d102      	bne.n	800f13c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 800f136:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d052      	beq.n	800f1e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800f13c:	f107 030c 	add.w	r3, r7, #12
 800f140:	461a      	mov	r2, r3
 800f142:	2102      	movs	r1, #2
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f7ff fdaf 	bl	800eca8 <get_sequence_step_timeout>
 800f14a:	4603      	mov	r3, r0
 800f14c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 800f150:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f154:	2b00      	cmp	r3, #0
 800f156:	d002      	beq.n	800f15e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 800f158:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f15c:	e07d      	b.n	800f25a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800f15e:	7c3b      	ldrb	r3, [r7, #16]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d00f      	beq.n	800f184 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800f164:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800f166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f168:	4413      	add	r3, r2
 800f16a:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 800f16c:	69ba      	ldr	r2, [r7, #24]
 800f16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f170:	429a      	cmp	r2, r3
 800f172:	d204      	bcs.n	800f17e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800f174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f176:	69bb      	ldr	r3, [r7, #24]
 800f178:	1ad3      	subs	r3, r2, r3
 800f17a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f17c:	e002      	b.n	800f184 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f17e:	23fc      	movs	r3, #252	; 0xfc
 800f180:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800f184:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d002      	beq.n	800f192 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 800f18c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f190:	e063      	b.n	800f25a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800f192:	7cbb      	ldrb	r3, [r7, #18]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d011      	beq.n	800f1bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800f198:	68fa      	ldr	r2, [r7, #12]
 800f19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19c:	4413      	add	r3, r2
 800f19e:	005b      	lsls	r3, r3, #1
 800f1a0:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800f1a2:	69ba      	ldr	r2, [r7, #24]
 800f1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d204      	bcs.n	800f1b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800f1aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1b2:	e016      	b.n	800f1e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f1b4:	23fc      	movs	r3, #252	; 0xfc
 800f1b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f1ba:	e012      	b.n	800f1e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800f1bc:	7c7b      	ldrb	r3, [r7, #17]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d00f      	beq.n	800f1e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1c6:	4413      	add	r3, r2
 800f1c8:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800f1ca:	69ba      	ldr	r2, [r7, #24]
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d204      	bcs.n	800f1dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800f1d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	1ad3      	subs	r3, r2, r3
 800f1d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1da:	e002      	b.n	800f1e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f1dc:	23fc      	movs	r3, #252	; 0xfc
 800f1de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f1e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d002      	beq.n	800f1f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 800f1ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f1ee:	e034      	b.n	800f25a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800f1f0:	7cfb      	ldrb	r3, [r7, #19]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d019      	beq.n	800f22a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800f1f6:	f107 0308 	add.w	r3, r7, #8
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	2103      	movs	r1, #3
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f7ff fd52 	bl	800eca8 <get_sequence_step_timeout>
 800f204:	4603      	mov	r3, r0
 800f206:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	6a3a      	ldr	r2, [r7, #32]
 800f20e:	4413      	add	r3, r2
 800f210:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800f212:	69ba      	ldr	r2, [r7, #24]
 800f214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f216:	429a      	cmp	r2, r3
 800f218:	d204      	bcs.n	800f224 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800f21a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f21c:	69bb      	ldr	r3, [r7, #24]
 800f21e:	1ad3      	subs	r3, r2, r3
 800f220:	63bb      	str	r3, [r7, #56]	; 0x38
 800f222:	e002      	b.n	800f22a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f224:	23fc      	movs	r3, #252	; 0xfc
 800f226:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800f22a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d111      	bne.n	800f256 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 800f232:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00e      	beq.n	800f256 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 800f238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f23a:	69fb      	ldr	r3, [r7, #28]
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800f240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f242:	2104      	movs	r1, #4
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f7ff fe10 	bl	800ee6a <set_sequence_step_timeout>
 800f24a:	4603      	mov	r3, r0
 800f24c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	683a      	ldr	r2, [r7, #0]
 800f254:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800f256:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3740      	adds	r7, #64	; 0x40
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800f262:	b580      	push	{r7, lr}
 800f264:	b090      	sub	sp, #64	; 0x40
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
 800f26a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f26c:	2300      	movs	r3, #0
 800f26e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800f272:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f276:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800f278:	f240 7376 	movw	r3, #1910	; 0x776
 800f27c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800f27e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800f282:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800f284:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f288:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800f28a:	f240 234e 	movw	r3, #590	; 0x24e
 800f28e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800f290:	f240 23b2 	movw	r3, #690	; 0x2b2
 800f294:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800f296:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f29a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800f29c:	f240 2326 	movw	r3, #550	; 0x226
 800f2a0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800f2a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2aa:	441a      	add	r2, r3
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800f2b0:	f107 0318 	add.w	r3, r7, #24
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7fd f828 	bl	800c30c <VL53L0X_GetSequenceStepEnables>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800f2c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d002      	beq.n	800f2d0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800f2ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f2ce:	e075      	b.n	800f3bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800f2d0:	7e3b      	ldrb	r3, [r7, #24]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d105      	bne.n	800f2e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800f2d6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d102      	bne.n	800f2e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800f2dc:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d030      	beq.n	800f344 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800f2e2:	f107 0310 	add.w	r3, r7, #16
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	2102      	movs	r1, #2
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f7ff fcdc 	bl	800eca8 <get_sequence_step_timeout>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800f2f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d122      	bne.n	800f344 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800f2fe:	7e3b      	ldrb	r3, [r7, #24]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d007      	beq.n	800f314 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800f308:	6939      	ldr	r1, [r7, #16]
 800f30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f30e:	441a      	add	r2, r3
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800f314:	7ebb      	ldrb	r3, [r7, #26]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d009      	beq.n	800f32e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800f31e:	6939      	ldr	r1, [r7, #16]
 800f320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f322:	440b      	add	r3, r1
 800f324:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f326:	441a      	add	r2, r3
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	601a      	str	r2, [r3, #0]
 800f32c:	e00a      	b.n	800f344 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800f32e:	7e7b      	ldrb	r3, [r7, #25]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d007      	beq.n	800f344 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800f338:	6939      	ldr	r1, [r7, #16]
 800f33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f33e:	441a      	add	r2, r3
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f344:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d114      	bne.n	800f376 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800f34c:	7efb      	ldrb	r3, [r7, #27]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d011      	beq.n	800f376 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800f352:	f107 030c 	add.w	r3, r7, #12
 800f356:	461a      	mov	r2, r3
 800f358:	2103      	movs	r1, #3
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f7ff fca4 	bl	800eca8 <get_sequence_step_timeout>
 800f360:	4603      	mov	r3, r0
 800f362:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800f36a:	68f9      	ldr	r1, [r7, #12]
 800f36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f370:	441a      	add	r2, r3
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f376:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d114      	bne.n	800f3a8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800f37e:	7f3b      	ldrb	r3, [r7, #28]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d011      	beq.n	800f3a8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800f384:	f107 0314 	add.w	r3, r7, #20
 800f388:	461a      	mov	r2, r3
 800f38a:	2104      	movs	r1, #4
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f7ff fc8b 	bl	800eca8 <get_sequence_step_timeout>
 800f392:	4603      	mov	r3, r0
 800f394:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800f39c:	6979      	ldr	r1, [r7, #20]
 800f39e:	6a3b      	ldr	r3, [r7, #32]
 800f3a0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f3a2:	441a      	add	r2, r3
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f3a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d103      	bne.n	800f3b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f3b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3740      	adds	r7, #64	; 0x40
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b088      	sub	sp, #32
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f3d6:	e0c6      	b.n	800f566 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	683a      	ldr	r2, [r7, #0]
 800f3dc:	4413      	add	r3, r2
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	74fb      	strb	r3, [r7, #19]
		Index++;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800f3e8:	7cfb      	ldrb	r3, [r7, #19]
 800f3ea:	2bff      	cmp	r3, #255	; 0xff
 800f3ec:	f040 808d 	bne.w	800f50a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	4413      	add	r3, r2
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	747b      	strb	r3, [r7, #17]
			Index++;
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800f400:	7c7b      	ldrb	r3, [r7, #17]
 800f402:	2b03      	cmp	r3, #3
 800f404:	d87e      	bhi.n	800f504 <VL53L0X_load_tuning_settings+0x140>
 800f406:	a201      	add	r2, pc, #4	; (adr r2, 800f40c <VL53L0X_load_tuning_settings+0x48>)
 800f408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f40c:	0800f41d 	.word	0x0800f41d
 800f410:	0800f457 	.word	0x0800f457
 800f414:	0800f491 	.word	0x0800f491
 800f418:	0800f4cb 	.word	0x0800f4cb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	683a      	ldr	r2, [r7, #0]
 800f420:	4413      	add	r3, r2
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	743b      	strb	r3, [r7, #16]
				Index++;
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	3301      	adds	r3, #1
 800f42a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	683a      	ldr	r2, [r7, #0]
 800f430:	4413      	add	r3, r2
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	3301      	adds	r3, #1
 800f43a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f43c:	7c3b      	ldrb	r3, [r7, #16]
 800f43e:	b29b      	uxth	r3, r3
 800f440:	021b      	lsls	r3, r3, #8
 800f442:	b29a      	uxth	r2, r3
 800f444:	7bfb      	ldrb	r3, [r7, #15]
 800f446:	b29b      	uxth	r3, r3
 800f448:	4413      	add	r3, r2
 800f44a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	89ba      	ldrh	r2, [r7, #12]
 800f450:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 800f454:	e087      	b.n	800f566 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	683a      	ldr	r2, [r7, #0]
 800f45a:	4413      	add	r3, r2
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	743b      	strb	r3, [r7, #16]
				Index++;
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	3301      	adds	r3, #1
 800f464:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	683a      	ldr	r2, [r7, #0]
 800f46a:	4413      	add	r3, r2
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	3301      	adds	r3, #1
 800f474:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f476:	7c3b      	ldrb	r3, [r7, #16]
 800f478:	b29b      	uxth	r3, r3
 800f47a:	021b      	lsls	r3, r3, #8
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	7bfb      	ldrb	r3, [r7, #15]
 800f480:	b29b      	uxth	r3, r3
 800f482:	4413      	add	r3, r2
 800f484:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	89ba      	ldrh	r2, [r7, #12]
 800f48a:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 800f48e:	e06a      	b.n	800f566 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	683a      	ldr	r2, [r7, #0]
 800f494:	4413      	add	r3, r2
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	743b      	strb	r3, [r7, #16]
				Index++;
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	3301      	adds	r3, #1
 800f49e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	683a      	ldr	r2, [r7, #0]
 800f4a4:	4413      	add	r3, r2
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f4b0:	7c3b      	ldrb	r3, [r7, #16]
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	021b      	lsls	r3, r3, #8
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	4413      	add	r3, r2
 800f4be:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	89ba      	ldrh	r2, [r7, #12]
 800f4c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 800f4c8:	e04d      	b.n	800f566 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	743b      	strb	r3, [r7, #16]
				Index++;
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	683a      	ldr	r2, [r7, #0]
 800f4de:	4413      	add	r3, r2
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f4ea:	7c3b      	ldrb	r3, [r7, #16]
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	021b      	lsls	r3, r3, #8
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	7bfb      	ldrb	r3, [r7, #15]
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	4413      	add	r3, r2
 800f4f8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	89ba      	ldrh	r2, [r7, #12]
 800f4fe:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 800f502:	e030      	b.n	800f566 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f504:	23fc      	movs	r3, #252	; 0xfc
 800f506:	77fb      	strb	r3, [r7, #31]
 800f508:	e02d      	b.n	800f566 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800f50a:	7cfb      	ldrb	r3, [r7, #19]
 800f50c:	2b04      	cmp	r3, #4
 800f50e:	d828      	bhi.n	800f562 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	683a      	ldr	r2, [r7, #0]
 800f514:	4413      	add	r3, r2
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	74bb      	strb	r3, [r7, #18]
			Index++;
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	3301      	adds	r3, #1
 800f51e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800f520:	2300      	movs	r3, #0
 800f522:	61bb      	str	r3, [r7, #24]
 800f524:	e00f      	b.n	800f546 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	683a      	ldr	r2, [r7, #0]
 800f52a:	4413      	add	r3, r2
 800f52c:	7819      	ldrb	r1, [r3, #0]
 800f52e:	f107 0208 	add.w	r2, r7, #8
 800f532:	69bb      	ldr	r3, [r7, #24]
 800f534:	4413      	add	r3, r2
 800f536:	460a      	mov	r2, r1
 800f538:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	3301      	adds	r3, #1
 800f53e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	3301      	adds	r3, #1
 800f544:	61bb      	str	r3, [r7, #24]
 800f546:	7cfb      	ldrb	r3, [r7, #19]
 800f548:	69ba      	ldr	r2, [r7, #24]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	dbeb      	blt.n	800f526 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800f54e:	7cfb      	ldrb	r3, [r7, #19]
 800f550:	f107 0208 	add.w	r2, r7, #8
 800f554:	7cb9      	ldrb	r1, [r7, #18]
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f000 fdaa 	bl	80100b0 <VL53L0X_WriteMulti>
 800f55c:	4603      	mov	r3, r0
 800f55e:	77fb      	strb	r3, [r7, #31]
 800f560:	e001      	b.n	800f566 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f562:	23fc      	movs	r3, #252	; 0xfc
 800f564:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	683a      	ldr	r2, [r7, #0]
 800f56a:	4413      	add	r3, r2
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d004      	beq.n	800f57c <VL53L0X_load_tuning_settings+0x1b8>
 800f572:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f576:	2b00      	cmp	r3, #0
 800f578:	f43f af2e 	beq.w	800f3d8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f57c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f580:	4618      	mov	r0, r3
 800f582:	3720      	adds	r7, #32
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b088      	sub	sp, #32
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f594:	2300      	movs	r3, #0
 800f596:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2200      	movs	r2, #0
 800f59c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800f59e:	f107 0313 	add.w	r3, r7, #19
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f7fc ff3d 	bl	800c424 <VL53L0X_GetXTalkCompensationEnable>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800f5ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d111      	bne.n	800f5da <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800f5b6:	7cfb      	ldrb	r3, [r7, #19]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00e      	beq.n	800f5da <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	699b      	ldr	r3, [r3, #24]
 800f5c0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	8a9b      	ldrh	r3, [r3, #20]
 800f5c6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	fb02 f303 	mul.w	r3, r2, r3
 800f5ce:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	3380      	adds	r3, #128	; 0x80
 800f5d4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800f5da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3720      	adds	r7, #32
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b086      	sub	sp, #24
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	60f8      	str	r0, [r7, #12]
 800f5ee:	60b9      	str	r1, [r7, #8]
 800f5f0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800f5fe:	f107 0310 	add.w	r3, r7, #16
 800f602:	461a      	mov	r2, r3
 800f604:	68b9      	ldr	r1, [r7, #8]
 800f606:	68f8      	ldr	r0, [r7, #12]
 800f608:	f7ff ffbe 	bl	800f588 <VL53L0X_get_total_xtalk_rate>
 800f60c:	4603      	mov	r3, r0
 800f60e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800f610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d105      	bne.n	800f624 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681a      	ldr	r2, [r3, #0]
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	441a      	add	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	601a      	str	r2, [r3, #0]

	return Status;
 800f624:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3718      	adds	r7, #24
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 800f630:	b084      	sub	sp, #16
 800f632:	b480      	push	{r7}
 800f634:	b085      	sub	sp, #20
 800f636:	af00      	add	r7, sp, #0
 800f638:	f107 0c18 	add.w	ip, r7, #24
 800f63c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f640:	2300      	movs	r3, #0
 800f642:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 800f644:	2300      	movs	r3, #0
 800f646:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 800f648:	2300      	movs	r3, #0
 800f64a:	60bb      	str	r3, [r7, #8]
	int index = 0;
 800f64c:	2300      	movs	r3, #0
 800f64e:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 800f650:	2300      	movs	r3, #0
 800f652:	607b      	str	r3, [r7, #4]
 800f654:	e00d      	b.n	800f672 <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f107 0218 	add.w	r2, r7, #24
 800f65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f660:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f662:	429a      	cmp	r2, r3
 800f664:	d802      	bhi.n	800f66c <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	60bb      	str	r3, [r7, #8]
			break;
 800f66a:	e006      	b.n	800f67a <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	3301      	adds	r3, #1
 800f670:	607b      	str	r3, [r7, #4]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f676:	429a      	cmp	r2, r3
 800f678:	d8ed      	bhi.n	800f656 <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 800f67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d105      	bne.n	800f68e <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 800f682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f684:	3b01      	subs	r3, #1
 800f686:	60bb      	str	r3, [r7, #8]
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	60fb      	str	r3, [r7, #12]
 800f68c:	e008      	b.n	800f6a0 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d102      	bne.n	800f69a <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 800f694:	2300      	movs	r3, #0
 800f696:	60fb      	str	r3, [r7, #12]
 800f698:	e002      	b.n	800f6a0 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	3b01      	subs	r3, #1
 800f69e:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6a4:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 800f6a6:	68ba      	ldr	r2, [r7, #8]
 800f6a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6aa:	601a      	str	r2, [r3, #0]

	return Status;
 800f6ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3714      	adds	r7, #20
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	b004      	add	sp, #16
 800f6bc:	4770      	bx	lr

0800f6be <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 800f6be:	b5b0      	push	{r4, r5, r7, lr}
 800f6c0:	b0ba      	sub	sp, #232	; 0xe8
 800f6c2:	af0e      	add	r7, sp, #56	; 0x38
 800f6c4:	60f8      	str	r0, [r7, #12]
 800f6c6:	60b9      	str	r1, [r7, #8]
 800f6c8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800f6d8:	f107 031c 	add.w	r3, r7, #28
 800f6dc:	4619      	mov	r1, r3
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f7fc fbce 	bl	800be80 <VL53L0X_GetDeviceParameters>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 800f6ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6ec:	68ba      	ldr	r2, [r7, #8]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d803      	bhi.n	800f6fa <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 800f6f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f6f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f6f8:	e07c      	b.n	800f7f4 <VL53L0X_calc_dmax+0x136>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 800f6fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 800f6fc:	68ba      	ldr	r2, [r7, #8]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d304      	bcc.n	800f70c <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 800f702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f70a:	e073      	b.n	800f7f4 <VL53L0X_calc_dmax+0x136>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 800f70c:	f107 0314 	add.w	r3, r7, #20
 800f710:	930d      	str	r3, [sp, #52]	; 0x34
 800f712:	f107 0318 	add.w	r3, r7, #24
 800f716:	930c      	str	r3, [sp, #48]	; 0x30
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f71c:	2307      	movs	r3, #7
 800f71e:	930a      	str	r3, [sp, #40]	; 0x28
 800f720:	466d      	mov	r5, sp
 800f722:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800f726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f72a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f72c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f72e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f732:	e885 0003 	stmia.w	r5, {r0, r1}
 800f736:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f73a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f73c:	f7ff ff78 	bl	800f630 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 800f740:	69ba      	ldr	r2, [r7, #24]
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	429a      	cmp	r2, r3
 800f746:	d109      	bne.n	800f75c <VL53L0X_calc_dmax+0x9e>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 800f748:	69bb      	ldr	r3, [r7, #24]
 800f74a:	3314      	adds	r3, #20
 800f74c:	009b      	lsls	r3, r3, #2
 800f74e:	33b0      	adds	r3, #176	; 0xb0
 800f750:	443b      	add	r3, r7
 800f752:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800f756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f75a:	e04b      	b.n	800f7f4 <VL53L0X_calc_dmax+0x136>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 800f75c:	69bb      	ldr	r3, [r7, #24]
 800f75e:	330e      	adds	r3, #14
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	33b0      	adds	r3, #176	; 0xb0
 800f764:	443b      	add	r3, r7
 800f766:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800f76a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	330e      	adds	r3, #14
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	33b0      	adds	r3, #176	; 0xb0
 800f776:	443b      	add	r3, r7
 800f778:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800f77c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	3314      	adds	r3, #20
 800f784:	009b      	lsls	r3, r3, #2
 800f786:	33b0      	adds	r3, #176	; 0xb0
 800f788:	443b      	add	r3, r7
 800f78a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800f78e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	3314      	adds	r3, #20
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	33b0      	adds	r3, #176	; 0xb0
 800f79a:	443b      	add	r3, r7
 800f79c:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800f7a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 800f7a4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f7a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d01d      	beq.n	800f7ec <VL53L0X_calc_dmax+0x12e>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 800f7b0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f7b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f7b8:	1ad2      	subs	r2, r2, r3
 800f7ba:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f7be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f7c2:	1acb      	subs	r3, r1, r3
 800f7c4:	0a1b      	lsrs	r3, r3, #8
 800f7c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 800f7ce:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 800f7d6:	0a1b      	lsrs	r3, r3, #8
 800f7d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f7dc:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 800f7e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f7e4:	4413      	add	r3, r2
 800f7e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f7ea:	e003      	b.n	800f7f4 <VL53L0X_calc_dmax+0x136>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 800f7ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f7f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 800f7f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7f8:	0c1a      	lsrs	r2, r3, #16
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800f7fe:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 800f802:	4618      	mov	r0, r3
 800f804:	37b0      	adds	r7, #176	; 0xb0
 800f806:	46bd      	mov	sp, r7
 800f808:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f80c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b0b0      	sub	sp, #192	; 0xc0
 800f810:	af00      	add	r7, sp, #0
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800f818:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f81c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800f820:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f824:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 800f828:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800f82c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800f830:	f241 235c 	movw	r3, #4700	; 0x125c
 800f834:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800f838:	4b98      	ldr	r3, [pc, #608]	; (800fa9c <VL53L0X_calc_sigma_estimate+0x290>)
 800f83a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800f83e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f842:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800f846:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800f84a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f84e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f852:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800f856:	4b92      	ldr	r3, [pc, #584]	; (800faa0 <VL53L0X_calc_sigma_estimate+0x294>)
 800f858:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800f85a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f85e:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800f860:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800f864:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 800f866:	f240 6377 	movw	r3, #1655	; 0x677
 800f86a:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f86c:	2300      	movs	r3, #0
 800f86e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	699b      	ldr	r3, [r3, #24]
 800f876:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	691b      	ldr	r3, [r3, #16]
 800f87c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f880:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800f884:	0c1b      	lsrs	r3, r3, #16
 800f886:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 800f888:	f107 0314 	add.w	r3, r7, #20
 800f88c:	461a      	mov	r2, r3
 800f88e:	68b9      	ldr	r1, [r7, #8]
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	f7ff fea8 	bl	800f5e6 <VL53L0X_get_total_signal_rate>
 800f896:	4603      	mov	r3, r0
 800f898:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800f89c:	f107 0318 	add.w	r3, r7, #24
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	68b9      	ldr	r1, [r7, #8]
 800f8a4:	68f8      	ldr	r0, [r7, #12]
 800f8a6:	f7ff fe6f 	bl	800f588 <VL53L0X_get_total_xtalk_rate>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f8b6:	fb02 f303 	mul.w	r3, r2, r3
 800f8ba:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800f8bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f8be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f8c2:	0c1b      	lsrs	r3, r3, #16
 800f8c4:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800f8c6:	69bb      	ldr	r3, [r7, #24]
 800f8c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f8cc:	fb02 f303 	mul.w	r3, r2, r3
 800f8d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800f8d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f8d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d902      	bls.n	800f8e4 <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800f8de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800f8e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d160      	bne.n	800f9ae <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f8f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f8fc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f900:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800f904:	461a      	mov	r2, r3
 800f906:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	f7ff f978 	bl	800ec00 <VL53L0X_calc_timeout_mclks>
 800f910:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800f918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800f922:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f926:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f92a:	461a      	mov	r2, r3
 800f92c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800f930:	68f8      	ldr	r0, [r7, #12]
 800f932:	f7ff f965 	bl	800ec00 <VL53L0X_calc_timeout_mclks>
 800f936:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800f938:	2303      	movs	r3, #3
 800f93a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800f93e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800f942:	2b08      	cmp	r3, #8
 800f944:	d102      	bne.n	800f94c <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 800f946:	2302      	movs	r3, #2
 800f948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800f94c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f94e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f950:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800f952:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f956:	fb02 f303 	mul.w	r3, r2, r3
 800f95a:	02db      	lsls	r3, r3, #11
 800f95c:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f960:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f964:	4a4f      	ldr	r2, [pc, #316]	; (800faa4 <VL53L0X_calc_sigma_estimate+0x298>)
 800f966:	fba2 2303 	umull	r2, r3, r2, r3
 800f96a:	099b      	lsrs	r3, r3, #6
 800f96c:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 800f96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f970:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f972:	fb02 f303 	mul.w	r3, r2, r3
 800f976:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f97a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f97e:	4a49      	ldr	r2, [pc, #292]	; (800faa4 <VL53L0X_calc_sigma_estimate+0x298>)
 800f980:	fba2 2303 	umull	r2, r3, r2, r3
 800f984:	099b      	lsrs	r3, r3, #6
 800f986:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	3380      	adds	r3, #128	; 0x80
 800f98c:	0a1b      	lsrs	r3, r3, #8
 800f98e:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800f990:	697a      	ldr	r2, [r7, #20]
 800f992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f994:	fb02 f303 	mul.w	r3, r2, r3
 800f998:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800f99c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f9a0:	3380      	adds	r3, #128	; 0x80
 800f9a2:	0a1b      	lsrs	r3, r3, #8
 800f9a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	021b      	lsls	r3, r3, #8
 800f9ac:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f9ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d002      	beq.n	800f9bc <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 800f9b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f9ba:	e14a      	b.n	800fc52 <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 800f9bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d109      	bne.n	800f9d6 <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f9c8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f9d0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800f9d4:	e13b      	b.n	800fc4e <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 800f9d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d102      	bne.n	800f9e4 <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800f9e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f9e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800f9ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f9ec:	041a      	lsls	r2, r3, #16
 800f9ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800f9f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f9fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d903      	bls.n	800fa0c <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800fa04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fa08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800fa0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fa10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fa14:	fb02 f303 	mul.w	r3, r2, r3
 800fa18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800fa1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fa20:	4613      	mov	r3, r2
 800fa22:	005b      	lsls	r3, r3, #1
 800fa24:	4413      	add	r3, r2
 800fa26:	009b      	lsls	r3, r3, #2
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7fe fb44 	bl	800e0b6 <VL53L0X_isqrt>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	005b      	lsls	r3, r3, #1
 800fa32:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	891b      	ldrh	r3, [r3, #8]
 800fa38:	461a      	mov	r2, r3
 800fa3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa3c:	fb02 f303 	mul.w	r3, r2, r3
 800fa40:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800fa42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa44:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800fa46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fa4a:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800fa4c:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800fa4e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800fa52:	4a14      	ldr	r2, [pc, #80]	; (800faa4 <VL53L0X_calc_sigma_estimate+0x298>)
 800fa54:	fba2 2303 	umull	r2, r3, r2, r3
 800fa58:	099b      	lsrs	r3, r3, #6
 800fa5a:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800fa5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa5e:	041b      	lsls	r3, r3, #16
 800fa60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fa64:	4a0f      	ldr	r2, [pc, #60]	; (800faa4 <VL53L0X_calc_sigma_estimate+0x298>)
 800fa66:	fba2 2303 	umull	r2, r3, r2, r3
 800fa6a:	099b      	lsrs	r3, r3, #6
 800fa6c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 800fa6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa70:	021b      	lsls	r3, r3, #8
 800fa72:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800fa74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa78:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	bfb8      	it	lt
 800fa80:	425b      	neglt	r3, r3
 800fa82:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800fa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa86:	021b      	lsls	r3, r3, #8
 800fa88:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	7e1b      	ldrb	r3, [r3, #24]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00a      	beq.n	800faa8 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 800fa92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fa96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fa9a:	e032      	b.n	800fb02 <VL53L0X_calc_sigma_estimate+0x2f6>
 800fa9c:	028f87ae 	.word	0x028f87ae
 800faa0:	0006999a 	.word	0x0006999a
 800faa4:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 800faa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800faaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800faae:	fbb2 f3f3 	udiv	r3, r2, r3
 800fab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800fab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800fabc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fac0:	fb02 f303 	mul.w	r3, r2, r3
 800fac4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800fac8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800facc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800face:	4413      	add	r3, r2
 800fad0:	0c1b      	lsrs	r3, r3, #16
 800fad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800fad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fada:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800fade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 800fae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fae6:	085b      	lsrs	r3, r3, #1
 800fae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800faec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800faf0:	fb03 f303 	mul.w	r3, r3, r3
 800faf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800faf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fafc:	0b9b      	lsrs	r3, r3, #14
 800fafe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800fb02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb08:	fb02 f303 	mul.w	r3, r2, r3
 800fb0c:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800fb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800fb14:	0c1b      	lsrs	r3, r3, #16
 800fb16:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800fb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb1a:	fb03 f303 	mul.w	r3, r3, r3
 800fb1e:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 800fb20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fb24:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800fb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb28:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800fb2c:	0c1b      	lsrs	r3, r3, #16
 800fb2e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800fb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb32:	fb03 f303 	mul.w	r3, r3, r3
 800fb36:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800fb38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3c:	4413      	add	r3, r2
 800fb3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800fb40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb42:	f7fe fab8 	bl	800e0b6 <VL53L0X_isqrt>
 800fb46:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800fb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb4a:	041b      	lsls	r3, r3, #16
 800fb4c:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800fb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb50:	3332      	adds	r3, #50	; 0x32
 800fb52:	4a42      	ldr	r2, [pc, #264]	; (800fc5c <VL53L0X_calc_sigma_estimate+0x450>)
 800fb54:	fba2 2303 	umull	r2, r3, r2, r3
 800fb58:	095a      	lsrs	r2, r3, #5
 800fb5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800fb64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb68:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800fb6c:	fb02 f303 	mul.w	r3, r2, r3
 800fb70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800fb74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb78:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800fb7c:	3308      	adds	r3, #8
 800fb7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800fb82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb86:	4a36      	ldr	r2, [pc, #216]	; (800fc60 <VL53L0X_calc_sigma_estimate+0x454>)
 800fb88:	fba2 2303 	umull	r2, r3, r2, r3
 800fb8c:	0b5b      	lsrs	r3, r3, #13
 800fb8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800fb92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fb96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d903      	bls.n	800fba6 <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 800fb9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fba2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 800fba6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fbaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fbae:	4413      	add	r3, r2
 800fbb0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800fbb4:	4a2b      	ldr	r2, [pc, #172]	; (800fc64 <VL53L0X_calc_sigma_estimate+0x458>)
 800fbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800fbba:	099b      	lsrs	r3, r3, #6
 800fbbc:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800fbc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fbc6:	441a      	add	r2, r3
 800fbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbca:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fe fa71 	bl	800e0b6 <VL53L0X_isqrt>
 800fbd4:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800fbd6:	6a3b      	ldr	r3, [r7, #32]
 800fbd8:	021b      	lsls	r3, r3, #8
 800fbda:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800fbdc:	6a3b      	ldr	r3, [r7, #32]
 800fbde:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fbe2:	4a20      	ldr	r2, [pc, #128]	; (800fc64 <VL53L0X_calc_sigma_estimate+0x458>)
 800fbe4:	fba2 2303 	umull	r2, r3, r2, r3
 800fbe8:	099b      	lsrs	r3, r3, #6
 800fbea:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800fbec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fbf0:	fb03 f303 	mul.w	r3, r3, r3
 800fbf4:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800fbf6:	6a3b      	ldr	r3, [r7, #32]
 800fbf8:	fb03 f303 	mul.w	r3, r3, r3
 800fbfc:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800fbfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc02:	4413      	add	r3, r2
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fe fa56 	bl	800e0b6 <VL53L0X_isqrt>
 800fc0a:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fc12:	fb02 f303 	mul.w	r3, r2, r3
 800fc16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800fc1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d009      	beq.n	800fc34 <VL53L0X_calc_sigma_estimate+0x428>
 800fc20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d005      	beq.n	800fc34 <VL53L0X_calc_sigma_estimate+0x428>
 800fc28:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fc2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d903      	bls.n	800fc3c <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 800fc34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fc42:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fc4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	37c0      	adds	r7, #192	; 0xc0
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	51eb851f 	.word	0x51eb851f
 800fc60:	d1b71759 	.word	0xd1b71759
 800fc64:	10624dd3 	.word	0x10624dd3

0800fc68 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b090      	sub	sp, #64	; 0x40
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	607a      	str	r2, [r7, #4]
 800fc72:	461a      	mov	r2, r3
 800fc74:	460b      	mov	r3, r1
 800fc76:	72fb      	strb	r3, [r7, #11]
 800fc78:	4613      	mov	r3, r2
 800fc7a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800fc82:	2300      	movs	r3, #0
 800fc84:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800fc94:	2300      	movs	r3, #0
 800fc96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800fca0:	2300      	movs	r3, #0
 800fca2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800fca6:	2300      	movs	r3, #0
 800fca8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800fcac:	2300      	movs	r3, #0
 800fcae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800fcba:	7afb      	ldrb	r3, [r7, #11]
 800fcbc:	10db      	asrs	r3, r3, #3
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	f003 030f 	and.w	r3, r3, #15
 800fcc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800fcc8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d017      	beq.n	800fd00 <VL53L0X_get_pal_range_status+0x98>
 800fcd0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcd4:	2b05      	cmp	r3, #5
 800fcd6:	d013      	beq.n	800fd00 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800fcd8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcdc:	2b07      	cmp	r3, #7
 800fcde:	d00f      	beq.n	800fd00 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800fce0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fce4:	2b0c      	cmp	r3, #12
 800fce6:	d00b      	beq.n	800fd00 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800fce8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcec:	2b0d      	cmp	r3, #13
 800fcee:	d007      	beq.n	800fd00 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800fcf0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcf4:	2b0e      	cmp	r3, #14
 800fcf6:	d003      	beq.n	800fd00 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800fcf8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcfc:	2b0f      	cmp	r3, #15
 800fcfe:	d103      	bne.n	800fd08 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800fd00:	2301      	movs	r3, #1
 800fd02:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800fd06:	e002      	b.n	800fd0e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fd0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d109      	bne.n	800fd2a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fd16:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	68f8      	ldr	r0, [r7, #12]
 800fd20:	f7fc fc54 	bl	800c5cc <VL53L0X_GetLimitCheckEnable>
 800fd24:	4603      	mov	r3, r0
 800fd26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800fd2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d03c      	beq.n	800fdac <VL53L0X_get_pal_range_status+0x144>
 800fd32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d138      	bne.n	800fdac <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800fd3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd3e:	461a      	mov	r2, r3
 800fd40:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fd42:	68f8      	ldr	r0, [r7, #12]
 800fd44:	f7ff fd62 	bl	800f80c <VL53L0X_calc_sigma_estimate>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 800fd4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d10a      	bne.n	800fd6c <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 800fd56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd58:	691b      	ldr	r3, [r3, #16]
 800fd5a:	f107 0210 	add.w	r2, r7, #16
 800fd5e:	4619      	mov	r1, r3
 800fd60:	68f8      	ldr	r0, [r7, #12]
 800fd62:	f7ff fcac 	bl	800f6be <VL53L0X_calc_dmax>
 800fd66:	4603      	mov	r3, r0
 800fd68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800fd6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d103      	bne.n	800fd7c <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd7a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800fd7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d113      	bne.n	800fdac <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800fd84:	f107 0320 	add.w	r3, r7, #32
 800fd88:	461a      	mov	r2, r3
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	68f8      	ldr	r0, [r7, #12]
 800fd8e:	f7fc fca3 	bl	800c6d8 <VL53L0X_GetLimitCheckValue>
 800fd92:	4603      	mov	r3, r0
 800fd94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800fd98:	6a3b      	ldr	r3, [r7, #32]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d006      	beq.n	800fdac <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 800fd9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fda0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d902      	bls.n	800fdac <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 800fda6:	2301      	movs	r3, #1
 800fda8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fdac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d109      	bne.n	800fdc8 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fdb4:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800fdb8:	461a      	mov	r2, r3
 800fdba:	2102      	movs	r1, #2
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	f7fc fc05 	bl	800c5cc <VL53L0X_GetLimitCheckEnable>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800fdc8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d044      	beq.n	800fe5a <VL53L0X_get_pal_range_status+0x1f2>
 800fdd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d140      	bne.n	800fe5a <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800fdd8:	f107 031c 	add.w	r3, r7, #28
 800fddc:	461a      	mov	r2, r3
 800fdde:	2102      	movs	r1, #2
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f7fc fc79 	bl	800c6d8 <VL53L0X_GetLimitCheckValue>
 800fde6:	4603      	mov	r3, r0
 800fde8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800fdec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d107      	bne.n	800fe04 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	21ff      	movs	r1, #255	; 0xff
 800fdf8:	68f8      	ldr	r0, [r7, #12]
 800fdfa:	f000 f9b5 	bl	8010168 <VL53L0X_WrByte>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800fe04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d109      	bne.n	800fe20 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 800fe0c:	f107 0316 	add.w	r3, r7, #22
 800fe10:	461a      	mov	r2, r3
 800fe12:	21b6      	movs	r1, #182	; 0xb6
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	f000 fa53 	bl	80102c0 <VL53L0X_RdWord>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800fe20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d107      	bne.n	800fe38 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800fe28:	2200      	movs	r2, #0
 800fe2a:	21ff      	movs	r1, #255	; 0xff
 800fe2c:	68f8      	ldr	r0, [r7, #12]
 800fe2e:	f000 f99b 	bl	8010168 <VL53L0X_WrByte>
 800fe32:	4603      	mov	r3, r0
 800fe34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800fe38:	8afb      	ldrh	r3, [r7, #22]
 800fe3a:	025b      	lsls	r3, r3, #9
 800fe3c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe42:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 800fe46:	69fb      	ldr	r3, [r7, #28]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d006      	beq.n	800fe5a <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800fe4c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800fe4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d902      	bls.n	800fe5a <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800fe54:	2301      	movs	r3, #1
 800fe56:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fe5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d109      	bne.n	800fe76 <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fe62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe66:	461a      	mov	r2, r3
 800fe68:	2103      	movs	r1, #3
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	f7fc fbae 	bl	800c5cc <VL53L0X_GetLimitCheckEnable>
 800fe70:	4603      	mov	r3, r0
 800fe72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800fe76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d023      	beq.n	800fec6 <VL53L0X_get_pal_range_status+0x25e>
 800fe7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d11f      	bne.n	800fec6 <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800fe86:	893b      	ldrh	r3, [r7, #8]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d102      	bne.n	800fe92 <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe90:	e005      	b.n	800fe9e <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	021a      	lsls	r2, r3, #8
 800fe96:	893b      	ldrh	r3, [r7, #8]
 800fe98:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe9c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800fe9e:	f107 0318 	add.w	r3, r7, #24
 800fea2:	461a      	mov	r2, r3
 800fea4:	2103      	movs	r1, #3
 800fea6:	68f8      	ldr	r0, [r7, #12]
 800fea8:	f7fc fc16 	bl	800c6d8 <VL53L0X_GetLimitCheckValue>
 800feac:	4603      	mov	r3, r0
 800feae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d006      	beq.n	800fec6 <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800feb8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800feba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800febc:	429a      	cmp	r2, r3
 800febe:	d202      	bcs.n	800fec6 <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800fec0:	2301      	movs	r3, #1
 800fec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800fec6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d14a      	bne.n	800ff64 <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 800fece:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	d103      	bne.n	800fede <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 800fed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fed8:	22ff      	movs	r2, #255	; 0xff
 800feda:	701a      	strb	r2, [r3, #0]
 800fedc:	e042      	b.n	800ff64 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 800fede:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fee2:	2b01      	cmp	r3, #1
 800fee4:	d007      	beq.n	800fef6 <VL53L0X_get_pal_range_status+0x28e>
 800fee6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800feea:	2b02      	cmp	r3, #2
 800feec:	d003      	beq.n	800fef6 <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 800feee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fef2:	2b03      	cmp	r3, #3
 800fef4:	d103      	bne.n	800fefe <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800fef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fef8:	2205      	movs	r2, #5
 800fefa:	701a      	strb	r2, [r3, #0]
 800fefc:	e032      	b.n	800ff64 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 800fefe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ff02:	2b06      	cmp	r3, #6
 800ff04:	d003      	beq.n	800ff0e <VL53L0X_get_pal_range_status+0x2a6>
 800ff06:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ff0a:	2b09      	cmp	r3, #9
 800ff0c:	d103      	bne.n	800ff16 <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800ff0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff10:	2204      	movs	r2, #4
 800ff12:	701a      	strb	r2, [r3, #0]
 800ff14:	e026      	b.n	800ff64 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 800ff16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ff1a:	2b08      	cmp	r3, #8
 800ff1c:	d007      	beq.n	800ff2e <VL53L0X_get_pal_range_status+0x2c6>
 800ff1e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ff22:	2b0a      	cmp	r3, #10
 800ff24:	d003      	beq.n	800ff2e <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 800ff26:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ff2a:	2b01      	cmp	r3, #1
 800ff2c:	d103      	bne.n	800ff36 <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800ff2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff30:	2203      	movs	r2, #3
 800ff32:	701a      	strb	r2, [r3, #0]
 800ff34:	e016      	b.n	800ff64 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ff36:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ff3a:	2b04      	cmp	r3, #4
 800ff3c:	d003      	beq.n	800ff46 <VL53L0X_get_pal_range_status+0x2de>
 800ff3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ff42:	2b01      	cmp	r3, #1
 800ff44:	d103      	bne.n	800ff4e <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800ff46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff48:	2202      	movs	r2, #2
 800ff4a:	701a      	strb	r2, [r3, #0]
 800ff4c:	e00a      	b.n	800ff64 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 800ff4e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d103      	bne.n	800ff5e <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800ff56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff58:	2201      	movs	r2, #1
 800ff5a:	701a      	strb	r2, [r3, #0]
 800ff5c:	e002      	b.n	800ff64 <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800ff5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff60:	2200      	movs	r2, #0
 800ff62:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ff64:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800ff68:	461a      	mov	r2, r3
 800ff6a:	2101      	movs	r1, #1
 800ff6c:	68f8      	ldr	r0, [r7, #12]
 800ff6e:	f7fc fb2d 	bl	800c5cc <VL53L0X_GetLimitCheckEnable>
 800ff72:	4603      	mov	r3, r0
 800ff74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800ff78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d14f      	bne.n	8010020 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800ff80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d003      	beq.n	800ff90 <VL53L0X_get_pal_range_status+0x328>
 800ff88:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d103      	bne.n	800ff98 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 800ff90:	2301      	movs	r3, #1
 800ff92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff96:	e002      	b.n	800ff9e <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ffa4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800ffa8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ffac:	2b04      	cmp	r3, #4
 800ffae:	d003      	beq.n	800ffb8 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800ffb0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d103      	bne.n	800ffc0 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffbe:	e002      	b.n	800ffc6 <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ffcc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800ffd0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d003      	beq.n	800ffe0 <VL53L0X_get_pal_range_status+0x378>
 800ffd8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d103      	bne.n	800ffe8 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffe6:	e002      	b.n	800ffee <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fff4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800fff8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d003      	beq.n	8010008 <VL53L0X_get_pal_range_status+0x3a0>
 8010000:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010004:	2b01      	cmp	r3, #1
 8010006:	d103      	bne.n	8010010 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8010008:	2301      	movs	r3, #1
 801000a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801000e:	e002      	b.n	8010016 <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 8010010:	2300      	movs	r3, #0
 8010012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801001c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8010020:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8010024:	4618      	mov	r0, r3
 8010026:	3740      	adds	r7, #64	; 0x40
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 801002c:	b580      	push	{r7, lr}
 801002e:	b088      	sub	sp, #32
 8010030:	af02      	add	r7, sp, #8
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	60b9      	str	r1, [r7, #8]
 8010036:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	330a      	adds	r3, #10
 801003c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 801004a:	b299      	uxth	r1, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	b29a      	uxth	r2, r3
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	4613      	mov	r3, r2
 8010056:	68ba      	ldr	r2, [r7, #8]
 8010058:	f7f2 fa60 	bl	800251c <HAL_I2C_Master_Transmit>
 801005c:	4603      	mov	r3, r0
 801005e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8010060:	693b      	ldr	r3, [r7, #16]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3718      	adds	r7, #24
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}

0801006a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 801006a:	b580      	push	{r7, lr}
 801006c:	b088      	sub	sp, #32
 801006e:	af02      	add	r7, sp, #8
 8010070:	60f8      	str	r0, [r7, #12]
 8010072:	60b9      	str	r1, [r7, #8]
 8010074:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	330a      	adds	r3, #10
 801007a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8010088:	f043 0301 	orr.w	r3, r3, #1
 801008c:	b2db      	uxtb	r3, r3
 801008e:	b299      	uxth	r1, r3
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	b29a      	uxth	r2, r3
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	4613      	mov	r3, r2
 801009a:	68ba      	ldr	r2, [r7, #8]
 801009c:	f7f2 fb32 	bl	8002704 <HAL_I2C_Master_Receive>
 80100a0:	4603      	mov	r3, r0
 80100a2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80100a4:	693b      	ldr	r3, [r7, #16]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3718      	adds	r7, #24
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
	...

080100b0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b086      	sub	sp, #24
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	607a      	str	r2, [r7, #4]
 80100ba:	603b      	str	r3, [r7, #0]
 80100bc:	460b      	mov	r3, r1
 80100be:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80100c0:	2300      	movs	r3, #0
 80100c2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	2b3f      	cmp	r3, #63	; 0x3f
 80100c8:	d902      	bls.n	80100d0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80100ca:	f06f 0303 	mvn.w	r3, #3
 80100ce:	e016      	b.n	80100fe <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 80100d0:	4a0d      	ldr	r2, [pc, #52]	; (8010108 <VL53L0X_WriteMulti+0x58>)
 80100d2:	7afb      	ldrb	r3, [r7, #11]
 80100d4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80100d6:	683a      	ldr	r2, [r7, #0]
 80100d8:	6879      	ldr	r1, [r7, #4]
 80100da:	480c      	ldr	r0, [pc, #48]	; (801010c <VL53L0X_WriteMulti+0x5c>)
 80100dc:	f000 f9c8 	bl	8010470 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	3301      	adds	r3, #1
 80100e4:	461a      	mov	r2, r3
 80100e6:	4908      	ldr	r1, [pc, #32]	; (8010108 <VL53L0X_WriteMulti+0x58>)
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f7ff ff9f 	bl	801002c <_I2CWrite>
 80100ee:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d001      	beq.n	80100fa <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80100f6:	23ec      	movs	r3, #236	; 0xec
 80100f8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80100fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3718      	adds	r7, #24
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	2004ae30 	.word	0x2004ae30
 801010c:	2004ae31 	.word	0x2004ae31

08010110 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8010110:	b580      	push	{r7, lr}
 8010112:	b086      	sub	sp, #24
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	607a      	str	r2, [r7, #4]
 801011a:	603b      	str	r3, [r7, #0]
 801011c:	460b      	mov	r3, r1
 801011e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010120:	2300      	movs	r3, #0
 8010122:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8010124:	f107 030b 	add.w	r3, r7, #11
 8010128:	2201      	movs	r2, #1
 801012a:	4619      	mov	r1, r3
 801012c:	68f8      	ldr	r0, [r7, #12]
 801012e:	f7ff ff7d 	bl	801002c <_I2CWrite>
 8010132:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d002      	beq.n	8010140 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801013a:	23ec      	movs	r3, #236	; 0xec
 801013c:	75fb      	strb	r3, [r7, #23]
        goto done;
 801013e:	e00c      	b.n	801015a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8010140:	683a      	ldr	r2, [r7, #0]
 8010142:	6879      	ldr	r1, [r7, #4]
 8010144:	68f8      	ldr	r0, [r7, #12]
 8010146:	f7ff ff90 	bl	801006a <_I2CRead>
 801014a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d002      	beq.n	8010158 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010152:	23ec      	movs	r3, #236	; 0xec
 8010154:	75fb      	strb	r3, [r7, #23]
 8010156:	e000      	b.n	801015a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8010158:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 801015a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801015e:	4618      	mov	r0, r3
 8010160:	3718      	adds	r7, #24
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
	...

08010168 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8010168:	b580      	push	{r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	460b      	mov	r3, r1
 8010172:	70fb      	strb	r3, [r7, #3]
 8010174:	4613      	mov	r3, r2
 8010176:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010178:	2300      	movs	r3, #0
 801017a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 801017c:	4a0b      	ldr	r2, [pc, #44]	; (80101ac <VL53L0X_WrByte+0x44>)
 801017e:	78fb      	ldrb	r3, [r7, #3]
 8010180:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8010182:	4a0a      	ldr	r2, [pc, #40]	; (80101ac <VL53L0X_WrByte+0x44>)
 8010184:	78bb      	ldrb	r3, [r7, #2]
 8010186:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010188:	2202      	movs	r2, #2
 801018a:	4908      	ldr	r1, [pc, #32]	; (80101ac <VL53L0X_WrByte+0x44>)
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f7ff ff4d 	bl	801002c <_I2CWrite>
 8010192:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d001      	beq.n	801019e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801019a:	23ec      	movs	r3, #236	; 0xec
 801019c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 801019e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	2004ae30 	.word	0x2004ae30

080101b0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	460b      	mov	r3, r1
 80101ba:	70fb      	strb	r3, [r7, #3]
 80101bc:	4613      	mov	r3, r2
 80101be:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80101c0:	2300      	movs	r3, #0
 80101c2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80101c4:	4a0e      	ldr	r2, [pc, #56]	; (8010200 <VL53L0X_WrWord+0x50>)
 80101c6:	78fb      	ldrb	r3, [r7, #3]
 80101c8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 80101ca:	883b      	ldrh	r3, [r7, #0]
 80101cc:	0a1b      	lsrs	r3, r3, #8
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	b2da      	uxtb	r2, r3
 80101d2:	4b0b      	ldr	r3, [pc, #44]	; (8010200 <VL53L0X_WrWord+0x50>)
 80101d4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80101d6:	883b      	ldrh	r3, [r7, #0]
 80101d8:	b2da      	uxtb	r2, r3
 80101da:	4b09      	ldr	r3, [pc, #36]	; (8010200 <VL53L0X_WrWord+0x50>)
 80101dc:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80101de:	2203      	movs	r2, #3
 80101e0:	4907      	ldr	r1, [pc, #28]	; (8010200 <VL53L0X_WrWord+0x50>)
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f7ff ff22 	bl	801002c <_I2CWrite>
 80101e8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d001      	beq.n	80101f4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80101f0:	23ec      	movs	r3, #236	; 0xec
 80101f2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80101f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3710      	adds	r7, #16
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}
 8010200:	2004ae30 	.word	0x2004ae30

08010204 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	4608      	mov	r0, r1
 801020e:	4611      	mov	r1, r2
 8010210:	461a      	mov	r2, r3
 8010212:	4603      	mov	r3, r0
 8010214:	70fb      	strb	r3, [r7, #3]
 8010216:	460b      	mov	r3, r1
 8010218:	70bb      	strb	r3, [r7, #2]
 801021a:	4613      	mov	r3, r2
 801021c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801021e:	2300      	movs	r3, #0
 8010220:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8010222:	f107 020e 	add.w	r2, r7, #14
 8010226:	78fb      	ldrb	r3, [r7, #3]
 8010228:	4619      	mov	r1, r3
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 f81e 	bl	801026c <VL53L0X_RdByte>
 8010230:	4603      	mov	r3, r0
 8010232:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8010234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d110      	bne.n	801025e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 801023c:	7bba      	ldrb	r2, [r7, #14]
 801023e:	78bb      	ldrb	r3, [r7, #2]
 8010240:	4013      	ands	r3, r2
 8010242:	b2da      	uxtb	r2, r3
 8010244:	787b      	ldrb	r3, [r7, #1]
 8010246:	4313      	orrs	r3, r2
 8010248:	b2db      	uxtb	r3, r3
 801024a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 801024c:	7bba      	ldrb	r2, [r7, #14]
 801024e:	78fb      	ldrb	r3, [r7, #3]
 8010250:	4619      	mov	r1, r3
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f7ff ff88 	bl	8010168 <VL53L0X_WrByte>
 8010258:	4603      	mov	r3, r0
 801025a:	73fb      	strb	r3, [r7, #15]
 801025c:	e000      	b.n	8010260 <VL53L0X_UpdateByte+0x5c>
        goto done;
 801025e:	bf00      	nop
done:
    return Status;
 8010260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010264:	4618      	mov	r0, r3
 8010266:	3710      	adds	r7, #16
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 801026c:	b580      	push	{r7, lr}
 801026e:	b086      	sub	sp, #24
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	460b      	mov	r3, r1
 8010276:	607a      	str	r2, [r7, #4]
 8010278:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801027a:	2300      	movs	r3, #0
 801027c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 801027e:	f107 030b 	add.w	r3, r7, #11
 8010282:	2201      	movs	r2, #1
 8010284:	4619      	mov	r1, r3
 8010286:	68f8      	ldr	r0, [r7, #12]
 8010288:	f7ff fed0 	bl	801002c <_I2CWrite>
 801028c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d002      	beq.n	801029a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010294:	23ec      	movs	r3, #236	; 0xec
 8010296:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010298:	e00c      	b.n	80102b4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 801029a:	2201      	movs	r2, #1
 801029c:	6879      	ldr	r1, [r7, #4]
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f7ff fee3 	bl	801006a <_I2CRead>
 80102a4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d002      	beq.n	80102b2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80102ac:	23ec      	movs	r3, #236	; 0xec
 80102ae:	75fb      	strb	r3, [r7, #23]
 80102b0:	e000      	b.n	80102b4 <VL53L0X_RdByte+0x48>
    }
done:
 80102b2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80102b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3718      	adds	r7, #24
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b086      	sub	sp, #24
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	460b      	mov	r3, r1
 80102ca:	607a      	str	r2, [r7, #4]
 80102cc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80102ce:	2300      	movs	r3, #0
 80102d0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80102d2:	f107 030b 	add.w	r3, r7, #11
 80102d6:	2201      	movs	r2, #1
 80102d8:	4619      	mov	r1, r3
 80102da:	68f8      	ldr	r0, [r7, #12]
 80102dc:	f7ff fea6 	bl	801002c <_I2CWrite>
 80102e0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d002      	beq.n	80102ee <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80102e8:	23ec      	movs	r3, #236	; 0xec
 80102ea:	75fb      	strb	r3, [r7, #23]
        goto done;
 80102ec:	e017      	b.n	801031e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80102ee:	2202      	movs	r2, #2
 80102f0:	490e      	ldr	r1, [pc, #56]	; (801032c <VL53L0X_RdWord+0x6c>)
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f7ff feb9 	bl	801006a <_I2CRead>
 80102f8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d002      	beq.n	8010306 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010300:	23ec      	movs	r3, #236	; 0xec
 8010302:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010304:	e00b      	b.n	801031e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8010306:	4b09      	ldr	r3, [pc, #36]	; (801032c <VL53L0X_RdWord+0x6c>)
 8010308:	781b      	ldrb	r3, [r3, #0]
 801030a:	b29b      	uxth	r3, r3
 801030c:	021b      	lsls	r3, r3, #8
 801030e:	b29a      	uxth	r2, r3
 8010310:	4b06      	ldr	r3, [pc, #24]	; (801032c <VL53L0X_RdWord+0x6c>)
 8010312:	785b      	ldrb	r3, [r3, #1]
 8010314:	b29b      	uxth	r3, r3
 8010316:	4413      	add	r3, r2
 8010318:	b29a      	uxth	r2, r3
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 801031e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010322:	4618      	mov	r0, r3
 8010324:	3718      	adds	r7, #24
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop
 801032c:	2004ae30 	.word	0x2004ae30

08010330 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8010330:	b580      	push	{r7, lr}
 8010332:	b086      	sub	sp, #24
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	460b      	mov	r3, r1
 801033a:	607a      	str	r2, [r7, #4]
 801033c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801033e:	2300      	movs	r3, #0
 8010340:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8010342:	f107 030b 	add.w	r3, r7, #11
 8010346:	2201      	movs	r2, #1
 8010348:	4619      	mov	r1, r3
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	f7ff fe6e 	bl	801002c <_I2CWrite>
 8010350:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d002      	beq.n	801035e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010358:	23ec      	movs	r3, #236	; 0xec
 801035a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801035c:	e01b      	b.n	8010396 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 801035e:	2204      	movs	r2, #4
 8010360:	4910      	ldr	r1, [pc, #64]	; (80103a4 <VL53L0X_RdDWord+0x74>)
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f7ff fe81 	bl	801006a <_I2CRead>
 8010368:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d002      	beq.n	8010376 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010370:	23ec      	movs	r3, #236	; 0xec
 8010372:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010374:	e00f      	b.n	8010396 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8010376:	4b0b      	ldr	r3, [pc, #44]	; (80103a4 <VL53L0X_RdDWord+0x74>)
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	061a      	lsls	r2, r3, #24
 801037c:	4b09      	ldr	r3, [pc, #36]	; (80103a4 <VL53L0X_RdDWord+0x74>)
 801037e:	785b      	ldrb	r3, [r3, #1]
 8010380:	041b      	lsls	r3, r3, #16
 8010382:	441a      	add	r2, r3
 8010384:	4b07      	ldr	r3, [pc, #28]	; (80103a4 <VL53L0X_RdDWord+0x74>)
 8010386:	789b      	ldrb	r3, [r3, #2]
 8010388:	021b      	lsls	r3, r3, #8
 801038a:	4413      	add	r3, r2
 801038c:	4a05      	ldr	r2, [pc, #20]	; (80103a4 <VL53L0X_RdDWord+0x74>)
 801038e:	78d2      	ldrb	r2, [r2, #3]
 8010390:	441a      	add	r2, r3
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8010396:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3718      	adds	r7, #24
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	2004ae30 	.word	0x2004ae30

080103a8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80103b0:	2300      	movs	r3, #0
 80103b2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80103b4:	2002      	movs	r0, #2
 80103b6:	f7f0 f945 	bl	8000644 <HAL_Delay>
    return status;
 80103ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3710      	adds	r7, #16
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
	...

080103c8 <Reset_Handler>:
 80103c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010400 <LoopForever+0x2>
 80103cc:	f7fb f9e0 	bl	800b790 <SystemInit>
 80103d0:	480c      	ldr	r0, [pc, #48]	; (8010404 <LoopForever+0x6>)
 80103d2:	490d      	ldr	r1, [pc, #52]	; (8010408 <LoopForever+0xa>)
 80103d4:	4a0d      	ldr	r2, [pc, #52]	; (801040c <LoopForever+0xe>)
 80103d6:	2300      	movs	r3, #0
 80103d8:	e002      	b.n	80103e0 <LoopCopyDataInit>

080103da <CopyDataInit>:
 80103da:	58d4      	ldr	r4, [r2, r3]
 80103dc:	50c4      	str	r4, [r0, r3]
 80103de:	3304      	adds	r3, #4

080103e0 <LoopCopyDataInit>:
 80103e0:	18c4      	adds	r4, r0, r3
 80103e2:	428c      	cmp	r4, r1
 80103e4:	d3f9      	bcc.n	80103da <CopyDataInit>
 80103e6:	4a0a      	ldr	r2, [pc, #40]	; (8010410 <LoopForever+0x12>)
 80103e8:	4c0a      	ldr	r4, [pc, #40]	; (8010414 <LoopForever+0x16>)
 80103ea:	2300      	movs	r3, #0
 80103ec:	e001      	b.n	80103f2 <LoopFillZerobss>

080103ee <FillZerobss>:
 80103ee:	6013      	str	r3, [r2, #0]
 80103f0:	3204      	adds	r2, #4

080103f2 <LoopFillZerobss>:
 80103f2:	42a2      	cmp	r2, r4
 80103f4:	d3fb      	bcc.n	80103ee <FillZerobss>
 80103f6:	f000 f817 	bl	8010428 <__libc_init_array>
 80103fa:	f7f9 fb33 	bl	8009a64 <main>

080103fe <LoopForever>:
 80103fe:	e7fe      	b.n	80103fe <LoopForever>
 8010400:	200a0000 	.word	0x200a0000
 8010404:	20000000 	.word	0x20000000
 8010408:	200003cc 	.word	0x200003cc
 801040c:	08011160 	.word	0x08011160
 8010410:	200003cc 	.word	0x200003cc
 8010414:	2004ae80 	.word	0x2004ae80

08010418 <ADC1_IRQHandler>:
 8010418:	e7fe      	b.n	8010418 <ADC1_IRQHandler>
	...

0801041c <__errno>:
 801041c:	4b01      	ldr	r3, [pc, #4]	; (8010424 <__errno+0x8>)
 801041e:	6818      	ldr	r0, [r3, #0]
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop
 8010424:	20000368 	.word	0x20000368

08010428 <__libc_init_array>:
 8010428:	b570      	push	{r4, r5, r6, lr}
 801042a:	4d0d      	ldr	r5, [pc, #52]	; (8010460 <__libc_init_array+0x38>)
 801042c:	4c0d      	ldr	r4, [pc, #52]	; (8010464 <__libc_init_array+0x3c>)
 801042e:	1b64      	subs	r4, r4, r5
 8010430:	10a4      	asrs	r4, r4, #2
 8010432:	2600      	movs	r6, #0
 8010434:	42a6      	cmp	r6, r4
 8010436:	d109      	bne.n	801044c <__libc_init_array+0x24>
 8010438:	4d0b      	ldr	r5, [pc, #44]	; (8010468 <__libc_init_array+0x40>)
 801043a:	4c0c      	ldr	r4, [pc, #48]	; (801046c <__libc_init_array+0x44>)
 801043c:	f000 fcb4 	bl	8010da8 <_init>
 8010440:	1b64      	subs	r4, r4, r5
 8010442:	10a4      	asrs	r4, r4, #2
 8010444:	2600      	movs	r6, #0
 8010446:	42a6      	cmp	r6, r4
 8010448:	d105      	bne.n	8010456 <__libc_init_array+0x2e>
 801044a:	bd70      	pop	{r4, r5, r6, pc}
 801044c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010450:	4798      	blx	r3
 8010452:	3601      	adds	r6, #1
 8010454:	e7ee      	b.n	8010434 <__libc_init_array+0xc>
 8010456:	f855 3b04 	ldr.w	r3, [r5], #4
 801045a:	4798      	blx	r3
 801045c:	3601      	adds	r6, #1
 801045e:	e7f2      	b.n	8010446 <__libc_init_array+0x1e>
 8010460:	08011158 	.word	0x08011158
 8010464:	08011158 	.word	0x08011158
 8010468:	08011158 	.word	0x08011158
 801046c:	0801115c 	.word	0x0801115c

08010470 <memcpy>:
 8010470:	440a      	add	r2, r1
 8010472:	4291      	cmp	r1, r2
 8010474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010478:	d100      	bne.n	801047c <memcpy+0xc>
 801047a:	4770      	bx	lr
 801047c:	b510      	push	{r4, lr}
 801047e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010486:	4291      	cmp	r1, r2
 8010488:	d1f9      	bne.n	801047e <memcpy+0xe>
 801048a:	bd10      	pop	{r4, pc}

0801048c <memset>:
 801048c:	4402      	add	r2, r0
 801048e:	4603      	mov	r3, r0
 8010490:	4293      	cmp	r3, r2
 8010492:	d100      	bne.n	8010496 <memset+0xa>
 8010494:	4770      	bx	lr
 8010496:	f803 1b01 	strb.w	r1, [r3], #1
 801049a:	e7f9      	b.n	8010490 <memset+0x4>

0801049c <sniprintf>:
 801049c:	b40c      	push	{r2, r3}
 801049e:	b530      	push	{r4, r5, lr}
 80104a0:	4b17      	ldr	r3, [pc, #92]	; (8010500 <sniprintf+0x64>)
 80104a2:	1e0c      	subs	r4, r1, #0
 80104a4:	681d      	ldr	r5, [r3, #0]
 80104a6:	b09d      	sub	sp, #116	; 0x74
 80104a8:	da08      	bge.n	80104bc <sniprintf+0x20>
 80104aa:	238b      	movs	r3, #139	; 0x8b
 80104ac:	602b      	str	r3, [r5, #0]
 80104ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104b2:	b01d      	add	sp, #116	; 0x74
 80104b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104b8:	b002      	add	sp, #8
 80104ba:	4770      	bx	lr
 80104bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80104c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80104c4:	bf14      	ite	ne
 80104c6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80104ca:	4623      	moveq	r3, r4
 80104cc:	9304      	str	r3, [sp, #16]
 80104ce:	9307      	str	r3, [sp, #28]
 80104d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104d4:	9002      	str	r0, [sp, #8]
 80104d6:	9006      	str	r0, [sp, #24]
 80104d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80104dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80104de:	ab21      	add	r3, sp, #132	; 0x84
 80104e0:	a902      	add	r1, sp, #8
 80104e2:	4628      	mov	r0, r5
 80104e4:	9301      	str	r3, [sp, #4]
 80104e6:	f000 f911 	bl	801070c <_svfiprintf_r>
 80104ea:	1c43      	adds	r3, r0, #1
 80104ec:	bfbc      	itt	lt
 80104ee:	238b      	movlt	r3, #139	; 0x8b
 80104f0:	602b      	strlt	r3, [r5, #0]
 80104f2:	2c00      	cmp	r4, #0
 80104f4:	d0dd      	beq.n	80104b2 <sniprintf+0x16>
 80104f6:	9b02      	ldr	r3, [sp, #8]
 80104f8:	2200      	movs	r2, #0
 80104fa:	701a      	strb	r2, [r3, #0]
 80104fc:	e7d9      	b.n	80104b2 <sniprintf+0x16>
 80104fe:	bf00      	nop
 8010500:	20000368 	.word	0x20000368

08010504 <strcpy>:
 8010504:	4603      	mov	r3, r0
 8010506:	f811 2b01 	ldrb.w	r2, [r1], #1
 801050a:	f803 2b01 	strb.w	r2, [r3], #1
 801050e:	2a00      	cmp	r2, #0
 8010510:	d1f9      	bne.n	8010506 <strcpy+0x2>
 8010512:	4770      	bx	lr

08010514 <tolower>:
 8010514:	4b03      	ldr	r3, [pc, #12]	; (8010524 <tolower+0x10>)
 8010516:	5cc3      	ldrb	r3, [r0, r3]
 8010518:	f003 0303 	and.w	r3, r3, #3
 801051c:	2b01      	cmp	r3, #1
 801051e:	bf08      	it	eq
 8010520:	3020      	addeq	r0, #32
 8010522:	4770      	bx	lr
 8010524:	08010fb9 	.word	0x08010fb9

08010528 <__retarget_lock_acquire_recursive>:
 8010528:	4770      	bx	lr

0801052a <__retarget_lock_release_recursive>:
 801052a:	4770      	bx	lr

0801052c <sbrk_aligned>:
 801052c:	b570      	push	{r4, r5, r6, lr}
 801052e:	4e0e      	ldr	r6, [pc, #56]	; (8010568 <sbrk_aligned+0x3c>)
 8010530:	460c      	mov	r4, r1
 8010532:	6831      	ldr	r1, [r6, #0]
 8010534:	4605      	mov	r5, r0
 8010536:	b911      	cbnz	r1, 801053e <sbrk_aligned+0x12>
 8010538:	f000 fb7c 	bl	8010c34 <_sbrk_r>
 801053c:	6030      	str	r0, [r6, #0]
 801053e:	4621      	mov	r1, r4
 8010540:	4628      	mov	r0, r5
 8010542:	f000 fb77 	bl	8010c34 <_sbrk_r>
 8010546:	1c43      	adds	r3, r0, #1
 8010548:	d00a      	beq.n	8010560 <sbrk_aligned+0x34>
 801054a:	1cc4      	adds	r4, r0, #3
 801054c:	f024 0403 	bic.w	r4, r4, #3
 8010550:	42a0      	cmp	r0, r4
 8010552:	d007      	beq.n	8010564 <sbrk_aligned+0x38>
 8010554:	1a21      	subs	r1, r4, r0
 8010556:	4628      	mov	r0, r5
 8010558:	f000 fb6c 	bl	8010c34 <_sbrk_r>
 801055c:	3001      	adds	r0, #1
 801055e:	d101      	bne.n	8010564 <sbrk_aligned+0x38>
 8010560:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010564:	4620      	mov	r0, r4
 8010566:	bd70      	pop	{r4, r5, r6, pc}
 8010568:	2004ae78 	.word	0x2004ae78

0801056c <_malloc_r>:
 801056c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010570:	1ccd      	adds	r5, r1, #3
 8010572:	f025 0503 	bic.w	r5, r5, #3
 8010576:	3508      	adds	r5, #8
 8010578:	2d0c      	cmp	r5, #12
 801057a:	bf38      	it	cc
 801057c:	250c      	movcc	r5, #12
 801057e:	2d00      	cmp	r5, #0
 8010580:	4607      	mov	r7, r0
 8010582:	db01      	blt.n	8010588 <_malloc_r+0x1c>
 8010584:	42a9      	cmp	r1, r5
 8010586:	d905      	bls.n	8010594 <_malloc_r+0x28>
 8010588:	230c      	movs	r3, #12
 801058a:	603b      	str	r3, [r7, #0]
 801058c:	2600      	movs	r6, #0
 801058e:	4630      	mov	r0, r6
 8010590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010594:	4e2e      	ldr	r6, [pc, #184]	; (8010650 <_malloc_r+0xe4>)
 8010596:	f000 fb77 	bl	8010c88 <__malloc_lock>
 801059a:	6833      	ldr	r3, [r6, #0]
 801059c:	461c      	mov	r4, r3
 801059e:	bb34      	cbnz	r4, 80105ee <_malloc_r+0x82>
 80105a0:	4629      	mov	r1, r5
 80105a2:	4638      	mov	r0, r7
 80105a4:	f7ff ffc2 	bl	801052c <sbrk_aligned>
 80105a8:	1c43      	adds	r3, r0, #1
 80105aa:	4604      	mov	r4, r0
 80105ac:	d14d      	bne.n	801064a <_malloc_r+0xde>
 80105ae:	6834      	ldr	r4, [r6, #0]
 80105b0:	4626      	mov	r6, r4
 80105b2:	2e00      	cmp	r6, #0
 80105b4:	d140      	bne.n	8010638 <_malloc_r+0xcc>
 80105b6:	6823      	ldr	r3, [r4, #0]
 80105b8:	4631      	mov	r1, r6
 80105ba:	4638      	mov	r0, r7
 80105bc:	eb04 0803 	add.w	r8, r4, r3
 80105c0:	f000 fb38 	bl	8010c34 <_sbrk_r>
 80105c4:	4580      	cmp	r8, r0
 80105c6:	d13a      	bne.n	801063e <_malloc_r+0xd2>
 80105c8:	6821      	ldr	r1, [r4, #0]
 80105ca:	3503      	adds	r5, #3
 80105cc:	1a6d      	subs	r5, r5, r1
 80105ce:	f025 0503 	bic.w	r5, r5, #3
 80105d2:	3508      	adds	r5, #8
 80105d4:	2d0c      	cmp	r5, #12
 80105d6:	bf38      	it	cc
 80105d8:	250c      	movcc	r5, #12
 80105da:	4629      	mov	r1, r5
 80105dc:	4638      	mov	r0, r7
 80105de:	f7ff ffa5 	bl	801052c <sbrk_aligned>
 80105e2:	3001      	adds	r0, #1
 80105e4:	d02b      	beq.n	801063e <_malloc_r+0xd2>
 80105e6:	6823      	ldr	r3, [r4, #0]
 80105e8:	442b      	add	r3, r5
 80105ea:	6023      	str	r3, [r4, #0]
 80105ec:	e00e      	b.n	801060c <_malloc_r+0xa0>
 80105ee:	6822      	ldr	r2, [r4, #0]
 80105f0:	1b52      	subs	r2, r2, r5
 80105f2:	d41e      	bmi.n	8010632 <_malloc_r+0xc6>
 80105f4:	2a0b      	cmp	r2, #11
 80105f6:	d916      	bls.n	8010626 <_malloc_r+0xba>
 80105f8:	1961      	adds	r1, r4, r5
 80105fa:	42a3      	cmp	r3, r4
 80105fc:	6025      	str	r5, [r4, #0]
 80105fe:	bf18      	it	ne
 8010600:	6059      	strne	r1, [r3, #4]
 8010602:	6863      	ldr	r3, [r4, #4]
 8010604:	bf08      	it	eq
 8010606:	6031      	streq	r1, [r6, #0]
 8010608:	5162      	str	r2, [r4, r5]
 801060a:	604b      	str	r3, [r1, #4]
 801060c:	4638      	mov	r0, r7
 801060e:	f104 060b 	add.w	r6, r4, #11
 8010612:	f000 fb3f 	bl	8010c94 <__malloc_unlock>
 8010616:	f026 0607 	bic.w	r6, r6, #7
 801061a:	1d23      	adds	r3, r4, #4
 801061c:	1af2      	subs	r2, r6, r3
 801061e:	d0b6      	beq.n	801058e <_malloc_r+0x22>
 8010620:	1b9b      	subs	r3, r3, r6
 8010622:	50a3      	str	r3, [r4, r2]
 8010624:	e7b3      	b.n	801058e <_malloc_r+0x22>
 8010626:	6862      	ldr	r2, [r4, #4]
 8010628:	42a3      	cmp	r3, r4
 801062a:	bf0c      	ite	eq
 801062c:	6032      	streq	r2, [r6, #0]
 801062e:	605a      	strne	r2, [r3, #4]
 8010630:	e7ec      	b.n	801060c <_malloc_r+0xa0>
 8010632:	4623      	mov	r3, r4
 8010634:	6864      	ldr	r4, [r4, #4]
 8010636:	e7b2      	b.n	801059e <_malloc_r+0x32>
 8010638:	4634      	mov	r4, r6
 801063a:	6876      	ldr	r6, [r6, #4]
 801063c:	e7b9      	b.n	80105b2 <_malloc_r+0x46>
 801063e:	230c      	movs	r3, #12
 8010640:	603b      	str	r3, [r7, #0]
 8010642:	4638      	mov	r0, r7
 8010644:	f000 fb26 	bl	8010c94 <__malloc_unlock>
 8010648:	e7a1      	b.n	801058e <_malloc_r+0x22>
 801064a:	6025      	str	r5, [r4, #0]
 801064c:	e7de      	b.n	801060c <_malloc_r+0xa0>
 801064e:	bf00      	nop
 8010650:	2004ae74 	.word	0x2004ae74

08010654 <__ssputs_r>:
 8010654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010658:	688e      	ldr	r6, [r1, #8]
 801065a:	429e      	cmp	r6, r3
 801065c:	4682      	mov	sl, r0
 801065e:	460c      	mov	r4, r1
 8010660:	4690      	mov	r8, r2
 8010662:	461f      	mov	r7, r3
 8010664:	d838      	bhi.n	80106d8 <__ssputs_r+0x84>
 8010666:	898a      	ldrh	r2, [r1, #12]
 8010668:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801066c:	d032      	beq.n	80106d4 <__ssputs_r+0x80>
 801066e:	6825      	ldr	r5, [r4, #0]
 8010670:	6909      	ldr	r1, [r1, #16]
 8010672:	eba5 0901 	sub.w	r9, r5, r1
 8010676:	6965      	ldr	r5, [r4, #20]
 8010678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801067c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010680:	3301      	adds	r3, #1
 8010682:	444b      	add	r3, r9
 8010684:	106d      	asrs	r5, r5, #1
 8010686:	429d      	cmp	r5, r3
 8010688:	bf38      	it	cc
 801068a:	461d      	movcc	r5, r3
 801068c:	0553      	lsls	r3, r2, #21
 801068e:	d531      	bpl.n	80106f4 <__ssputs_r+0xa0>
 8010690:	4629      	mov	r1, r5
 8010692:	f7ff ff6b 	bl	801056c <_malloc_r>
 8010696:	4606      	mov	r6, r0
 8010698:	b950      	cbnz	r0, 80106b0 <__ssputs_r+0x5c>
 801069a:	230c      	movs	r3, #12
 801069c:	f8ca 3000 	str.w	r3, [sl]
 80106a0:	89a3      	ldrh	r3, [r4, #12]
 80106a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106a6:	81a3      	strh	r3, [r4, #12]
 80106a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106b0:	6921      	ldr	r1, [r4, #16]
 80106b2:	464a      	mov	r2, r9
 80106b4:	f7ff fedc 	bl	8010470 <memcpy>
 80106b8:	89a3      	ldrh	r3, [r4, #12]
 80106ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80106be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106c2:	81a3      	strh	r3, [r4, #12]
 80106c4:	6126      	str	r6, [r4, #16]
 80106c6:	6165      	str	r5, [r4, #20]
 80106c8:	444e      	add	r6, r9
 80106ca:	eba5 0509 	sub.w	r5, r5, r9
 80106ce:	6026      	str	r6, [r4, #0]
 80106d0:	60a5      	str	r5, [r4, #8]
 80106d2:	463e      	mov	r6, r7
 80106d4:	42be      	cmp	r6, r7
 80106d6:	d900      	bls.n	80106da <__ssputs_r+0x86>
 80106d8:	463e      	mov	r6, r7
 80106da:	6820      	ldr	r0, [r4, #0]
 80106dc:	4632      	mov	r2, r6
 80106de:	4641      	mov	r1, r8
 80106e0:	f000 fab8 	bl	8010c54 <memmove>
 80106e4:	68a3      	ldr	r3, [r4, #8]
 80106e6:	1b9b      	subs	r3, r3, r6
 80106e8:	60a3      	str	r3, [r4, #8]
 80106ea:	6823      	ldr	r3, [r4, #0]
 80106ec:	4433      	add	r3, r6
 80106ee:	6023      	str	r3, [r4, #0]
 80106f0:	2000      	movs	r0, #0
 80106f2:	e7db      	b.n	80106ac <__ssputs_r+0x58>
 80106f4:	462a      	mov	r2, r5
 80106f6:	f000 fb1f 	bl	8010d38 <_realloc_r>
 80106fa:	4606      	mov	r6, r0
 80106fc:	2800      	cmp	r0, #0
 80106fe:	d1e1      	bne.n	80106c4 <__ssputs_r+0x70>
 8010700:	6921      	ldr	r1, [r4, #16]
 8010702:	4650      	mov	r0, sl
 8010704:	f000 facc 	bl	8010ca0 <_free_r>
 8010708:	e7c7      	b.n	801069a <__ssputs_r+0x46>
	...

0801070c <_svfiprintf_r>:
 801070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010710:	4698      	mov	r8, r3
 8010712:	898b      	ldrh	r3, [r1, #12]
 8010714:	061b      	lsls	r3, r3, #24
 8010716:	b09d      	sub	sp, #116	; 0x74
 8010718:	4607      	mov	r7, r0
 801071a:	460d      	mov	r5, r1
 801071c:	4614      	mov	r4, r2
 801071e:	d50e      	bpl.n	801073e <_svfiprintf_r+0x32>
 8010720:	690b      	ldr	r3, [r1, #16]
 8010722:	b963      	cbnz	r3, 801073e <_svfiprintf_r+0x32>
 8010724:	2140      	movs	r1, #64	; 0x40
 8010726:	f7ff ff21 	bl	801056c <_malloc_r>
 801072a:	6028      	str	r0, [r5, #0]
 801072c:	6128      	str	r0, [r5, #16]
 801072e:	b920      	cbnz	r0, 801073a <_svfiprintf_r+0x2e>
 8010730:	230c      	movs	r3, #12
 8010732:	603b      	str	r3, [r7, #0]
 8010734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010738:	e0d1      	b.n	80108de <_svfiprintf_r+0x1d2>
 801073a:	2340      	movs	r3, #64	; 0x40
 801073c:	616b      	str	r3, [r5, #20]
 801073e:	2300      	movs	r3, #0
 8010740:	9309      	str	r3, [sp, #36]	; 0x24
 8010742:	2320      	movs	r3, #32
 8010744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010748:	f8cd 800c 	str.w	r8, [sp, #12]
 801074c:	2330      	movs	r3, #48	; 0x30
 801074e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80108f8 <_svfiprintf_r+0x1ec>
 8010752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010756:	f04f 0901 	mov.w	r9, #1
 801075a:	4623      	mov	r3, r4
 801075c:	469a      	mov	sl, r3
 801075e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010762:	b10a      	cbz	r2, 8010768 <_svfiprintf_r+0x5c>
 8010764:	2a25      	cmp	r2, #37	; 0x25
 8010766:	d1f9      	bne.n	801075c <_svfiprintf_r+0x50>
 8010768:	ebba 0b04 	subs.w	fp, sl, r4
 801076c:	d00b      	beq.n	8010786 <_svfiprintf_r+0x7a>
 801076e:	465b      	mov	r3, fp
 8010770:	4622      	mov	r2, r4
 8010772:	4629      	mov	r1, r5
 8010774:	4638      	mov	r0, r7
 8010776:	f7ff ff6d 	bl	8010654 <__ssputs_r>
 801077a:	3001      	adds	r0, #1
 801077c:	f000 80aa 	beq.w	80108d4 <_svfiprintf_r+0x1c8>
 8010780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010782:	445a      	add	r2, fp
 8010784:	9209      	str	r2, [sp, #36]	; 0x24
 8010786:	f89a 3000 	ldrb.w	r3, [sl]
 801078a:	2b00      	cmp	r3, #0
 801078c:	f000 80a2 	beq.w	80108d4 <_svfiprintf_r+0x1c8>
 8010790:	2300      	movs	r3, #0
 8010792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801079a:	f10a 0a01 	add.w	sl, sl, #1
 801079e:	9304      	str	r3, [sp, #16]
 80107a0:	9307      	str	r3, [sp, #28]
 80107a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107a6:	931a      	str	r3, [sp, #104]	; 0x68
 80107a8:	4654      	mov	r4, sl
 80107aa:	2205      	movs	r2, #5
 80107ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107b0:	4851      	ldr	r0, [pc, #324]	; (80108f8 <_svfiprintf_r+0x1ec>)
 80107b2:	f7ef fd3d 	bl	8000230 <memchr>
 80107b6:	9a04      	ldr	r2, [sp, #16]
 80107b8:	b9d8      	cbnz	r0, 80107f2 <_svfiprintf_r+0xe6>
 80107ba:	06d0      	lsls	r0, r2, #27
 80107bc:	bf44      	itt	mi
 80107be:	2320      	movmi	r3, #32
 80107c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107c4:	0711      	lsls	r1, r2, #28
 80107c6:	bf44      	itt	mi
 80107c8:	232b      	movmi	r3, #43	; 0x2b
 80107ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107ce:	f89a 3000 	ldrb.w	r3, [sl]
 80107d2:	2b2a      	cmp	r3, #42	; 0x2a
 80107d4:	d015      	beq.n	8010802 <_svfiprintf_r+0xf6>
 80107d6:	9a07      	ldr	r2, [sp, #28]
 80107d8:	4654      	mov	r4, sl
 80107da:	2000      	movs	r0, #0
 80107dc:	f04f 0c0a 	mov.w	ip, #10
 80107e0:	4621      	mov	r1, r4
 80107e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107e6:	3b30      	subs	r3, #48	; 0x30
 80107e8:	2b09      	cmp	r3, #9
 80107ea:	d94e      	bls.n	801088a <_svfiprintf_r+0x17e>
 80107ec:	b1b0      	cbz	r0, 801081c <_svfiprintf_r+0x110>
 80107ee:	9207      	str	r2, [sp, #28]
 80107f0:	e014      	b.n	801081c <_svfiprintf_r+0x110>
 80107f2:	eba0 0308 	sub.w	r3, r0, r8
 80107f6:	fa09 f303 	lsl.w	r3, r9, r3
 80107fa:	4313      	orrs	r3, r2
 80107fc:	9304      	str	r3, [sp, #16]
 80107fe:	46a2      	mov	sl, r4
 8010800:	e7d2      	b.n	80107a8 <_svfiprintf_r+0x9c>
 8010802:	9b03      	ldr	r3, [sp, #12]
 8010804:	1d19      	adds	r1, r3, #4
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	9103      	str	r1, [sp, #12]
 801080a:	2b00      	cmp	r3, #0
 801080c:	bfbb      	ittet	lt
 801080e:	425b      	neglt	r3, r3
 8010810:	f042 0202 	orrlt.w	r2, r2, #2
 8010814:	9307      	strge	r3, [sp, #28]
 8010816:	9307      	strlt	r3, [sp, #28]
 8010818:	bfb8      	it	lt
 801081a:	9204      	strlt	r2, [sp, #16]
 801081c:	7823      	ldrb	r3, [r4, #0]
 801081e:	2b2e      	cmp	r3, #46	; 0x2e
 8010820:	d10c      	bne.n	801083c <_svfiprintf_r+0x130>
 8010822:	7863      	ldrb	r3, [r4, #1]
 8010824:	2b2a      	cmp	r3, #42	; 0x2a
 8010826:	d135      	bne.n	8010894 <_svfiprintf_r+0x188>
 8010828:	9b03      	ldr	r3, [sp, #12]
 801082a:	1d1a      	adds	r2, r3, #4
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	9203      	str	r2, [sp, #12]
 8010830:	2b00      	cmp	r3, #0
 8010832:	bfb8      	it	lt
 8010834:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010838:	3402      	adds	r4, #2
 801083a:	9305      	str	r3, [sp, #20]
 801083c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010908 <_svfiprintf_r+0x1fc>
 8010840:	7821      	ldrb	r1, [r4, #0]
 8010842:	2203      	movs	r2, #3
 8010844:	4650      	mov	r0, sl
 8010846:	f7ef fcf3 	bl	8000230 <memchr>
 801084a:	b140      	cbz	r0, 801085e <_svfiprintf_r+0x152>
 801084c:	2340      	movs	r3, #64	; 0x40
 801084e:	eba0 000a 	sub.w	r0, r0, sl
 8010852:	fa03 f000 	lsl.w	r0, r3, r0
 8010856:	9b04      	ldr	r3, [sp, #16]
 8010858:	4303      	orrs	r3, r0
 801085a:	3401      	adds	r4, #1
 801085c:	9304      	str	r3, [sp, #16]
 801085e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010862:	4826      	ldr	r0, [pc, #152]	; (80108fc <_svfiprintf_r+0x1f0>)
 8010864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010868:	2206      	movs	r2, #6
 801086a:	f7ef fce1 	bl	8000230 <memchr>
 801086e:	2800      	cmp	r0, #0
 8010870:	d038      	beq.n	80108e4 <_svfiprintf_r+0x1d8>
 8010872:	4b23      	ldr	r3, [pc, #140]	; (8010900 <_svfiprintf_r+0x1f4>)
 8010874:	bb1b      	cbnz	r3, 80108be <_svfiprintf_r+0x1b2>
 8010876:	9b03      	ldr	r3, [sp, #12]
 8010878:	3307      	adds	r3, #7
 801087a:	f023 0307 	bic.w	r3, r3, #7
 801087e:	3308      	adds	r3, #8
 8010880:	9303      	str	r3, [sp, #12]
 8010882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010884:	4433      	add	r3, r6
 8010886:	9309      	str	r3, [sp, #36]	; 0x24
 8010888:	e767      	b.n	801075a <_svfiprintf_r+0x4e>
 801088a:	fb0c 3202 	mla	r2, ip, r2, r3
 801088e:	460c      	mov	r4, r1
 8010890:	2001      	movs	r0, #1
 8010892:	e7a5      	b.n	80107e0 <_svfiprintf_r+0xd4>
 8010894:	2300      	movs	r3, #0
 8010896:	3401      	adds	r4, #1
 8010898:	9305      	str	r3, [sp, #20]
 801089a:	4619      	mov	r1, r3
 801089c:	f04f 0c0a 	mov.w	ip, #10
 80108a0:	4620      	mov	r0, r4
 80108a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108a6:	3a30      	subs	r2, #48	; 0x30
 80108a8:	2a09      	cmp	r2, #9
 80108aa:	d903      	bls.n	80108b4 <_svfiprintf_r+0x1a8>
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d0c5      	beq.n	801083c <_svfiprintf_r+0x130>
 80108b0:	9105      	str	r1, [sp, #20]
 80108b2:	e7c3      	b.n	801083c <_svfiprintf_r+0x130>
 80108b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80108b8:	4604      	mov	r4, r0
 80108ba:	2301      	movs	r3, #1
 80108bc:	e7f0      	b.n	80108a0 <_svfiprintf_r+0x194>
 80108be:	ab03      	add	r3, sp, #12
 80108c0:	9300      	str	r3, [sp, #0]
 80108c2:	462a      	mov	r2, r5
 80108c4:	4b0f      	ldr	r3, [pc, #60]	; (8010904 <_svfiprintf_r+0x1f8>)
 80108c6:	a904      	add	r1, sp, #16
 80108c8:	4638      	mov	r0, r7
 80108ca:	f3af 8000 	nop.w
 80108ce:	1c42      	adds	r2, r0, #1
 80108d0:	4606      	mov	r6, r0
 80108d2:	d1d6      	bne.n	8010882 <_svfiprintf_r+0x176>
 80108d4:	89ab      	ldrh	r3, [r5, #12]
 80108d6:	065b      	lsls	r3, r3, #25
 80108d8:	f53f af2c 	bmi.w	8010734 <_svfiprintf_r+0x28>
 80108dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108de:	b01d      	add	sp, #116	; 0x74
 80108e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e4:	ab03      	add	r3, sp, #12
 80108e6:	9300      	str	r3, [sp, #0]
 80108e8:	462a      	mov	r2, r5
 80108ea:	4b06      	ldr	r3, [pc, #24]	; (8010904 <_svfiprintf_r+0x1f8>)
 80108ec:	a904      	add	r1, sp, #16
 80108ee:	4638      	mov	r0, r7
 80108f0:	f000 f87a 	bl	80109e8 <_printf_i>
 80108f4:	e7eb      	b.n	80108ce <_svfiprintf_r+0x1c2>
 80108f6:	bf00      	nop
 80108f8:	0801111c 	.word	0x0801111c
 80108fc:	08011126 	.word	0x08011126
 8010900:	00000000 	.word	0x00000000
 8010904:	08010655 	.word	0x08010655
 8010908:	08011122 	.word	0x08011122

0801090c <_printf_common>:
 801090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010910:	4616      	mov	r6, r2
 8010912:	4699      	mov	r9, r3
 8010914:	688a      	ldr	r2, [r1, #8]
 8010916:	690b      	ldr	r3, [r1, #16]
 8010918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801091c:	4293      	cmp	r3, r2
 801091e:	bfb8      	it	lt
 8010920:	4613      	movlt	r3, r2
 8010922:	6033      	str	r3, [r6, #0]
 8010924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010928:	4607      	mov	r7, r0
 801092a:	460c      	mov	r4, r1
 801092c:	b10a      	cbz	r2, 8010932 <_printf_common+0x26>
 801092e:	3301      	adds	r3, #1
 8010930:	6033      	str	r3, [r6, #0]
 8010932:	6823      	ldr	r3, [r4, #0]
 8010934:	0699      	lsls	r1, r3, #26
 8010936:	bf42      	ittt	mi
 8010938:	6833      	ldrmi	r3, [r6, #0]
 801093a:	3302      	addmi	r3, #2
 801093c:	6033      	strmi	r3, [r6, #0]
 801093e:	6825      	ldr	r5, [r4, #0]
 8010940:	f015 0506 	ands.w	r5, r5, #6
 8010944:	d106      	bne.n	8010954 <_printf_common+0x48>
 8010946:	f104 0a19 	add.w	sl, r4, #25
 801094a:	68e3      	ldr	r3, [r4, #12]
 801094c:	6832      	ldr	r2, [r6, #0]
 801094e:	1a9b      	subs	r3, r3, r2
 8010950:	42ab      	cmp	r3, r5
 8010952:	dc26      	bgt.n	80109a2 <_printf_common+0x96>
 8010954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010958:	1e13      	subs	r3, r2, #0
 801095a:	6822      	ldr	r2, [r4, #0]
 801095c:	bf18      	it	ne
 801095e:	2301      	movne	r3, #1
 8010960:	0692      	lsls	r2, r2, #26
 8010962:	d42b      	bmi.n	80109bc <_printf_common+0xb0>
 8010964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010968:	4649      	mov	r1, r9
 801096a:	4638      	mov	r0, r7
 801096c:	47c0      	blx	r8
 801096e:	3001      	adds	r0, #1
 8010970:	d01e      	beq.n	80109b0 <_printf_common+0xa4>
 8010972:	6823      	ldr	r3, [r4, #0]
 8010974:	68e5      	ldr	r5, [r4, #12]
 8010976:	6832      	ldr	r2, [r6, #0]
 8010978:	f003 0306 	and.w	r3, r3, #6
 801097c:	2b04      	cmp	r3, #4
 801097e:	bf08      	it	eq
 8010980:	1aad      	subeq	r5, r5, r2
 8010982:	68a3      	ldr	r3, [r4, #8]
 8010984:	6922      	ldr	r2, [r4, #16]
 8010986:	bf0c      	ite	eq
 8010988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801098c:	2500      	movne	r5, #0
 801098e:	4293      	cmp	r3, r2
 8010990:	bfc4      	itt	gt
 8010992:	1a9b      	subgt	r3, r3, r2
 8010994:	18ed      	addgt	r5, r5, r3
 8010996:	2600      	movs	r6, #0
 8010998:	341a      	adds	r4, #26
 801099a:	42b5      	cmp	r5, r6
 801099c:	d11a      	bne.n	80109d4 <_printf_common+0xc8>
 801099e:	2000      	movs	r0, #0
 80109a0:	e008      	b.n	80109b4 <_printf_common+0xa8>
 80109a2:	2301      	movs	r3, #1
 80109a4:	4652      	mov	r2, sl
 80109a6:	4649      	mov	r1, r9
 80109a8:	4638      	mov	r0, r7
 80109aa:	47c0      	blx	r8
 80109ac:	3001      	adds	r0, #1
 80109ae:	d103      	bne.n	80109b8 <_printf_common+0xac>
 80109b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109b8:	3501      	adds	r5, #1
 80109ba:	e7c6      	b.n	801094a <_printf_common+0x3e>
 80109bc:	18e1      	adds	r1, r4, r3
 80109be:	1c5a      	adds	r2, r3, #1
 80109c0:	2030      	movs	r0, #48	; 0x30
 80109c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109c6:	4422      	add	r2, r4
 80109c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109d0:	3302      	adds	r3, #2
 80109d2:	e7c7      	b.n	8010964 <_printf_common+0x58>
 80109d4:	2301      	movs	r3, #1
 80109d6:	4622      	mov	r2, r4
 80109d8:	4649      	mov	r1, r9
 80109da:	4638      	mov	r0, r7
 80109dc:	47c0      	blx	r8
 80109de:	3001      	adds	r0, #1
 80109e0:	d0e6      	beq.n	80109b0 <_printf_common+0xa4>
 80109e2:	3601      	adds	r6, #1
 80109e4:	e7d9      	b.n	801099a <_printf_common+0x8e>
	...

080109e8 <_printf_i>:
 80109e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109ec:	7e0f      	ldrb	r7, [r1, #24]
 80109ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80109f0:	2f78      	cmp	r7, #120	; 0x78
 80109f2:	4691      	mov	r9, r2
 80109f4:	4680      	mov	r8, r0
 80109f6:	460c      	mov	r4, r1
 80109f8:	469a      	mov	sl, r3
 80109fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80109fe:	d807      	bhi.n	8010a10 <_printf_i+0x28>
 8010a00:	2f62      	cmp	r7, #98	; 0x62
 8010a02:	d80a      	bhi.n	8010a1a <_printf_i+0x32>
 8010a04:	2f00      	cmp	r7, #0
 8010a06:	f000 80d8 	beq.w	8010bba <_printf_i+0x1d2>
 8010a0a:	2f58      	cmp	r7, #88	; 0x58
 8010a0c:	f000 80a3 	beq.w	8010b56 <_printf_i+0x16e>
 8010a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a18:	e03a      	b.n	8010a90 <_printf_i+0xa8>
 8010a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a1e:	2b15      	cmp	r3, #21
 8010a20:	d8f6      	bhi.n	8010a10 <_printf_i+0x28>
 8010a22:	a101      	add	r1, pc, #4	; (adr r1, 8010a28 <_printf_i+0x40>)
 8010a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a28:	08010a81 	.word	0x08010a81
 8010a2c:	08010a95 	.word	0x08010a95
 8010a30:	08010a11 	.word	0x08010a11
 8010a34:	08010a11 	.word	0x08010a11
 8010a38:	08010a11 	.word	0x08010a11
 8010a3c:	08010a11 	.word	0x08010a11
 8010a40:	08010a95 	.word	0x08010a95
 8010a44:	08010a11 	.word	0x08010a11
 8010a48:	08010a11 	.word	0x08010a11
 8010a4c:	08010a11 	.word	0x08010a11
 8010a50:	08010a11 	.word	0x08010a11
 8010a54:	08010ba1 	.word	0x08010ba1
 8010a58:	08010ac5 	.word	0x08010ac5
 8010a5c:	08010b83 	.word	0x08010b83
 8010a60:	08010a11 	.word	0x08010a11
 8010a64:	08010a11 	.word	0x08010a11
 8010a68:	08010bc3 	.word	0x08010bc3
 8010a6c:	08010a11 	.word	0x08010a11
 8010a70:	08010ac5 	.word	0x08010ac5
 8010a74:	08010a11 	.word	0x08010a11
 8010a78:	08010a11 	.word	0x08010a11
 8010a7c:	08010b8b 	.word	0x08010b8b
 8010a80:	682b      	ldr	r3, [r5, #0]
 8010a82:	1d1a      	adds	r2, r3, #4
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	602a      	str	r2, [r5, #0]
 8010a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a90:	2301      	movs	r3, #1
 8010a92:	e0a3      	b.n	8010bdc <_printf_i+0x1f4>
 8010a94:	6820      	ldr	r0, [r4, #0]
 8010a96:	6829      	ldr	r1, [r5, #0]
 8010a98:	0606      	lsls	r6, r0, #24
 8010a9a:	f101 0304 	add.w	r3, r1, #4
 8010a9e:	d50a      	bpl.n	8010ab6 <_printf_i+0xce>
 8010aa0:	680e      	ldr	r6, [r1, #0]
 8010aa2:	602b      	str	r3, [r5, #0]
 8010aa4:	2e00      	cmp	r6, #0
 8010aa6:	da03      	bge.n	8010ab0 <_printf_i+0xc8>
 8010aa8:	232d      	movs	r3, #45	; 0x2d
 8010aaa:	4276      	negs	r6, r6
 8010aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ab0:	485e      	ldr	r0, [pc, #376]	; (8010c2c <_printf_i+0x244>)
 8010ab2:	230a      	movs	r3, #10
 8010ab4:	e019      	b.n	8010aea <_printf_i+0x102>
 8010ab6:	680e      	ldr	r6, [r1, #0]
 8010ab8:	602b      	str	r3, [r5, #0]
 8010aba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010abe:	bf18      	it	ne
 8010ac0:	b236      	sxthne	r6, r6
 8010ac2:	e7ef      	b.n	8010aa4 <_printf_i+0xbc>
 8010ac4:	682b      	ldr	r3, [r5, #0]
 8010ac6:	6820      	ldr	r0, [r4, #0]
 8010ac8:	1d19      	adds	r1, r3, #4
 8010aca:	6029      	str	r1, [r5, #0]
 8010acc:	0601      	lsls	r1, r0, #24
 8010ace:	d501      	bpl.n	8010ad4 <_printf_i+0xec>
 8010ad0:	681e      	ldr	r6, [r3, #0]
 8010ad2:	e002      	b.n	8010ada <_printf_i+0xf2>
 8010ad4:	0646      	lsls	r6, r0, #25
 8010ad6:	d5fb      	bpl.n	8010ad0 <_printf_i+0xe8>
 8010ad8:	881e      	ldrh	r6, [r3, #0]
 8010ada:	4854      	ldr	r0, [pc, #336]	; (8010c2c <_printf_i+0x244>)
 8010adc:	2f6f      	cmp	r7, #111	; 0x6f
 8010ade:	bf0c      	ite	eq
 8010ae0:	2308      	moveq	r3, #8
 8010ae2:	230a      	movne	r3, #10
 8010ae4:	2100      	movs	r1, #0
 8010ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010aea:	6865      	ldr	r5, [r4, #4]
 8010aec:	60a5      	str	r5, [r4, #8]
 8010aee:	2d00      	cmp	r5, #0
 8010af0:	bfa2      	ittt	ge
 8010af2:	6821      	ldrge	r1, [r4, #0]
 8010af4:	f021 0104 	bicge.w	r1, r1, #4
 8010af8:	6021      	strge	r1, [r4, #0]
 8010afa:	b90e      	cbnz	r6, 8010b00 <_printf_i+0x118>
 8010afc:	2d00      	cmp	r5, #0
 8010afe:	d04d      	beq.n	8010b9c <_printf_i+0x1b4>
 8010b00:	4615      	mov	r5, r2
 8010b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8010b06:	fb03 6711 	mls	r7, r3, r1, r6
 8010b0a:	5dc7      	ldrb	r7, [r0, r7]
 8010b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010b10:	4637      	mov	r7, r6
 8010b12:	42bb      	cmp	r3, r7
 8010b14:	460e      	mov	r6, r1
 8010b16:	d9f4      	bls.n	8010b02 <_printf_i+0x11a>
 8010b18:	2b08      	cmp	r3, #8
 8010b1a:	d10b      	bne.n	8010b34 <_printf_i+0x14c>
 8010b1c:	6823      	ldr	r3, [r4, #0]
 8010b1e:	07de      	lsls	r6, r3, #31
 8010b20:	d508      	bpl.n	8010b34 <_printf_i+0x14c>
 8010b22:	6923      	ldr	r3, [r4, #16]
 8010b24:	6861      	ldr	r1, [r4, #4]
 8010b26:	4299      	cmp	r1, r3
 8010b28:	bfde      	ittt	le
 8010b2a:	2330      	movle	r3, #48	; 0x30
 8010b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010b30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010b34:	1b52      	subs	r2, r2, r5
 8010b36:	6122      	str	r2, [r4, #16]
 8010b38:	f8cd a000 	str.w	sl, [sp]
 8010b3c:	464b      	mov	r3, r9
 8010b3e:	aa03      	add	r2, sp, #12
 8010b40:	4621      	mov	r1, r4
 8010b42:	4640      	mov	r0, r8
 8010b44:	f7ff fee2 	bl	801090c <_printf_common>
 8010b48:	3001      	adds	r0, #1
 8010b4a:	d14c      	bne.n	8010be6 <_printf_i+0x1fe>
 8010b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b50:	b004      	add	sp, #16
 8010b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b56:	4835      	ldr	r0, [pc, #212]	; (8010c2c <_printf_i+0x244>)
 8010b58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010b5c:	6829      	ldr	r1, [r5, #0]
 8010b5e:	6823      	ldr	r3, [r4, #0]
 8010b60:	f851 6b04 	ldr.w	r6, [r1], #4
 8010b64:	6029      	str	r1, [r5, #0]
 8010b66:	061d      	lsls	r5, r3, #24
 8010b68:	d514      	bpl.n	8010b94 <_printf_i+0x1ac>
 8010b6a:	07df      	lsls	r7, r3, #31
 8010b6c:	bf44      	itt	mi
 8010b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8010b72:	6023      	strmi	r3, [r4, #0]
 8010b74:	b91e      	cbnz	r6, 8010b7e <_printf_i+0x196>
 8010b76:	6823      	ldr	r3, [r4, #0]
 8010b78:	f023 0320 	bic.w	r3, r3, #32
 8010b7c:	6023      	str	r3, [r4, #0]
 8010b7e:	2310      	movs	r3, #16
 8010b80:	e7b0      	b.n	8010ae4 <_printf_i+0xfc>
 8010b82:	6823      	ldr	r3, [r4, #0]
 8010b84:	f043 0320 	orr.w	r3, r3, #32
 8010b88:	6023      	str	r3, [r4, #0]
 8010b8a:	2378      	movs	r3, #120	; 0x78
 8010b8c:	4828      	ldr	r0, [pc, #160]	; (8010c30 <_printf_i+0x248>)
 8010b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b92:	e7e3      	b.n	8010b5c <_printf_i+0x174>
 8010b94:	0659      	lsls	r1, r3, #25
 8010b96:	bf48      	it	mi
 8010b98:	b2b6      	uxthmi	r6, r6
 8010b9a:	e7e6      	b.n	8010b6a <_printf_i+0x182>
 8010b9c:	4615      	mov	r5, r2
 8010b9e:	e7bb      	b.n	8010b18 <_printf_i+0x130>
 8010ba0:	682b      	ldr	r3, [r5, #0]
 8010ba2:	6826      	ldr	r6, [r4, #0]
 8010ba4:	6961      	ldr	r1, [r4, #20]
 8010ba6:	1d18      	adds	r0, r3, #4
 8010ba8:	6028      	str	r0, [r5, #0]
 8010baa:	0635      	lsls	r5, r6, #24
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	d501      	bpl.n	8010bb4 <_printf_i+0x1cc>
 8010bb0:	6019      	str	r1, [r3, #0]
 8010bb2:	e002      	b.n	8010bba <_printf_i+0x1d2>
 8010bb4:	0670      	lsls	r0, r6, #25
 8010bb6:	d5fb      	bpl.n	8010bb0 <_printf_i+0x1c8>
 8010bb8:	8019      	strh	r1, [r3, #0]
 8010bba:	2300      	movs	r3, #0
 8010bbc:	6123      	str	r3, [r4, #16]
 8010bbe:	4615      	mov	r5, r2
 8010bc0:	e7ba      	b.n	8010b38 <_printf_i+0x150>
 8010bc2:	682b      	ldr	r3, [r5, #0]
 8010bc4:	1d1a      	adds	r2, r3, #4
 8010bc6:	602a      	str	r2, [r5, #0]
 8010bc8:	681d      	ldr	r5, [r3, #0]
 8010bca:	6862      	ldr	r2, [r4, #4]
 8010bcc:	2100      	movs	r1, #0
 8010bce:	4628      	mov	r0, r5
 8010bd0:	f7ef fb2e 	bl	8000230 <memchr>
 8010bd4:	b108      	cbz	r0, 8010bda <_printf_i+0x1f2>
 8010bd6:	1b40      	subs	r0, r0, r5
 8010bd8:	6060      	str	r0, [r4, #4]
 8010bda:	6863      	ldr	r3, [r4, #4]
 8010bdc:	6123      	str	r3, [r4, #16]
 8010bde:	2300      	movs	r3, #0
 8010be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010be4:	e7a8      	b.n	8010b38 <_printf_i+0x150>
 8010be6:	6923      	ldr	r3, [r4, #16]
 8010be8:	462a      	mov	r2, r5
 8010bea:	4649      	mov	r1, r9
 8010bec:	4640      	mov	r0, r8
 8010bee:	47d0      	blx	sl
 8010bf0:	3001      	adds	r0, #1
 8010bf2:	d0ab      	beq.n	8010b4c <_printf_i+0x164>
 8010bf4:	6823      	ldr	r3, [r4, #0]
 8010bf6:	079b      	lsls	r3, r3, #30
 8010bf8:	d413      	bmi.n	8010c22 <_printf_i+0x23a>
 8010bfa:	68e0      	ldr	r0, [r4, #12]
 8010bfc:	9b03      	ldr	r3, [sp, #12]
 8010bfe:	4298      	cmp	r0, r3
 8010c00:	bfb8      	it	lt
 8010c02:	4618      	movlt	r0, r3
 8010c04:	e7a4      	b.n	8010b50 <_printf_i+0x168>
 8010c06:	2301      	movs	r3, #1
 8010c08:	4632      	mov	r2, r6
 8010c0a:	4649      	mov	r1, r9
 8010c0c:	4640      	mov	r0, r8
 8010c0e:	47d0      	blx	sl
 8010c10:	3001      	adds	r0, #1
 8010c12:	d09b      	beq.n	8010b4c <_printf_i+0x164>
 8010c14:	3501      	adds	r5, #1
 8010c16:	68e3      	ldr	r3, [r4, #12]
 8010c18:	9903      	ldr	r1, [sp, #12]
 8010c1a:	1a5b      	subs	r3, r3, r1
 8010c1c:	42ab      	cmp	r3, r5
 8010c1e:	dcf2      	bgt.n	8010c06 <_printf_i+0x21e>
 8010c20:	e7eb      	b.n	8010bfa <_printf_i+0x212>
 8010c22:	2500      	movs	r5, #0
 8010c24:	f104 0619 	add.w	r6, r4, #25
 8010c28:	e7f5      	b.n	8010c16 <_printf_i+0x22e>
 8010c2a:	bf00      	nop
 8010c2c:	0801112d 	.word	0x0801112d
 8010c30:	0801113e 	.word	0x0801113e

08010c34 <_sbrk_r>:
 8010c34:	b538      	push	{r3, r4, r5, lr}
 8010c36:	4d06      	ldr	r5, [pc, #24]	; (8010c50 <_sbrk_r+0x1c>)
 8010c38:	2300      	movs	r3, #0
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	4608      	mov	r0, r1
 8010c3e:	602b      	str	r3, [r5, #0]
 8010c40:	f7fa fd70 	bl	800b724 <_sbrk>
 8010c44:	1c43      	adds	r3, r0, #1
 8010c46:	d102      	bne.n	8010c4e <_sbrk_r+0x1a>
 8010c48:	682b      	ldr	r3, [r5, #0]
 8010c4a:	b103      	cbz	r3, 8010c4e <_sbrk_r+0x1a>
 8010c4c:	6023      	str	r3, [r4, #0]
 8010c4e:	bd38      	pop	{r3, r4, r5, pc}
 8010c50:	2004ae7c 	.word	0x2004ae7c

08010c54 <memmove>:
 8010c54:	4288      	cmp	r0, r1
 8010c56:	b510      	push	{r4, lr}
 8010c58:	eb01 0402 	add.w	r4, r1, r2
 8010c5c:	d902      	bls.n	8010c64 <memmove+0x10>
 8010c5e:	4284      	cmp	r4, r0
 8010c60:	4623      	mov	r3, r4
 8010c62:	d807      	bhi.n	8010c74 <memmove+0x20>
 8010c64:	1e43      	subs	r3, r0, #1
 8010c66:	42a1      	cmp	r1, r4
 8010c68:	d008      	beq.n	8010c7c <memmove+0x28>
 8010c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c72:	e7f8      	b.n	8010c66 <memmove+0x12>
 8010c74:	4402      	add	r2, r0
 8010c76:	4601      	mov	r1, r0
 8010c78:	428a      	cmp	r2, r1
 8010c7a:	d100      	bne.n	8010c7e <memmove+0x2a>
 8010c7c:	bd10      	pop	{r4, pc}
 8010c7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c86:	e7f7      	b.n	8010c78 <memmove+0x24>

08010c88 <__malloc_lock>:
 8010c88:	4801      	ldr	r0, [pc, #4]	; (8010c90 <__malloc_lock+0x8>)
 8010c8a:	f7ff bc4d 	b.w	8010528 <__retarget_lock_acquire_recursive>
 8010c8e:	bf00      	nop
 8010c90:	2004ae70 	.word	0x2004ae70

08010c94 <__malloc_unlock>:
 8010c94:	4801      	ldr	r0, [pc, #4]	; (8010c9c <__malloc_unlock+0x8>)
 8010c96:	f7ff bc48 	b.w	801052a <__retarget_lock_release_recursive>
 8010c9a:	bf00      	nop
 8010c9c:	2004ae70 	.word	0x2004ae70

08010ca0 <_free_r>:
 8010ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ca2:	2900      	cmp	r1, #0
 8010ca4:	d044      	beq.n	8010d30 <_free_r+0x90>
 8010ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010caa:	9001      	str	r0, [sp, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	f1a1 0404 	sub.w	r4, r1, #4
 8010cb2:	bfb8      	it	lt
 8010cb4:	18e4      	addlt	r4, r4, r3
 8010cb6:	f7ff ffe7 	bl	8010c88 <__malloc_lock>
 8010cba:	4a1e      	ldr	r2, [pc, #120]	; (8010d34 <_free_r+0x94>)
 8010cbc:	9801      	ldr	r0, [sp, #4]
 8010cbe:	6813      	ldr	r3, [r2, #0]
 8010cc0:	b933      	cbnz	r3, 8010cd0 <_free_r+0x30>
 8010cc2:	6063      	str	r3, [r4, #4]
 8010cc4:	6014      	str	r4, [r2, #0]
 8010cc6:	b003      	add	sp, #12
 8010cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ccc:	f7ff bfe2 	b.w	8010c94 <__malloc_unlock>
 8010cd0:	42a3      	cmp	r3, r4
 8010cd2:	d908      	bls.n	8010ce6 <_free_r+0x46>
 8010cd4:	6825      	ldr	r5, [r4, #0]
 8010cd6:	1961      	adds	r1, r4, r5
 8010cd8:	428b      	cmp	r3, r1
 8010cda:	bf01      	itttt	eq
 8010cdc:	6819      	ldreq	r1, [r3, #0]
 8010cde:	685b      	ldreq	r3, [r3, #4]
 8010ce0:	1949      	addeq	r1, r1, r5
 8010ce2:	6021      	streq	r1, [r4, #0]
 8010ce4:	e7ed      	b.n	8010cc2 <_free_r+0x22>
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	b10b      	cbz	r3, 8010cf0 <_free_r+0x50>
 8010cec:	42a3      	cmp	r3, r4
 8010cee:	d9fa      	bls.n	8010ce6 <_free_r+0x46>
 8010cf0:	6811      	ldr	r1, [r2, #0]
 8010cf2:	1855      	adds	r5, r2, r1
 8010cf4:	42a5      	cmp	r5, r4
 8010cf6:	d10b      	bne.n	8010d10 <_free_r+0x70>
 8010cf8:	6824      	ldr	r4, [r4, #0]
 8010cfa:	4421      	add	r1, r4
 8010cfc:	1854      	adds	r4, r2, r1
 8010cfe:	42a3      	cmp	r3, r4
 8010d00:	6011      	str	r1, [r2, #0]
 8010d02:	d1e0      	bne.n	8010cc6 <_free_r+0x26>
 8010d04:	681c      	ldr	r4, [r3, #0]
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	6053      	str	r3, [r2, #4]
 8010d0a:	4421      	add	r1, r4
 8010d0c:	6011      	str	r1, [r2, #0]
 8010d0e:	e7da      	b.n	8010cc6 <_free_r+0x26>
 8010d10:	d902      	bls.n	8010d18 <_free_r+0x78>
 8010d12:	230c      	movs	r3, #12
 8010d14:	6003      	str	r3, [r0, #0]
 8010d16:	e7d6      	b.n	8010cc6 <_free_r+0x26>
 8010d18:	6825      	ldr	r5, [r4, #0]
 8010d1a:	1961      	adds	r1, r4, r5
 8010d1c:	428b      	cmp	r3, r1
 8010d1e:	bf04      	itt	eq
 8010d20:	6819      	ldreq	r1, [r3, #0]
 8010d22:	685b      	ldreq	r3, [r3, #4]
 8010d24:	6063      	str	r3, [r4, #4]
 8010d26:	bf04      	itt	eq
 8010d28:	1949      	addeq	r1, r1, r5
 8010d2a:	6021      	streq	r1, [r4, #0]
 8010d2c:	6054      	str	r4, [r2, #4]
 8010d2e:	e7ca      	b.n	8010cc6 <_free_r+0x26>
 8010d30:	b003      	add	sp, #12
 8010d32:	bd30      	pop	{r4, r5, pc}
 8010d34:	2004ae74 	.word	0x2004ae74

08010d38 <_realloc_r>:
 8010d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d3c:	4680      	mov	r8, r0
 8010d3e:	4614      	mov	r4, r2
 8010d40:	460e      	mov	r6, r1
 8010d42:	b921      	cbnz	r1, 8010d4e <_realloc_r+0x16>
 8010d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d48:	4611      	mov	r1, r2
 8010d4a:	f7ff bc0f 	b.w	801056c <_malloc_r>
 8010d4e:	b92a      	cbnz	r2, 8010d5c <_realloc_r+0x24>
 8010d50:	f7ff ffa6 	bl	8010ca0 <_free_r>
 8010d54:	4625      	mov	r5, r4
 8010d56:	4628      	mov	r0, r5
 8010d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d5c:	f000 f81b 	bl	8010d96 <_malloc_usable_size_r>
 8010d60:	4284      	cmp	r4, r0
 8010d62:	4607      	mov	r7, r0
 8010d64:	d802      	bhi.n	8010d6c <_realloc_r+0x34>
 8010d66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010d6a:	d812      	bhi.n	8010d92 <_realloc_r+0x5a>
 8010d6c:	4621      	mov	r1, r4
 8010d6e:	4640      	mov	r0, r8
 8010d70:	f7ff fbfc 	bl	801056c <_malloc_r>
 8010d74:	4605      	mov	r5, r0
 8010d76:	2800      	cmp	r0, #0
 8010d78:	d0ed      	beq.n	8010d56 <_realloc_r+0x1e>
 8010d7a:	42bc      	cmp	r4, r7
 8010d7c:	4622      	mov	r2, r4
 8010d7e:	4631      	mov	r1, r6
 8010d80:	bf28      	it	cs
 8010d82:	463a      	movcs	r2, r7
 8010d84:	f7ff fb74 	bl	8010470 <memcpy>
 8010d88:	4631      	mov	r1, r6
 8010d8a:	4640      	mov	r0, r8
 8010d8c:	f7ff ff88 	bl	8010ca0 <_free_r>
 8010d90:	e7e1      	b.n	8010d56 <_realloc_r+0x1e>
 8010d92:	4635      	mov	r5, r6
 8010d94:	e7df      	b.n	8010d56 <_realloc_r+0x1e>

08010d96 <_malloc_usable_size_r>:
 8010d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d9a:	1f18      	subs	r0, r3, #4
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	bfbc      	itt	lt
 8010da0:	580b      	ldrlt	r3, [r1, r0]
 8010da2:	18c0      	addlt	r0, r0, r3
 8010da4:	4770      	bx	lr
	...

08010da8 <_init>:
 8010da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010daa:	bf00      	nop
 8010dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dae:	bc08      	pop	{r3}
 8010db0:	469e      	mov	lr, r3
 8010db2:	4770      	bx	lr

08010db4 <_fini>:
 8010db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010db6:	bf00      	nop
 8010db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dba:	bc08      	pop	{r3}
 8010dbc:	469e      	mov	lr, r3
 8010dbe:	4770      	bx	lr
