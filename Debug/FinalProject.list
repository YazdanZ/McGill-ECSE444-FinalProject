
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f694  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800f854  0800f854  0001f854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fae0  0800fae0  000203cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fae0  0800fae0  0001fae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fae8  0800fae8  000203cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fae8  0800fae8  0001fae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800faec  0800faec  0001faec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  0800faf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016bc  200003cc  0800febc  000203cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a88  0800febc  00021a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002edac  00000000  00000000  000203fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f43  00000000  00000000  0004f1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002400  00000000  00000000  000540f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021f8  00000000  00000000  000564f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030e7b  00000000  00000000  000586e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002920f  00000000  00000000  00089563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012630c  00000000  00000000  000b2772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d8a7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f60  00000000  00000000  001d8ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200003cc 	.word	0x200003cc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800f83c 	.word	0x0800f83c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200003d0 	.word	0x200003d0
 80001fc:	0800f83c 	.word	0x0800f83c

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005da:	2300      	movs	r3, #0
 80005dc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005de:	2003      	movs	r0, #3
 80005e0:	f000 f901 	bl	80007e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e4:	200f      	movs	r0, #15
 80005e6:	f009 fcf5 	bl	8009fd4 <HAL_InitTick>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d002      	beq.n	80005f6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	e001      	b.n	80005fa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005f6:	f009 f903 	bl	8009800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_IncTick+0x20>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_IncTick+0x24>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <HAL_IncTick+0x24>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000004 	.word	0x20000004
 8000628:	200003e8 	.word	0x200003e8

0800062c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <HAL_GetTick+0x14>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200003e8 	.word	0x200003e8

08000644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800064c:	f7ff ffee 	bl	800062c <HAL_GetTick>
 8000650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065c:	d005      	beq.n	800066a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_Delay+0x44>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800066a:	bf00      	nop
 800066c:	f7ff ffde 	bl	800062c <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	429a      	cmp	r2, r3
 800067a:	d8f7      	bhi.n	800066c <HAL_Delay+0x28>
  {
  }
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000004 	.word	0x20000004

0800068c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <__NVIC_GetPriorityGrouping+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	f003 0307 	and.w	r3, r3, #7
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	db0b      	blt.n	800071a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f003 021f 	and.w	r2, r3, #31
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <__NVIC_EnableIRQ+0x38>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	095b      	lsrs	r3, r3, #5
 8000710:	2001      	movs	r0, #1
 8000712:	fa00 f202 	lsl.w	r2, r0, r2
 8000716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e100 	.word	0xe000e100

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	; (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	; 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff4c 	bl	800068c <__NVIC_SetPriorityGrouping>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800080e:	f7ff ff61 	bl	80006d4 <__NVIC_GetPriorityGrouping>
 8000812:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	6978      	ldr	r0, [r7, #20]
 800081a:	f7ff ffb1 	bl	8000780 <NVIC_EncodePriority>
 800081e:	4602      	mov	r2, r0
 8000820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff80 	bl	800072c <__NVIC_SetPriority>
}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff54 	bl	80006f0 <__NVIC_EnableIRQ>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d101      	bne.n	8000862 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e014      	b.n	800088c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	791b      	ldrb	r3, [r3, #4]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d105      	bne.n	8000878 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f008 ffec 	bl	8009850 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2202      	movs	r2, #2
 800087c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008aa:	d120      	bne.n	80008ee <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ba:	d118      	bne.n	80008ee <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2204      	movs	r2, #4
 80008c0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	f043 0201 	orr.w	r2, r3, #1
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008e6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 f82d 	bl	8000948 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008fc:	d120      	bne.n	8000940 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800090c:	d118      	bne.n	8000940 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2204      	movs	r2, #4
 8000912:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	691b      	ldr	r3, [r3, #16]
 8000918:	f043 0202 	orr.w	r2, r3, #2
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000928:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000938:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 f94e 	bl	8000bdc <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	795b      	ldrb	r3, [r3, #5]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d101      	bne.n	8000978 <HAL_DAC_ConfigChannel+0x1c>
 8000974:	2302      	movs	r3, #2
 8000976:	e12a      	b.n	8000bce <HAL_DAC_ConfigChannel+0x272>
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2201      	movs	r2, #1
 800097c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2202      	movs	r2, #2
 8000982:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b04      	cmp	r3, #4
 800098a:	d174      	bne.n	8000a76 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800098c:	f7ff fe4e 	bl	800062c <HAL_GetTick>
 8000990:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d134      	bne.n	8000a02 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000998:	e011      	b.n	80009be <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800099a:	f7ff fe47 	bl	800062c <HAL_GetTick>
 800099e:	4602      	mov	r2, r0
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d90a      	bls.n	80009be <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	f043 0208 	orr.w	r2, r3, #8
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2203      	movs	r2, #3
 80009b8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80009ba:	2303      	movs	r3, #3
 80009bc:	e107      	b.n	8000bce <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1e6      	bne.n	800099a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff fe39 	bl	8000644 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	69d2      	ldr	r2, [r2, #28]
 80009da:	641a      	str	r2, [r3, #64]	; 0x40
 80009dc:	e01e      	b.n	8000a1c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80009de:	f7ff fe25 	bl	800062c <HAL_GetTick>
 80009e2:	4602      	mov	r2, r0
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d90a      	bls.n	8000a02 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	f043 0208 	orr.w	r2, r3, #8
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2203      	movs	r2, #3
 80009fc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80009fe:	2303      	movs	r3, #3
 8000a00:	e0e5      	b.n	8000bce <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	dbe8      	blt.n	80009de <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff fe19 	bl	8000644 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	69d2      	ldr	r2, [r2, #28]
 8000a1a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f003 0310 	and.w	r3, r3, #16
 8000a28:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	ea02 0103 	and.w	r1, r2, r3
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	6a1a      	ldr	r2, [r3, #32]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	409a      	lsls	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	430a      	orrs	r2, r1
 8000a48:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0310 	and.w	r3, r3, #16
 8000a56:	21ff      	movs	r1, #255	; 0xff
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	ea02 0103 	and.w	r1, r2, r3
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f003 0310 	and.w	r3, r3, #16
 8000a6c:	409a      	lsls	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	430a      	orrs	r2, r1
 8000a74:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d11d      	bne.n	8000aba <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a84:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	221f      	movs	r2, #31
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	69fa      	ldr	r2, [r7, #28]
 8000a96:	4013      	ands	r3, r2
 8000a98:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	69fa      	ldr	r2, [r7, #28]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ac0:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f003 0310 	and.w	r3, r3, #16
 8000ac8:	2207      	movs	r2, #7
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	69fa      	ldr	r2, [r7, #28]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	691b      	ldr	r3, [r3, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	69fa      	ldr	r2, [r7, #28]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	69fa      	ldr	r2, [r7, #28]
 8000b00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6819      	ldr	r1, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	400a      	ands	r2, r1
 8000b1e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69fa      	ldr	r2, [r7, #28]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0310 	and.w	r3, r3, #16
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	69fa      	ldr	r2, [r7, #28]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b5e:	d104      	bne.n	8000b6a <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	e018      	b.n	8000b9c <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d104      	bne.n	8000b7c <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b78:	61fb      	str	r3, [r7, #28]
 8000b7a:	e00f      	b.n	8000b9c <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000b7c:	f003 fdd0 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 8000b80:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <HAL_DAC_ConfigChannel+0x27c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d904      	bls.n	8000b94 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b90:	61fb      	str	r3, [r7, #28]
 8000b92:	e003      	b.n	8000b9c <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b9a:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	69fa      	ldr	r2, [r7, #28]
 8000ba2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6819      	ldr	r1, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	22c0      	movs	r2, #192	; 0xc0
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	04c4b400 	.word	0x04c4b400

08000bdc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e0ac      	b.n	8000d5c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fb6c 	bl	80012e4 <DFSDM_GetChannelFromInstance>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4a55      	ldr	r2, [pc, #340]	; (8000d64 <HAL_DFSDM_ChannelInit+0x174>)
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e09f      	b.n	8000d5c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f008 ff41 	bl	8009aa4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000c22:	4b51      	ldr	r3, [pc, #324]	; (8000d68 <HAL_DFSDM_ChannelInit+0x178>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	4a4f      	ldr	r2, [pc, #316]	; (8000d68 <HAL_DFSDM_ChannelInit+0x178>)
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000c2c:	4b4e      	ldr	r3, [pc, #312]	; (8000d68 <HAL_DFSDM_ChannelInit+0x178>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d125      	bne.n	8000c80 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000c34:	4b4d      	ldr	r3, [pc, #308]	; (8000d6c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a4c      	ldr	r2, [pc, #304]	; (8000d6c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000c3e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000c40:	4b4a      	ldr	r3, [pc, #296]	; (8000d6c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	4948      	ldr	r1, [pc, #288]	; (8000d6c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000c4e:	4b47      	ldr	r3, [pc, #284]	; (8000d6c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a46      	ldr	r2, [pc, #280]	; (8000d6c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c54:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000c58:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	791b      	ldrb	r3, [r3, #4]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d108      	bne.n	8000c74 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000c62:	4b42      	ldr	r3, [pc, #264]	; (8000d6c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	041b      	lsls	r3, r3, #16
 8000c6e:	493f      	ldr	r1, [pc, #252]	; (8000d6c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c70:	4313      	orrs	r3, r2
 8000c72:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000c74:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a3c      	ldr	r2, [pc, #240]	; (8000d6c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c7e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000c8e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6819      	ldr	r1, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000c9e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000ca4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	430a      	orrs	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 020f 	bic.w	r2, r2, #15
 8000cbc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6819      	ldr	r1, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000ce4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6899      	ldr	r1, [r3, #8]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f002 0207 	and.w	r2, r2, #7
 8000d10:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6859      	ldr	r1, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000d24:	431a      	orrs	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d3c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 faca 	bl	80012e4 <DFSDM_GetChannelFromInstance>
 8000d50:	4602      	mov	r2, r0
 8000d52:	4904      	ldr	r1, [pc, #16]	; (8000d64 <HAL_DFSDM_ChannelInit+0x174>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200003f0 	.word	0x200003f0
 8000d68:	200003ec 	.word	0x200003ec
 8000d6c:	40016000 	.word	0x40016000

08000d70 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e0ca      	b.n	8000f40 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a66      	ldr	r2, [pc, #408]	; (8000f48 <HAL_DFSDM_FilterInit+0x1b0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d109      	bne.n	8000dc8 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d003      	beq.n	8000dc4 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d101      	bne.n	8000dc8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e0bb      	b.n	8000f40 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f008 fdab 	bl	800993c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8000df4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7a1b      	ldrb	r3, [r3, #8]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d108      	bne.n	8000e10 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	e007      	b.n	8000e20 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000e1e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7a5b      	ldrb	r3, [r3, #9]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d108      	bne.n	8000e3a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e007      	b.n	8000e4a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6812      	ldr	r2, [r2, #0]
 8000e54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000e58:	f023 0308 	bic.w	r3, r3, #8
 8000e5c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d108      	bne.n	8000e78 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6819      	ldr	r1, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695a      	ldr	r2, [r3, #20]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7c1b      	ldrb	r3, [r3, #16]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d108      	bne.n	8000e92 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f042 0210 	orr.w	r2, r2, #16
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	e007      	b.n	8000ea2 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0210 	bic.w	r2, r2, #16
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7c5b      	ldrb	r3, [r3, #17]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d108      	bne.n	8000ebc <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f042 0220 	orr.w	r2, r2, #32
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e007      	b.n	8000ecc <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0220 	bic.w	r2, r2, #32
 8000eca:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6812      	ldr	r2, [r2, #0]
 8000ed6:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8000eda:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8000ede:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6959      	ldr	r1, [r3, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000ef2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000efa:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699a      	ldr	r2, [r3, #24]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7c1a      	ldrb	r2, [r3, #16]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 0201 	orr.w	r2, r2, #1
 8000f34:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40016100 	.word	0x40016100

08000f4c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d02e      	beq.n	8000fc4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8000f6c:	2bff      	cmp	r3, #255	; 0xff
 8000f6e:	d029      	beq.n	8000fc4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f82:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10d      	bne.n	8000fa6 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e00a      	b.n	8000fbc <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6819      	ldr	r1, [r3, #0]
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc2:	e001      	b.n	8000fc8 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00f      	beq.n	800101a <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00a      	beq.n	800101a <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2208      	movs	r2, #8
 800100a:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f95c 	bl	80012d0 <HAL_DFSDM_FilterErrorCallback>
 8001018:	e13b      	b.n	8001292 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00f      	beq.n	8001044 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00a      	beq.n	8001044 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2204      	movs	r2, #4
 8001034:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2202      	movs	r2, #2
 800103a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f947 	bl	80012d0 <HAL_DFSDM_FilterErrorCallback>
 8001042:	e126      	b.n	8001292 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d025      	beq.n	800109a <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f008 f86a 	bl	8009132 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 8114 	bne.w	8001290 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800106c:	2b00      	cmp	r3, #0
 800106e:	f040 810f 	bne.w	8001290 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 0202 	bic.w	r2, r2, #2
 8001080:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001088:	2b02      	cmp	r3, #2
 800108a:	d101      	bne.n	8001090 <HAL_DFSDM_IRQHandler+0xb8>
 800108c:	2201      	movs	r2, #1
 800108e:	e000      	b.n	8001092 <HAL_DFSDM_IRQHandler+0xba>
 8001090:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001098:	e0fa      	b.n	8001290 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d034      	beq.n	800110e <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d02f      	beq.n	800110e <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f8f8 	bl	80012a4 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b8:	1e5a      	subs	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f040 80e5 	bne.w	8001292 <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d112      	bne.n	80010f6 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d101      	bne.n	80010ee <HAL_DFSDM_IRQHandler+0x116>
 80010ea:	2201      	movs	r2, #1
 80010ec:	e000      	b.n	80010f0 <HAL_DFSDM_IRQHandler+0x118>
 80010ee:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d102      	bne.n	8001106 <HAL_DFSDM_IRQHandler+0x12e>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	e000      	b.n	8001108 <HAL_DFSDM_IRQHandler+0x130>
 8001106:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 800110c:	e0c1      	b.n	8001292 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f003 0310 	and.w	r3, r3, #16
 8001114:	2b00      	cmp	r3, #0
 8001116:	d03d      	beq.n	8001194 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800111e:	2b00      	cmp	r3, #0
 8001120:	d038      	beq.n	8001194 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 800112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_DFSDM_IRQHandler+0x162>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_DFSDM_IRQHandler+0x164>
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d109      	bne.n	8001158 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8001144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001146:	0a1b      	lsrs	r3, r3, #8
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800114a:	e005      	b.n	8001158 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	3301      	adds	r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	085b      	lsrs	r3, r3, #1
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <HAL_DFSDM_IRQHandler+0x190>
 8001162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001164:	2b06      	cmp	r3, #6
 8001166:	d9f1      	bls.n	800114c <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d105      	bne.n	800117a <HAL_DFSDM_IRQHandler+0x1a2>
 800116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001170:	3308      	adds	r3, #8
 8001172:	2201      	movs	r2, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	e003      	b.n	8001182 <HAL_DFSDM_IRQHandler+0x1aa>
 800117a:	2201      	movs	r2, #1
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f893 	bl	80012b8 <HAL_DFSDM_FilterAwdCallback>
  {
 8001192:	e07e      	b.n	8001292 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a40      	ldr	r2, [pc, #256]	; (800129c <HAL_DFSDM_IRQHandler+0x2c4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d141      	bne.n	8001222 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d03c      	beq.n	8001222 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d037      	beq.n	8001222 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	0c1b      	lsrs	r3, r3, #16
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 80011c2:	e02a      	b.n	800121a <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d01f      	beq.n	800120e <HAL_DFSDM_IRQHandler+0x236>
 80011ce:	4a34      	ldr	r2, [pc, #208]	; (80012a0 <HAL_DFSDM_IRQHandler+0x2c8>)
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d019      	beq.n	800120e <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 80011da:	4a31      	ldr	r2, [pc, #196]	; (80012a0 <HAL_DFSDM_IRQHandler+0x2c8>)
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00f      	beq.n	800120e <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	f103 0210 	add.w	r2, r3, #16
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f202 	lsl.w	r2, r1, r2
 80011fe:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8001200:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fdb1 	bl	8000d70 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	3301      	adds	r3, #1
 8001212:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	085b      	lsrs	r3, r3, #1
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	2b07      	cmp	r3, #7
 800121e:	d9d1      	bls.n	80011c4 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8001220:	e037      	b.n	8001292 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1d      	ldr	r2, [pc, #116]	; (800129c <HAL_DFSDM_IRQHandler+0x2c4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d132      	bne.n	8001292 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001232:	2b00      	cmp	r3, #0
 8001234:	d02d      	beq.n	8001292 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 800123c:	2b00      	cmp	r3, #0
 800123e:	d028      	beq.n	8001292 <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	0e1b      	lsrs	r3, r3, #24
 800124c:	b2db      	uxtb	r3, r3
 800124e:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001250:	e005      	b.n	800125e <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	3301      	adds	r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	085b      	lsrs	r3, r3, #1
 800125c:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <HAL_DFSDM_IRQHandler+0x296>
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b06      	cmp	r3, #6
 800126c:	d9f1      	bls.n	8001252 <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	f103 0218 	add.w	r2, r3, #24
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	fa01 f202 	lsl.w	r2, r1, r2
 800127e:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fd7b 	bl	8000d84 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 800128e:	e000      	b.n	8001292 <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001290:	bf00      	nop
}
 8001292:	bf00      	nop
 8001294:	3730      	adds	r7, #48	; 0x30
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40016100 	.word	0x40016100
 80012a0:	200003f0 	.word	0x200003f0

080012a4 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <DFSDM_GetChannelFromInstance+0x7c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d102      	bne.n	80012fa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e02b      	b.n	8001352 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <DFSDM_GetChannelFromInstance+0x80>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d102      	bne.n	8001308 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	e024      	b.n	8001352 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <DFSDM_GetChannelFromInstance+0x84>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d102      	bne.n	8001316 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001310:	2302      	movs	r3, #2
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	e01d      	b.n	8001352 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <DFSDM_GetChannelFromInstance+0x88>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d102      	bne.n	8001324 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800131e:	2304      	movs	r3, #4
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e016      	b.n	8001352 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <DFSDM_GetChannelFromInstance+0x8c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d102      	bne.n	8001332 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800132c:	2305      	movs	r3, #5
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	e00f      	b.n	8001352 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <DFSDM_GetChannelFromInstance+0x90>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d102      	bne.n	8001340 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800133a:	2306      	movs	r3, #6
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e008      	b.n	8001352 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <DFSDM_GetChannelFromInstance+0x94>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d102      	bne.n	800134e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001348:	2307      	movs	r3, #7
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	e001      	b.n	8001352 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800134e:	2303      	movs	r3, #3
 8001350:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40016000 	.word	0x40016000
 8001364:	40016020 	.word	0x40016020
 8001368:	40016040 	.word	0x40016040
 800136c:	40016080 	.word	0x40016080
 8001370:	400160a0 	.word	0x400160a0
 8001374:	400160c0 	.word	0x400160c0
 8001378:	400160e0 	.word	0x400160e0

0800137c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e08d      	b.n	80014aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <HAL_DMA_Init+0x138>)
 8001396:	429a      	cmp	r2, r3
 8001398:	d80f      	bhi.n	80013ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <HAL_DMA_Init+0x13c>)
 80013a2:	4413      	add	r3, r2
 80013a4:	4a45      	ldr	r2, [pc, #276]	; (80014bc <HAL_DMA_Init+0x140>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	009a      	lsls	r2, r3, #2
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a42      	ldr	r2, [pc, #264]	; (80014c0 <HAL_DMA_Init+0x144>)
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
 80013b8:	e00e      	b.n	80013d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b40      	ldr	r3, [pc, #256]	; (80014c4 <HAL_DMA_Init+0x148>)
 80013c2:	4413      	add	r3, r2
 80013c4:	4a3d      	ldr	r2, [pc, #244]	; (80014bc <HAL_DMA_Init+0x140>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	009a      	lsls	r2, r3, #2
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a3c      	ldr	r2, [pc, #240]	; (80014c8 <HAL_DMA_Init+0x14c>)
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2202      	movs	r2, #2
 80013dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001408:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001414:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f9b8 	bl	80017a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001438:	d102      	bne.n	8001440 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001454:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d010      	beq.n	8001480 <HAL_DMA_Init+0x104>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b04      	cmp	r3, #4
 8001464:	d80c      	bhi.n	8001480 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f9d8 	bl	800181c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	e008      	b.n	8001492 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40020407 	.word	0x40020407
 80014b8:	bffdfff8 	.word	0xbffdfff8
 80014bc:	cccccccd 	.word	0xcccccccd
 80014c0:	40020000 	.word	0x40020000
 80014c4:	bffdfbf8 	.word	0xbffdfbf8
 80014c8:	40020400 	.word	0x40020400

080014cc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d008      	beq.n	80014f6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2204      	movs	r2, #4
 80014e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e040      	b.n	8001578 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 020e 	bic.w	r2, r2, #14
 8001504:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001514:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0201 	bic.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f003 021c 	and.w	r2, r3, #28
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f202 	lsl.w	r2, r1, r2
 8001538:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001542:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00c      	beq.n	8001566 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800155a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001564:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d005      	beq.n	80015a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2204      	movs	r2, #4
 80015a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e047      	b.n	8001638 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 020e 	bic.w	r2, r2, #14
 80015b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	f003 021c 	and.w	r2, r3, #28
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00c      	beq.n	8001618 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800160c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001616:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
    }
  }
  return status;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f003 031c 	and.w	r3, r3, #28
 8001662:	2204      	movs	r2, #4
 8001664:	409a      	lsls	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d026      	beq.n	80016bc <HAL_DMA_IRQHandler+0x7a>
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d021      	beq.n	80016bc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	2b00      	cmp	r3, #0
 8001684:	d107      	bne.n	8001696 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0204 	bic.w	r2, r2, #4
 8001694:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f003 021c 	and.w	r2, r3, #28
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	2104      	movs	r1, #4
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d071      	beq.n	8001796 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80016ba:	e06c      	b.n	8001796 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f003 031c 	and.w	r3, r3, #28
 80016c4:	2202      	movs	r2, #2
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d02e      	beq.n	800172e <HAL_DMA_IRQHandler+0xec>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d029      	beq.n	800172e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10b      	bne.n	8001700 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 020a 	bic.w	r2, r2, #10
 80016f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001704:	f003 021c 	and.w	r2, r3, #28
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	2102      	movs	r1, #2
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	2b00      	cmp	r3, #0
 8001722:	d038      	beq.n	8001796 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800172c:	e033      	b.n	8001796 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f003 031c 	and.w	r3, r3, #28
 8001736:	2208      	movs	r2, #8
 8001738:	409a      	lsls	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4013      	ands	r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d02a      	beq.n	8001798 <HAL_DMA_IRQHandler+0x156>
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d025      	beq.n	8001798 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 020e 	bic.w	r2, r2, #14
 800175a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001760:	f003 021c 	and.w	r2, r3, #28
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001796:	bf00      	nop
 8001798:	bf00      	nop
}
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d80a      	bhi.n	80017ca <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017c0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6493      	str	r3, [r2, #72]	; 0x48
 80017c8:	e007      	b.n	80017da <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	009a      	lsls	r2, r3, #2
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017d4:	4413      	add	r3, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	3b08      	subs	r3, #8
 80017e2:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	2201      	movs	r2, #1
 80017fa:	409a      	lsls	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40020407 	.word	0x40020407
 8001810:	4002081c 	.word	0x4002081c
 8001814:	cccccccd 	.word	0xcccccccd
 8001818:	40020880 	.word	0x40020880

0800181c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a08      	ldr	r2, [pc, #32]	; (8001860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800183e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3b01      	subs	r3, #1
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2201      	movs	r2, #1
 800184a:	409a      	lsls	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	1000823f 	.word	0x1000823f
 8001860:	40020940 	.word	0x40020940

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001872:	e166      	b.n	8001b42 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8158 	beq.w	8001b3c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d005      	beq.n	80018a4 <HAL_GPIO_Init+0x40>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d130      	bne.n	8001906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018da:	2201      	movs	r2, #1
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	f003 0201 	and.w	r2, r3, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b03      	cmp	r3, #3
 8001910:	d017      	beq.n	8001942 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2203      	movs	r2, #3
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d123      	bne.n	8001996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	08da      	lsrs	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	220f      	movs	r2, #15
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	6939      	ldr	r1, [r7, #16]
 8001992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0203 	and.w	r2, r3, #3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80b2 	beq.w	8001b3c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d8:	4b61      	ldr	r3, [pc, #388]	; (8001b60 <HAL_GPIO_Init+0x2fc>)
 80019da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019dc:	4a60      	ldr	r2, [pc, #384]	; (8001b60 <HAL_GPIO_Init+0x2fc>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6613      	str	r3, [r2, #96]	; 0x60
 80019e4:	4b5e      	ldr	r3, [pc, #376]	; (8001b60 <HAL_GPIO_Init+0x2fc>)
 80019e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f0:	4a5c      	ldr	r2, [pc, #368]	; (8001b64 <HAL_GPIO_Init+0x300>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a1a:	d02b      	beq.n	8001a74 <HAL_GPIO_Init+0x210>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a52      	ldr	r2, [pc, #328]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d025      	beq.n	8001a70 <HAL_GPIO_Init+0x20c>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a51      	ldr	r2, [pc, #324]	; (8001b6c <HAL_GPIO_Init+0x308>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d01f      	beq.n	8001a6c <HAL_GPIO_Init+0x208>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a50      	ldr	r2, [pc, #320]	; (8001b70 <HAL_GPIO_Init+0x30c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d019      	beq.n	8001a68 <HAL_GPIO_Init+0x204>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a4f      	ldr	r2, [pc, #316]	; (8001b74 <HAL_GPIO_Init+0x310>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d013      	beq.n	8001a64 <HAL_GPIO_Init+0x200>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a4e      	ldr	r2, [pc, #312]	; (8001b78 <HAL_GPIO_Init+0x314>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00d      	beq.n	8001a60 <HAL_GPIO_Init+0x1fc>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a4d      	ldr	r2, [pc, #308]	; (8001b7c <HAL_GPIO_Init+0x318>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d007      	beq.n	8001a5c <HAL_GPIO_Init+0x1f8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a4c      	ldr	r2, [pc, #304]	; (8001b80 <HAL_GPIO_Init+0x31c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_GPIO_Init+0x1f4>
 8001a54:	2307      	movs	r3, #7
 8001a56:	e00e      	b.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a58:	2308      	movs	r3, #8
 8001a5a:	e00c      	b.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a5c:	2306      	movs	r3, #6
 8001a5e:	e00a      	b.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a60:	2305      	movs	r3, #5
 8001a62:	e008      	b.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a64:	2304      	movs	r3, #4
 8001a66:	e006      	b.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e004      	b.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e002      	b.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a74:	2300      	movs	r3, #0
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	f002 0203 	and.w	r2, r2, #3
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	4093      	lsls	r3, r2
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a86:	4937      	ldr	r1, [pc, #220]	; (8001b64 <HAL_GPIO_Init+0x300>)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a94:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ab8:	4a32      	ldr	r2, [pc, #200]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ae2:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ae8:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b0c:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f47f ae91 	bne.w	8001874 <HAL_GPIO_Init+0x10>
  }
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010000 	.word	0x40010000
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	48000800 	.word	0x48000800
 8001b70:	48000c00 	.word	0x48000c00
 8001b74:	48001000 	.word	0x48001000
 8001b78:	48001400 	.word	0x48001400
 8001b7c:	48001800 	.word	0x48001800
 8001b80:	48001c00 	.word	0x48001c00
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001b96:	e0c9      	b.n	8001d2c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80bc 	beq.w	8001d26 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001bae:	4a66      	ldr	r2, [pc, #408]	; (8001d48 <HAL_GPIO_DeInit+0x1c0>)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bd6:	d02b      	beq.n	8001c30 <HAL_GPIO_DeInit+0xa8>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a5c      	ldr	r2, [pc, #368]	; (8001d4c <HAL_GPIO_DeInit+0x1c4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d025      	beq.n	8001c2c <HAL_GPIO_DeInit+0xa4>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a5b      	ldr	r2, [pc, #364]	; (8001d50 <HAL_GPIO_DeInit+0x1c8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d01f      	beq.n	8001c28 <HAL_GPIO_DeInit+0xa0>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a5a      	ldr	r2, [pc, #360]	; (8001d54 <HAL_GPIO_DeInit+0x1cc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d019      	beq.n	8001c24 <HAL_GPIO_DeInit+0x9c>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a59      	ldr	r2, [pc, #356]	; (8001d58 <HAL_GPIO_DeInit+0x1d0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_GPIO_DeInit+0x98>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a58      	ldr	r2, [pc, #352]	; (8001d5c <HAL_GPIO_DeInit+0x1d4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00d      	beq.n	8001c1c <HAL_GPIO_DeInit+0x94>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a57      	ldr	r2, [pc, #348]	; (8001d60 <HAL_GPIO_DeInit+0x1d8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d007      	beq.n	8001c18 <HAL_GPIO_DeInit+0x90>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a56      	ldr	r2, [pc, #344]	; (8001d64 <HAL_GPIO_DeInit+0x1dc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_GPIO_DeInit+0x8c>
 8001c10:	2307      	movs	r3, #7
 8001c12:	e00e      	b.n	8001c32 <HAL_GPIO_DeInit+0xaa>
 8001c14:	2308      	movs	r3, #8
 8001c16:	e00c      	b.n	8001c32 <HAL_GPIO_DeInit+0xaa>
 8001c18:	2306      	movs	r3, #6
 8001c1a:	e00a      	b.n	8001c32 <HAL_GPIO_DeInit+0xaa>
 8001c1c:	2305      	movs	r3, #5
 8001c1e:	e008      	b.n	8001c32 <HAL_GPIO_DeInit+0xaa>
 8001c20:	2304      	movs	r3, #4
 8001c22:	e006      	b.n	8001c32 <HAL_GPIO_DeInit+0xaa>
 8001c24:	2303      	movs	r3, #3
 8001c26:	e004      	b.n	8001c32 <HAL_GPIO_DeInit+0xaa>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e002      	b.n	8001c32 <HAL_GPIO_DeInit+0xaa>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <HAL_GPIO_DeInit+0xaa>
 8001c30:	2300      	movs	r3, #0
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	f002 0203 	and.w	r2, r2, #3
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	4093      	lsls	r3, r2
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d132      	bne.n	8001ca8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001c42:	4b49      	ldr	r3, [pc, #292]	; (8001d68 <HAL_GPIO_DeInit+0x1e0>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4947      	ldr	r1, [pc, #284]	; (8001d68 <HAL_GPIO_DeInit+0x1e0>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001c50:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <HAL_GPIO_DeInit+0x1e0>)
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	4943      	ldr	r1, [pc, #268]	; (8001d68 <HAL_GPIO_DeInit+0x1e0>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001c5e:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <HAL_GPIO_DeInit+0x1e0>)
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4940      	ldr	r1, [pc, #256]	; (8001d68 <HAL_GPIO_DeInit+0x1e0>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001c6c:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <HAL_GPIO_DeInit+0x1e0>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	493c      	ldr	r1, [pc, #240]	; (8001d68 <HAL_GPIO_DeInit+0x1e0>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001c8a:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <HAL_GPIO_DeInit+0x1c0>)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	482b      	ldr	r0, [pc, #172]	; (8001d48 <HAL_GPIO_DeInit+0x1c0>)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2103      	movs	r1, #3
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	08d2      	lsrs	r2, r2, #3
 8001cdc:	4019      	ands	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2103      	movs	r1, #3
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	2101      	movs	r1, #1
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2103      	movs	r1, #3
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	401a      	ands	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f47f af2f 	bne.w	8001b98 <HAL_GPIO_DeInit+0x10>
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
 8001d3e:	371c      	adds	r7, #28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	48000400 	.word	0x48000400
 8001d50:	48000800 	.word	0x48000800
 8001d54:	48000c00 	.word	0x48000c00
 8001d58:	48001000 	.word	0x48001000
 8001d5c:	48001400 	.word	0x48001400
 8001d60:	48001800 	.word	0x48001800
 8001d64:	48001c00 	.word	0x48001c00
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f007 f9ae 	bl	800911c <HAL_GPIO_EXTI_Callback>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40010400 	.word	0x40010400

08001dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e081      	b.n	8001ee2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f007 fec6 	bl	8009b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2224      	movs	r2, #36	; 0x24
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	e006      	b.n	8001e54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d104      	bne.n	8001e66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69d9      	ldr	r1, [r3, #28]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1a      	ldr	r2, [r3, #32]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	460b      	mov	r3, r1
 8001efa:	817b      	strh	r3, [r7, #10]
 8001efc:	4613      	mov	r3, r2
 8001efe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	f040 80da 	bne.w	80020c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_I2C_Master_Transmit+0x30>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e0d3      	b.n	80020c4 <HAL_I2C_Master_Transmit+0x1d8>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f24:	f7fe fb82 	bl	800062c <HAL_GetTick>
 8001f28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2319      	movs	r3, #25
 8001f30:	2201      	movs	r2, #1
 8001f32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f9e6 	bl	8002308 <I2C_WaitOnFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0be      	b.n	80020c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2221      	movs	r2, #33	; 0x21
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2210      	movs	r2, #16
 8001f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	893a      	ldrh	r2, [r7, #8]
 8001f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2bff      	cmp	r3, #255	; 0xff
 8001f76:	d90e      	bls.n	8001f96 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	22ff      	movs	r2, #255	; 0xff
 8001f7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	8979      	ldrh	r1, [r7, #10]
 8001f86:	4b51      	ldr	r3, [pc, #324]	; (80020cc <HAL_I2C_Master_Transmit+0x1e0>)
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fbdc 	bl	800274c <I2C_TransferConfig>
 8001f94:	e06c      	b.n	8002070 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	8979      	ldrh	r1, [r7, #10]
 8001fa8:	4b48      	ldr	r3, [pc, #288]	; (80020cc <HAL_I2C_Master_Transmit+0x1e0>)
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 fbcb 	bl	800274c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001fb6:	e05b      	b.n	8002070 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	6a39      	ldr	r1, [r7, #32]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f9e3 	bl	8002388 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e07b      	b.n	80020c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d034      	beq.n	8002070 <HAL_I2C_Master_Transmit+0x184>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200a:	2b00      	cmp	r3, #0
 800200c:	d130      	bne.n	8002070 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	2200      	movs	r2, #0
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f975 	bl	8002308 <I2C_WaitOnFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e04d      	b.n	80020c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	2bff      	cmp	r3, #255	; 0xff
 8002030:	d90e      	bls.n	8002050 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	22ff      	movs	r2, #255	; 0xff
 8002036:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203c:	b2da      	uxtb	r2, r3
 800203e:	8979      	ldrh	r1, [r7, #10]
 8002040:	2300      	movs	r3, #0
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 fb7f 	bl	800274c <I2C_TransferConfig>
 800204e:	e00f      	b.n	8002070 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	b2da      	uxtb	r2, r3
 8002060:	8979      	ldrh	r1, [r7, #10]
 8002062:	2300      	movs	r3, #0
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 fb6e 	bl	800274c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d19e      	bne.n	8001fb8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	6a39      	ldr	r1, [r7, #32]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f9c2 	bl	8002408 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e01a      	b.n	80020c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2220      	movs	r2, #32
 8002094:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80020a2:	400b      	ands	r3, r1
 80020a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2220      	movs	r2, #32
 80020aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
  }
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	80002000 	.word	0x80002000
 80020d0:	fe00e800 	.word	0xfe00e800

080020d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	461a      	mov	r2, r3
 80020e0:	460b      	mov	r3, r1
 80020e2:	817b      	strh	r3, [r7, #10]
 80020e4:	4613      	mov	r3, r2
 80020e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b20      	cmp	r3, #32
 80020f2:	f040 80db 	bne.w	80022ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_I2C_Master_Receive+0x30>
 8002100:	2302      	movs	r3, #2
 8002102:	e0d4      	b.n	80022ae <HAL_I2C_Master_Receive+0x1da>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800210c:	f7fe fa8e 	bl	800062c <HAL_GetTick>
 8002110:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2319      	movs	r3, #25
 8002118:	2201      	movs	r2, #1
 800211a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f8f2 	bl	8002308 <I2C_WaitOnFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0bf      	b.n	80022ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2222      	movs	r2, #34	; 0x22
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2210      	movs	r2, #16
 800213a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	893a      	ldrh	r2, [r7, #8]
 800214e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	2bff      	cmp	r3, #255	; 0xff
 800215e:	d90e      	bls.n	800217e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	22ff      	movs	r2, #255	; 0xff
 8002164:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	b2da      	uxtb	r2, r3
 800216c:	8979      	ldrh	r1, [r7, #10]
 800216e:	4b52      	ldr	r3, [pc, #328]	; (80022b8 <HAL_I2C_Master_Receive+0x1e4>)
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fae8 	bl	800274c <I2C_TransferConfig>
 800217c:	e06d      	b.n	800225a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	b2da      	uxtb	r2, r3
 800218e:	8979      	ldrh	r1, [r7, #10]
 8002190:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <HAL_I2C_Master_Receive+0x1e4>)
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fad7 	bl	800274c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800219e:	e05c      	b.n	800225a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	6a39      	ldr	r1, [r7, #32]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f96b 	bl	8002480 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e07c      	b.n	80022ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d034      	beq.n	800225a <HAL_I2C_Master_Receive+0x186>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d130      	bne.n	800225a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	2200      	movs	r2, #0
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f880 	bl	8002308 <I2C_WaitOnFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e04d      	b.n	80022ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	2bff      	cmp	r3, #255	; 0xff
 800221a:	d90e      	bls.n	800223a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	22ff      	movs	r2, #255	; 0xff
 8002220:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002226:	b2da      	uxtb	r2, r3
 8002228:	8979      	ldrh	r1, [r7, #10]
 800222a:	2300      	movs	r3, #0
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fa8a 	bl	800274c <I2C_TransferConfig>
 8002238:	e00f      	b.n	800225a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	b2da      	uxtb	r2, r3
 800224a:	8979      	ldrh	r1, [r7, #10]
 800224c:	2300      	movs	r3, #0
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fa79 	bl	800274c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d19d      	bne.n	80021a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	6a39      	ldr	r1, [r7, #32]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f8cd 	bl	8002408 <I2C_WaitOnSTOPFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e01a      	b.n	80022ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2220      	movs	r2, #32
 800227e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6859      	ldr	r1, [r3, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_I2C_Master_Receive+0x1e8>)
 800228c:	400b      	ands	r3, r1
 800228e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	e000      	b.n	80022ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80022ac:	2302      	movs	r3, #2
  }
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	80002400 	.word	0x80002400
 80022bc:	fe00e800 	.word	0xfe00e800

080022c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d103      	bne.n	80022de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2200      	movs	r2, #0
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d007      	beq.n	80022fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	619a      	str	r2, [r3, #24]
  }
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002318:	e022      	b.n	8002360 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d01e      	beq.n	8002360 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002322:	f7fe f983 	bl	800062c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d302      	bcc.n	8002338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d113      	bne.n	8002360 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e00f      	b.n	8002380 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4013      	ands	r3, r2
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	429a      	cmp	r2, r3
 800237c:	d0cd      	beq.n	800231a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002394:	e02c      	b.n	80023f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f8ea 	bl	8002574 <I2C_IsErrorOccurred>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e02a      	b.n	8002400 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d01e      	beq.n	80023f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b2:	f7fe f93b 	bl	800062c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d113      	bne.n	80023f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	f043 0220 	orr.w	r2, r3, #32
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e007      	b.n	8002400 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d1cb      	bne.n	8002396 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002414:	e028      	b.n	8002468 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f8aa 	bl	8002574 <I2C_IsErrorOccurred>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e026      	b.n	8002478 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7fe f8ff 	bl	800062c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d113      	bne.n	8002468 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e007      	b.n	8002478 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b20      	cmp	r3, #32
 8002474:	d1cf      	bne.n	8002416 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800248c:	e064      	b.n	8002558 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f86e 	bl	8002574 <I2C_IsErrorOccurred>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e062      	b.n	8002568 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	d138      	bne.n	8002522 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d105      	bne.n	80024ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e04e      	b.n	8002568 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d107      	bne.n	80024e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2210      	movs	r2, #16
 80024de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2204      	movs	r2, #4
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
 80024e6:	e002      	b.n	80024ee <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2220      	movs	r2, #32
 80024f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002502:	400b      	ands	r3, r1
 8002504:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e022      	b.n	8002568 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002522:	f7fe f883 	bl	800062c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	d302      	bcc.n	8002538 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10f      	bne.n	8002558 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e007      	b.n	8002568 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b04      	cmp	r3, #4
 8002564:	d193      	bne.n	800248e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	fe00e800 	.word	0xfe00e800

08002574 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	d075      	beq.n	800268c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2210      	movs	r2, #16
 80025a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025a8:	e056      	b.n	8002658 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d052      	beq.n	8002658 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025b2:	f7fe f83b 	bl	800062c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d302      	bcc.n	80025c8 <I2C_IsErrorOccurred+0x54>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d147      	bne.n	8002658 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ea:	d12e      	bne.n	800264a <I2C_IsErrorOccurred+0xd6>
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025f2:	d02a      	beq.n	800264a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d027      	beq.n	800264a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002608:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800260a:	f7fe f80f 	bl	800062c <HAL_GetTick>
 800260e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002610:	e01b      	b.n	800264a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002612:	f7fe f80b 	bl	800062c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b19      	cmp	r3, #25
 800261e:	d914      	bls.n	800264a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b20      	cmp	r3, #32
 8002656:	d1dc      	bne.n	8002612 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b20      	cmp	r3, #32
 8002664:	d003      	beq.n	800266e <I2C_IsErrorOccurred+0xfa>
 8002666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800266a:	2b00      	cmp	r3, #0
 800266c:	d09d      	beq.n	80025aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800266e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002672:	2b00      	cmp	r3, #0
 8002674:	d103      	bne.n	800267e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2220      	movs	r2, #32
 800267c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f043 0308 	orr.w	r3, r3, #8
 80026c6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01c      	beq.n	800273c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f7ff fddc 	bl	80022c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6859      	ldr	r1, [r3, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <I2C_IsErrorOccurred+0x1d4>)
 8002714:	400b      	ands	r3, r1
 8002716:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	431a      	orrs	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800273c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002740:	4618      	mov	r0, r3
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	fe00e800 	.word	0xfe00e800

0800274c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	817b      	strh	r3, [r7, #10]
 800275a:	4613      	mov	r3, r2
 800275c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002764:	7a7b      	ldrb	r3, [r7, #9]
 8002766:	041b      	lsls	r3, r3, #16
 8002768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800276c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	4313      	orrs	r3, r2
 8002776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800277a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	0d5b      	lsrs	r3, r3, #21
 8002786:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <I2C_TransferConfig+0x60>)
 800278c:	430b      	orrs	r3, r1
 800278e:	43db      	mvns	r3, r3
 8002790:	ea02 0103 	and.w	r1, r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	03ff63ff 	.word	0x03ff63ff

080027b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d138      	bne.n	8002838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e032      	b.n	800283a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b20      	cmp	r3, #32
 800285a:	d139      	bne.n	80028d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002866:	2302      	movs	r3, #2
 8002868:	e033      	b.n	80028d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2224      	movs	r2, #36	; 0x24
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7fd fe9e 	bl	800062c <HAL_GetTick>
 80028f0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	e092      	b.n	8002a24 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 808b 	bne.w	8002a24 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f007 f996 	bl	8009c40 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002914:	f241 3188 	movw	r1, #5000	; 0x1388
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fad0 	bl	8002ebe <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <HAL_OSPI_Init+0x150>)
 8002926:	4013      	ands	r3, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68d1      	ldr	r1, [r2, #12]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6912      	ldr	r2, [r2, #16]
 8002930:	3a01      	subs	r2, #1
 8002932:	0412      	lsls	r2, r2, #16
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6952      	ldr	r2, [r2, #20]
 800293a:	3a01      	subs	r2, #1
 800293c:	0212      	lsls	r2, r2, #8
 800293e:	4311      	orrs	r1, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002944:	4311      	orrs	r1, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	69d2      	ldr	r2, [r2, #28]
 800294a:	4311      	orrs	r1, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	430b      	orrs	r3, r1
 8002952:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0412      	lsls	r2, r2, #16
 800295e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	021a      	lsls	r2, r3, #8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2200      	movs	r2, #0
 8002984:	2120      	movs	r1, #32
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fddc 	bl	8003544 <OSPI_WaitFlagStateUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d146      	bne.n	8002a24 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	1e5a      	subs	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029cc:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d107      	bne.n	8002a0c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0202 	orr.w	r2, r2, #2
 8002a0a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a14:	d103      	bne.n	8002a1e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
 8002a1c:	e002      	b.n	8002a24 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2202      	movs	r2, #2
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	f8e0f8f4 	.word	0xf8e0f8f4

08002a34 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
 8002a4a:	e015      	b.n	8002a78 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0202 	bic.w	r2, r2, #2
 8002a6a:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f007 f975 	bl	8009d5c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b08a      	sub	sp, #40	; 0x28
 8002a86:	af02      	add	r7, sp, #8
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002a8e:	f7fd fdcd 	bl	800062c <HAL_GetTick>
 8002a92:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d104      	bne.n	8002ab0 <HAL_OSPI_Command+0x2e>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aae:	d10d      	bne.n	8002acc <HAL_OSPI_Command+0x4a>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b14      	cmp	r3, #20
 8002ab4:	d103      	bne.n	8002abe <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d006      	beq.n	8002acc <HAL_OSPI_Command+0x4a>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b24      	cmp	r3, #36	; 0x24
 8002ac2:	d153      	bne.n	8002b6c <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d14f      	bne.n	8002b6c <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2120      	movs	r1, #32
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fd34 	bl	8003544 <OSPI_WaitFlagStateUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8002ae0:	7ffb      	ldrb	r3, [r7, #31]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d148      	bne.n	8002b78 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fd60 	bl	80035b4 <OSPI_ConfigCmd>
 8002af4:	4603      	mov	r3, r0
 8002af6:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8002af8:	7ffb      	ldrb	r3, [r7, #31]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d13c      	bne.n	8002b78 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10e      	bne.n	8002b24 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	2102      	movs	r1, #2
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fd17 	bl	8003544 <OSPI_WaitFlagStateUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8002b22:	e029      	b.n	8002b78 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d103      	bne.n	8002b34 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002b32:	e021      	b.n	8002b78 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10b      	bne.n	8002b54 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	2b24      	cmp	r3, #36	; 0x24
 8002b42:	d103      	bne.n	8002b4c <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2204      	movs	r2, #4
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002b4a:	e015      	b.n	8002b78 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2214      	movs	r2, #20
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002b52:	e011      	b.n	8002b78 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	2b14      	cmp	r3, #20
 8002b5a:	d103      	bne.n	8002b64 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002b62:	e009      	b.n	8002b78 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2224      	movs	r2, #36	; 0x24
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002b6a:	e005      	b.n	8002b78 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2210      	movs	r2, #16
 8002b74:	649a      	str	r2, [r3, #72]	; 0x48
 8002b76:	e000      	b.n	8002b7a <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8002b78:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002b7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7fd fd4c 	bl	800062c <HAL_GetTick>
 8002b94:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	3350      	adds	r3, #80	; 0x50
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2208      	movs	r2, #8
 8002bac:	649a      	str	r2, [r3, #72]	; 0x48
 8002bae:	e057      	b.n	8002c60 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d14e      	bne.n	8002c56 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002be0:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2201      	movs	r2, #1
 8002bea:	2104      	movs	r1, #4
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fca9 	bl	8003544 <OSPI_WaitFlagStateUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002bf6:	7ffb      	ldrb	r3, [r7, #31]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d113      	bne.n	8002c24 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1df      	bne.n	8002be2 <HAL_OSPI_Transmit+0x5e>
 8002c22:	e000      	b.n	8002c26 <HAL_OSPI_Transmit+0xa2>
          break;
 8002c24:	bf00      	nop

      if (status == HAL_OK)
 8002c26:	7ffb      	ldrb	r3, [r7, #31]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d119      	bne.n	8002c60 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2201      	movs	r2, #1
 8002c34:	2102      	movs	r1, #2
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fc84 	bl	8003544 <OSPI_WaitFlagStateUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002c40:	7ffb      	ldrb	r3, [r7, #31]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2202      	movs	r2, #2
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
 8002c54:	e004      	b.n	8002c60 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002c60:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3720      	adds	r7, #32
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b08c      	sub	sp, #48	; 0x30
 8002c6e:	af02      	add	r7, sp, #8
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002c76:	f7fd fcd9 	bl	800062c <HAL_GetTick>
 8002c7a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3350      	adds	r3, #80	; 0x50
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002c94:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d106      	bne.n	8002caa <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	649a      	str	r2, [r3, #72]	; 0x48
 8002ca8:	e07c      	b.n	8002da4 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d172      	bne.n	8002d98 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cde:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ce8:	d104      	bne.n	8002cf4 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	649a      	str	r2, [r3, #72]	; 0x48
 8002cf2:	e011      	b.n	8002d18 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002cfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	649a      	str	r2, [r3, #72]	; 0x48
 8002d0c:	e004      	b.n	8002d18 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2106      	movs	r1, #6
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fc0e 	bl	8003544 <OSPI_WaitFlagStateUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8002d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d114      	bne.n	8002d60 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	7812      	ldrb	r2, [r2, #0]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	1e5a      	subs	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1dc      	bne.n	8002d18 <HAL_OSPI_Receive+0xae>
 8002d5e:	e000      	b.n	8002d62 <HAL_OSPI_Receive+0xf8>
          break;
 8002d60:	bf00      	nop

      if (status == HAL_OK)
 8002d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d11c      	bne.n	8002da4 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2201      	movs	r2, #1
 8002d72:	2102      	movs	r1, #2
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fbe5 	bl	8003544 <OSPI_WaitFlagStateUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8002d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10d      	bne.n	8002da4 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2202      	movs	r2, #2
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
 8002d96:	e005      	b.n	8002da4 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2210      	movs	r2, #16
 8002da2:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002dbc:	f7fd fc36 	bl	800062c <HAL_GetTick>
 8002dc0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002dd2:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d164      	bne.n	8002ea6 <HAL_OSPI_AutoPolling+0xf6>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de4:	d15f      	bne.n	8002ea6 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2120      	movs	r1, #32
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fba7 	bl	8003544 <OSPI_WaitFlagStateUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d158      	bne.n	8002eb2 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	6852      	ldr	r2, [r2, #4]
 8002e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	6912      	ldr	r2, [r2, #16]
 8002e20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	6899      	ldr	r1, [r3, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	430b      	orrs	r3, r1
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e42:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e4c:	d104      	bne.n	8002e58 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	649a      	str	r2, [r3, #72]	; 0x48
 8002e56:	e011      	b.n	8002e7c <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	649a      	str	r2, [r3, #72]	; 0x48
 8002e70:	e004      	b.n	8002e7c <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2201      	movs	r2, #1
 8002e84:	2108      	movs	r1, #8
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fb5c 	bl	8003544 <OSPI_WaitFlagStateUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8002e90:	7ffb      	ldrb	r3, [r7, #31]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10d      	bne.n	8002eb2 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2208      	movs	r2, #8
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002ea4:	e005      	b.n	8002eb2 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2210      	movs	r2, #16
 8002eae:	649a      	str	r2, [r3, #72]	; 0x48
 8002eb0:	e000      	b.n	8002eb4 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8002eb2:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002eb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b092      	sub	sp, #72	; 0x48
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <HAL_OSPIM_Config+0x40>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d105      	bne.n	8002f0a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002f08:	e004      	b.n	8002f14 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002f14:	2300      	movs	r3, #0
 8002f16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002f1a:	e01f      	b.n	8002f5c <HAL_OSPIM_Config+0x80>
 8002f1c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8002f20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f24:	3301      	adds	r3, #1
 8002f26:	b2d8      	uxtb	r0, r3
 8002f28:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002f2c:	f107 0114 	add.w	r1, r7, #20
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f000 fc9c 	bl	8003878 <OSPIM_GetConfig>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2208      	movs	r2, #8
 8002f50:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002f52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f56:	3301      	adds	r3, #1
 8002f58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002f5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d9dd      	bls.n	8002f20 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8002f64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 82de 	bne.w	800352a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8002f6e:	4bc6      	ldr	r3, [pc, #792]	; (8003288 <HAL_OSPIM_Config+0x3ac>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002f7a:	4bc3      	ldr	r3, [pc, #780]	; (8003288 <HAL_OSPIM_Config+0x3ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4ac2      	ldr	r2, [pc, #776]	; (8003288 <HAL_OSPIM_Config+0x3ac>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002f86:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002f92:	4bbe      	ldr	r3, [pc, #760]	; (800328c <HAL_OSPIM_Config+0x3b0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002f9e:	4bbb      	ldr	r3, [pc, #748]	; (800328c <HAL_OSPIM_Config+0x3b0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4aba      	ldr	r2, [pc, #744]	; (800328c <HAL_OSPIM_Config+0x3b0>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002faa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002fae:	f043 0302 	orr.w	r3, r3, #2
 8002fb2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002fb6:	49b6      	ldr	r1, [pc, #728]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 8002fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	3348      	adds	r3, #72	; 0x48
 8002fc4:	443b      	add	r3, r7
 8002fc6:	3b2c      	subs	r3, #44	; 0x2c
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	6859      	ldr	r1, [r3, #4]
 8002fd2:	48af      	ldr	r0, [pc, #700]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 8002fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	3348      	adds	r3, #72	; 0x48
 8002fe0:	443b      	add	r3, r7
 8002fe2:	3b2c      	subs	r3, #44	; 0x2c
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4403      	add	r3, r0
 8002ff0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8002ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	3348      	adds	r3, #72	; 0x48
 8002ffe:	443b      	add	r3, r7
 8003000:	3b34      	subs	r3, #52	; 0x34
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80a1 	beq.w	800314c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800300a:	49a1      	ldr	r1, [pc, #644]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 800300c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	3348      	adds	r3, #72	; 0x48
 8003018:	443b      	add	r3, r7
 800301a:	3b34      	subs	r3, #52	; 0x34
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3b01      	subs	r3, #1
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	6859      	ldr	r1, [r3, #4]
 8003026:	489a      	ldr	r0, [pc, #616]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 8003028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	3348      	adds	r3, #72	; 0x48
 8003034:	443b      	add	r3, r7
 8003036:	3b34      	subs	r3, #52	; 0x34
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3b01      	subs	r3, #1
 800303c:	f021 0201 	bic.w	r2, r1, #1
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4403      	add	r3, r0
 8003044:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003046:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	3348      	adds	r3, #72	; 0x48
 8003052:	443b      	add	r3, r7
 8003054:	3b30      	subs	r3, #48	; 0x30
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01d      	beq.n	8003098 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800305c:	498c      	ldr	r1, [pc, #560]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 800305e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	3348      	adds	r3, #72	; 0x48
 800306a:	443b      	add	r3, r7
 800306c:	3b30      	subs	r3, #48	; 0x30
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3b01      	subs	r3, #1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	4885      	ldr	r0, [pc, #532]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 800307a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	3348      	adds	r3, #72	; 0x48
 8003086:	443b      	add	r3, r7
 8003088:	3b30      	subs	r3, #48	; 0x30
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3b01      	subs	r3, #1
 800308e:	f021 0210 	bic.w	r2, r1, #16
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4403      	add	r3, r0
 8003096:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	3348      	adds	r3, #72	; 0x48
 80030a4:	443b      	add	r3, r7
 80030a6:	3b28      	subs	r3, #40	; 0x28
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d021      	beq.n	80030f2 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80030ae:	4978      	ldr	r1, [pc, #480]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 80030b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	3348      	adds	r3, #72	; 0x48
 80030bc:	443b      	add	r3, r7
 80030be:	3b28      	subs	r3, #40	; 0x28
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	6859      	ldr	r1, [r3, #4]
 80030ce:	4870      	ldr	r0, [pc, #448]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 80030d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	3348      	adds	r3, #72	; 0x48
 80030dc:	443b      	add	r3, r7
 80030de:	3b28      	subs	r3, #40	; 0x28
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4403      	add	r3, r0
 80030f0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80030f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	3348      	adds	r3, #72	; 0x48
 80030fe:	443b      	add	r3, r7
 8003100:	3b24      	subs	r3, #36	; 0x24
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d021      	beq.n	800314c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003108:	4961      	ldr	r1, [pc, #388]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 800310a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	3348      	adds	r3, #72	; 0x48
 8003116:	443b      	add	r3, r7
 8003118:	3b24      	subs	r3, #36	; 0x24
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3b01      	subs	r3, #1
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	4859      	ldr	r0, [pc, #356]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 800312a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	3348      	adds	r3, #72	; 0x48
 8003136:	443b      	add	r3, r7
 8003138:	3b24      	subs	r3, #36	; 0x24
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4403      	add	r3, r0
 800314a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	3348      	adds	r3, #72	; 0x48
 800315e:	443b      	add	r3, r7
 8003160:	3b34      	subs	r3, #52	; 0x34
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4299      	cmp	r1, r3
 8003166:	d038      	beq.n	80031da <HAL_OSPIM_Config+0x2fe>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	3348      	adds	r3, #72	; 0x48
 800317a:	443b      	add	r3, r7
 800317c:	3b30      	subs	r3, #48	; 0x30
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4299      	cmp	r1, r3
 8003182:	d02a      	beq.n	80031da <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	6899      	ldr	r1, [r3, #8]
 8003188:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	3348      	adds	r3, #72	; 0x48
 8003196:	443b      	add	r3, r7
 8003198:	3b2c      	subs	r3, #44	; 0x2c
 800319a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800319c:	4299      	cmp	r1, r3
 800319e:	d01c      	beq.n	80031da <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	68d9      	ldr	r1, [r3, #12]
 80031a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	3348      	adds	r3, #72	; 0x48
 80031b2:	443b      	add	r3, r7
 80031b4:	3b28      	subs	r3, #40	; 0x28
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4299      	cmp	r1, r3
 80031ba:	d00e      	beq.n	80031da <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6919      	ldr	r1, [r3, #16]
 80031c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	3348      	adds	r3, #72	; 0x48
 80031ce:	443b      	add	r3, r7
 80031d0:	3b24      	subs	r3, #36	; 0x24
 80031d2:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80031d4:	4299      	cmp	r1, r3
 80031d6:	f040 80d3 	bne.w	8003380 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80031da:	492d      	ldr	r1, [pc, #180]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 80031dc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	3348      	adds	r3, #72	; 0x48
 80031ea:	443b      	add	r3, r7
 80031ec:	3b34      	subs	r3, #52	; 0x34
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	4825      	ldr	r0, [pc, #148]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 80031fa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	3348      	adds	r3, #72	; 0x48
 8003208:	443b      	add	r3, r7
 800320a:	3b34      	subs	r3, #52	; 0x34
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3b01      	subs	r3, #1
 8003210:	f021 0201 	bic.w	r2, r1, #1
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4403      	add	r3, r0
 8003218:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800321a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	3348      	adds	r3, #72	; 0x48
 8003228:	443b      	add	r3, r7
 800322a:	3b30      	subs	r3, #48	; 0x30
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01f      	beq.n	8003272 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003232:	4917      	ldr	r1, [pc, #92]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 8003234:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	3348      	adds	r3, #72	; 0x48
 8003242:	443b      	add	r3, r7
 8003244:	3b30      	subs	r3, #48	; 0x30
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3b01      	subs	r3, #1
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	480f      	ldr	r0, [pc, #60]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 8003252:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	3348      	adds	r3, #72	; 0x48
 8003260:	443b      	add	r3, r7
 8003262:	3b30      	subs	r3, #48	; 0x30
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3b01      	subs	r3, #1
 8003268:	f021 0210 	bic.w	r2, r1, #16
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4403      	add	r3, r0
 8003270:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003272:	4907      	ldr	r1, [pc, #28]	; (8003290 <HAL_OSPIM_Config+0x3b4>)
 8003274:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	3348      	adds	r3, #72	; 0x48
 8003282:	443b      	add	r3, r7
 8003284:	3b2c      	subs	r3, #44	; 0x2c
 8003286:	e005      	b.n	8003294 <HAL_OSPIM_Config+0x3b8>
 8003288:	a0001000 	.word	0xa0001000
 800328c:	a0001400 	.word	0xa0001400
 8003290:	50061c00 	.word	0x50061c00
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3b01      	subs	r3, #1
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	6859      	ldr	r1, [r3, #4]
 800329e:	48a6      	ldr	r0, [pc, #664]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 80032a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	3348      	adds	r3, #72	; 0x48
 80032ae:	443b      	add	r3, r7
 80032b0:	3b2c      	subs	r3, #44	; 0x2c
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4403      	add	r3, r0
 80032be:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80032c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	3348      	adds	r3, #72	; 0x48
 80032ce:	443b      	add	r3, r7
 80032d0:	3b28      	subs	r3, #40	; 0x28
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d023      	beq.n	8003320 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80032d8:	4997      	ldr	r1, [pc, #604]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 80032da:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	3348      	adds	r3, #72	; 0x48
 80032e8:	443b      	add	r3, r7
 80032ea:	3b28      	subs	r3, #40	; 0x28
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	488f      	ldr	r0, [pc, #572]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 80032fc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	3348      	adds	r3, #72	; 0x48
 800330a:	443b      	add	r3, r7
 800330c:	3b28      	subs	r3, #40	; 0x28
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3b01      	subs	r3, #1
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4403      	add	r3, r0
 800331e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003320:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	3348      	adds	r3, #72	; 0x48
 800332e:	443b      	add	r3, r7
 8003330:	3b24      	subs	r3, #36	; 0x24
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d023      	beq.n	8003380 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003338:	497f      	ldr	r1, [pc, #508]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 800333a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	3348      	adds	r3, #72	; 0x48
 8003348:	443b      	add	r3, r7
 800334a:	3b24      	subs	r3, #36	; 0x24
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3b01      	subs	r3, #1
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	4877      	ldr	r0, [pc, #476]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 800335c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	3348      	adds	r3, #72	; 0x48
 800336a:	443b      	add	r3, r7
 800336c:	3b24      	subs	r3, #36	; 0x24
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3b01      	subs	r3, #1
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4403      	add	r3, r0
 800337e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003380:	4a6d      	ldr	r2, [pc, #436]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	3b01      	subs	r3, #1
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003394:	025b      	lsls	r3, r3, #9
 8003396:	431a      	orrs	r2, r3
 8003398:	4967      	ldr	r1, [pc, #412]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	3b01      	subs	r3, #1
 80033a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80033aa:	4a63      	ldr	r2, [pc, #396]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f023 0203 	bic.w	r2, r3, #3
 80033bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	431a      	orrs	r2, r3
 80033c2:	495d      	ldr	r1, [pc, #372]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d014      	beq.n	8003406 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80033dc:	4a56      	ldr	r2, [pc, #344]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f0:	015b      	lsls	r3, r3, #5
 80033f2:	431a      	orrs	r2, r3
 80033f4:	4950      	ldr	r1, [pc, #320]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	f042 0210 	orr.w	r2, r2, #16
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d019      	beq.n	8003446 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003412:	4a49      	ldr	r2, [pc, #292]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	3b01      	subs	r3, #1
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800342a:	049b      	lsls	r3, r3, #18
 800342c:	431a      	orrs	r2, r3
 800342e:	4942      	ldr	r1, [pc, #264]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	3b01      	subs	r3, #1
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	e01c      	b.n	8003480 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d018      	beq.n	8003480 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800344e:	4a3a      	ldr	r2, [pc, #232]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	3b01      	subs	r3, #1
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003466:	069b      	lsls	r3, r3, #26
 8003468:	431a      	orrs	r2, r3
 800346a:	4933      	ldr	r1, [pc, #204]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	3b01      	subs	r3, #1
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d019      	beq.n	80034c0 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800348c:	4a2a      	ldr	r2, [pc, #168]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	3b01      	subs	r3, #1
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80034a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a4:	049b      	lsls	r3, r3, #18
 80034a6:	431a      	orrs	r2, r3
 80034a8:	4923      	ldr	r1, [pc, #140]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	e01c      	b.n	80034fa <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d018      	beq.n	80034fa <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80034c8:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80034de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e0:	069b      	lsls	r3, r3, #26
 80034e2:	431a      	orrs	r2, r3
 80034e4:	4914      	ldr	r1, [pc, #80]	; (8003538 <HAL_OSPIM_Config+0x65c>)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80034fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003506:	4b0d      	ldr	r3, [pc, #52]	; (800353c <HAL_OSPIM_Config+0x660>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a0c      	ldr	r2, [pc, #48]	; (800353c <HAL_OSPIM_Config+0x660>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003512:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_OSPIM_Config+0x664>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <HAL_OSPIM_Config+0x664>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800352a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800352e:	4618      	mov	r0, r3
 8003530:	3748      	adds	r7, #72	; 0x48
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	50061c00 	.word	0x50061c00
 800353c:	a0001000 	.word	0xa0001000
 8003540:	a0001400 	.word	0xa0001400

08003544 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003554:	e01a      	b.n	800358c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d016      	beq.n	800358c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fd f865 	bl	800062c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800357a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e00e      	b.n	80035aa <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a1a      	ldr	r2, [r3, #32]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d1d6      	bne.n	8003556 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	; 0x24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035d0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d114      	bne.n	8003622 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003600:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800360a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003614:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	e013      	b.n	800364a <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800362a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003634:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800363e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003648:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003652:	431a      	orrs	r2, r3
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d012      	beq.n	8003686 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003678:	4319      	orrs	r1, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	430b      	orrs	r3, r1
 8003680:	431a      	orrs	r2, r3
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 021f 	bic.w	r2, r3, #31
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	431a      	orrs	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3a01      	subs	r2, #1
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 8099 	beq.w	80037f0 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d055      	beq.n	8003772 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01e      	beq.n	800370c <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4b68      	ldr	r3, [pc, #416]	; (8003874 <OSPI_ConfigCmd+0x2c0>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	68d1      	ldr	r1, [r2, #12]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	6952      	ldr	r2, [r2, #20]
 80036de:	4311      	orrs	r1, r2
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	6912      	ldr	r2, [r2, #16]
 80036e4:	4311      	orrs	r1, r2
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	69d2      	ldr	r2, [r2, #28]
 80036ea:	4311      	orrs	r1, r2
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036f0:	4311      	orrs	r1, r2
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	6a12      	ldr	r2, [r2, #32]
 80036f6:	4311      	orrs	r1, r2
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036fc:	4311      	orrs	r1, r2
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003702:	430a      	orrs	r2, r1
 8003704:	431a      	orrs	r2, r3
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	e028      	b.n	800375e <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003714:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	68d1      	ldr	r1, [r2, #12]
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	6952      	ldr	r2, [r2, #20]
 8003720:	4311      	orrs	r1, r2
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	6912      	ldr	r2, [r2, #16]
 8003726:	4311      	orrs	r1, r2
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	69d2      	ldr	r2, [r2, #28]
 800372c:	4311      	orrs	r1, r2
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003732:	4311      	orrs	r1, r2
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	6a12      	ldr	r2, [r2, #32]
 8003738:	430a      	orrs	r2, r1
 800373a:	431a      	orrs	r2, r3
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003748:	d109      	bne.n	800375e <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800374e:	2b08      	cmp	r3, #8
 8003750:	d105      	bne.n	800375e <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	6992      	ldr	r2, [r2, #24]
 800376e:	649a      	str	r2, [r3, #72]	; 0x48
 8003770:	e078      	b.n	8003864 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	2b00      	cmp	r3, #0
 8003778:	d017      	beq.n	80037aa <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003782:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	68d1      	ldr	r1, [r2, #12]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	6952      	ldr	r2, [r2, #20]
 800378e:	4311      	orrs	r1, r2
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	6912      	ldr	r2, [r2, #16]
 8003794:	4311      	orrs	r1, r2
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800379a:	4311      	orrs	r1, r2
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037a0:	430a      	orrs	r2, r1
 80037a2:	431a      	orrs	r2, r3
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	e01d      	b.n	80037e6 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68d9      	ldr	r1, [r3, #12]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	4319      	orrs	r1, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	431a      	orrs	r2, r3
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037d0:	d109      	bne.n	80037e6 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d105      	bne.n	80037e6 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e039      	b.n	8003864 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d030      	beq.n	800385a <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d017      	beq.n	8003830 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003808:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	69d1      	ldr	r1, [r2, #28]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003814:	4311      	orrs	r1, r2
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	6a12      	ldr	r2, [r2, #32]
 800381a:	4311      	orrs	r1, r2
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003820:	4311      	orrs	r1, r2
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003826:	430a      	orrs	r2, r1
 8003828:	431a      	orrs	r2, r3
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e00e      	b.n	800384e <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	69d9      	ldr	r1, [r3, #28]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	4319      	orrs	r1, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	430b      	orrs	r3, r1
 8003848:	431a      	orrs	r2, r3
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	6992      	ldr	r2, [r2, #24]
 8003856:	649a      	str	r2, [r3, #72]	; 0x48
 8003858:	e004      	b.n	8003864 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2208      	movs	r2, #8
 8003862:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003864:	7ffb      	ldrb	r3, [r7, #31]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	f0ffc0c0 	.word	0xf0ffc0c0

08003878 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <OSPIM_GetConfig+0x26>
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d802      	bhi.n	800389e <OSPIM_GetConfig+0x26>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
 80038a2:	e08e      	b.n	80039c2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2200      	movs	r2, #0
 80038ae:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2200      	movs	r2, #0
 80038ba:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2200      	movs	r2, #0
 80038c0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d101      	bne.n	80038cc <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80038c8:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <OSPIM_GetConfig+0x158>)
 80038ca:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e074      	b.n	80039bc <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80038d2:	4a40      	ldr	r2, [pc, #256]	; (80039d4 <OSPIM_GetConfig+0x15c>)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4053      	eors	r3, r2
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d103      	bne.n	80038fe <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4053      	eors	r3, r2
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4053      	eors	r3, r2
 800392e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d018      	beq.n	800397a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4053      	eors	r3, r2
 800394e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d111      	bne.n	800397a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d106      	bne.n	800396e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3301      	adds	r3, #1
 8003964:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	60da      	str	r2, [r3, #12]
 800396c:	e005      	b.n	800397a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	3301      	adds	r3, #1
 8003972:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d018      	beq.n	80039b6 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4053      	eors	r3, r2
 800398a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d111      	bne.n	80039b6 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d106      	bne.n	80039aa <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3301      	adds	r3, #1
 80039a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	611a      	str	r2, [r3, #16]
 80039a8:	e005      	b.n	80039b6 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3301      	adds	r3, #1
 80039ae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3301      	adds	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d987      	bls.n	80038d2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	04040222 	.word	0x04040222
 80039d4:	50061c00 	.word	0x50061c00

080039d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039dc:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <HAL_PWREx_GetVoltageRange+0x3c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e8:	d102      	bne.n	80039f0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80039ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ee:	e00b      	b.n	8003a08 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80039f0:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <HAL_PWREx_GetVoltageRange+0x3c>)
 80039f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fe:	d102      	bne.n	8003a06 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a04:	e000      	b.n	8003a08 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003a06:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40007000 	.word	0x40007000

08003a18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d141      	bne.n	8003aaa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a26:	4b4b      	ldr	r3, [pc, #300]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a32:	d131      	bne.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a34:	4b47      	ldr	r3, [pc, #284]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a3a:	4a46      	ldr	r2, [pc, #280]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a44:	4b43      	ldr	r3, [pc, #268]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a4c:	4a41      	ldr	r2, [pc, #260]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003a54:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2232      	movs	r2, #50	; 0x32
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	4a3f      	ldr	r2, [pc, #252]	; (8003b5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	0c9b      	lsrs	r3, r3, #18
 8003a66:	3301      	adds	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a6a:	e002      	b.n	8003a72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a72:	4b38      	ldr	r3, [pc, #224]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7e:	d102      	bne.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f2      	bne.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a86:	4b33      	ldr	r3, [pc, #204]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a92:	d158      	bne.n	8003b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e057      	b.n	8003b48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a98:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a9e:	4a2d      	ldr	r2, [pc, #180]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003aa8:	e04d      	b.n	8003b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab0:	d141      	bne.n	8003b36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ab2:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003abe:	d131      	bne.n	8003b24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ac0:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ac6:	4a23      	ldr	r2, [pc, #140]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003acc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ad0:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad8:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ade:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2232      	movs	r2, #50	; 0x32
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	0c9b      	lsrs	r3, r3, #18
 8003af2:	3301      	adds	r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af6:	e002      	b.n	8003afe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003afe:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0a:	d102      	bne.n	8003b12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f2      	bne.n	8003af8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b12:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1e:	d112      	bne.n	8003b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e011      	b.n	8003b48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b34:	e007      	b.n	8003b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b36:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b3e:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b44:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	40007000 	.word	0x40007000
 8003b58:	200000a8 	.word	0x200000a8
 8003b5c:	431bde83 	.word	0x431bde83

08003b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f000 bc08 	b.w	8004384 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b74:	4b96      	ldr	r3, [pc, #600]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b7e:	4b94      	ldr	r3, [pc, #592]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80e4 	beq.w	8003d5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <HAL_RCC_OscConfig+0x4c>
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b0c      	cmp	r3, #12
 8003ba0:	f040 808b 	bne.w	8003cba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	f040 8087 	bne.w	8003cba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bac:	4b88      	ldr	r3, [pc, #544]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x64>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e3df      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	4b81      	ldr	r3, [pc, #516]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_RCC_OscConfig+0x7e>
 8003bd4:	4b7e      	ldr	r3, [pc, #504]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bdc:	e005      	b.n	8003bea <HAL_RCC_OscConfig+0x8a>
 8003bde:	4b7c      	ldr	r3, [pc, #496]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d223      	bcs.n	8003c36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fdfe 	bl	80047f4 <RCC_SetFlashLatencyFromMSIRange>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e3c0      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c02:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a72      	ldr	r2, [pc, #456]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c08:	f043 0308 	orr.w	r3, r3, #8
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b70      	ldr	r3, [pc, #448]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	496d      	ldr	r1, [pc, #436]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c20:	4b6b      	ldr	r3, [pc, #428]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	4968      	ldr	r1, [pc, #416]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	604b      	str	r3, [r1, #4]
 8003c34:	e025      	b.n	8003c82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c36:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a65      	ldr	r2, [pc, #404]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c3c:	f043 0308 	orr.w	r3, r3, #8
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b63      	ldr	r3, [pc, #396]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4960      	ldr	r1, [pc, #384]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c54:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	495b      	ldr	r1, [pc, #364]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fdbe 	bl	80047f4 <RCC_SetFlashLatencyFromMSIRange>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e380      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c82:	f000 fcc1 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8003c86:	4602      	mov	r2, r0
 8003c88:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	4950      	ldr	r1, [pc, #320]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003c94:	5ccb      	ldrb	r3, [r1, r3]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	4a4e      	ldr	r2, [pc, #312]	; (8003dd8 <HAL_RCC_OscConfig+0x278>)
 8003ca0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ca2:	4b4e      	ldr	r3, [pc, #312]	; (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f006 f994 	bl	8009fd4 <HAL_InitTick>
 8003cac:	4603      	mov	r3, r0
 8003cae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d052      	beq.n	8003d5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	e364      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d032      	beq.n	8003d28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cc2:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a42      	ldr	r2, [pc, #264]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cce:	f7fc fcad 	bl	800062c <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cd6:	f7fc fca9 	bl	800062c <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e34d      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cf4:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a35      	ldr	r2, [pc, #212]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	f043 0308 	orr.w	r3, r3, #8
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	4930      	ldr	r1, [pc, #192]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d12:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	492b      	ldr	r1, [pc, #172]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	604b      	str	r3, [r1, #4]
 8003d26:	e01a      	b.n	8003d5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d28:	4b29      	ldr	r3, [pc, #164]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a28      	ldr	r2, [pc, #160]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d34:	f7fc fc7a 	bl	800062c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d3c:	f7fc fc76 	bl	800062c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e31a      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x1dc>
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d073      	beq.n	8003e52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_OscConfig+0x21c>
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	d10e      	bne.n	8003d94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d10b      	bne.n	8003d94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d063      	beq.n	8003e50 <HAL_RCC_OscConfig+0x2f0>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d15f      	bne.n	8003e50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e2f7      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9c:	d106      	bne.n	8003dac <HAL_RCC_OscConfig+0x24c>
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a0b      	ldr	r2, [pc, #44]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e025      	b.n	8003df8 <HAL_RCC_OscConfig+0x298>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db4:	d114      	bne.n	8003de0 <HAL_RCC_OscConfig+0x280>
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a02      	ldr	r2, [pc, #8]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e013      	b.n	8003df8 <HAL_RCC_OscConfig+0x298>
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	0800fa04 	.word	0x0800fa04
 8003dd8:	200000a8 	.word	0x200000a8
 8003ddc:	20000000 	.word	0x20000000
 8003de0:	4ba0      	ldr	r3, [pc, #640]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a9f      	ldr	r2, [pc, #636]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4b9d      	ldr	r3, [pc, #628]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a9c      	ldr	r2, [pc, #624]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d013      	beq.n	8003e28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fc fc14 	bl	800062c <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e08:	f7fc fc10 	bl	800062c <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	; 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e2b4      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e1a:	4b92      	ldr	r3, [pc, #584]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x2a8>
 8003e26:	e014      	b.n	8003e52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fc fc00 	bl	800062c <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fc fbfc 	bl	800062c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e2a0      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x2d0>
 8003e4e:	e000      	b.n	8003e52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d060      	beq.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_OscConfig+0x310>
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d119      	bne.n	8003e9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d116      	bne.n	8003e9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e70:	4b7c      	ldr	r3, [pc, #496]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_OscConfig+0x328>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e27d      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e88:	4b76      	ldr	r3, [pc, #472]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	4973      	ldr	r1, [pc, #460]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e9c:	e040      	b.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d023      	beq.n	8003eee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea6:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a6e      	ldr	r2, [pc, #440]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fc fbbb 	bl	800062c <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eba:	f7fc fbb7 	bl	800062c <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e25b      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ecc:	4b65      	ldr	r3, [pc, #404]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b62      	ldr	r3, [pc, #392]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	495f      	ldr	r1, [pc, #380]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
 8003eec:	e018      	b.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eee:	4b5d      	ldr	r3, [pc, #372]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a5c      	ldr	r2, [pc, #368]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efa:	f7fc fb97 	bl	800062c <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f02:	f7fc fb93 	bl	800062c <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e237      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f14:	4b53      	ldr	r3, [pc, #332]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f0      	bne.n	8003f02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d03c      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01c      	beq.n	8003f6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f34:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f3a:	4a4a      	ldr	r2, [pc, #296]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f44:	f7fc fb72 	bl	800062c <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4c:	f7fc fb6e 	bl	800062c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e212      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f5e:	4b41      	ldr	r3, [pc, #260]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0ef      	beq.n	8003f4c <HAL_RCC_OscConfig+0x3ec>
 8003f6c:	e01b      	b.n	8003fa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f6e:	4b3d      	ldr	r3, [pc, #244]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f74:	4a3b      	ldr	r2, [pc, #236]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7e:	f7fc fb55 	bl	800062c <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f86:	f7fc fb51 	bl	800062c <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e1f5      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f98:	4b32      	ldr	r3, [pc, #200]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1ef      	bne.n	8003f86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80a6 	beq.w	8004100 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fb8:	4b2a      	ldr	r3, [pc, #168]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc4:	4b27      	ldr	r3, [pc, #156]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc8:	4a26      	ldr	r2, [pc, #152]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fce:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_RCC_OscConfig+0x508>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d118      	bne.n	800401e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fec:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <HAL_RCC_OscConfig+0x508>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <HAL_RCC_OscConfig+0x508>)
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff8:	f7fc fb18 	bl	800062c <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004000:	f7fc fb14 	bl	800062c <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e1b8      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004012:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_RCC_OscConfig+0x508>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d108      	bne.n	8004038 <HAL_RCC_OscConfig+0x4d8>
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	4a0d      	ldr	r2, [pc, #52]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004036:	e029      	b.n	800408c <HAL_RCC_OscConfig+0x52c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b05      	cmp	r3, #5
 800403e:	d115      	bne.n	800406c <HAL_RCC_OscConfig+0x50c>
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004046:	4a07      	ldr	r2, [pc, #28]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8004048:	f043 0304 	orr.w	r3, r3, #4
 800404c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	4a03      	ldr	r2, [pc, #12]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004060:	e014      	b.n	800408c <HAL_RCC_OscConfig+0x52c>
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	40007000 	.word	0x40007000
 800406c:	4b9d      	ldr	r3, [pc, #628]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	4a9c      	ldr	r2, [pc, #624]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800407c:	4b99      	ldr	r3, [pc, #612]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	4a98      	ldr	r2, [pc, #608]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 8004084:	f023 0304 	bic.w	r3, r3, #4
 8004088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d016      	beq.n	80040c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fc faca 	bl	800062c <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fc fac6 	bl	800062c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e168      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b2:	4b8c      	ldr	r3, [pc, #560]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0ed      	beq.n	800409c <HAL_RCC_OscConfig+0x53c>
 80040c0:	e015      	b.n	80040ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c2:	f7fc fab3 	bl	800062c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040c8:	e00a      	b.n	80040e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7fc faaf 	bl	800062c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d8:	4293      	cmp	r3, r2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e151      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040e0:	4b80      	ldr	r3, [pc, #512]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1ed      	bne.n	80040ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ee:	7ffb      	ldrb	r3, [r7, #31]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d105      	bne.n	8004100 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f4:	4b7b      	ldr	r3, [pc, #492]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	4a7a      	ldr	r2, [pc, #488]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 80040fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d03c      	beq.n	8004186 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01c      	beq.n	800414e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004114:	4b73      	ldr	r3, [pc, #460]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 8004116:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800411a:	4a72      	ldr	r2, [pc, #456]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004124:	f7fc fa82 	bl	800062c <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800412c:	f7fc fa7e 	bl	800062c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e122      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800413e:	4b69      	ldr	r3, [pc, #420]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 8004140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ef      	beq.n	800412c <HAL_RCC_OscConfig+0x5cc>
 800414c:	e01b      	b.n	8004186 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800414e:	4b65      	ldr	r3, [pc, #404]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 8004150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004154:	4a63      	ldr	r2, [pc, #396]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415e:	f7fc fa65 	bl	800062c <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004166:	f7fc fa61 	bl	800062c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e105      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004178:	4b5a      	ldr	r3, [pc, #360]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 800417a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ef      	bne.n	8004166 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 80f9 	beq.w	8004382 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	2b02      	cmp	r3, #2
 8004196:	f040 80cf 	bne.w	8004338 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800419a:	4b52      	ldr	r3, [pc, #328]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f003 0203 	and.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d12c      	bne.n	8004208 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	3b01      	subs	r3, #1
 80041ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d123      	bne.n	8004208 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d11b      	bne.n	8004208 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d113      	bne.n	8004208 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	3b01      	subs	r3, #1
 80041ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d109      	bne.n	8004208 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	3b01      	subs	r3, #1
 8004202:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d071      	beq.n	80042ec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d068      	beq.n	80042e0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800420e:	4b35      	ldr	r3, [pc, #212]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800421a:	4b32      	ldr	r3, [pc, #200]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0ac      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800422a:	4b2e      	ldr	r3, [pc, #184]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2d      	ldr	r2, [pc, #180]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 8004230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004234:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004236:	f7fc f9f9 	bl	800062c <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423e:	f7fc f9f5 	bl	800062c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e099      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f0      	bne.n	800423e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800425c:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <HAL_RCC_OscConfig+0x788>)
 8004262:	4013      	ands	r3, r2
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800426c:	3a01      	subs	r2, #1
 800426e:	0112      	lsls	r2, r2, #4
 8004270:	4311      	orrs	r1, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004276:	0212      	lsls	r2, r2, #8
 8004278:	4311      	orrs	r1, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800427e:	0852      	lsrs	r2, r2, #1
 8004280:	3a01      	subs	r2, #1
 8004282:	0552      	lsls	r2, r2, #21
 8004284:	4311      	orrs	r1, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800428a:	0852      	lsrs	r2, r2, #1
 800428c:	3a01      	subs	r2, #1
 800428e:	0652      	lsls	r2, r2, #25
 8004290:	4311      	orrs	r1, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004296:	06d2      	lsls	r2, r2, #27
 8004298:	430a      	orrs	r2, r1
 800429a:	4912      	ldr	r1, [pc, #72]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 800429c:	4313      	orrs	r3, r2
 800429e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042a0:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 80042a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 80042b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042b8:	f7fc f9b8 	bl	800062c <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c0:	f7fc f9b4 	bl	800062c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e058      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042d2:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042de:	e050      	b.n	8004382 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e04f      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
 80042e4:	40021000 	.word	0x40021000
 80042e8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ec:	4b27      	ldr	r3, [pc, #156]	; (800438c <HAL_RCC_OscConfig+0x82c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d144      	bne.n	8004382 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042f8:	4b24      	ldr	r3, [pc, #144]	; (800438c <HAL_RCC_OscConfig+0x82c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a23      	ldr	r2, [pc, #140]	; (800438c <HAL_RCC_OscConfig+0x82c>)
 80042fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004302:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004304:	4b21      	ldr	r3, [pc, #132]	; (800438c <HAL_RCC_OscConfig+0x82c>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4a20      	ldr	r2, [pc, #128]	; (800438c <HAL_RCC_OscConfig+0x82c>)
 800430a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800430e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004310:	f7fc f98c 	bl	800062c <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004318:	f7fc f988 	bl	800062c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e02c      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <HAL_RCC_OscConfig+0x82c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x7b8>
 8004336:	e024      	b.n	8004382 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b0c      	cmp	r3, #12
 800433c:	d01f      	beq.n	800437e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <HAL_RCC_OscConfig+0x82c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a12      	ldr	r2, [pc, #72]	; (800438c <HAL_RCC_OscConfig+0x82c>)
 8004344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fc f96f 	bl	800062c <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004352:	f7fc f96b 	bl	800062c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e00f      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004364:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_RCC_OscConfig+0x82c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f0      	bne.n	8004352 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_RCC_OscConfig+0x82c>)
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	4905      	ldr	r1, [pc, #20]	; (800438c <HAL_RCC_OscConfig+0x82c>)
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_RCC_OscConfig+0x830>)
 8004378:	4013      	ands	r3, r2
 800437a:	60cb      	str	r3, [r1, #12]
 800437c:	e001      	b.n	8004382 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40021000 	.word	0x40021000
 8004390:	feeefffc 	.word	0xfeeefffc

08004394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e11d      	b.n	80045e8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043ac:	4b90      	ldr	r3, [pc, #576]	; (80045f0 <HAL_RCC_ClockConfig+0x25c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d910      	bls.n	80043dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ba:	4b8d      	ldr	r3, [pc, #564]	; (80045f0 <HAL_RCC_ClockConfig+0x25c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 020f 	bic.w	r2, r3, #15
 80043c2:	498b      	ldr	r1, [pc, #556]	; (80045f0 <HAL_RCC_ClockConfig+0x25c>)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ca:	4b89      	ldr	r3, [pc, #548]	; (80045f0 <HAL_RCC_ClockConfig+0x25c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e105      	b.n	80045e8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	4b81      	ldr	r3, [pc, #516]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d908      	bls.n	800440a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f8:	4b7e      	ldr	r3, [pc, #504]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	497b      	ldr	r1, [pc, #492]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d079      	beq.n	800450a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b03      	cmp	r3, #3
 800441c:	d11e      	bne.n	800445c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441e:	4b75      	ldr	r3, [pc, #468]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e0dc      	b.n	80045e8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800442e:	f000 fa3b 	bl	80048a8 <RCC_GetSysClockFreqFromPLLSource>
 8004432:	4603      	mov	r3, r0
 8004434:	4a70      	ldr	r2, [pc, #448]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d946      	bls.n	80044c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800443a:	4b6e      	ldr	r3, [pc, #440]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d140      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004446:	4b6b      	ldr	r3, [pc, #428]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800444e:	4a69      	ldr	r2, [pc, #420]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004454:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	e035      	b.n	80044c8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d107      	bne.n	8004474 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004464:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d115      	bne.n	800449c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0b9      	b.n	80045e8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800447c:	4b5d      	ldr	r3, [pc, #372]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d109      	bne.n	800449c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0ad      	b.n	80045e8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800448c:	4b59      	ldr	r3, [pc, #356]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0a5      	b.n	80045e8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800449c:	f000 f8b4 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4a55      	ldr	r2, [pc, #340]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d90f      	bls.n	80044c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044a8:	4b52      	ldr	r3, [pc, #328]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044b4:	4b4f      	ldr	r3, [pc, #316]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044bc:	4a4d      	ldr	r2, [pc, #308]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80044be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044c8:	4b4a      	ldr	r3, [pc, #296]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f023 0203 	bic.w	r2, r3, #3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4947      	ldr	r1, [pc, #284]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044da:	f7fc f8a7 	bl	800062c <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e0:	e00a      	b.n	80044f8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e2:	f7fc f8a3 	bl	800062c <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e077      	b.n	80045e8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f8:	4b3e      	ldr	r3, [pc, #248]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 020c 	and.w	r2, r3, #12
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	429a      	cmp	r2, r3
 8004508:	d1eb      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d105      	bne.n	800451c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004510:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a37      	ldr	r2, [pc, #220]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800451a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d010      	beq.n	800454a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	4b31      	ldr	r3, [pc, #196]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004534:	429a      	cmp	r2, r3
 8004536:	d208      	bcs.n	800454a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004538:	4b2e      	ldr	r3, [pc, #184]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	492b      	ldr	r1, [pc, #172]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800454a:	4b29      	ldr	r3, [pc, #164]	; (80045f0 <HAL_RCC_ClockConfig+0x25c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d210      	bcs.n	800457a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004558:	4b25      	ldr	r3, [pc, #148]	; (80045f0 <HAL_RCC_ClockConfig+0x25c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f023 020f 	bic.w	r2, r3, #15
 8004560:	4923      	ldr	r1, [pc, #140]	; (80045f0 <HAL_RCC_ClockConfig+0x25c>)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	4313      	orrs	r3, r2
 8004566:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004568:	4b21      	ldr	r3, [pc, #132]	; (80045f0 <HAL_RCC_ClockConfig+0x25c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e036      	b.n	80045e8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	4918      	ldr	r1, [pc, #96]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004594:	4313      	orrs	r3, r2
 8004596:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d009      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045a4:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4910      	ldr	r1, [pc, #64]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045b8:	f000 f826 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	091b      	lsrs	r3, r3, #4
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	490c      	ldr	r1, [pc, #48]	; (80045fc <HAL_RCC_ClockConfig+0x268>)
 80045ca:	5ccb      	ldrb	r3, [r1, r3]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	fa22 f303 	lsr.w	r3, r2, r3
 80045d4:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <HAL_RCC_ClockConfig+0x26c>)
 80045d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <HAL_RCC_ClockConfig+0x270>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f005 fcf9 	bl	8009fd4 <HAL_InitTick>
 80045e2:	4603      	mov	r3, r0
 80045e4:	73fb      	strb	r3, [r7, #15]

  return status;
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40022000 	.word	0x40022000
 80045f4:	40021000 	.word	0x40021000
 80045f8:	04c4b400 	.word	0x04c4b400
 80045fc:	0800fa04 	.word	0x0800fa04
 8004600:	200000a8 	.word	0x200000a8
 8004604:	20000000 	.word	0x20000000

08004608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	2300      	movs	r3, #0
 8004614:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004616:	4b3e      	ldr	r3, [pc, #248]	; (8004710 <HAL_RCC_GetSysClockFreq+0x108>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004620:	4b3b      	ldr	r3, [pc, #236]	; (8004710 <HAL_RCC_GetSysClockFreq+0x108>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x34>
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b0c      	cmp	r3, #12
 8004634:	d121      	bne.n	800467a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d11e      	bne.n	800467a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800463c:	4b34      	ldr	r3, [pc, #208]	; (8004710 <HAL_RCC_GetSysClockFreq+0x108>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d107      	bne.n	8004658 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004648:	4b31      	ldr	r3, [pc, #196]	; (8004710 <HAL_RCC_GetSysClockFreq+0x108>)
 800464a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	e005      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004658:	4b2d      	ldr	r3, [pc, #180]	; (8004710 <HAL_RCC_GetSysClockFreq+0x108>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004664:	4a2b      	ldr	r2, [pc, #172]	; (8004714 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10d      	bne.n	8004690 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004678:	e00a      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b04      	cmp	r3, #4
 800467e:	d102      	bne.n	8004686 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004680:	4b25      	ldr	r3, [pc, #148]	; (8004718 <HAL_RCC_GetSysClockFreq+0x110>)
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	e004      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d101      	bne.n	8004690 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800468c:	4b23      	ldr	r3, [pc, #140]	; (800471c <HAL_RCC_GetSysClockFreq+0x114>)
 800468e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d134      	bne.n	8004700 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004696:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <HAL_RCC_GetSysClockFreq+0x108>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d003      	beq.n	80046ae <HAL_RCC_GetSysClockFreq+0xa6>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d003      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0xac>
 80046ac:	e005      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046ae:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <HAL_RCC_GetSysClockFreq+0x110>)
 80046b0:	617b      	str	r3, [r7, #20]
      break;
 80046b2:	e005      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046b4:	4b19      	ldr	r3, [pc, #100]	; (800471c <HAL_RCC_GetSysClockFreq+0x114>)
 80046b6:	617b      	str	r3, [r7, #20]
      break;
 80046b8:	e002      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	617b      	str	r3, [r7, #20]
      break;
 80046be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046c0:	4b13      	ldr	r3, [pc, #76]	; (8004710 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	3301      	adds	r3, #1
 80046cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046ce:	4b10      	ldr	r3, [pc, #64]	; (8004710 <HAL_RCC_GetSysClockFreq+0x108>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	fb03 f202 	mul.w	r2, r3, r2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046e6:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <HAL_RCC_GetSysClockFreq+0x108>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	0e5b      	lsrs	r3, r3, #25
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	3301      	adds	r3, #1
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004700:	69bb      	ldr	r3, [r7, #24]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3724      	adds	r7, #36	; 0x24
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	0800fa1c 	.word	0x0800fa1c
 8004718:	00f42400 	.word	0x00f42400
 800471c:	007a1200 	.word	0x007a1200

08004720 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004724:	4b03      	ldr	r3, [pc, #12]	; (8004734 <HAL_RCC_GetHCLKFreq+0x14>)
 8004726:	681b      	ldr	r3, [r3, #0]
}
 8004728:	4618      	mov	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	200000a8 	.word	0x200000a8

08004738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800473c:	f7ff fff0 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4904      	ldr	r1, [pc, #16]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x28>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	0800fa14 	.word	0x0800fa14

08004764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004768:	f7ff ffda 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 800476c:	4602      	mov	r2, r0
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	0adb      	lsrs	r3, r3, #11
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	4904      	ldr	r1, [pc, #16]	; (800478c <HAL_RCC_GetPCLK2Freq+0x28>)
 800477a:	5ccb      	ldrb	r3, [r1, r3]
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40021000 	.word	0x40021000
 800478c:	0800fa14 	.word	0x0800fa14

08004790 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	220f      	movs	r2, #15
 800479e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047a0:	4b12      	ldr	r3, [pc, #72]	; (80047ec <HAL_RCC_GetClockConfig+0x5c>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0203 	and.w	r2, r3, #3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80047ac:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <HAL_RCC_GetClockConfig+0x5c>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80047b8:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <HAL_RCC_GetClockConfig+0x5c>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCC_GetClockConfig+0x5c>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	08db      	lsrs	r3, r3, #3
 80047ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80047d2:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <HAL_RCC_GetClockConfig+0x60>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 020f 	and.w	r2, r3, #15
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	601a      	str	r2, [r3, #0]
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40022000 	.word	0x40022000

080047f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047fc:	2300      	movs	r3, #0
 80047fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004800:	4b27      	ldr	r3, [pc, #156]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800480c:	f7ff f8e4 	bl	80039d8 <HAL_PWREx_GetVoltageRange>
 8004810:	6178      	str	r0, [r7, #20]
 8004812:	e014      	b.n	800483e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004814:	4b22      	ldr	r3, [pc, #136]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800481a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481e:	6593      	str	r3, [r2, #88]	; 0x58
 8004820:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800482c:	f7ff f8d4 	bl	80039d8 <HAL_PWREx_GetVoltageRange>
 8004830:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004832:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	4a1a      	ldr	r2, [pc, #104]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004844:	d10b      	bne.n	800485e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b80      	cmp	r3, #128	; 0x80
 800484a:	d913      	bls.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2ba0      	cmp	r3, #160	; 0xa0
 8004850:	d902      	bls.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004852:	2302      	movs	r3, #2
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	e00d      	b.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004858:	2301      	movs	r3, #1
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	e00a      	b.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b7f      	cmp	r3, #127	; 0x7f
 8004862:	d902      	bls.n	800486a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004864:	2302      	movs	r3, #2
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	e004      	b.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b70      	cmp	r3, #112	; 0x70
 800486e:	d101      	bne.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004870:	2301      	movs	r3, #1
 8004872:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 020f 	bic.w	r2, r3, #15
 800487c:	4909      	ldr	r1, [pc, #36]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004884:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	429a      	cmp	r2, r3
 8004890:	d001      	beq.n	8004896 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40022000 	.word	0x40022000

080048a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ae:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d00b      	beq.n	80048d6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d825      	bhi.n	8004910 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d008      	beq.n	80048dc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d11f      	bne.n	8004910 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048d2:	613b      	str	r3, [r7, #16]
    break;
 80048d4:	e01f      	b.n	8004916 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80048d6:	4b25      	ldr	r3, [pc, #148]	; (800496c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80048d8:	613b      	str	r3, [r7, #16]
    break;
 80048da:	e01c      	b.n	8004916 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048dc:	4b21      	ldr	r3, [pc, #132]	; (8004964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d107      	bne.n	80048f8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048e8:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ee:	0a1b      	lsrs	r3, r3, #8
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e005      	b.n	8004904 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048f8:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004904:	4a1a      	ldr	r2, [pc, #104]	; (8004970 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490c:	613b      	str	r3, [r7, #16]
    break;
 800490e:	e002      	b.n	8004916 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	613b      	str	r3, [r7, #16]
    break;
 8004914:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	091b      	lsrs	r3, r3, #4
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	3301      	adds	r3, #1
 8004922:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	fb03 f202 	mul.w	r2, r3, r2
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	fbb2 f3f3 	udiv	r3, r2, r3
 800493a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800493c:	4b09      	ldr	r3, [pc, #36]	; (8004964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	0e5b      	lsrs	r3, r3, #25
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	3301      	adds	r3, #1
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004956:	683b      	ldr	r3, [r7, #0]
}
 8004958:	4618      	mov	r0, r3
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	40021000 	.word	0x40021000
 8004968:	00f42400 	.word	0x00f42400
 800496c:	007a1200 	.word	0x007a1200
 8004970:	0800fa1c 	.word	0x0800fa1c

08004974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800497c:	2300      	movs	r3, #0
 800497e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004980:	2300      	movs	r3, #0
 8004982:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498c:	2b00      	cmp	r3, #0
 800498e:	d040      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004994:	2b80      	cmp	r3, #128	; 0x80
 8004996:	d02a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004998:	2b80      	cmp	r3, #128	; 0x80
 800499a:	d825      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800499c:	2b60      	cmp	r3, #96	; 0x60
 800499e:	d026      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049a0:	2b60      	cmp	r3, #96	; 0x60
 80049a2:	d821      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d006      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d81d      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d009      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d010      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80049b4:	e018      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049b6:	4b89      	ldr	r3, [pc, #548]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	4a88      	ldr	r2, [pc, #544]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049c2:	e015      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fb02 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049d4:	e00c      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3320      	adds	r3, #32
 80049da:	2100      	movs	r1, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fbed 	bl	80051bc <RCCEx_PLLSAI2_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049e6:	e003      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	74fb      	strb	r3, [r7, #19]
      break;
 80049ec:	e000      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80049ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049f6:	4b79      	ldr	r3, [pc, #484]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049fc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a04:	4975      	ldr	r1, [pc, #468]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a0c:	e001      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d047      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a26:	d030      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2c:	d82a      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a32:	d02a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a38:	d824      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a44:	d81e      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4e:	d010      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a50:	e018      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a52:	4b62      	ldr	r3, [pc, #392]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	4a61      	ldr	r2, [pc, #388]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a5e:	e015      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3304      	adds	r3, #4
 8004a64:	2100      	movs	r1, #0
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fab4 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a70:	e00c      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3320      	adds	r3, #32
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fb9f 	bl	80051bc <RCCEx_PLLSAI2_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a82:	e003      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	74fb      	strb	r3, [r7, #19]
      break;
 8004a88:	e000      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a8c:	7cfb      	ldrb	r3, [r7, #19]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10b      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a92:	4b52      	ldr	r3, [pc, #328]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	494e      	ldr	r1, [pc, #312]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004aa8:	e001      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 809f 	beq.w	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004abc:	2300      	movs	r3, #0
 8004abe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ac0:	4b46      	ldr	r3, [pc, #280]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ada:	4a40      	ldr	r2, [pc, #256]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ae2:	4b3e      	ldr	r3, [pc, #248]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aee:	2301      	movs	r3, #1
 8004af0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004af2:	4b3b      	ldr	r3, [pc, #236]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a3a      	ldr	r2, [pc, #232]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004afe:	f7fb fd95 	bl	800062c <HAL_GetTick>
 8004b02:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b04:	e009      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b06:	f7fb fd91 	bl	800062c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d902      	bls.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	74fb      	strb	r3, [r7, #19]
        break;
 8004b18:	e005      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b1a:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0ef      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d15b      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b2c:	4b2b      	ldr	r3, [pc, #172]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b36:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01f      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d019      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b4a:	4b24      	ldr	r3, [pc, #144]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b56:	4b21      	ldr	r3, [pc, #132]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5c:	4a1f      	ldr	r2, [pc, #124]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b66:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b76:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d016      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fb fd50 	bl	800062c <HAL_GetTick>
 8004b8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b8e:	e00b      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b90:	f7fb fd4c 	bl	800062c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d902      	bls.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	74fb      	strb	r3, [r7, #19]
            break;
 8004ba6:	e006      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ec      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004bb6:	7cfb      	ldrb	r3, [r7, #19]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10c      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bbc:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bcc:	4903      	ldr	r1, [pc, #12]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bd4:	e008      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	74bb      	strb	r3, [r7, #18]
 8004bda:	e005      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be4:	7cfb      	ldrb	r3, [r7, #19]
 8004be6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004be8:	7c7b      	ldrb	r3, [r7, #17]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d105      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bee:	4ba0      	ldr	r3, [pc, #640]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf2:	4a9f      	ldr	r2, [pc, #636]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c06:	4b9a      	ldr	r3, [pc, #616]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f023 0203 	bic.w	r2, r3, #3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c14:	4996      	ldr	r1, [pc, #600]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c28:	4b91      	ldr	r3, [pc, #580]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 020c 	bic.w	r2, r3, #12
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	498e      	ldr	r1, [pc, #568]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c4a:	4b89      	ldr	r3, [pc, #548]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c58:	4985      	ldr	r1, [pc, #532]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c6c:	4b80      	ldr	r3, [pc, #512]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7a:	497d      	ldr	r1, [pc, #500]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c8e:	4b78      	ldr	r3, [pc, #480]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9c:	4974      	ldr	r1, [pc, #464]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cb0:	4b6f      	ldr	r3, [pc, #444]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbe:	496c      	ldr	r1, [pc, #432]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cd2:	4b67      	ldr	r3, [pc, #412]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ce0:	4963      	ldr	r1, [pc, #396]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cf4:	4b5e      	ldr	r3, [pc, #376]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d02:	495b      	ldr	r1, [pc, #364]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d16:	4b56      	ldr	r3, [pc, #344]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	4952      	ldr	r1, [pc, #328]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d38:	4b4d      	ldr	r3, [pc, #308]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d46:	494a      	ldr	r1, [pc, #296]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d5a:	4b45      	ldr	r3, [pc, #276]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	4941      	ldr	r1, [pc, #260]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d7c:	4b3c      	ldr	r3, [pc, #240]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d82:	f023 0203 	bic.w	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8a:	4939      	ldr	r1, [pc, #228]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d028      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d9e:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dac:	4930      	ldr	r1, [pc, #192]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dbc:	d106      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dbe:	4b2c      	ldr	r3, [pc, #176]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	4a2b      	ldr	r2, [pc, #172]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc8:	60d3      	str	r3, [r2, #12]
 8004dca:	e011      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dd4:	d10c      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	2101      	movs	r1, #1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 f8f9 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004dec:	7cfb      	ldrb	r3, [r7, #19]
 8004dee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d04d      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e04:	d108      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e06:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e0c:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e16:	e012      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e18:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e1e:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e24:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e28:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e36:	490e      	ldr	r1, [pc, #56]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e46:	d106      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e48:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4a08      	ldr	r2, [pc, #32]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e52:	60d3      	str	r3, [r2, #12]
 8004e54:	e020      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e5e:	d109      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4a02      	ldr	r2, [pc, #8]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6a:	60d3      	str	r3, [r2, #12]
 8004e6c:	e014      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e6e:	bf00      	nop
 8004e70:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e7c:	d10c      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3304      	adds	r3, #4
 8004e82:	2101      	movs	r1, #1
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 f8a5 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e8e:	7cfb      	ldrb	r3, [r7, #19]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004e94:	7cfb      	ldrb	r3, [r7, #19]
 8004e96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d028      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ea4:	4b4a      	ldr	r3, [pc, #296]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eb2:	4947      	ldr	r1, [pc, #284]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec4:	4b42      	ldr	r3, [pc, #264]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a41      	ldr	r2, [pc, #260]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ece:	60d3      	str	r3, [r2, #12]
 8004ed0:	e011      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eda:	d10c      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 f876 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004ef2:	7cfb      	ldrb	r3, [r7, #19]
 8004ef4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01e      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f02:	4b33      	ldr	r3, [pc, #204]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f12:	492f      	ldr	r1, [pc, #188]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	2102      	movs	r1, #2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 f851 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004f3c:	7cfb      	ldrb	r3, [r7, #19]
 8004f3e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00b      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f4c:	4b20      	ldr	r3, [pc, #128]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f52:	f023 0204 	bic.w	r2, r3, #4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f5c:	491c      	ldr	r1, [pc, #112]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00b      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f70:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f76:	f023 0218 	bic.w	r2, r3, #24
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f80:	4913      	ldr	r1, [pc, #76]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d017      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa4:	490a      	ldr	r1, [pc, #40]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fb6:	d105      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000

08004fd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fe2:	4b72      	ldr	r3, [pc, #456]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00e      	beq.n	800500c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fee:	4b6f      	ldr	r3, [pc, #444]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0203 	and.w	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d103      	bne.n	8005006 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
       ||
 8005002:	2b00      	cmp	r3, #0
 8005004:	d142      	bne.n	800508c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
 800500a:	e03f      	b.n	800508c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b03      	cmp	r3, #3
 8005012:	d018      	beq.n	8005046 <RCCEx_PLLSAI1_Config+0x72>
 8005014:	2b03      	cmp	r3, #3
 8005016:	d825      	bhi.n	8005064 <RCCEx_PLLSAI1_Config+0x90>
 8005018:	2b01      	cmp	r3, #1
 800501a:	d002      	beq.n	8005022 <RCCEx_PLLSAI1_Config+0x4e>
 800501c:	2b02      	cmp	r3, #2
 800501e:	d009      	beq.n	8005034 <RCCEx_PLLSAI1_Config+0x60>
 8005020:	e020      	b.n	8005064 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005022:	4b62      	ldr	r3, [pc, #392]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d11d      	bne.n	800506a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005032:	e01a      	b.n	800506a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005034:	4b5d      	ldr	r3, [pc, #372]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503c:	2b00      	cmp	r3, #0
 800503e:	d116      	bne.n	800506e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005044:	e013      	b.n	800506e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005046:	4b59      	ldr	r3, [pc, #356]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10f      	bne.n	8005072 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005052:	4b56      	ldr	r3, [pc, #344]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005062:	e006      	b.n	8005072 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
      break;
 8005068:	e004      	b.n	8005074 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800506a:	bf00      	nop
 800506c:	e002      	b.n	8005074 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800506e:	bf00      	nop
 8005070:	e000      	b.n	8005074 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005072:	bf00      	nop
    }

    if(status == HAL_OK)
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d108      	bne.n	800508c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800507a:	4b4c      	ldr	r3, [pc, #304]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f023 0203 	bic.w	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4949      	ldr	r1, [pc, #292]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005088:	4313      	orrs	r3, r2
 800508a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f040 8086 	bne.w	80051a0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005094:	4b45      	ldr	r3, [pc, #276]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a44      	ldr	r2, [pc, #272]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800509a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800509e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a0:	f7fb fac4 	bl	800062c <HAL_GetTick>
 80050a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050a6:	e009      	b.n	80050bc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050a8:	f7fb fac0 	bl	800062c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d902      	bls.n	80050bc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	73fb      	strb	r3, [r7, #15]
        break;
 80050ba:	e005      	b.n	80050c8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050bc:	4b3b      	ldr	r3, [pc, #236]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ef      	bne.n	80050a8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d168      	bne.n	80051a0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d113      	bne.n	80050fc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050d4:	4b35      	ldr	r3, [pc, #212]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	4b35      	ldr	r3, [pc, #212]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050da:	4013      	ands	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6892      	ldr	r2, [r2, #8]
 80050e0:	0211      	lsls	r1, r2, #8
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68d2      	ldr	r2, [r2, #12]
 80050e6:	06d2      	lsls	r2, r2, #27
 80050e8:	4311      	orrs	r1, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6852      	ldr	r2, [r2, #4]
 80050ee:	3a01      	subs	r2, #1
 80050f0:	0112      	lsls	r2, r2, #4
 80050f2:	430a      	orrs	r2, r1
 80050f4:	492d      	ldr	r1, [pc, #180]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	610b      	str	r3, [r1, #16]
 80050fa:	e02d      	b.n	8005158 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d115      	bne.n	800512e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005102:	4b2a      	ldr	r3, [pc, #168]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6892      	ldr	r2, [r2, #8]
 800510e:	0211      	lsls	r1, r2, #8
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6912      	ldr	r2, [r2, #16]
 8005114:	0852      	lsrs	r2, r2, #1
 8005116:	3a01      	subs	r2, #1
 8005118:	0552      	lsls	r2, r2, #21
 800511a:	4311      	orrs	r1, r2
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6852      	ldr	r2, [r2, #4]
 8005120:	3a01      	subs	r2, #1
 8005122:	0112      	lsls	r2, r2, #4
 8005124:	430a      	orrs	r2, r1
 8005126:	4921      	ldr	r1, [pc, #132]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005128:	4313      	orrs	r3, r2
 800512a:	610b      	str	r3, [r1, #16]
 800512c:	e014      	b.n	8005158 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800512e:	4b1f      	ldr	r3, [pc, #124]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005134:	4013      	ands	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6892      	ldr	r2, [r2, #8]
 800513a:	0211      	lsls	r1, r2, #8
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6952      	ldr	r2, [r2, #20]
 8005140:	0852      	lsrs	r2, r2, #1
 8005142:	3a01      	subs	r2, #1
 8005144:	0652      	lsls	r2, r2, #25
 8005146:	4311      	orrs	r1, r2
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6852      	ldr	r2, [r2, #4]
 800514c:	3a01      	subs	r2, #1
 800514e:	0112      	lsls	r2, r2, #4
 8005150:	430a      	orrs	r2, r1
 8005152:	4916      	ldr	r1, [pc, #88]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005154:	4313      	orrs	r3, r2
 8005156:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005158:	4b14      	ldr	r3, [pc, #80]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a13      	ldr	r2, [pc, #76]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800515e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005162:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005164:	f7fb fa62 	bl	800062c <HAL_GetTick>
 8005168:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800516a:	e009      	b.n	8005180 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800516c:	f7fb fa5e 	bl	800062c <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d902      	bls.n	8005180 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	73fb      	strb	r3, [r7, #15]
          break;
 800517e:	e005      	b.n	800518c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0ef      	beq.n	800516c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005192:	4b06      	ldr	r3, [pc, #24]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	4904      	ldr	r1, [pc, #16]	; (80051ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800519c:	4313      	orrs	r3, r2
 800519e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40021000 	.word	0x40021000
 80051b0:	07ff800f 	.word	0x07ff800f
 80051b4:	ff9f800f 	.word	0xff9f800f
 80051b8:	f9ff800f 	.word	0xf9ff800f

080051bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051ca:	4b72      	ldr	r3, [pc, #456]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00e      	beq.n	80051f4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051d6:	4b6f      	ldr	r3, [pc, #444]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0203 	and.w	r2, r3, #3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d103      	bne.n	80051ee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
       ||
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d142      	bne.n	8005274 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
 80051f2:	e03f      	b.n	8005274 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d018      	beq.n	800522e <RCCEx_PLLSAI2_Config+0x72>
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d825      	bhi.n	800524c <RCCEx_PLLSAI2_Config+0x90>
 8005200:	2b01      	cmp	r3, #1
 8005202:	d002      	beq.n	800520a <RCCEx_PLLSAI2_Config+0x4e>
 8005204:	2b02      	cmp	r3, #2
 8005206:	d009      	beq.n	800521c <RCCEx_PLLSAI2_Config+0x60>
 8005208:	e020      	b.n	800524c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800520a:	4b62      	ldr	r3, [pc, #392]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d11d      	bne.n	8005252 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800521a:	e01a      	b.n	8005252 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800521c:	4b5d      	ldr	r3, [pc, #372]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005224:	2b00      	cmp	r3, #0
 8005226:	d116      	bne.n	8005256 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800522c:	e013      	b.n	8005256 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800522e:	4b59      	ldr	r3, [pc, #356]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10f      	bne.n	800525a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800523a:	4b56      	ldr	r3, [pc, #344]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800524a:	e006      	b.n	800525a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
      break;
 8005250:	e004      	b.n	800525c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005252:	bf00      	nop
 8005254:	e002      	b.n	800525c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005256:	bf00      	nop
 8005258:	e000      	b.n	800525c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800525a:	bf00      	nop
    }

    if(status == HAL_OK)
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d108      	bne.n	8005274 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005262:	4b4c      	ldr	r3, [pc, #304]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f023 0203 	bic.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4949      	ldr	r1, [pc, #292]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005270:	4313      	orrs	r3, r2
 8005272:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f040 8086 	bne.w	8005388 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800527c:	4b45      	ldr	r3, [pc, #276]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a44      	ldr	r2, [pc, #272]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005288:	f7fb f9d0 	bl	800062c <HAL_GetTick>
 800528c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800528e:	e009      	b.n	80052a4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005290:	f7fb f9cc 	bl	800062c <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d902      	bls.n	80052a4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	73fb      	strb	r3, [r7, #15]
        break;
 80052a2:	e005      	b.n	80052b0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052a4:	4b3b      	ldr	r3, [pc, #236]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1ef      	bne.n	8005290 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d168      	bne.n	8005388 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d113      	bne.n	80052e4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052bc:	4b35      	ldr	r3, [pc, #212]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052be:	695a      	ldr	r2, [r3, #20]
 80052c0:	4b35      	ldr	r3, [pc, #212]	; (8005398 <RCCEx_PLLSAI2_Config+0x1dc>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6892      	ldr	r2, [r2, #8]
 80052c8:	0211      	lsls	r1, r2, #8
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68d2      	ldr	r2, [r2, #12]
 80052ce:	06d2      	lsls	r2, r2, #27
 80052d0:	4311      	orrs	r1, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6852      	ldr	r2, [r2, #4]
 80052d6:	3a01      	subs	r2, #1
 80052d8:	0112      	lsls	r2, r2, #4
 80052da:	430a      	orrs	r2, r1
 80052dc:	492d      	ldr	r1, [pc, #180]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	614b      	str	r3, [r1, #20]
 80052e2:	e02d      	b.n	8005340 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d115      	bne.n	8005316 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052ea:	4b2a      	ldr	r3, [pc, #168]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	4b2b      	ldr	r3, [pc, #172]	; (800539c <RCCEx_PLLSAI2_Config+0x1e0>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6892      	ldr	r2, [r2, #8]
 80052f6:	0211      	lsls	r1, r2, #8
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6912      	ldr	r2, [r2, #16]
 80052fc:	0852      	lsrs	r2, r2, #1
 80052fe:	3a01      	subs	r2, #1
 8005300:	0552      	lsls	r2, r2, #21
 8005302:	4311      	orrs	r1, r2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6852      	ldr	r2, [r2, #4]
 8005308:	3a01      	subs	r2, #1
 800530a:	0112      	lsls	r2, r2, #4
 800530c:	430a      	orrs	r2, r1
 800530e:	4921      	ldr	r1, [pc, #132]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005310:	4313      	orrs	r3, r2
 8005312:	614b      	str	r3, [r1, #20]
 8005314:	e014      	b.n	8005340 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005316:	4b1f      	ldr	r3, [pc, #124]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800531c:	4013      	ands	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6892      	ldr	r2, [r2, #8]
 8005322:	0211      	lsls	r1, r2, #8
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6952      	ldr	r2, [r2, #20]
 8005328:	0852      	lsrs	r2, r2, #1
 800532a:	3a01      	subs	r2, #1
 800532c:	0652      	lsls	r2, r2, #25
 800532e:	4311      	orrs	r1, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6852      	ldr	r2, [r2, #4]
 8005334:	3a01      	subs	r2, #1
 8005336:	0112      	lsls	r2, r2, #4
 8005338:	430a      	orrs	r2, r1
 800533a:	4916      	ldr	r1, [pc, #88]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800533c:	4313      	orrs	r3, r2
 800533e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005340:	4b14      	ldr	r3, [pc, #80]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a13      	ldr	r2, [pc, #76]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534c:	f7fb f96e 	bl	800062c <HAL_GetTick>
 8005350:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005352:	e009      	b.n	8005368 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005354:	f7fb f96a 	bl	800062c <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d902      	bls.n	8005368 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	73fb      	strb	r3, [r7, #15]
          break;
 8005366:	e005      	b.n	8005374 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0ef      	beq.n	8005354 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800537a:	4b06      	ldr	r3, [pc, #24]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	4904      	ldr	r1, [pc, #16]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005384:	4313      	orrs	r3, r2
 8005386:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005388:	7bfb      	ldrb	r3, [r7, #15]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000
 8005398:	07ff800f 	.word	0x07ff800f
 800539c:	ff9f800f 	.word	0xff9f800f
 80053a0:	f9ff800f 	.word	0xf9ff800f

080053a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e049      	b.n	800544a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f004 fcf0 	bl	8009db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f000 fb1e 	bl	8005a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	d001      	beq.n	800546c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e047      	b.n	80054fc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a23      	ldr	r2, [pc, #140]	; (8005508 <HAL_TIM_Base_Start+0xb4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01d      	beq.n	80054ba <HAL_TIM_Base_Start+0x66>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005486:	d018      	beq.n	80054ba <HAL_TIM_Base_Start+0x66>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1f      	ldr	r2, [pc, #124]	; (800550c <HAL_TIM_Base_Start+0xb8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d013      	beq.n	80054ba <HAL_TIM_Base_Start+0x66>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1e      	ldr	r2, [pc, #120]	; (8005510 <HAL_TIM_Base_Start+0xbc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00e      	beq.n	80054ba <HAL_TIM_Base_Start+0x66>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <HAL_TIM_Base_Start+0xc0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d009      	beq.n	80054ba <HAL_TIM_Base_Start+0x66>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1b      	ldr	r2, [pc, #108]	; (8005518 <HAL_TIM_Base_Start+0xc4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d004      	beq.n	80054ba <HAL_TIM_Base_Start+0x66>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a19      	ldr	r2, [pc, #100]	; (800551c <HAL_TIM_Base_Start+0xc8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d115      	bne.n	80054e6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	4b17      	ldr	r3, [pc, #92]	; (8005520 <HAL_TIM_Base_Start+0xcc>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b06      	cmp	r3, #6
 80054ca:	d015      	beq.n	80054f8 <HAL_TIM_Base_Start+0xa4>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d2:	d011      	beq.n	80054f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e4:	e008      	b.n	80054f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0201 	orr.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e000      	b.n	80054fa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800
 8005514:	40000c00 	.word	0x40000c00
 8005518:	40013400 	.word	0x40013400
 800551c:	40014000 	.word	0x40014000
 8005520:	00010007 	.word	0x00010007

08005524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d001      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e04f      	b.n	80055dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a23      	ldr	r2, [pc, #140]	; (80055e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01d      	beq.n	800559a <HAL_TIM_Base_Start_IT+0x76>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005566:	d018      	beq.n	800559a <HAL_TIM_Base_Start_IT+0x76>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1f      	ldr	r2, [pc, #124]	; (80055ec <HAL_TIM_Base_Start_IT+0xc8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <HAL_TIM_Base_Start_IT+0x76>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1e      	ldr	r2, [pc, #120]	; (80055f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_TIM_Base_Start_IT+0x76>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1c      	ldr	r2, [pc, #112]	; (80055f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_TIM_Base_Start_IT+0x76>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1b      	ldr	r2, [pc, #108]	; (80055f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_TIM_Base_Start_IT+0x76>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a19      	ldr	r2, [pc, #100]	; (80055fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d115      	bne.n	80055c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	4b17      	ldr	r3, [pc, #92]	; (8005600 <HAL_TIM_Base_Start_IT+0xdc>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b06      	cmp	r3, #6
 80055aa:	d015      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0xb4>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b2:	d011      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c4:	e008      	b.n	80055d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0201 	orr.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e000      	b.n	80055da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	40012c00 	.word	0x40012c00
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40000c00 	.word	0x40000c00
 80055f8:	40013400 	.word	0x40013400
 80055fc:	40014000 	.word	0x40014000
 8005600:	00010007 	.word	0x00010007

08005604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b02      	cmp	r3, #2
 8005618:	d122      	bne.n	8005660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b02      	cmp	r3, #2
 8005626:	d11b      	bne.n	8005660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0202 	mvn.w	r2, #2
 8005630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f9ce 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 800564c:	e005      	b.n	800565a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f9c0 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f9d1 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b04      	cmp	r3, #4
 800566c:	d122      	bne.n	80056b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b04      	cmp	r3, #4
 800567a:	d11b      	bne.n	80056b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0204 	mvn.w	r2, #4
 8005684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f9a4 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 80056a0:	e005      	b.n	80056ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f996 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f9a7 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d122      	bne.n	8005708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d11b      	bne.n	8005708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0208 	mvn.w	r2, #8
 80056d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2204      	movs	r2, #4
 80056de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f97a 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 80056f4:	e005      	b.n	8005702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f96c 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f97d 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b10      	cmp	r3, #16
 8005714:	d122      	bne.n	800575c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b10      	cmp	r3, #16
 8005722:	d11b      	bne.n	800575c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f06f 0210 	mvn.w	r2, #16
 800572c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2208      	movs	r2, #8
 8005732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f950 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 8005748:	e005      	b.n	8005756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f942 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f953 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b01      	cmp	r3, #1
 8005768:	d10e      	bne.n	8005788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b01      	cmp	r3, #1
 8005776:	d107      	bne.n	8005788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0201 	mvn.w	r2, #1
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f003 fd44 	bl	8009210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	2b80      	cmp	r3, #128	; 0x80
 8005794:	d10e      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a0:	2b80      	cmp	r3, #128	; 0x80
 80057a2:	d107      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fafe 	bl	8005db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c2:	d10e      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ce:	2b80      	cmp	r3, #128	; 0x80
 80057d0:	d107      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 faf1 	bl	8005dc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d10e      	bne.n	800580e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b40      	cmp	r3, #64	; 0x40
 80057fc:	d107      	bne.n	800580e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f901 	bl	8005a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b20      	cmp	r3, #32
 800581a:	d10e      	bne.n	800583a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b20      	cmp	r3, #32
 8005828:	d107      	bne.n	800583a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f06f 0220 	mvn.w	r2, #32
 8005832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fab1 	bl	8005d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_TIM_ConfigClockSource+0x1c>
 800585a:	2302      	movs	r3, #2
 800585c:	e0b6      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x18a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800587c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005880:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005888:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589a:	d03e      	beq.n	800591a <HAL_TIM_ConfigClockSource+0xd8>
 800589c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a0:	f200 8087 	bhi.w	80059b2 <HAL_TIM_ConfigClockSource+0x170>
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a8:	f000 8086 	beq.w	80059b8 <HAL_TIM_ConfigClockSource+0x176>
 80058ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b0:	d87f      	bhi.n	80059b2 <HAL_TIM_ConfigClockSource+0x170>
 80058b2:	2b70      	cmp	r3, #112	; 0x70
 80058b4:	d01a      	beq.n	80058ec <HAL_TIM_ConfigClockSource+0xaa>
 80058b6:	2b70      	cmp	r3, #112	; 0x70
 80058b8:	d87b      	bhi.n	80059b2 <HAL_TIM_ConfigClockSource+0x170>
 80058ba:	2b60      	cmp	r3, #96	; 0x60
 80058bc:	d050      	beq.n	8005960 <HAL_TIM_ConfigClockSource+0x11e>
 80058be:	2b60      	cmp	r3, #96	; 0x60
 80058c0:	d877      	bhi.n	80059b2 <HAL_TIM_ConfigClockSource+0x170>
 80058c2:	2b50      	cmp	r3, #80	; 0x50
 80058c4:	d03c      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0xfe>
 80058c6:	2b50      	cmp	r3, #80	; 0x50
 80058c8:	d873      	bhi.n	80059b2 <HAL_TIM_ConfigClockSource+0x170>
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d058      	beq.n	8005980 <HAL_TIM_ConfigClockSource+0x13e>
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d86f      	bhi.n	80059b2 <HAL_TIM_ConfigClockSource+0x170>
 80058d2:	2b30      	cmp	r3, #48	; 0x30
 80058d4:	d064      	beq.n	80059a0 <HAL_TIM_ConfigClockSource+0x15e>
 80058d6:	2b30      	cmp	r3, #48	; 0x30
 80058d8:	d86b      	bhi.n	80059b2 <HAL_TIM_ConfigClockSource+0x170>
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d060      	beq.n	80059a0 <HAL_TIM_ConfigClockSource+0x15e>
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d867      	bhi.n	80059b2 <HAL_TIM_ConfigClockSource+0x170>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d05c      	beq.n	80059a0 <HAL_TIM_ConfigClockSource+0x15e>
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d05a      	beq.n	80059a0 <HAL_TIM_ConfigClockSource+0x15e>
 80058ea:	e062      	b.n	80059b2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	6899      	ldr	r1, [r3, #8]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f000 f9a6 	bl	8005c4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800590e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	609a      	str	r2, [r3, #8]
      break;
 8005918:	e04f      	b.n	80059ba <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6899      	ldr	r1, [r3, #8]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f000 f98f 	bl	8005c4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800593c:	609a      	str	r2, [r3, #8]
      break;
 800593e:	e03c      	b.n	80059ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6859      	ldr	r1, [r3, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	461a      	mov	r2, r3
 800594e:	f000 f903 	bl	8005b58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2150      	movs	r1, #80	; 0x50
 8005958:	4618      	mov	r0, r3
 800595a:	f000 f95c 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 800595e:	e02c      	b.n	80059ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	461a      	mov	r2, r3
 800596e:	f000 f922 	bl	8005bb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2160      	movs	r1, #96	; 0x60
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f94c 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 800597e:	e01c      	b.n	80059ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6818      	ldr	r0, [r3, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	6859      	ldr	r1, [r3, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	461a      	mov	r2, r3
 800598e:	f000 f8e3 	bl	8005b58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2140      	movs	r1, #64	; 0x40
 8005998:	4618      	mov	r0, r3
 800599a:	f000 f93c 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 800599e:	e00c      	b.n	80059ba <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f000 f933 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 80059b0:	e003      	b.n	80059ba <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
      break;
 80059b6:	e000      	b.n	80059ba <HAL_TIM_ConfigClockSource+0x178>
      break;
 80059b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a40      	ldr	r2, [pc, #256]	; (8005b38 <TIM_Base_SetConfig+0x114>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a42:	d00f      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a3d      	ldr	r2, [pc, #244]	; (8005b3c <TIM_Base_SetConfig+0x118>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00b      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a3c      	ldr	r2, [pc, #240]	; (8005b40 <TIM_Base_SetConfig+0x11c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a3b      	ldr	r2, [pc, #236]	; (8005b44 <TIM_Base_SetConfig+0x120>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d003      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a3a      	ldr	r2, [pc, #232]	; (8005b48 <TIM_Base_SetConfig+0x124>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d108      	bne.n	8005a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2f      	ldr	r2, [pc, #188]	; (8005b38 <TIM_Base_SetConfig+0x114>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d01f      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a84:	d01b      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <TIM_Base_SetConfig+0x118>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d017      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2b      	ldr	r2, [pc, #172]	; (8005b40 <TIM_Base_SetConfig+0x11c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2a      	ldr	r2, [pc, #168]	; (8005b44 <TIM_Base_SetConfig+0x120>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00f      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a29      	ldr	r2, [pc, #164]	; (8005b48 <TIM_Base_SetConfig+0x124>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00b      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a28      	ldr	r2, [pc, #160]	; (8005b4c <TIM_Base_SetConfig+0x128>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a27      	ldr	r2, [pc, #156]	; (8005b50 <TIM_Base_SetConfig+0x12c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a26      	ldr	r2, [pc, #152]	; (8005b54 <TIM_Base_SetConfig+0x130>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d108      	bne.n	8005ad0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <TIM_Base_SetConfig+0x114>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00f      	beq.n	8005b1c <TIM_Base_SetConfig+0xf8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <TIM_Base_SetConfig+0x124>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00b      	beq.n	8005b1c <TIM_Base_SetConfig+0xf8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a11      	ldr	r2, [pc, #68]	; (8005b4c <TIM_Base_SetConfig+0x128>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d007      	beq.n	8005b1c <TIM_Base_SetConfig+0xf8>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a10      	ldr	r2, [pc, #64]	; (8005b50 <TIM_Base_SetConfig+0x12c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_Base_SetConfig+0xf8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a0f      	ldr	r2, [pc, #60]	; (8005b54 <TIM_Base_SetConfig+0x130>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d103      	bne.n	8005b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	615a      	str	r2, [r3, #20]
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40012c00 	.word	0x40012c00
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	40013400 	.word	0x40013400
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40014400 	.word	0x40014400
 8005b54:	40014800 	.word	0x40014800

08005b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f023 0201 	bic.w	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f023 030a 	bic.w	r3, r3, #10
 8005b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b087      	sub	sp, #28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0210 	bic.w	r2, r3, #16
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	031b      	lsls	r3, r3, #12
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f043 0307 	orr.w	r3, r3, #7
 8005c38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	609a      	str	r2, [r3, #8]
}
 8005c40:	bf00      	nop
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	609a      	str	r2, [r3, #8]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e068      	b.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2e      	ldr	r2, [pc, #184]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a2d      	ldr	r2, [pc, #180]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d108      	bne.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01d      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d16:	d018      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1b      	ldr	r2, [pc, #108]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d013      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a1a      	ldr	r2, [pc, #104]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00e      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d009      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a13      	ldr	r2, [pc, #76]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d004      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a14      	ldr	r2, [pc, #80]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d10c      	bne.n	8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40013400 	.word	0x40013400
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40000800 	.word	0x40000800
 8005d94:	40000c00 	.word	0x40000c00
 8005d98:	40014000 	.word	0x40014000

08005d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e042      	b.n	8005e70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d106      	bne.n	8005e02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f004 f829 	bl	8009e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2224      	movs	r2, #36	; 0x24
 8005e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0201 	bic.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fbfc 	bl	8006618 <UART_SetConfig>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e022      	b.n	8005e70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 feec 	bl	8006c10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 ff73 	bl	8006d54 <UART_CheckIdleState>
 8005e6e:	4603      	mov	r3, r0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	4613      	mov	r3, r2
 8005e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	f040 8084 	bne.w	8005f9c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_UART_Transmit+0x28>
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e07c      	b.n	8005f9e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_UART_Transmit+0x3a>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e075      	b.n	8005f9e <HAL_UART_Transmit+0x126>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2221      	movs	r2, #33	; 0x21
 8005ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eca:	f7fa fbaf 	bl	800062c <HAL_GetTick>
 8005ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	88fa      	ldrh	r2, [r7, #6]
 8005edc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee8:	d108      	bne.n	8005efc <HAL_UART_Transmit+0x84>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d104      	bne.n	8005efc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	e003      	b.n	8005f04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005f0c:	e02d      	b.n	8005f6a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2200      	movs	r2, #0
 8005f16:	2180      	movs	r1, #128	; 0x80
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 ff66 	bl	8006dea <UART_WaitOnFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e03a      	b.n	8005f9e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	881a      	ldrh	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f3a:	b292      	uxth	r2, r2
 8005f3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	3302      	adds	r3, #2
 8005f42:	61bb      	str	r3, [r7, #24]
 8005f44:	e008      	b.n	8005f58 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	781a      	ldrb	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	b292      	uxth	r2, r2
 8005f50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	3301      	adds	r3, #1
 8005f56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1cb      	bne.n	8005f0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2140      	movs	r1, #64	; 0x40
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 ff32 	bl	8006dea <UART_WaitOnFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e006      	b.n	8005f9e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e000      	b.n	8005f9e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005f9c:	2302      	movs	r3, #2
  }
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b0ba      	sub	sp, #232	; 0xe8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005fd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005fdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11b      	bne.n	800601c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d015      	beq.n	800601c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d009      	beq.n	800601c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 82d6 	beq.w	80065be <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
      }
      return;
 800601a:	e2d0      	b.n	80065be <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800601c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 811f 	beq.w	8006264 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006026:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800602a:	4b8b      	ldr	r3, [pc, #556]	; (8006258 <HAL_UART_IRQHandler+0x2b0>)
 800602c:	4013      	ands	r3, r2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006032:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006036:	4b89      	ldr	r3, [pc, #548]	; (800625c <HAL_UART_IRQHandler+0x2b4>)
 8006038:	4013      	ands	r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 8112 	beq.w	8006264 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d011      	beq.n	8006070 <HAL_UART_IRQHandler+0xc8>
 800604c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2201      	movs	r2, #1
 800605e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006066:	f043 0201 	orr.w	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d011      	beq.n	80060a0 <HAL_UART_IRQHandler+0xf8>
 800607c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2202      	movs	r2, #2
 800608e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006096:	f043 0204 	orr.w	r2, r3, #4
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d011      	beq.n	80060d0 <HAL_UART_IRQHandler+0x128>
 80060ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00b      	beq.n	80060d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2204      	movs	r2, #4
 80060be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060c6:	f043 0202 	orr.w	r2, r3, #2
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d017      	beq.n	800610c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80060dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d105      	bne.n	80060f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80060e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80060ec:	4b5a      	ldr	r3, [pc, #360]	; (8006258 <HAL_UART_IRQHandler+0x2b0>)
 80060ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00b      	beq.n	800610c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2208      	movs	r2, #8
 80060fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006102:	f043 0208 	orr.w	r2, r3, #8
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800610c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006114:	2b00      	cmp	r3, #0
 8006116:	d012      	beq.n	800613e <HAL_UART_IRQHandler+0x196>
 8006118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800611c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00c      	beq.n	800613e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800612c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006134:	f043 0220 	orr.w	r2, r3, #32
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 823c 	beq.w	80065c2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800614a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b00      	cmp	r3, #0
 8006154:	d013      	beq.n	800617e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d105      	bne.n	800616e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b40      	cmp	r3, #64	; 0x40
 8006194:	d005      	beq.n	80061a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800619a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d04f      	beq.n	8006242 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fee9 	bl	8006f7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b2:	2b40      	cmp	r3, #64	; 0x40
 80061b4:	d141      	bne.n	800623a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3308      	adds	r3, #8
 80061bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3308      	adds	r3, #8
 80061de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1d9      	bne.n	80061b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006206:	2b00      	cmp	r3, #0
 8006208:	d013      	beq.n	8006232 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800620e:	4a14      	ldr	r2, [pc, #80]	; (8006260 <HAL_UART_IRQHandler+0x2b8>)
 8006210:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006216:	4618      	mov	r0, r3
 8006218:	f7fb f9b4 	bl	8001584 <HAL_DMA_Abort_IT>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d017      	beq.n	8006252 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800622c:	4610      	mov	r0, r2
 800622e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	e00f      	b.n	8006252 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f9da 	bl	80065ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	e00b      	b.n	8006252 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f9d6 	bl	80065ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006240:	e007      	b.n	8006252 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f9d2 	bl	80065ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006250:	e1b7      	b.n	80065c2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006252:	bf00      	nop
    return;
 8006254:	e1b5      	b.n	80065c2 <HAL_UART_IRQHandler+0x61a>
 8006256:	bf00      	nop
 8006258:	10000001 	.word	0x10000001
 800625c:	04000120 	.word	0x04000120
 8006260:	08007047 	.word	0x08007047

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006268:	2b01      	cmp	r3, #1
 800626a:	f040 814a 	bne.w	8006502 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800626e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006272:	f003 0310 	and.w	r3, r3, #16
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 8143 	beq.w	8006502 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800627c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 813c 	beq.w	8006502 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2210      	movs	r2, #16
 8006290:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b40      	cmp	r3, #64	; 0x40
 800629e:	f040 80b5 	bne.w	800640c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 8187 	beq.w	80065c6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062c2:	429a      	cmp	r2, r3
 80062c4:	f080 817f 	bcs.w	80065c6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f040 8086 	bne.w	80063f0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800630e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006312:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800631a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1da      	bne.n	80062e4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800633e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006352:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006356:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800635a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e1      	bne.n	800632e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800637a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800637c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3308      	adds	r3, #8
 800638a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800638e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006390:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006394:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800639c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e3      	bne.n	800636a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c0:	f023 0310 	bic.w	r3, r3, #16
 80063c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80063d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e4      	bne.n	80063b0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fb f86e 	bl	80014cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	b29b      	uxth	r3, r3
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f8fb 	bl	8006600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800640a:	e0dc      	b.n	80065c6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006418:	b29b      	uxth	r3, r3
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80ce 	beq.w	80065ca <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800642e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 80c9 	beq.w	80065ca <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006448:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800644c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800645a:	647b      	str	r3, [r7, #68]	; 0x44
 800645c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e4      	bne.n	8006438 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3308      	adds	r3, #8
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	623b      	str	r3, [r7, #32]
   return(result);
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006496:	633a      	str	r2, [r7, #48]	; 0x30
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800649c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e1      	bne.n	800646e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0310 	bic.w	r3, r3, #16
 80064d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	69b9      	ldr	r1, [r7, #24]
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	617b      	str	r3, [r7, #20]
   return(result);
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e4      	bne.n	80064be <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f880 	bl	8006600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006500:	e063      	b.n	80065ca <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00e      	beq.n	800652c <HAL_UART_IRQHandler+0x584>
 800650e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d008      	beq.n	800652c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006522:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fdcf 	bl	80070c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800652a:	e051      	b.n	80065d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800652c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006534:	2b00      	cmp	r3, #0
 8006536:	d014      	beq.n	8006562 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006540:	2b00      	cmp	r3, #0
 8006542:	d105      	bne.n	8006550 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d008      	beq.n	8006562 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006554:	2b00      	cmp	r3, #0
 8006556:	d03a      	beq.n	80065ce <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
    }
    return;
 8006560:	e035      	b.n	80065ce <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <HAL_UART_IRQHandler+0x5da>
 800656e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fd79 	bl	8007072 <UART_EndTransmit_IT>
    return;
 8006580:	e026      	b.n	80065d0 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d009      	beq.n	80065a2 <HAL_UART_IRQHandler+0x5fa>
 800658e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006592:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fda8 	bl	80070f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065a0:	e016      	b.n	80065d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d010      	beq.n	80065d0 <HAL_UART_IRQHandler+0x628>
 80065ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da0c      	bge.n	80065d0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fd90 	bl	80070dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065bc:	e008      	b.n	80065d0 <HAL_UART_IRQHandler+0x628>
      return;
 80065be:	bf00      	nop
 80065c0:	e006      	b.n	80065d0 <HAL_UART_IRQHandler+0x628>
    return;
 80065c2:	bf00      	nop
 80065c4:	e004      	b.n	80065d0 <HAL_UART_IRQHandler+0x628>
      return;
 80065c6:	bf00      	nop
 80065c8:	e002      	b.n	80065d0 <HAL_UART_IRQHandler+0x628>
      return;
 80065ca:	bf00      	nop
 80065cc:	e000      	b.n	80065d0 <HAL_UART_IRQHandler+0x628>
    return;
 80065ce:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80065d0:	37e8      	adds	r7, #232	; 0xe8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop

080065d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800661c:	b08c      	sub	sp, #48	; 0x30
 800661e:	af00      	add	r7, sp, #0
 8006620:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	431a      	orrs	r2, r3
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	431a      	orrs	r2, r3
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	4313      	orrs	r3, r2
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4baa      	ldr	r3, [pc, #680]	; (80068f0 <UART_SetConfig+0x2d8>)
 8006648:	4013      	ands	r3, r2
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	6812      	ldr	r2, [r2, #0]
 800664e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006650:	430b      	orrs	r3, r1
 8006652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a9f      	ldr	r2, [pc, #636]	; (80068f4 <UART_SetConfig+0x2dc>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006680:	4313      	orrs	r3, r2
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800668e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	6812      	ldr	r2, [r2, #0]
 8006696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006698:	430b      	orrs	r3, r1
 800669a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	f023 010f 	bic.w	r1, r3, #15
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a90      	ldr	r2, [pc, #576]	; (80068f8 <UART_SetConfig+0x2e0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d125      	bne.n	8006708 <UART_SetConfig+0xf0>
 80066bc:	4b8f      	ldr	r3, [pc, #572]	; (80068fc <UART_SetConfig+0x2e4>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d81a      	bhi.n	8006700 <UART_SetConfig+0xe8>
 80066ca:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <UART_SetConfig+0xb8>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066e1 	.word	0x080066e1
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	080066e9 	.word	0x080066e9
 80066dc:	080066f9 	.word	0x080066f9
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e6:	e116      	b.n	8006916 <UART_SetConfig+0x2fe>
 80066e8:	2302      	movs	r3, #2
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ee:	e112      	b.n	8006916 <UART_SetConfig+0x2fe>
 80066f0:	2304      	movs	r3, #4
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f6:	e10e      	b.n	8006916 <UART_SetConfig+0x2fe>
 80066f8:	2308      	movs	r3, #8
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066fe:	e10a      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006700:	2310      	movs	r3, #16
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006706:	e106      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a7c      	ldr	r2, [pc, #496]	; (8006900 <UART_SetConfig+0x2e8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d138      	bne.n	8006784 <UART_SetConfig+0x16c>
 8006712:	4b7a      	ldr	r3, [pc, #488]	; (80068fc <UART_SetConfig+0x2e4>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	2b0c      	cmp	r3, #12
 800671e:	d82d      	bhi.n	800677c <UART_SetConfig+0x164>
 8006720:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x110>)
 8006722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006726:	bf00      	nop
 8006728:	0800675d 	.word	0x0800675d
 800672c:	0800677d 	.word	0x0800677d
 8006730:	0800677d 	.word	0x0800677d
 8006734:	0800677d 	.word	0x0800677d
 8006738:	0800676d 	.word	0x0800676d
 800673c:	0800677d 	.word	0x0800677d
 8006740:	0800677d 	.word	0x0800677d
 8006744:	0800677d 	.word	0x0800677d
 8006748:	08006765 	.word	0x08006765
 800674c:	0800677d 	.word	0x0800677d
 8006750:	0800677d 	.word	0x0800677d
 8006754:	0800677d 	.word	0x0800677d
 8006758:	08006775 	.word	0x08006775
 800675c:	2300      	movs	r3, #0
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006762:	e0d8      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006764:	2302      	movs	r3, #2
 8006766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800676a:	e0d4      	b.n	8006916 <UART_SetConfig+0x2fe>
 800676c:	2304      	movs	r3, #4
 800676e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006772:	e0d0      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006774:	2308      	movs	r3, #8
 8006776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800677a:	e0cc      	b.n	8006916 <UART_SetConfig+0x2fe>
 800677c:	2310      	movs	r3, #16
 800677e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006782:	e0c8      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a5e      	ldr	r2, [pc, #376]	; (8006904 <UART_SetConfig+0x2ec>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d125      	bne.n	80067da <UART_SetConfig+0x1c2>
 800678e:	4b5b      	ldr	r3, [pc, #364]	; (80068fc <UART_SetConfig+0x2e4>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006794:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006798:	2b30      	cmp	r3, #48	; 0x30
 800679a:	d016      	beq.n	80067ca <UART_SetConfig+0x1b2>
 800679c:	2b30      	cmp	r3, #48	; 0x30
 800679e:	d818      	bhi.n	80067d2 <UART_SetConfig+0x1ba>
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d00a      	beq.n	80067ba <UART_SetConfig+0x1a2>
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d814      	bhi.n	80067d2 <UART_SetConfig+0x1ba>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <UART_SetConfig+0x19a>
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d008      	beq.n	80067c2 <UART_SetConfig+0x1aa>
 80067b0:	e00f      	b.n	80067d2 <UART_SetConfig+0x1ba>
 80067b2:	2300      	movs	r3, #0
 80067b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067b8:	e0ad      	b.n	8006916 <UART_SetConfig+0x2fe>
 80067ba:	2302      	movs	r3, #2
 80067bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c0:	e0a9      	b.n	8006916 <UART_SetConfig+0x2fe>
 80067c2:	2304      	movs	r3, #4
 80067c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c8:	e0a5      	b.n	8006916 <UART_SetConfig+0x2fe>
 80067ca:	2308      	movs	r3, #8
 80067cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d0:	e0a1      	b.n	8006916 <UART_SetConfig+0x2fe>
 80067d2:	2310      	movs	r3, #16
 80067d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d8:	e09d      	b.n	8006916 <UART_SetConfig+0x2fe>
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a4a      	ldr	r2, [pc, #296]	; (8006908 <UART_SetConfig+0x2f0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d125      	bne.n	8006830 <UART_SetConfig+0x218>
 80067e4:	4b45      	ldr	r3, [pc, #276]	; (80068fc <UART_SetConfig+0x2e4>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067ee:	2bc0      	cmp	r3, #192	; 0xc0
 80067f0:	d016      	beq.n	8006820 <UART_SetConfig+0x208>
 80067f2:	2bc0      	cmp	r3, #192	; 0xc0
 80067f4:	d818      	bhi.n	8006828 <UART_SetConfig+0x210>
 80067f6:	2b80      	cmp	r3, #128	; 0x80
 80067f8:	d00a      	beq.n	8006810 <UART_SetConfig+0x1f8>
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d814      	bhi.n	8006828 <UART_SetConfig+0x210>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <UART_SetConfig+0x1f0>
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	d008      	beq.n	8006818 <UART_SetConfig+0x200>
 8006806:	e00f      	b.n	8006828 <UART_SetConfig+0x210>
 8006808:	2300      	movs	r3, #0
 800680a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800680e:	e082      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006810:	2302      	movs	r3, #2
 8006812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006816:	e07e      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006818:	2304      	movs	r3, #4
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800681e:	e07a      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006820:	2308      	movs	r3, #8
 8006822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006826:	e076      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006828:	2310      	movs	r3, #16
 800682a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800682e:	e072      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a35      	ldr	r2, [pc, #212]	; (800690c <UART_SetConfig+0x2f4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d12a      	bne.n	8006890 <UART_SetConfig+0x278>
 800683a:	4b30      	ldr	r3, [pc, #192]	; (80068fc <UART_SetConfig+0x2e4>)
 800683c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006848:	d01a      	beq.n	8006880 <UART_SetConfig+0x268>
 800684a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800684e:	d81b      	bhi.n	8006888 <UART_SetConfig+0x270>
 8006850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006854:	d00c      	beq.n	8006870 <UART_SetConfig+0x258>
 8006856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685a:	d815      	bhi.n	8006888 <UART_SetConfig+0x270>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <UART_SetConfig+0x250>
 8006860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006864:	d008      	beq.n	8006878 <UART_SetConfig+0x260>
 8006866:	e00f      	b.n	8006888 <UART_SetConfig+0x270>
 8006868:	2300      	movs	r3, #0
 800686a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800686e:	e052      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006870:	2302      	movs	r3, #2
 8006872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006876:	e04e      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006878:	2304      	movs	r3, #4
 800687a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800687e:	e04a      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006880:	2308      	movs	r3, #8
 8006882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006886:	e046      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006888:	2310      	movs	r3, #16
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800688e:	e042      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a17      	ldr	r2, [pc, #92]	; (80068f4 <UART_SetConfig+0x2dc>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d13a      	bne.n	8006910 <UART_SetConfig+0x2f8>
 800689a:	4b18      	ldr	r3, [pc, #96]	; (80068fc <UART_SetConfig+0x2e4>)
 800689c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068a8:	d01a      	beq.n	80068e0 <UART_SetConfig+0x2c8>
 80068aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ae:	d81b      	bhi.n	80068e8 <UART_SetConfig+0x2d0>
 80068b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b4:	d00c      	beq.n	80068d0 <UART_SetConfig+0x2b8>
 80068b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ba:	d815      	bhi.n	80068e8 <UART_SetConfig+0x2d0>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <UART_SetConfig+0x2b0>
 80068c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c4:	d008      	beq.n	80068d8 <UART_SetConfig+0x2c0>
 80068c6:	e00f      	b.n	80068e8 <UART_SetConfig+0x2d0>
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ce:	e022      	b.n	8006916 <UART_SetConfig+0x2fe>
 80068d0:	2302      	movs	r3, #2
 80068d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068d6:	e01e      	b.n	8006916 <UART_SetConfig+0x2fe>
 80068d8:	2304      	movs	r3, #4
 80068da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068de:	e01a      	b.n	8006916 <UART_SetConfig+0x2fe>
 80068e0:	2308      	movs	r3, #8
 80068e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068e6:	e016      	b.n	8006916 <UART_SetConfig+0x2fe>
 80068e8:	2310      	movs	r3, #16
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ee:	e012      	b.n	8006916 <UART_SetConfig+0x2fe>
 80068f0:	cfff69f3 	.word	0xcfff69f3
 80068f4:	40008000 	.word	0x40008000
 80068f8:	40013800 	.word	0x40013800
 80068fc:	40021000 	.word	0x40021000
 8006900:	40004400 	.word	0x40004400
 8006904:	40004800 	.word	0x40004800
 8006908:	40004c00 	.word	0x40004c00
 800690c:	40005000 	.word	0x40005000
 8006910:	2310      	movs	r3, #16
 8006912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4aae      	ldr	r2, [pc, #696]	; (8006bd4 <UART_SetConfig+0x5bc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	f040 8097 	bne.w	8006a50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006926:	2b08      	cmp	r3, #8
 8006928:	d823      	bhi.n	8006972 <UART_SetConfig+0x35a>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <UART_SetConfig+0x318>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006955 	.word	0x08006955
 8006934:	08006973 	.word	0x08006973
 8006938:	0800695d 	.word	0x0800695d
 800693c:	08006973 	.word	0x08006973
 8006940:	08006963 	.word	0x08006963
 8006944:	08006973 	.word	0x08006973
 8006948:	08006973 	.word	0x08006973
 800694c:	08006973 	.word	0x08006973
 8006950:	0800696b 	.word	0x0800696b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006954:	f7fd fef0 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 8006958:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800695a:	e010      	b.n	800697e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800695c:	4b9e      	ldr	r3, [pc, #632]	; (8006bd8 <UART_SetConfig+0x5c0>)
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006960:	e00d      	b.n	800697e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006962:	f7fd fe51 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006966:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006968:	e009      	b.n	800697e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006970:	e005      	b.n	800697e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800697c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 8130 	beq.w	8006be6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	4a94      	ldr	r2, [pc, #592]	; (8006bdc <UART_SetConfig+0x5c4>)
 800698c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006990:	461a      	mov	r2, r3
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	fbb3 f3f2 	udiv	r3, r3, r2
 8006998:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	4613      	mov	r3, r2
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	4413      	add	r3, r2
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d305      	bcc.n	80069b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d903      	bls.n	80069be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069bc:	e113      	b.n	8006be6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	2200      	movs	r2, #0
 80069c2:	60bb      	str	r3, [r7, #8]
 80069c4:	60fa      	str	r2, [r7, #12]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	4a84      	ldr	r2, [pc, #528]	; (8006bdc <UART_SetConfig+0x5c4>)
 80069cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2200      	movs	r2, #0
 80069d4:	603b      	str	r3, [r7, #0]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069e0:	f7f9 fc76 	bl	80002d0 <__aeabi_uldivmod>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4610      	mov	r0, r2
 80069ea:	4619      	mov	r1, r3
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	020b      	lsls	r3, r1, #8
 80069f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069fa:	0202      	lsls	r2, r0, #8
 80069fc:	6979      	ldr	r1, [r7, #20]
 80069fe:	6849      	ldr	r1, [r1, #4]
 8006a00:	0849      	lsrs	r1, r1, #1
 8006a02:	2000      	movs	r0, #0
 8006a04:	460c      	mov	r4, r1
 8006a06:	4605      	mov	r5, r0
 8006a08:	eb12 0804 	adds.w	r8, r2, r4
 8006a0c:	eb43 0905 	adc.w	r9, r3, r5
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	469a      	mov	sl, r3
 8006a18:	4693      	mov	fp, r2
 8006a1a:	4652      	mov	r2, sl
 8006a1c:	465b      	mov	r3, fp
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4649      	mov	r1, r9
 8006a22:	f7f9 fc55 	bl	80002d0 <__aeabi_uldivmod>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a34:	d308      	bcc.n	8006a48 <UART_SetConfig+0x430>
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a3c:	d204      	bcs.n	8006a48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6a3a      	ldr	r2, [r7, #32]
 8006a44:	60da      	str	r2, [r3, #12]
 8006a46:	e0ce      	b.n	8006be6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a4e:	e0ca      	b.n	8006be6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a58:	d166      	bne.n	8006b28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a5e:	2b08      	cmp	r3, #8
 8006a60:	d827      	bhi.n	8006ab2 <UART_SetConfig+0x49a>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <UART_SetConfig+0x450>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a8d 	.word	0x08006a8d
 8006a6c:	08006a95 	.word	0x08006a95
 8006a70:	08006a9d 	.word	0x08006a9d
 8006a74:	08006ab3 	.word	0x08006ab3
 8006a78:	08006aa3 	.word	0x08006aa3
 8006a7c:	08006ab3 	.word	0x08006ab3
 8006a80:	08006ab3 	.word	0x08006ab3
 8006a84:	08006ab3 	.word	0x08006ab3
 8006a88:	08006aab 	.word	0x08006aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a8c:	f7fd fe54 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 8006a90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a92:	e014      	b.n	8006abe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a94:	f7fd fe66 	bl	8004764 <HAL_RCC_GetPCLK2Freq>
 8006a98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a9a:	e010      	b.n	8006abe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a9c:	4b4e      	ldr	r3, [pc, #312]	; (8006bd8 <UART_SetConfig+0x5c0>)
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006aa0:	e00d      	b.n	8006abe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aa2:	f7fd fdb1 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006aa6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006aa8:	e009      	b.n	8006abe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ab0:	e005      	b.n	8006abe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006abc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8090 	beq.w	8006be6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	4a44      	ldr	r2, [pc, #272]	; (8006bdc <UART_SetConfig+0x5c4>)
 8006acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ad8:	005a      	lsls	r2, r3, #1
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	441a      	add	r2, r3
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	2b0f      	cmp	r3, #15
 8006af0:	d916      	bls.n	8006b20 <UART_SetConfig+0x508>
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af8:	d212      	bcs.n	8006b20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f023 030f 	bic.w	r3, r3, #15
 8006b02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	8bfb      	ldrh	r3, [r7, #30]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	8bfa      	ldrh	r2, [r7, #30]
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	e062      	b.n	8006be6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b26:	e05e      	b.n	8006be6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d828      	bhi.n	8006b82 <UART_SetConfig+0x56a>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0x520>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b5d 	.word	0x08006b5d
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b6d 	.word	0x08006b6d
 8006b44:	08006b83 	.word	0x08006b83
 8006b48:	08006b73 	.word	0x08006b73
 8006b4c:	08006b83 	.word	0x08006b83
 8006b50:	08006b83 	.word	0x08006b83
 8006b54:	08006b83 	.word	0x08006b83
 8006b58:	08006b7b 	.word	0x08006b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b5c:	f7fd fdec 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 8006b60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b62:	e014      	b.n	8006b8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b64:	f7fd fdfe 	bl	8004764 <HAL_RCC_GetPCLK2Freq>
 8006b68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b6a:	e010      	b.n	8006b8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b6c:	4b1a      	ldr	r3, [pc, #104]	; (8006bd8 <UART_SetConfig+0x5c0>)
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b70:	e00d      	b.n	8006b8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b72:	f7fd fd49 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006b76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b78:	e009      	b.n	8006b8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b80:	e005      	b.n	8006b8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d028      	beq.n	8006be6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	4a10      	ldr	r2, [pc, #64]	; (8006bdc <UART_SetConfig+0x5c4>)
 8006b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	441a      	add	r2, r3
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	2b0f      	cmp	r3, #15
 8006bbc:	d910      	bls.n	8006be0 <UART_SetConfig+0x5c8>
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc4:	d20c      	bcs.n	8006be0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60da      	str	r2, [r3, #12]
 8006bd0:	e009      	b.n	8006be6 <UART_SetConfig+0x5ce>
 8006bd2:	bf00      	nop
 8006bd4:	40008000 	.word	0x40008000
 8006bd8:	00f42400 	.word	0x00f42400
 8006bdc:	0800f9dc 	.word	0x0800f9dc
      }
      else
      {
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006c02:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3730      	adds	r7, #48	; 0x30
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca4:	f003 0310 	and.w	r3, r3, #16
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01a      	beq.n	8006d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d0e:	d10a      	bne.n	8006d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	605a      	str	r2, [r3, #4]
  }
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d64:	f7f9 fc62 	bl	800062c <HAL_GetTick>
 8006d68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d10e      	bne.n	8006d96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f82f 	bl	8006dea <UART_WaitOnFlagUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e025      	b.n	8006de2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d10e      	bne.n	8006dc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f819 	bl	8006dea <UART_WaitOnFlagUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e00f      	b.n	8006de2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b09c      	sub	sp, #112	; 0x70
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	603b      	str	r3, [r7, #0]
 8006df6:	4613      	mov	r3, r2
 8006df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dfa:	e0a9      	b.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e02:	f000 80a5 	beq.w	8006f50 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e06:	f7f9 fc11 	bl	800062c <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d302      	bcc.n	8006e1c <UART_WaitOnFlagUntilTimeout+0x32>
 8006e16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d140      	bne.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e30:	667b      	str	r3, [r7, #100]	; 0x64
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e3c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e6      	bne.n	8006e1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3308      	adds	r3, #8
 8006e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	f023 0301 	bic.w	r3, r3, #1
 8006e64:	663b      	str	r3, [r7, #96]	; 0x60
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e5      	bne.n	8006e4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e069      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d051      	beq.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eba:	d149      	bne.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ec4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e6      	bne.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3308      	adds	r3, #8
 8006efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	613b      	str	r3, [r7, #16]
   return(result);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f18:	623a      	str	r2, [r7, #32]
 8006f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	69f9      	ldr	r1, [r7, #28]
 8006f1e:	6a3a      	ldr	r2, [r7, #32]
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e5      	bne.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e010      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69da      	ldr	r2, [r3, #28]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	bf0c      	ite	eq
 8006f60:	2301      	moveq	r3, #1
 8006f62:	2300      	movne	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	461a      	mov	r2, r3
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	f43f af46 	beq.w	8006dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3770      	adds	r7, #112	; 0x70
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b095      	sub	sp, #84	; 0x54
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fa2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e6      	bne.n	8006f82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3308      	adds	r3, #8
 8006fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	e853 3f00 	ldrex	r3, [r3]
 8006fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fca:	f023 0301 	bic.w	r3, r3, #1
 8006fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e3      	bne.n	8006fb4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d118      	bne.n	8007026 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	60bb      	str	r3, [r7, #8]
   return(result);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f023 0310 	bic.w	r3, r3, #16
 8007008:	647b      	str	r3, [r7, #68]	; 0x44
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007012:	61bb      	str	r3, [r7, #24]
 8007014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	6979      	ldr	r1, [r7, #20]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	613b      	str	r3, [r7, #16]
   return(result);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e6      	bne.n	8006ff4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	671a      	str	r2, [r3, #112]	; 0x70
}
 800703a:	bf00      	nop
 800703c:	3754      	adds	r7, #84	; 0x54
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007052:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f7ff fac1 	bl	80065ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b088      	sub	sp, #32
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	e853 3f00 	ldrex	r3, [r3]
 8007086:	60bb      	str	r3, [r7, #8]
   return(result);
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	6979      	ldr	r1, [r7, #20]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	613b      	str	r3, [r7, #16]
   return(result);
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e6      	bne.n	800707a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff fa8c 	bl	80065d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070c0:	bf00      	nop
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <HAL_UARTEx_DisableFifoMode+0x16>
 8007116:	2302      	movs	r3, #2
 8007118:	e027      	b.n	800716a <HAL_UARTEx_DisableFifoMode+0x66>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2224      	movs	r2, #36	; 0x24
 8007126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0201 	bic.w	r2, r2, #1
 8007140:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007148:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2220      	movs	r2, #32
 800715c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800718a:	2302      	movs	r3, #2
 800718c:	e02d      	b.n	80071ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2224      	movs	r2, #36	; 0x24
 800719a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0201 	bic.w	r2, r2, #1
 80071b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f850 	bl	8007270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007206:	2302      	movs	r3, #2
 8007208:	e02d      	b.n	8007266 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2224      	movs	r2, #36	; 0x24
 8007216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0201 	bic.w	r2, r2, #1
 8007230:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f812 	bl	8007270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800727c:	2b00      	cmp	r3, #0
 800727e:	d108      	bne.n	8007292 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007290:	e031      	b.n	80072f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007292:	2308      	movs	r3, #8
 8007294:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007296:	2308      	movs	r3, #8
 8007298:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	0e5b      	lsrs	r3, r3, #25
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	0f5b      	lsrs	r3, r3, #29
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0307 	and.w	r3, r3, #7
 80072b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	7b3a      	ldrb	r2, [r7, #12]
 80072be:	4911      	ldr	r1, [pc, #68]	; (8007304 <UARTEx_SetNbDataToProcess+0x94>)
 80072c0:	5c8a      	ldrb	r2, [r1, r2]
 80072c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072c6:	7b3a      	ldrb	r2, [r7, #12]
 80072c8:	490f      	ldr	r1, [pc, #60]	; (8007308 <UARTEx_SetNbDataToProcess+0x98>)
 80072ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	7b7a      	ldrb	r2, [r7, #13]
 80072dc:	4909      	ldr	r1, [pc, #36]	; (8007304 <UARTEx_SetNbDataToProcess+0x94>)
 80072de:	5c8a      	ldrb	r2, [r1, r2]
 80072e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072e4:	7b7a      	ldrb	r2, [r7, #13]
 80072e6:	4908      	ldr	r1, [pc, #32]	; (8007308 <UARTEx_SetNbDataToProcess+0x98>)
 80072e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072f6:	bf00      	nop
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	0800f9f4 	.word	0x0800f9f4
 8007308:	0800f9fc 	.word	0x0800f9fc

0800730c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800731a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800731e:	2b84      	cmp	r3, #132	; 0x84
 8007320:	d005      	beq.n	800732e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007322:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4413      	add	r3, r2
 800732a:	3303      	adds	r3, #3
 800732c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800732e:	68fb      	ldr	r3, [r7, #12]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007340:	f000 fade 	bl	8007900 <vTaskStartScheduler>
  
  return osOK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	bd80      	pop	{r7, pc}

0800734a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800734a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734c:	b089      	sub	sp, #36	; 0x24
 800734e:	af04      	add	r7, sp, #16
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d020      	beq.n	800739e <osThreadCreate+0x54>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01c      	beq.n	800739e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685c      	ldr	r4, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681d      	ldr	r5, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691e      	ldr	r6, [r3, #16]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff ffc8 	bl	800730c <makeFreeRtosPriority>
 800737c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007386:	9202      	str	r2, [sp, #8]
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	9100      	str	r1, [sp, #0]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	4632      	mov	r2, r6
 8007390:	4629      	mov	r1, r5
 8007392:	4620      	mov	r0, r4
 8007394:	f000 f8ed 	bl	8007572 <xTaskCreateStatic>
 8007398:	4603      	mov	r3, r0
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	e01c      	b.n	80073d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685c      	ldr	r4, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073aa:	b29e      	uxth	r6, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff ffaa 	bl	800730c <makeFreeRtosPriority>
 80073b8:	4602      	mov	r2, r0
 80073ba:	f107 030c 	add.w	r3, r7, #12
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	9200      	str	r2, [sp, #0]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	4632      	mov	r2, r6
 80073c6:	4629      	mov	r1, r5
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 f92f 	bl	800762c <xTaskCreate>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d001      	beq.n	80073d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e000      	b.n	80073da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80073d8:	68fb      	ldr	r3, [r7, #12]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <osDelay+0x16>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	e000      	b.n	80073fa <osDelay+0x18>
 80073f8:	2301      	movs	r3, #1
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fa4c 	bl	8007898 <vTaskDelay>
  
  return osOK;
 8007400:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f103 0208 	add.w	r2, r3, #8
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f04f 32ff 	mov.w	r2, #4294967295
 8007422:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f103 0208 	add.w	r2, r3, #8
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f103 0208 	add.w	r2, r3, #8
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	601a      	str	r2, [r3, #0]
}
 80074a0:	bf00      	nop
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c2:	d103      	bne.n	80074cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	e00c      	b.n	80074e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3308      	adds	r3, #8
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	e002      	b.n	80074da <vListInsert+0x2e>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d2f6      	bcs.n	80074d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	601a      	str	r2, [r3, #0]
}
 8007512:	bf00      	nop
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6892      	ldr	r2, [r2, #8]
 8007534:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6852      	ldr	r2, [r2, #4]
 800753e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	429a      	cmp	r2, r3
 8007548:	d103      	bne.n	8007552 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689a      	ldr	r2, [r3, #8]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	1e5a      	subs	r2, r3, #1
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007572:	b580      	push	{r7, lr}
 8007574:	b08e      	sub	sp, #56	; 0x38
 8007576:	af04      	add	r7, sp, #16
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10a      	bne.n	80075b8 <xTaskCreateStatic+0x46>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	61fb      	str	r3, [r7, #28]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075b8:	2354      	movs	r3, #84	; 0x54
 80075ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b54      	cmp	r3, #84	; 0x54
 80075c0:	d00a      	beq.n	80075d8 <xTaskCreateStatic+0x66>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	61bb      	str	r3, [r7, #24]
}
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01e      	beq.n	800761e <xTaskCreateStatic+0xac>
 80075e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d01b      	beq.n	800761e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075f8:	2300      	movs	r3, #0
 80075fa:	9303      	str	r3, [sp, #12]
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	9302      	str	r3, [sp, #8]
 8007600:	f107 0314 	add.w	r3, r7, #20
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 f850 	bl	80076b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007618:	f000 f8d4 	bl	80077c4 <prvAddNewTaskToReadyList>
 800761c:	e001      	b.n	8007622 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007622:	697b      	ldr	r3, [r7, #20]
	}
 8007624:	4618      	mov	r0, r3
 8007626:	3728      	adds	r7, #40	; 0x28
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800762c:	b580      	push	{r7, lr}
 800762e:	b08c      	sub	sp, #48	; 0x30
 8007630:	af04      	add	r7, sp, #16
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	4613      	mov	r3, r2
 800763a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800763c:	88fb      	ldrh	r3, [r7, #6]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4618      	mov	r0, r3
 8007642:	f000 fec9 	bl	80083d8 <pvPortMalloc>
 8007646:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00e      	beq.n	800766c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800764e:	2054      	movs	r0, #84	; 0x54
 8007650:	f000 fec2 	bl	80083d8 <pvPortMalloc>
 8007654:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	631a      	str	r2, [r3, #48]	; 0x30
 8007662:	e005      	b.n	8007670 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007664:	6978      	ldr	r0, [r7, #20]
 8007666:	f000 ff83 	bl	8008570 <vPortFree>
 800766a:	e001      	b.n	8007670 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800766c:	2300      	movs	r3, #0
 800766e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d017      	beq.n	80076a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800767e:	88fa      	ldrh	r2, [r7, #6]
 8007680:	2300      	movs	r3, #0
 8007682:	9303      	str	r3, [sp, #12]
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	9302      	str	r3, [sp, #8]
 8007688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f80e 	bl	80076b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800769a:	69f8      	ldr	r0, [r7, #28]
 800769c:	f000 f892 	bl	80077c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076a0:	2301      	movs	r3, #1
 80076a2:	61bb      	str	r3, [r7, #24]
 80076a4:	e002      	b.n	80076ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076a6:	f04f 33ff 	mov.w	r3, #4294967295
 80076aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076ac:	69bb      	ldr	r3, [r7, #24]
	}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b088      	sub	sp, #32
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	607a      	str	r2, [r7, #4]
 80076c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076ce:	3b01      	subs	r3, #1
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	f023 0307 	bic.w	r3, r3, #7
 80076dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	f003 0307 	and.w	r3, r3, #7
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00a      	beq.n	80076fe <prvInitialiseNewTask+0x48>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	617b      	str	r3, [r7, #20]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01f      	beq.n	8007744 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007704:	2300      	movs	r3, #0
 8007706:	61fb      	str	r3, [r7, #28]
 8007708:	e012      	b.n	8007730 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	4413      	add	r3, r2
 8007710:	7819      	ldrb	r1, [r3, #0]
 8007712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	4413      	add	r3, r2
 8007718:	3334      	adds	r3, #52	; 0x34
 800771a:	460a      	mov	r2, r1
 800771c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	4413      	add	r3, r2
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d006      	beq.n	8007738 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	3301      	adds	r3, #1
 800772e:	61fb      	str	r3, [r7, #28]
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	2b0f      	cmp	r3, #15
 8007734:	d9e9      	bls.n	800770a <prvInitialiseNewTask+0x54>
 8007736:	e000      	b.n	800773a <prvInitialiseNewTask+0x84>
			{
				break;
 8007738:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007742:	e003      	b.n	800774c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774e:	2b06      	cmp	r3, #6
 8007750:	d901      	bls.n	8007756 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007752:	2306      	movs	r3, #6
 8007754:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800775a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007760:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	2200      	movs	r2, #0
 8007766:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	3304      	adds	r3, #4
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff fe6c 	bl	800744a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	3318      	adds	r3, #24
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff fe67 	bl	800744a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007780:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	f1c3 0207 	rsb	r2, r3, #7
 8007788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007790:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	2200      	movs	r2, #0
 8007796:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	68f9      	ldr	r1, [r7, #12]
 80077a4:	69b8      	ldr	r0, [r7, #24]
 80077a6:	f000 fc05 	bl	8007fb4 <pxPortInitialiseStack>
 80077aa:	4602      	mov	r2, r0
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077bc:	bf00      	nop
 80077be:	3720      	adds	r7, #32
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077cc:	f000 fd22 	bl	8008214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077d0:	4b2a      	ldr	r3, [pc, #168]	; (800787c <prvAddNewTaskToReadyList+0xb8>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	4a29      	ldr	r2, [pc, #164]	; (800787c <prvAddNewTaskToReadyList+0xb8>)
 80077d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077da:	4b29      	ldr	r3, [pc, #164]	; (8007880 <prvAddNewTaskToReadyList+0xbc>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d109      	bne.n	80077f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077e2:	4a27      	ldr	r2, [pc, #156]	; (8007880 <prvAddNewTaskToReadyList+0xbc>)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077e8:	4b24      	ldr	r3, [pc, #144]	; (800787c <prvAddNewTaskToReadyList+0xb8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d110      	bne.n	8007812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077f0:	f000 fabc 	bl	8007d6c <prvInitialiseTaskLists>
 80077f4:	e00d      	b.n	8007812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077f6:	4b23      	ldr	r3, [pc, #140]	; (8007884 <prvAddNewTaskToReadyList+0xc0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d109      	bne.n	8007812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077fe:	4b20      	ldr	r3, [pc, #128]	; (8007880 <prvAddNewTaskToReadyList+0xbc>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	429a      	cmp	r2, r3
 800780a:	d802      	bhi.n	8007812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800780c:	4a1c      	ldr	r2, [pc, #112]	; (8007880 <prvAddNewTaskToReadyList+0xbc>)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007812:	4b1d      	ldr	r3, [pc, #116]	; (8007888 <prvAddNewTaskToReadyList+0xc4>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3301      	adds	r3, #1
 8007818:	4a1b      	ldr	r2, [pc, #108]	; (8007888 <prvAddNewTaskToReadyList+0xc4>)
 800781a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	2201      	movs	r2, #1
 8007822:	409a      	lsls	r2, r3
 8007824:	4b19      	ldr	r3, [pc, #100]	; (800788c <prvAddNewTaskToReadyList+0xc8>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4313      	orrs	r3, r2
 800782a:	4a18      	ldr	r2, [pc, #96]	; (800788c <prvAddNewTaskToReadyList+0xc8>)
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4a15      	ldr	r2, [pc, #84]	; (8007890 <prvAddNewTaskToReadyList+0xcc>)
 800783c:	441a      	add	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	3304      	adds	r3, #4
 8007842:	4619      	mov	r1, r3
 8007844:	4610      	mov	r0, r2
 8007846:	f7ff fe0d 	bl	8007464 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800784a:	f000 fd13 	bl	8008274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800784e:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <prvAddNewTaskToReadyList+0xc0>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00e      	beq.n	8007874 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007856:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <prvAddNewTaskToReadyList+0xbc>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	429a      	cmp	r2, r3
 8007862:	d207      	bcs.n	8007874 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007864:	4b0b      	ldr	r3, [pc, #44]	; (8007894 <prvAddNewTaskToReadyList+0xd0>)
 8007866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	20000510 	.word	0x20000510
 8007880:	20000410 	.word	0x20000410
 8007884:	2000051c 	.word	0x2000051c
 8007888:	2000052c 	.word	0x2000052c
 800788c:	20000518 	.word	0x20000518
 8007890:	20000414 	.word	0x20000414
 8007894:	e000ed04 	.word	0xe000ed04

08007898 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d017      	beq.n	80078da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078aa:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <vTaskDelay+0x60>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <vTaskDelay+0x30>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	60bb      	str	r3, [r7, #8]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078c8:	f000 f87a 	bl	80079c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078cc:	2100      	movs	r1, #0
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fb0a 	bl	8007ee8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078d4:	f000 f882 	bl	80079dc <xTaskResumeAll>
 80078d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d107      	bne.n	80078f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80078e0:	4b06      	ldr	r3, [pc, #24]	; (80078fc <vTaskDelay+0x64>)
 80078e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20000538 	.word	0x20000538
 80078fc:	e000ed04 	.word	0xe000ed04

08007900 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08a      	sub	sp, #40	; 0x28
 8007904:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800790e:	463a      	mov	r2, r7
 8007910:	1d39      	adds	r1, r7, #4
 8007912:	f107 0308 	add.w	r3, r7, #8
 8007916:	4618      	mov	r0, r3
 8007918:	f000 ffb4 	bl	8008884 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	9202      	str	r2, [sp, #8]
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	2300      	movs	r3, #0
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	2300      	movs	r3, #0
 800792c:	460a      	mov	r2, r1
 800792e:	491e      	ldr	r1, [pc, #120]	; (80079a8 <vTaskStartScheduler+0xa8>)
 8007930:	481e      	ldr	r0, [pc, #120]	; (80079ac <vTaskStartScheduler+0xac>)
 8007932:	f7ff fe1e 	bl	8007572 <xTaskCreateStatic>
 8007936:	4603      	mov	r3, r0
 8007938:	4a1d      	ldr	r2, [pc, #116]	; (80079b0 <vTaskStartScheduler+0xb0>)
 800793a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800793c:	4b1c      	ldr	r3, [pc, #112]	; (80079b0 <vTaskStartScheduler+0xb0>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007944:	2301      	movs	r3, #1
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	e001      	b.n	800794e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d116      	bne.n	8007982 <vTaskStartScheduler+0x82>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	613b      	str	r3, [r7, #16]
}
 8007966:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007968:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <vTaskStartScheduler+0xb4>)
 800796a:	f04f 32ff 	mov.w	r2, #4294967295
 800796e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007970:	4b11      	ldr	r3, [pc, #68]	; (80079b8 <vTaskStartScheduler+0xb8>)
 8007972:	2201      	movs	r2, #1
 8007974:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007976:	4b11      	ldr	r3, [pc, #68]	; (80079bc <vTaskStartScheduler+0xbc>)
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800797c:	f000 fba8 	bl	80080d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007980:	e00e      	b.n	80079a0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007988:	d10a      	bne.n	80079a0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	60fb      	str	r3, [r7, #12]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <vTaskStartScheduler+0x9e>
}
 80079a0:	bf00      	nop
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	0800f854 	.word	0x0800f854
 80079ac:	08007d3d 	.word	0x08007d3d
 80079b0:	20000534 	.word	0x20000534
 80079b4:	20000530 	.word	0x20000530
 80079b8:	2000051c 	.word	0x2000051c
 80079bc:	20000514 	.word	0x20000514

080079c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079c4:	4b04      	ldr	r3, [pc, #16]	; (80079d8 <vTaskSuspendAll+0x18>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3301      	adds	r3, #1
 80079ca:	4a03      	ldr	r2, [pc, #12]	; (80079d8 <vTaskSuspendAll+0x18>)
 80079cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80079ce:	bf00      	nop
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	20000538 	.word	0x20000538

080079dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079e6:	2300      	movs	r3, #0
 80079e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079ea:	4b41      	ldr	r3, [pc, #260]	; (8007af0 <xTaskResumeAll+0x114>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <xTaskResumeAll+0x2c>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	603b      	str	r3, [r7, #0]
}
 8007a04:	bf00      	nop
 8007a06:	e7fe      	b.n	8007a06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a08:	f000 fc04 	bl	8008214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a0c:	4b38      	ldr	r3, [pc, #224]	; (8007af0 <xTaskResumeAll+0x114>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	4a37      	ldr	r2, [pc, #220]	; (8007af0 <xTaskResumeAll+0x114>)
 8007a14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a16:	4b36      	ldr	r3, [pc, #216]	; (8007af0 <xTaskResumeAll+0x114>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d161      	bne.n	8007ae2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a1e:	4b35      	ldr	r3, [pc, #212]	; (8007af4 <xTaskResumeAll+0x118>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d05d      	beq.n	8007ae2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a26:	e02e      	b.n	8007a86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a28:	4b33      	ldr	r3, [pc, #204]	; (8007af8 <xTaskResumeAll+0x11c>)
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3318      	adds	r3, #24
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff fd72 	bl	800751e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff fd6d 	bl	800751e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	2201      	movs	r2, #1
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	4b2b      	ldr	r3, [pc, #172]	; (8007afc <xTaskResumeAll+0x120>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	4a2a      	ldr	r2, [pc, #168]	; (8007afc <xTaskResumeAll+0x120>)
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4a27      	ldr	r2, [pc, #156]	; (8007b00 <xTaskResumeAll+0x124>)
 8007a64:	441a      	add	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f7ff fcf9 	bl	8007464 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a76:	4b23      	ldr	r3, [pc, #140]	; (8007b04 <xTaskResumeAll+0x128>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d302      	bcc.n	8007a86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007a80:	4b21      	ldr	r3, [pc, #132]	; (8007b08 <xTaskResumeAll+0x12c>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a86:	4b1c      	ldr	r3, [pc, #112]	; (8007af8 <xTaskResumeAll+0x11c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1cc      	bne.n	8007a28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a94:	f000 fa08 	bl	8007ea8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a98:	4b1c      	ldr	r3, [pc, #112]	; (8007b0c <xTaskResumeAll+0x130>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d010      	beq.n	8007ac6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007aa4:	f000 f836 	bl	8007b14 <xTaskIncrementTick>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007aae:	4b16      	ldr	r3, [pc, #88]	; (8007b08 <xTaskResumeAll+0x12c>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1f1      	bne.n	8007aa4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007ac0:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <xTaskResumeAll+0x130>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ac6:	4b10      	ldr	r3, [pc, #64]	; (8007b08 <xTaskResumeAll+0x12c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d009      	beq.n	8007ae2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ad2:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <xTaskResumeAll+0x134>)
 8007ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ae2:	f000 fbc7 	bl	8008274 <vPortExitCritical>

	return xAlreadyYielded;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	20000538 	.word	0x20000538
 8007af4:	20000510 	.word	0x20000510
 8007af8:	200004d0 	.word	0x200004d0
 8007afc:	20000518 	.word	0x20000518
 8007b00:	20000414 	.word	0x20000414
 8007b04:	20000410 	.word	0x20000410
 8007b08:	20000524 	.word	0x20000524
 8007b0c:	20000520 	.word	0x20000520
 8007b10:	e000ed04 	.word	0xe000ed04

08007b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b1e:	4b4e      	ldr	r3, [pc, #312]	; (8007c58 <xTaskIncrementTick+0x144>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f040 808e 	bne.w	8007c44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b28:	4b4c      	ldr	r3, [pc, #304]	; (8007c5c <xTaskIncrementTick+0x148>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b30:	4a4a      	ldr	r2, [pc, #296]	; (8007c5c <xTaskIncrementTick+0x148>)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d120      	bne.n	8007b7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b3c:	4b48      	ldr	r3, [pc, #288]	; (8007c60 <xTaskIncrementTick+0x14c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <xTaskIncrementTick+0x48>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	603b      	str	r3, [r7, #0]
}
 8007b58:	bf00      	nop
 8007b5a:	e7fe      	b.n	8007b5a <xTaskIncrementTick+0x46>
 8007b5c:	4b40      	ldr	r3, [pc, #256]	; (8007c60 <xTaskIncrementTick+0x14c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	4b40      	ldr	r3, [pc, #256]	; (8007c64 <xTaskIncrementTick+0x150>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a3e      	ldr	r2, [pc, #248]	; (8007c60 <xTaskIncrementTick+0x14c>)
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	4a3e      	ldr	r2, [pc, #248]	; (8007c64 <xTaskIncrementTick+0x150>)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	4b3d      	ldr	r3, [pc, #244]	; (8007c68 <xTaskIncrementTick+0x154>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3301      	adds	r3, #1
 8007b76:	4a3c      	ldr	r2, [pc, #240]	; (8007c68 <xTaskIncrementTick+0x154>)
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	f000 f995 	bl	8007ea8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b7e:	4b3b      	ldr	r3, [pc, #236]	; (8007c6c <xTaskIncrementTick+0x158>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d348      	bcc.n	8007c1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b88:	4b35      	ldr	r3, [pc, #212]	; (8007c60 <xTaskIncrementTick+0x14c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d104      	bne.n	8007b9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b92:	4b36      	ldr	r3, [pc, #216]	; (8007c6c <xTaskIncrementTick+0x158>)
 8007b94:	f04f 32ff 	mov.w	r2, #4294967295
 8007b98:	601a      	str	r2, [r3, #0]
					break;
 8007b9a:	e03e      	b.n	8007c1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9c:	4b30      	ldr	r3, [pc, #192]	; (8007c60 <xTaskIncrementTick+0x14c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d203      	bcs.n	8007bbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bb4:	4a2d      	ldr	r2, [pc, #180]	; (8007c6c <xTaskIncrementTick+0x158>)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bba:	e02e      	b.n	8007c1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff fcac 	bl	800751e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d004      	beq.n	8007bd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	3318      	adds	r3, #24
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff fca3 	bl	800751e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	2201      	movs	r2, #1
 8007bde:	409a      	lsls	r2, r3
 8007be0:	4b23      	ldr	r3, [pc, #140]	; (8007c70 <xTaskIncrementTick+0x15c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	4a22      	ldr	r2, [pc, #136]	; (8007c70 <xTaskIncrementTick+0x15c>)
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4a1f      	ldr	r2, [pc, #124]	; (8007c74 <xTaskIncrementTick+0x160>)
 8007bf8:	441a      	add	r2, r3
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4610      	mov	r0, r2
 8007c02:	f7ff fc2f 	bl	8007464 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0a:	4b1b      	ldr	r3, [pc, #108]	; (8007c78 <xTaskIncrementTick+0x164>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d3b9      	bcc.n	8007b88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c14:	2301      	movs	r3, #1
 8007c16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c18:	e7b6      	b.n	8007b88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c1a:	4b17      	ldr	r3, [pc, #92]	; (8007c78 <xTaskIncrementTick+0x164>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c20:	4914      	ldr	r1, [pc, #80]	; (8007c74 <xTaskIncrementTick+0x160>)
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d901      	bls.n	8007c36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007c32:	2301      	movs	r3, #1
 8007c34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c36:	4b11      	ldr	r3, [pc, #68]	; (8007c7c <xTaskIncrementTick+0x168>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d007      	beq.n	8007c4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	e004      	b.n	8007c4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c44:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <xTaskIncrementTick+0x16c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	4a0d      	ldr	r2, [pc, #52]	; (8007c80 <xTaskIncrementTick+0x16c>)
 8007c4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c4e:	697b      	ldr	r3, [r7, #20]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	20000538 	.word	0x20000538
 8007c5c:	20000514 	.word	0x20000514
 8007c60:	200004c8 	.word	0x200004c8
 8007c64:	200004cc 	.word	0x200004cc
 8007c68:	20000528 	.word	0x20000528
 8007c6c:	20000530 	.word	0x20000530
 8007c70:	20000518 	.word	0x20000518
 8007c74:	20000414 	.word	0x20000414
 8007c78:	20000410 	.word	0x20000410
 8007c7c:	20000524 	.word	0x20000524
 8007c80:	20000520 	.word	0x20000520

08007c84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c8a:	4b27      	ldr	r3, [pc, #156]	; (8007d28 <vTaskSwitchContext+0xa4>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c92:	4b26      	ldr	r3, [pc, #152]	; (8007d2c <vTaskSwitchContext+0xa8>)
 8007c94:	2201      	movs	r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c98:	e03f      	b.n	8007d1a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007c9a:	4b24      	ldr	r3, [pc, #144]	; (8007d2c <vTaskSwitchContext+0xa8>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ca0:	4b23      	ldr	r3, [pc, #140]	; (8007d30 <vTaskSwitchContext+0xac>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	fab3 f383 	clz	r3, r3
 8007cac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007cae:	7afb      	ldrb	r3, [r7, #11]
 8007cb0:	f1c3 031f 	rsb	r3, r3, #31
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	491f      	ldr	r1, [pc, #124]	; (8007d34 <vTaskSwitchContext+0xb0>)
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	440b      	add	r3, r1
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10a      	bne.n	8007ce0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	607b      	str	r3, [r7, #4]
}
 8007cdc:	bf00      	nop
 8007cde:	e7fe      	b.n	8007cde <vTaskSwitchContext+0x5a>
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4a12      	ldr	r2, [pc, #72]	; (8007d34 <vTaskSwitchContext+0xb0>)
 8007cec:	4413      	add	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	605a      	str	r2, [r3, #4]
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	3308      	adds	r3, #8
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d104      	bne.n	8007d10 <vTaskSwitchContext+0x8c>
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	605a      	str	r2, [r3, #4]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	4a08      	ldr	r2, [pc, #32]	; (8007d38 <vTaskSwitchContext+0xb4>)
 8007d18:	6013      	str	r3, [r2, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	20000538 	.word	0x20000538
 8007d2c:	20000524 	.word	0x20000524
 8007d30:	20000518 	.word	0x20000518
 8007d34:	20000414 	.word	0x20000414
 8007d38:	20000410 	.word	0x20000410

08007d3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d44:	f000 f852 	bl	8007dec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d48:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <prvIdleTask+0x28>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d9f9      	bls.n	8007d44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <prvIdleTask+0x2c>)
 8007d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d60:	e7f0      	b.n	8007d44 <prvIdleTask+0x8>
 8007d62:	bf00      	nop
 8007d64:	20000414 	.word	0x20000414
 8007d68:	e000ed04 	.word	0xe000ed04

08007d6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d72:	2300      	movs	r3, #0
 8007d74:	607b      	str	r3, [r7, #4]
 8007d76:	e00c      	b.n	8007d92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4a12      	ldr	r2, [pc, #72]	; (8007dcc <prvInitialiseTaskLists+0x60>)
 8007d84:	4413      	add	r3, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fb3f 	bl	800740a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	607b      	str	r3, [r7, #4]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b06      	cmp	r3, #6
 8007d96:	d9ef      	bls.n	8007d78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d98:	480d      	ldr	r0, [pc, #52]	; (8007dd0 <prvInitialiseTaskLists+0x64>)
 8007d9a:	f7ff fb36 	bl	800740a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d9e:	480d      	ldr	r0, [pc, #52]	; (8007dd4 <prvInitialiseTaskLists+0x68>)
 8007da0:	f7ff fb33 	bl	800740a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007da4:	480c      	ldr	r0, [pc, #48]	; (8007dd8 <prvInitialiseTaskLists+0x6c>)
 8007da6:	f7ff fb30 	bl	800740a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007daa:	480c      	ldr	r0, [pc, #48]	; (8007ddc <prvInitialiseTaskLists+0x70>)
 8007dac:	f7ff fb2d 	bl	800740a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007db0:	480b      	ldr	r0, [pc, #44]	; (8007de0 <prvInitialiseTaskLists+0x74>)
 8007db2:	f7ff fb2a 	bl	800740a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <prvInitialiseTaskLists+0x78>)
 8007db8:	4a05      	ldr	r2, [pc, #20]	; (8007dd0 <prvInitialiseTaskLists+0x64>)
 8007dba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <prvInitialiseTaskLists+0x7c>)
 8007dbe:	4a05      	ldr	r2, [pc, #20]	; (8007dd4 <prvInitialiseTaskLists+0x68>)
 8007dc0:	601a      	str	r2, [r3, #0]
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000414 	.word	0x20000414
 8007dd0:	200004a0 	.word	0x200004a0
 8007dd4:	200004b4 	.word	0x200004b4
 8007dd8:	200004d0 	.word	0x200004d0
 8007ddc:	200004e4 	.word	0x200004e4
 8007de0:	200004fc 	.word	0x200004fc
 8007de4:	200004c8 	.word	0x200004c8
 8007de8:	200004cc 	.word	0x200004cc

08007dec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007df2:	e019      	b.n	8007e28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007df4:	f000 fa0e 	bl	8008214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df8:	4b10      	ldr	r3, [pc, #64]	; (8007e3c <prvCheckTasksWaitingTermination+0x50>)
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3304      	adds	r3, #4
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff fb8a 	bl	800751e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e0a:	4b0d      	ldr	r3, [pc, #52]	; (8007e40 <prvCheckTasksWaitingTermination+0x54>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	4a0b      	ldr	r2, [pc, #44]	; (8007e40 <prvCheckTasksWaitingTermination+0x54>)
 8007e12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e14:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <prvCheckTasksWaitingTermination+0x58>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	4a0a      	ldr	r2, [pc, #40]	; (8007e44 <prvCheckTasksWaitingTermination+0x58>)
 8007e1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e1e:	f000 fa29 	bl	8008274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f810 	bl	8007e48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e28:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <prvCheckTasksWaitingTermination+0x58>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e1      	bne.n	8007df4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	200004e4 	.word	0x200004e4
 8007e40:	20000510 	.word	0x20000510
 8007e44:	200004f8 	.word	0x200004f8

08007e48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d108      	bne.n	8007e6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fb86 	bl	8008570 <vPortFree>
				vPortFree( pxTCB );
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fb83 	bl	8008570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e6a:	e018      	b.n	8007e9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d103      	bne.n	8007e7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fb7a 	bl	8008570 <vPortFree>
	}
 8007e7c:	e00f      	b.n	8007e9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d00a      	beq.n	8007e9e <prvDeleteTCB+0x56>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	60fb      	str	r3, [r7, #12]
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <prvDeleteTCB+0x54>
	}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eae:	4b0c      	ldr	r3, [pc, #48]	; (8007ee0 <prvResetNextTaskUnblockTime+0x38>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d104      	bne.n	8007ec2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007eb8:	4b0a      	ldr	r3, [pc, #40]	; (8007ee4 <prvResetNextTaskUnblockTime+0x3c>)
 8007eba:	f04f 32ff 	mov.w	r2, #4294967295
 8007ebe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ec0:	e008      	b.n	8007ed4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec2:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <prvResetNextTaskUnblockTime+0x38>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	4a04      	ldr	r2, [pc, #16]	; (8007ee4 <prvResetNextTaskUnblockTime+0x3c>)
 8007ed2:	6013      	str	r3, [r2, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	200004c8 	.word	0x200004c8
 8007ee4:	20000530 	.word	0x20000530

08007ee8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ef2:	4b29      	ldr	r3, [pc, #164]	; (8007f98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ef8:	4b28      	ldr	r3, [pc, #160]	; (8007f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3304      	adds	r3, #4
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7ff fb0d 	bl	800751e <uxListRemove>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10b      	bne.n	8007f22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007f0a:	4b24      	ldr	r3, [pc, #144]	; (8007f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	2201      	movs	r2, #1
 8007f12:	fa02 f303 	lsl.w	r3, r2, r3
 8007f16:	43da      	mvns	r2, r3
 8007f18:	4b21      	ldr	r3, [pc, #132]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	4a20      	ldr	r2, [pc, #128]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f28:	d10a      	bne.n	8007f40 <prvAddCurrentTaskToDelayedList+0x58>
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f30:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	3304      	adds	r3, #4
 8007f36:	4619      	mov	r1, r3
 8007f38:	481a      	ldr	r0, [pc, #104]	; (8007fa4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007f3a:	f7ff fa93 	bl	8007464 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f3e:	e026      	b.n	8007f8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4413      	add	r3, r2
 8007f46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f48:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d209      	bcs.n	8007f6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f58:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3304      	adds	r3, #4
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f7ff faa1 	bl	80074ac <vListInsert>
}
 8007f6a:	e010      	b.n	8007f8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f6c:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <prvAddCurrentTaskToDelayedList+0xc4>)
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3304      	adds	r3, #4
 8007f76:	4619      	mov	r1, r3
 8007f78:	4610      	mov	r0, r2
 8007f7a:	f7ff fa97 	bl	80074ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f7e:	4b0c      	ldr	r3, [pc, #48]	; (8007fb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d202      	bcs.n	8007f8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007f88:	4a09      	ldr	r2, [pc, #36]	; (8007fb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	6013      	str	r3, [r2, #0]
}
 8007f8e:	bf00      	nop
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000514 	.word	0x20000514
 8007f9c:	20000410 	.word	0x20000410
 8007fa0:	20000518 	.word	0x20000518
 8007fa4:	200004fc 	.word	0x200004fc
 8007fa8:	200004cc 	.word	0x200004cc
 8007fac:	200004c8 	.word	0x200004c8
 8007fb0:	20000530 	.word	0x20000530

08007fb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3b04      	subs	r3, #4
 8007fc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	3b04      	subs	r3, #4
 8007fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f023 0201 	bic.w	r2, r3, #1
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3b04      	subs	r3, #4
 8007fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fe4:	4a0c      	ldr	r2, [pc, #48]	; (8008018 <pxPortInitialiseStack+0x64>)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3b14      	subs	r3, #20
 8007fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3b04      	subs	r3, #4
 8007ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f06f 0202 	mvn.w	r2, #2
 8008002:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3b20      	subs	r3, #32
 8008008:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800800a:	68fb      	ldr	r3, [r7, #12]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	0800801d 	.word	0x0800801d

0800801c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008026:	4b12      	ldr	r3, [pc, #72]	; (8008070 <prvTaskExitError+0x54>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	d00a      	beq.n	8008046 <prvTaskExitError+0x2a>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	60fb      	str	r3, [r7, #12]
}
 8008042:	bf00      	nop
 8008044:	e7fe      	b.n	8008044 <prvTaskExitError+0x28>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	60bb      	str	r3, [r7, #8]
}
 8008058:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800805a:	bf00      	nop
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0fc      	beq.n	800805c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	20000008 	.word	0x20000008
	...

08008080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008080:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <pxCurrentTCBConst2>)
 8008082:	6819      	ldr	r1, [r3, #0]
 8008084:	6808      	ldr	r0, [r1, #0]
 8008086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808a:	f380 8809 	msr	PSP, r0
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f04f 0000 	mov.w	r0, #0
 8008096:	f380 8811 	msr	BASEPRI, r0
 800809a:	4770      	bx	lr
 800809c:	f3af 8000 	nop.w

080080a0 <pxCurrentTCBConst2>:
 80080a0:	20000410 	.word	0x20000410
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop

080080a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080a8:	4808      	ldr	r0, [pc, #32]	; (80080cc <prvPortStartFirstTask+0x24>)
 80080aa:	6800      	ldr	r0, [r0, #0]
 80080ac:	6800      	ldr	r0, [r0, #0]
 80080ae:	f380 8808 	msr	MSP, r0
 80080b2:	f04f 0000 	mov.w	r0, #0
 80080b6:	f380 8814 	msr	CONTROL, r0
 80080ba:	b662      	cpsie	i
 80080bc:	b661      	cpsie	f
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	df00      	svc	0
 80080c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080ca:	bf00      	nop
 80080cc:	e000ed08 	.word	0xe000ed08

080080d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080d6:	4b46      	ldr	r3, [pc, #280]	; (80081f0 <xPortStartScheduler+0x120>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a46      	ldr	r2, [pc, #280]	; (80081f4 <xPortStartScheduler+0x124>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d10a      	bne.n	80080f6 <xPortStartScheduler+0x26>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	613b      	str	r3, [r7, #16]
}
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080f6:	4b3e      	ldr	r3, [pc, #248]	; (80081f0 <xPortStartScheduler+0x120>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a3f      	ldr	r2, [pc, #252]	; (80081f8 <xPortStartScheduler+0x128>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d10a      	bne.n	8008116 <xPortStartScheduler+0x46>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	60fb      	str	r3, [r7, #12]
}
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008116:	4b39      	ldr	r3, [pc, #228]	; (80081fc <xPortStartScheduler+0x12c>)
 8008118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	22ff      	movs	r2, #255	; 0xff
 8008126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008138:	b2da      	uxtb	r2, r3
 800813a:	4b31      	ldr	r3, [pc, #196]	; (8008200 <xPortStartScheduler+0x130>)
 800813c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800813e:	4b31      	ldr	r3, [pc, #196]	; (8008204 <xPortStartScheduler+0x134>)
 8008140:	2207      	movs	r2, #7
 8008142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008144:	e009      	b.n	800815a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008146:	4b2f      	ldr	r3, [pc, #188]	; (8008204 <xPortStartScheduler+0x134>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3b01      	subs	r3, #1
 800814c:	4a2d      	ldr	r2, [pc, #180]	; (8008204 <xPortStartScheduler+0x134>)
 800814e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	b2db      	uxtb	r3, r3
 8008158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008162:	2b80      	cmp	r3, #128	; 0x80
 8008164:	d0ef      	beq.n	8008146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008166:	4b27      	ldr	r3, [pc, #156]	; (8008204 <xPortStartScheduler+0x134>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f1c3 0307 	rsb	r3, r3, #7
 800816e:	2b04      	cmp	r3, #4
 8008170:	d00a      	beq.n	8008188 <xPortStartScheduler+0xb8>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	60bb      	str	r3, [r7, #8]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008188:	4b1e      	ldr	r3, [pc, #120]	; (8008204 <xPortStartScheduler+0x134>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	021b      	lsls	r3, r3, #8
 800818e:	4a1d      	ldr	r2, [pc, #116]	; (8008204 <xPortStartScheduler+0x134>)
 8008190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008192:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <xPortStartScheduler+0x134>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800819a:	4a1a      	ldr	r2, [pc, #104]	; (8008204 <xPortStartScheduler+0x134>)
 800819c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081a6:	4b18      	ldr	r3, [pc, #96]	; (8008208 <xPortStartScheduler+0x138>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a17      	ldr	r2, [pc, #92]	; (8008208 <xPortStartScheduler+0x138>)
 80081ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081b2:	4b15      	ldr	r3, [pc, #84]	; (8008208 <xPortStartScheduler+0x138>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a14      	ldr	r2, [pc, #80]	; (8008208 <xPortStartScheduler+0x138>)
 80081b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081be:	f000 f8dd 	bl	800837c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081c2:	4b12      	ldr	r3, [pc, #72]	; (800820c <xPortStartScheduler+0x13c>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081c8:	f000 f8fc 	bl	80083c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081cc:	4b10      	ldr	r3, [pc, #64]	; (8008210 <xPortStartScheduler+0x140>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a0f      	ldr	r2, [pc, #60]	; (8008210 <xPortStartScheduler+0x140>)
 80081d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081d8:	f7ff ff66 	bl	80080a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081dc:	f7ff fd52 	bl	8007c84 <vTaskSwitchContext>
	prvTaskExitError();
 80081e0:	f7ff ff1c 	bl	800801c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	e000ed00 	.word	0xe000ed00
 80081f4:	410fc271 	.word	0x410fc271
 80081f8:	410fc270 	.word	0x410fc270
 80081fc:	e000e400 	.word	0xe000e400
 8008200:	2000053c 	.word	0x2000053c
 8008204:	20000540 	.word	0x20000540
 8008208:	e000ed20 	.word	0xe000ed20
 800820c:	20000008 	.word	0x20000008
 8008210:	e000ef34 	.word	0xe000ef34

08008214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	607b      	str	r3, [r7, #4]
}
 800822c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800822e:	4b0f      	ldr	r3, [pc, #60]	; (800826c <vPortEnterCritical+0x58>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	4a0d      	ldr	r2, [pc, #52]	; (800826c <vPortEnterCritical+0x58>)
 8008236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008238:	4b0c      	ldr	r3, [pc, #48]	; (800826c <vPortEnterCritical+0x58>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d10f      	bne.n	8008260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008240:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <vPortEnterCritical+0x5c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <vPortEnterCritical+0x4c>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	603b      	str	r3, [r7, #0]
}
 800825c:	bf00      	nop
 800825e:	e7fe      	b.n	800825e <vPortEnterCritical+0x4a>
	}
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	20000008 	.word	0x20000008
 8008270:	e000ed04 	.word	0xe000ed04

08008274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800827a:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <vPortExitCritical+0x50>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10a      	bne.n	8008298 <vPortExitCritical+0x24>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	607b      	str	r3, [r7, #4]
}
 8008294:	bf00      	nop
 8008296:	e7fe      	b.n	8008296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008298:	4b0a      	ldr	r3, [pc, #40]	; (80082c4 <vPortExitCritical+0x50>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3b01      	subs	r3, #1
 800829e:	4a09      	ldr	r2, [pc, #36]	; (80082c4 <vPortExitCritical+0x50>)
 80082a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082a2:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <vPortExitCritical+0x50>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d105      	bne.n	80082b6 <vPortExitCritical+0x42>
 80082aa:	2300      	movs	r3, #0
 80082ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20000008 	.word	0x20000008
	...

080082d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082d0:	f3ef 8009 	mrs	r0, PSP
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	4b15      	ldr	r3, [pc, #84]	; (8008330 <pxCurrentTCBConst>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	f01e 0f10 	tst.w	lr, #16
 80082e0:	bf08      	it	eq
 80082e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ea:	6010      	str	r0, [r2, #0]
 80082ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80082f4:	f380 8811 	msr	BASEPRI, r0
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f7ff fcc0 	bl	8007c84 <vTaskSwitchContext>
 8008304:	f04f 0000 	mov.w	r0, #0
 8008308:	f380 8811 	msr	BASEPRI, r0
 800830c:	bc09      	pop	{r0, r3}
 800830e:	6819      	ldr	r1, [r3, #0]
 8008310:	6808      	ldr	r0, [r1, #0]
 8008312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008316:	f01e 0f10 	tst.w	lr, #16
 800831a:	bf08      	it	eq
 800831c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008320:	f380 8809 	msr	PSP, r0
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	f3af 8000 	nop.w

08008330 <pxCurrentTCBConst>:
 8008330:	20000410 	.word	0x20000410
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop

08008338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	607b      	str	r3, [r7, #4]
}
 8008350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008352:	f7ff fbdf 	bl	8007b14 <xTaskIncrementTick>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800835c:	4b06      	ldr	r3, [pc, #24]	; (8008378 <SysTick_Handler+0x40>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	2300      	movs	r3, #0
 8008366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	f383 8811 	msr	BASEPRI, r3
}
 800836e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008380:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <vPortSetupTimerInterrupt+0x34>)
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008386:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <vPortSetupTimerInterrupt+0x38>)
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800838c:	4b0a      	ldr	r3, [pc, #40]	; (80083b8 <vPortSetupTimerInterrupt+0x3c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a0a      	ldr	r2, [pc, #40]	; (80083bc <vPortSetupTimerInterrupt+0x40>)
 8008392:	fba2 2303 	umull	r2, r3, r2, r3
 8008396:	099b      	lsrs	r3, r3, #6
 8008398:	4a09      	ldr	r2, [pc, #36]	; (80083c0 <vPortSetupTimerInterrupt+0x44>)
 800839a:	3b01      	subs	r3, #1
 800839c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800839e:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <vPortSetupTimerInterrupt+0x34>)
 80083a0:	2207      	movs	r2, #7
 80083a2:	601a      	str	r2, [r3, #0]
}
 80083a4:	bf00      	nop
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	e000e010 	.word	0xe000e010
 80083b4:	e000e018 	.word	0xe000e018
 80083b8:	200000a8 	.word	0x200000a8
 80083bc:	10624dd3 	.word	0x10624dd3
 80083c0:	e000e014 	.word	0xe000e014

080083c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083d4 <vPortEnableVFP+0x10>
 80083c8:	6801      	ldr	r1, [r0, #0]
 80083ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083ce:	6001      	str	r1, [r0, #0]
 80083d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083d2:	bf00      	nop
 80083d4:	e000ed88 	.word	0xe000ed88

080083d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	; 0x28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083e0:	2300      	movs	r3, #0
 80083e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083e4:	f7ff faec 	bl	80079c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083e8:	4b5b      	ldr	r3, [pc, #364]	; (8008558 <pvPortMalloc+0x180>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083f0:	f000 f920 	bl	8008634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083f4:	4b59      	ldr	r3, [pc, #356]	; (800855c <pvPortMalloc+0x184>)
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4013      	ands	r3, r2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f040 8093 	bne.w	8008528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d01d      	beq.n	8008444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008408:	2208      	movs	r2, #8
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	2b00      	cmp	r3, #0
 8008418:	d014      	beq.n	8008444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f023 0307 	bic.w	r3, r3, #7
 8008420:	3308      	adds	r3, #8
 8008422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f003 0307 	and.w	r3, r3, #7
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <pvPortMalloc+0x6c>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	617b      	str	r3, [r7, #20]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d06e      	beq.n	8008528 <pvPortMalloc+0x150>
 800844a:	4b45      	ldr	r3, [pc, #276]	; (8008560 <pvPortMalloc+0x188>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d869      	bhi.n	8008528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008454:	4b43      	ldr	r3, [pc, #268]	; (8008564 <pvPortMalloc+0x18c>)
 8008456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008458:	4b42      	ldr	r3, [pc, #264]	; (8008564 <pvPortMalloc+0x18c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800845e:	e004      	b.n	800846a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	d903      	bls.n	800847c <pvPortMalloc+0xa4>
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f1      	bne.n	8008460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800847c:	4b36      	ldr	r3, [pc, #216]	; (8008558 <pvPortMalloc+0x180>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008482:	429a      	cmp	r2, r3
 8008484:	d050      	beq.n	8008528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2208      	movs	r2, #8
 800848c:	4413      	add	r3, r2
 800848e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	2308      	movs	r3, #8
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d91f      	bls.n	80084e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <pvPortMalloc+0xf8>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	613b      	str	r3, [r7, #16]
}
 80084cc:	bf00      	nop
 80084ce:	e7fe      	b.n	80084ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	1ad2      	subs	r2, r2, r3
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084e2:	69b8      	ldr	r0, [r7, #24]
 80084e4:	f000 f908 	bl	80086f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084e8:	4b1d      	ldr	r3, [pc, #116]	; (8008560 <pvPortMalloc+0x188>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	4a1b      	ldr	r2, [pc, #108]	; (8008560 <pvPortMalloc+0x188>)
 80084f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084f6:	4b1a      	ldr	r3, [pc, #104]	; (8008560 <pvPortMalloc+0x188>)
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	4b1b      	ldr	r3, [pc, #108]	; (8008568 <pvPortMalloc+0x190>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d203      	bcs.n	800850a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008502:	4b17      	ldr	r3, [pc, #92]	; (8008560 <pvPortMalloc+0x188>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a18      	ldr	r2, [pc, #96]	; (8008568 <pvPortMalloc+0x190>)
 8008508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	4b13      	ldr	r3, [pc, #76]	; (800855c <pvPortMalloc+0x184>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	431a      	orrs	r2, r3
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	2200      	movs	r2, #0
 800851c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800851e:	4b13      	ldr	r3, [pc, #76]	; (800856c <pvPortMalloc+0x194>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3301      	adds	r3, #1
 8008524:	4a11      	ldr	r2, [pc, #68]	; (800856c <pvPortMalloc+0x194>)
 8008526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008528:	f7ff fa58 	bl	80079dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <pvPortMalloc+0x174>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60fb      	str	r3, [r7, #12]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <pvPortMalloc+0x172>
	return pvReturn;
 800854c:	69fb      	ldr	r3, [r7, #28]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3728      	adds	r7, #40	; 0x28
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	20001104 	.word	0x20001104
 800855c:	20001118 	.word	0x20001118
 8008560:	20001108 	.word	0x20001108
 8008564:	200010fc 	.word	0x200010fc
 8008568:	2000110c 	.word	0x2000110c
 800856c:	20001110 	.word	0x20001110

08008570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d04d      	beq.n	800861e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008582:	2308      	movs	r3, #8
 8008584:	425b      	negs	r3, r3
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4413      	add	r3, r2
 800858a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	4b24      	ldr	r3, [pc, #144]	; (8008628 <vPortFree+0xb8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4013      	ands	r3, r2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10a      	bne.n	80085b4 <vPortFree+0x44>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	60fb      	str	r3, [r7, #12]
}
 80085b0:	bf00      	nop
 80085b2:	e7fe      	b.n	80085b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <vPortFree+0x62>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	60bb      	str	r3, [r7, #8]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	4b14      	ldr	r3, [pc, #80]	; (8008628 <vPortFree+0xb8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4013      	ands	r3, r2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01e      	beq.n	800861e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d11a      	bne.n	800861e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <vPortFree+0xb8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	43db      	mvns	r3, r3
 80085f2:	401a      	ands	r2, r3
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085f8:	f7ff f9e2 	bl	80079c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	4b0a      	ldr	r3, [pc, #40]	; (800862c <vPortFree+0xbc>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4413      	add	r3, r2
 8008606:	4a09      	ldr	r2, [pc, #36]	; (800862c <vPortFree+0xbc>)
 8008608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800860a:	6938      	ldr	r0, [r7, #16]
 800860c:	f000 f874 	bl	80086f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <vPortFree+0xc0>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3301      	adds	r3, #1
 8008616:	4a06      	ldr	r2, [pc, #24]	; (8008630 <vPortFree+0xc0>)
 8008618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800861a:	f7ff f9df 	bl	80079dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800861e:	bf00      	nop
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20001118 	.word	0x20001118
 800862c:	20001108 	.word	0x20001108
 8008630:	20001114 	.word	0x20001114

08008634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800863a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800863e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008640:	4b27      	ldr	r3, [pc, #156]	; (80086e0 <prvHeapInit+0xac>)
 8008642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00c      	beq.n	8008668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3307      	adds	r3, #7
 8008652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	4a1f      	ldr	r2, [pc, #124]	; (80086e0 <prvHeapInit+0xac>)
 8008664:	4413      	add	r3, r2
 8008666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800866c:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <prvHeapInit+0xb0>)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008672:	4b1c      	ldr	r3, [pc, #112]	; (80086e4 <prvHeapInit+0xb0>)
 8008674:	2200      	movs	r2, #0
 8008676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	4413      	add	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008680:	2208      	movs	r2, #8
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	1a9b      	subs	r3, r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 0307 	bic.w	r3, r3, #7
 800868e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4a15      	ldr	r2, [pc, #84]	; (80086e8 <prvHeapInit+0xb4>)
 8008694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <prvHeapInit+0xb4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2200      	movs	r2, #0
 800869c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800869e:	4b12      	ldr	r3, [pc, #72]	; (80086e8 <prvHeapInit+0xb4>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	1ad2      	subs	r2, r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086b4:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <prvHeapInit+0xb4>)
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	4a0a      	ldr	r2, [pc, #40]	; (80086ec <prvHeapInit+0xb8>)
 80086c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <prvHeapInit+0xbc>)
 80086ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086cc:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <prvHeapInit+0xc0>)
 80086ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086d2:	601a      	str	r2, [r3, #0]
}
 80086d4:	bf00      	nop
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	20000544 	.word	0x20000544
 80086e4:	200010fc 	.word	0x200010fc
 80086e8:	20001104 	.word	0x20001104
 80086ec:	2000110c 	.word	0x2000110c
 80086f0:	20001108 	.word	0x20001108
 80086f4:	20001118 	.word	0x20001118

080086f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008700:	4b28      	ldr	r3, [pc, #160]	; (80087a4 <prvInsertBlockIntoFreeList+0xac>)
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	e002      	b.n	800870c <prvInsertBlockIntoFreeList+0x14>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	429a      	cmp	r2, r3
 8008714:	d8f7      	bhi.n	8008706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	4413      	add	r3, r2
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	429a      	cmp	r2, r3
 8008726:	d108      	bne.n	800873a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	441a      	add	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	441a      	add	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d118      	bne.n	8008780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4b15      	ldr	r3, [pc, #84]	; (80087a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d00d      	beq.n	8008776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	441a      	add	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	e008      	b.n	8008788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008776:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	e003      	b.n	8008788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d002      	beq.n	8008796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	200010fc 	.word	0x200010fc
 80087a8:	20001104 	.word	0x20001104

080087ac <findIndexByElement>:

/*
Find the index of an array in an array of char array 
*/
int findIndexByElement(char **arr, int size, char *elem)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
    // for debugging purposes
    char *b = elem;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < size; i++)
 80087bc:	2300      	movs	r3, #0
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	e011      	b.n	80087e6 <findIndexByElement+0x3a>
    {
        char *a = arr[i];
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4413      	add	r3, r2
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	617b      	str	r3, [r7, #20]
        if (strcmp(a, b) == 0)
 80087ce:	69b9      	ldr	r1, [r7, #24]
 80087d0:	6978      	ldr	r0, [r7, #20]
 80087d2:	f7f7 fd15 	bl	8000200 <strcmp>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <findIndexByElement+0x34>
        {
            return i;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	e008      	b.n	80087f2 <findIndexByElement+0x46>
    for (int i = 0; i < size; i++)
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	3301      	adds	r3, #1
 80087e4:	61fb      	str	r3, [r7, #28]
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	dbe9      	blt.n	80087c2 <findIndexByElement+0x16>
        }
    }
    return -1; // element does not exist
 80087ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3720      	adds	r7, #32
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <convertMorseToText>:
int size: size of the morse code array (mArr)

Note: Ideally, buff and mArr have the same size.
*/
void convertMorseToText(char **mArr, char *buff, int size)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 8008808:	2300      	movs	r3, #0
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	e02d      	b.n	800886a <convertMorseToText+0x6e>
    {
        int idx = findIndexByElement(alphabeticalMorse, 26, mArr[i]);
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4413      	add	r3, r2
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	461a      	mov	r2, r3
 800881a:	211a      	movs	r1, #26
 800881c:	4817      	ldr	r0, [pc, #92]	; (800887c <convertMorseToText+0x80>)
 800881e:	f7ff ffc5 	bl	80087ac <findIndexByElement>
 8008822:	61b8      	str	r0, [r7, #24]
        if (idx == -1) {
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882a:	d113      	bne.n	8008854 <convertMorseToText+0x58>
            int idx = findIndexByElement(numericalMorse, 10, mArr[i]);
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	4413      	add	r3, r2
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	210a      	movs	r1, #10
 800883a:	4811      	ldr	r0, [pc, #68]	; (8008880 <convertMorseToText+0x84>)
 800883c:	f7ff ffb6 	bl	80087ac <findIndexByElement>
 8008840:	6178      	str	r0, [r7, #20]
            buff[i] = '0' + idx;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	b2da      	uxtb	r2, r3
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	68b9      	ldr	r1, [r7, #8]
 800884a:	440b      	add	r3, r1
 800884c:	3230      	adds	r2, #48	; 0x30
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	701a      	strb	r2, [r3, #0]
 8008852:	e007      	b.n	8008864 <convertMorseToText+0x68>
        } else{
            buff[i] = 'a' + idx;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	b2da      	uxtb	r2, r3
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	440b      	add	r3, r1
 800885e:	3261      	adds	r2, #97	; 0x61
 8008860:	b2d2      	uxtb	r2, r2
 8008862:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	3301      	adds	r3, #1
 8008868:	61fb      	str	r3, [r7, #28]
 800886a:	69fa      	ldr	r2, [r7, #28]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	429a      	cmp	r2, r3
 8008870:	dbcd      	blt.n	800880e <convertMorseToText+0x12>
        }
    }
}
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	3720      	adds	r7, #32
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	2000000c 	.word	0x2000000c
 8008880:	20000074 	.word	0x20000074

08008884 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4a07      	ldr	r2, [pc, #28]	; (80088b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008894:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	4a06      	ldr	r2, [pc, #24]	; (80088b4 <vApplicationGetIdleTaskMemory+0x30>)
 800889a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2280      	movs	r2, #128	; 0x80
 80088a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80088a2:	bf00      	nop
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	2000111c 	.word	0x2000111c
 80088b4:	20001170 	.word	0x20001170

080088b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80088b8:	b5b0      	push	{r4, r5, r7, lr}
 80088ba:	b098      	sub	sp, #96	; 0x60
 80088bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80088be:	f7f7 fe89 	bl	80005d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80088c2:	f000 f8c9 	bl	8008a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80088c6:	f000 fb2d 	bl	8008f24 <MX_GPIO_Init>
  MX_DMA_Init();
 80088ca:	f000 fae1 	bl	8008e90 <MX_DMA_Init>
  MX_I2C2_Init();
 80088ce:	f000 f9af 	bl	8008c30 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80088d2:	f000 fa91 	bl	8008df8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80088d6:	f000 fa41 	bl	8008d5c <MX_TIM2_Init>
  MX_DFSDM1_Init();
 80088da:	f000 f943 	bl	8008b64 <MX_DFSDM1_Init>
  MX_DAC1_Init();
 80088de:	f000 f90d 	bl	8008afc <MX_DAC1_Init>
  MX_OCTOSPI1_Init();
 80088e2:	f000 f9e5 	bl	8008cb0 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80088e6:	484a      	ldr	r0, [pc, #296]	; (8008a10 <main+0x158>)
 80088e8:	f7fc fdb4 	bl	8005454 <HAL_TIM_Base_Start>
  HAL_DMA_Init(&hdma_dac1_ch1);
 80088ec:	4849      	ldr	r0, [pc, #292]	; (8008a14 <main+0x15c>)
 80088ee:	f7f8 fd45 	bl	800137c <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_dfsdm1_flt0);
 80088f2:	4849      	ldr	r0, [pc, #292]	; (8008a18 <main+0x160>)
 80088f4:	f7f8 fd42 	bl	800137c <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_tim2_up);
 80088f8:	4848      	ldr	r0, [pc, #288]	; (8008a1c <main+0x164>)
 80088fa:	f7f8 fd3f 	bl	800137c <HAL_DMA_Init>
  BSP_QSPI_Init();
 80088fe:	f000 fca7 	bl	8009250 <BSP_QSPI_Init>
  pMyDevice->I2cHandle = &hi2c2;
 8008902:	4b47      	ldr	r3, [pc, #284]	; (8008a20 <main+0x168>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a47      	ldr	r2, [pc, #284]	; (8008a24 <main+0x16c>)
 8008908:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  pMyDevice->I2cDevAddr      = 0x52;
 800890c:	4b44      	ldr	r3, [pc, #272]	; (8008a20 <main+0x168>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2252      	movs	r2, #82	; 0x52
 8008912:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
  pMyDevice->comms_type      =  1;
 8008916:	4b42      	ldr	r3, [pc, #264]	; (8008a20 <main+0x168>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
  pMyDevice->comms_speed_khz =  400;
 8008920:	4b3f      	ldr	r3, [pc, #252]	; (8008a20 <main+0x168>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008928:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
  VL53L0X_ResetDevice(&MyDevice);
 800892c:	483e      	ldr	r0, [pc, #248]	; (8008a28 <main+0x170>)
 800892e:	f001 ffb3 	bl	800a898 <VL53L0X_ResetDevice>
  status = VL53L0X_DataInit(&MyDevice);
 8008932:	483d      	ldr	r0, [pc, #244]	; (8008a28 <main+0x170>)
 8008934:	f001 fca6 	bl	800a284 <VL53L0X_DataInit>
 8008938:	4603      	mov	r3, r0
 800893a:	461a      	mov	r2, r3
 800893c:	4b3b      	ldr	r3, [pc, #236]	; (8008a2c <main+0x174>)
 800893e:	701a      	strb	r2, [r3, #0]
  status = VL53L0X_StaticInit(pMyDevice);
 8008940:	4b37      	ldr	r3, [pc, #220]	; (8008a20 <main+0x168>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4618      	mov	r0, r3
 8008946:	f001 fe23 	bl	800a590 <VL53L0X_StaticInit>
 800894a:	4603      	mov	r3, r0
 800894c:	461a      	mov	r2, r3
 800894e:	4b37      	ldr	r3, [pc, #220]	; (8008a2c <main+0x174>)
 8008950:	701a      	strb	r2, [r3, #0]
  status = VL53L0X_PerformRefCalibration(pMyDevice,
 8008952:	4b33      	ldr	r3, [pc, #204]	; (8008a20 <main+0x168>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a36      	ldr	r2, [pc, #216]	; (8008a30 <main+0x178>)
 8008958:	4936      	ldr	r1, [pc, #216]	; (8008a34 <main+0x17c>)
 800895a:	4618      	mov	r0, r3
 800895c:	f002 fd04 	bl	800b368 <VL53L0X_PerformRefCalibration>
 8008960:	4603      	mov	r3, r0
 8008962:	461a      	mov	r2, r3
 8008964:	4b31      	ldr	r3, [pc, #196]	; (8008a2c <main+0x174>)
 8008966:	701a      	strb	r2, [r3, #0]
          		&VhvSettings, &PhaseCal);
  status = VL53L0X_PerformRefSpadManagement(pMyDevice,
 8008968:	4b2d      	ldr	r3, [pc, #180]	; (8008a20 <main+0x168>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a32      	ldr	r2, [pc, #200]	; (8008a38 <main+0x180>)
 800896e:	4933      	ldr	r1, [pc, #204]	; (8008a3c <main+0x184>)
 8008970:	4618      	mov	r0, r3
 8008972:	f003 fa13 	bl	800bd9c <VL53L0X_PerformRefSpadManagement>
 8008976:	4603      	mov	r3, r0
 8008978:	461a      	mov	r2, r3
 800897a:	4b2c      	ldr	r3, [pc, #176]	; (8008a2c <main+0x174>)
 800897c:	701a      	strb	r2, [r3, #0]
          		&refSpadCount, &isApertureSpads);
  status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800897e:	4b28      	ldr	r3, [pc, #160]	; (8008a20 <main+0x168>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2100      	movs	r1, #0
 8008984:	4618      	mov	r0, r3
 8008986:	f002 f885 	bl	800aa94 <VL53L0X_SetDeviceMode>
 800898a:	4603      	mov	r3, r0
 800898c:	461a      	mov	r2, r3
 800898e:	4b27      	ldr	r3, [pc, #156]	; (8008a2c <main+0x174>)
 8008990:	701a      	strb	r2, [r3, #0]
  char ascii_char[2]; // null-terminated string of length 1.

  //HAL_UART_Receive_IT(&huart1, UART2_rxBuffer, 1);

  char Message[] = "Write anything on Serial Terminal\r\n";
 8008992:	4b2b      	ldr	r3, [pc, #172]	; (8008a40 <main+0x188>)
 8008994:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8008998:	461d      	mov	r5, r3
 800899a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800899c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800899e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089a2:	682b      	ldr	r3, [r5, #0]
 80089a4:	6023      	str	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)Message, strlen(Message), 10);
 80089a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7f7 fc32 	bl	8000214 <strlen>
 80089b0:	4603      	mov	r3, r0
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80089b8:	230a      	movs	r3, #10
 80089ba:	4822      	ldr	r0, [pc, #136]	; (8008a44 <main+0x18c>)
 80089bc:	f7fd fa5c 	bl	8005e78 <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of receiveTerminal */
  osThreadDef(receiveTerminal, StartReceivingTerminal, osPriorityNormal, 0, 256);
 80089c0:	4b21      	ldr	r3, [pc, #132]	; (8008a48 <main+0x190>)
 80089c2:	f107 041c 	add.w	r4, r7, #28
 80089c6:	461d      	mov	r5, r3
 80089c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80089d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTerminalHandle = osThreadCreate(osThread(receiveTerminal), NULL);
 80089d4:	f107 031c 	add.w	r3, r7, #28
 80089d8:	2100      	movs	r1, #0
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fcb5 	bl	800734a <osThreadCreate>
 80089e0:	4603      	mov	r3, r0
 80089e2:	4a1a      	ldr	r2, [pc, #104]	; (8008a4c <main+0x194>)
 80089e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of sideTask */
  osThreadDef(sideTask, StartSideTask, osPriorityNormal, 0, 256);
 80089e6:	4b1a      	ldr	r3, [pc, #104]	; (8008a50 <main+0x198>)
 80089e8:	463c      	mov	r4, r7
 80089ea:	461d      	mov	r5, r3
 80089ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80089f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sideTaskHandle = osThreadCreate(osThread(sideTask), NULL);
 80089f8:	463b      	mov	r3, r7
 80089fa:	2100      	movs	r1, #0
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fe fca4 	bl	800734a <osThreadCreate>
 8008a02:	4603      	mov	r3, r0
 8008a04:	4a13      	ldr	r2, [pc, #76]	; (8008a54 <main+0x19c>)
 8008a06:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008a08:	f7fe fc98 	bl	800733c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008a0c:	e7fe      	b.n	8008a0c <main+0x154>
 8008a0e:	bf00      	nop
 8008a10:	20001574 	.word	0x20001574
 8008a14:	20001384 	.word	0x20001384
 8008a18:	20001470 	.word	0x20001470
 8008a1c:	200015c0 	.word	0x200015c0
 8008a20:	2000009c 	.word	0x2000009c
 8008a24:	200014d0 	.word	0x200014d0
 8008a28:	200017ac 	.word	0x200017ac
 8008a2c:	20001960 	.word	0x20001960
 8008a30:	20001962 	.word	0x20001962
 8008a34:	20001961 	.word	0x20001961
 8008a38:	20001968 	.word	0x20001968
 8008a3c:	20001964 	.word	0x20001964
 8008a40:	0800f960 	.word	0x0800f960
 8008a44:	20001620 	.word	0x20001620
 8008a48:	0800f984 	.word	0x0800f984
 8008a4c:	20001770 	.word	0x20001770
 8008a50:	0800f9a0 	.word	0x0800f9a0
 8008a54:	20001774 	.word	0x20001774

08008a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b096      	sub	sp, #88	; 0x58
 8008a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008a5e:	f107 0314 	add.w	r3, r7, #20
 8008a62:	2244      	movs	r2, #68	; 0x44
 8008a64:	2100      	movs	r1, #0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f006 fa64 	bl	800ef34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008a6c:	463b      	mov	r3, r7
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	605a      	str	r2, [r3, #4]
 8008a74:	609a      	str	r2, [r3, #8]
 8008a76:	60da      	str	r2, [r3, #12]
 8008a78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008a7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008a7e:	f7fa ffcb 	bl	8003a18 <HAL_PWREx_ControlVoltageScaling>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8008a88:	f000 fbd4 	bl	8009234 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008a8c:	2310      	movs	r3, #16
 8008a8e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008a90:	2301      	movs	r3, #1
 8008a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8008a98:	2360      	movs	r3, #96	; 0x60
 8008a9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8008aa8:	2328      	movs	r3, #40	; 0x28
 8008aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008aac:	2302      	movs	r3, #2
 8008aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008ab8:	f107 0314 	add.w	r3, r7, #20
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fb f84f 	bl	8003b60 <HAL_RCC_OscConfig>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <SystemClock_Config+0x74>
  {
    Error_Handler();
 8008ac8:	f000 fbb4 	bl	8009234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008acc:	230f      	movs	r3, #15
 8008ace:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008adc:	2300      	movs	r3, #0
 8008ade:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008ae0:	463b      	mov	r3, r7
 8008ae2:	2103      	movs	r1, #3
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fb fc55 	bl	8004394 <HAL_RCC_ClockConfig>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8008af0:	f000 fba0 	bl	8009234 <Error_Handler>
  }
}
 8008af4:	bf00      	nop
 8008af6:	3758      	adds	r7, #88	; 0x58
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b08a      	sub	sp, #40	; 0x28
 8008b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8008b02:	463b      	mov	r3, r7
 8008b04:	2228      	movs	r2, #40	; 0x28
 8008b06:	2100      	movs	r1, #0
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f006 fa13 	bl	800ef34 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8008b0e:	4b13      	ldr	r3, [pc, #76]	; (8008b5c <MX_DAC1_Init+0x60>)
 8008b10:	4a13      	ldr	r2, [pc, #76]	; (8008b60 <MX_DAC1_Init+0x64>)
 8008b12:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8008b14:	4811      	ldr	r0, [pc, #68]	; (8008b5c <MX_DAC1_Init+0x60>)
 8008b16:	f7f7 fe9b 	bl	8000850 <HAL_DAC_Init>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8008b20:	f000 fb88 	bl	8009234 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8008b24:	2300      	movs	r3, #0
 8008b26:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8008b28:	230a      	movs	r3, #10
 8008b2a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8008b34:	2300      	movs	r3, #0
 8008b36:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8008b3c:	463b      	mov	r3, r7
 8008b3e:	2200      	movs	r2, #0
 8008b40:	4619      	mov	r1, r3
 8008b42:	4806      	ldr	r0, [pc, #24]	; (8008b5c <MX_DAC1_Init+0x60>)
 8008b44:	f7f7 ff0a 	bl	800095c <HAL_DAC_ConfigChannel>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8008b4e:	f000 fb71 	bl	8009234 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8008b52:	bf00      	nop
 8008b54:	3728      	adds	r7, #40	; 0x28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20001370 	.word	0x20001370
 8008b60:	40007400 	.word	0x40007400

08008b64 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8008b68:	4b2c      	ldr	r3, [pc, #176]	; (8008c1c <MX_DFSDM1_Init+0xb8>)
 8008b6a:	4a2d      	ldr	r2, [pc, #180]	; (8008c20 <MX_DFSDM1_Init+0xbc>)
 8008b6c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8008b6e:	4b2b      	ldr	r3, [pc, #172]	; (8008c1c <MX_DFSDM1_Init+0xb8>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8008b74:	4b29      	ldr	r3, [pc, #164]	; (8008c1c <MX_DFSDM1_Init+0xb8>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8008b7a:	4b28      	ldr	r3, [pc, #160]	; (8008c1c <MX_DFSDM1_Init+0xb8>)
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8008b80:	4b26      	ldr	r3, [pc, #152]	; (8008c1c <MX_DFSDM1_Init+0xb8>)
 8008b82:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8008b86:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 55;
 8008b88:	4b24      	ldr	r3, [pc, #144]	; (8008c1c <MX_DFSDM1_Init+0xb8>)
 8008b8a:	2237      	movs	r2, #55	; 0x37
 8008b8c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8008b8e:	4b23      	ldr	r3, [pc, #140]	; (8008c1c <MX_DFSDM1_Init+0xb8>)
 8008b90:	2201      	movs	r2, #1
 8008b92:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8008b94:	4821      	ldr	r0, [pc, #132]	; (8008c1c <MX_DFSDM1_Init+0xb8>)
 8008b96:	f7f8 f8ff 	bl	8000d98 <HAL_DFSDM_FilterInit>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8008ba0:	f000 fb48 	bl	8009234 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8008ba4:	4b1f      	ldr	r3, [pc, #124]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008ba6:	4a20      	ldr	r2, [pc, #128]	; (8008c28 <MX_DFSDM1_Init+0xc4>)
 8008ba8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8008baa:	4b1e      	ldr	r3, [pc, #120]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008bac:	2201      	movs	r2, #1
 8008bae:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8008bb0:	4b1c      	ldr	r3, [pc, #112]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 8008bb6:	4b1b      	ldr	r3, [pc, #108]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008bb8:	2222      	movs	r2, #34	; 0x22
 8008bba:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8008bbc:	4b19      	ldr	r3, [pc, #100]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8008bc2:	4b18      	ldr	r3, [pc, #96]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8008bc8:	4b16      	ldr	r3, [pc, #88]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8008bce:	4b15      	ldr	r3, [pc, #84]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8008bd4:	4b13      	ldr	r3, [pc, #76]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008bd6:	2204      	movs	r2, #4
 8008bd8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8008be0:	4b10      	ldr	r3, [pc, #64]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008be2:	2201      	movs	r2, #1
 8008be4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8008be6:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8008bec:	4b0d      	ldr	r3, [pc, #52]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8008bf2:	480c      	ldr	r0, [pc, #48]	; (8008c24 <MX_DFSDM1_Init+0xc0>)
 8008bf4:	f7f7 fffc 	bl	8000bf0 <HAL_DFSDM_ChannelInit>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8008bfe:	f000 fb19 	bl	8009234 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8008c02:	2201      	movs	r2, #1
 8008c04:	4909      	ldr	r1, [pc, #36]	; (8008c2c <MX_DFSDM1_Init+0xc8>)
 8008c06:	4805      	ldr	r0, [pc, #20]	; (8008c1c <MX_DFSDM1_Init+0xb8>)
 8008c08:	f7f8 f9a0 	bl	8000f4c <HAL_DFSDM_FilterConfigRegChannel>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8008c12:	f000 fb0f 	bl	8009234 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8008c16:	bf00      	nop
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	200013e4 	.word	0x200013e4
 8008c20:	40016100 	.word	0x40016100
 8008c24:	20001438 	.word	0x20001438
 8008c28:	40016040 	.word	0x40016040
 8008c2c:	00020004 	.word	0x00020004

08008c30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008c34:	4b1b      	ldr	r3, [pc, #108]	; (8008ca4 <MX_I2C2_Init+0x74>)
 8008c36:	4a1c      	ldr	r2, [pc, #112]	; (8008ca8 <MX_I2C2_Init+0x78>)
 8008c38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8008c3a:	4b1a      	ldr	r3, [pc, #104]	; (8008ca4 <MX_I2C2_Init+0x74>)
 8008c3c:	4a1b      	ldr	r2, [pc, #108]	; (8008cac <MX_I2C2_Init+0x7c>)
 8008c3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008c40:	4b18      	ldr	r3, [pc, #96]	; (8008ca4 <MX_I2C2_Init+0x74>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008c46:	4b17      	ldr	r3, [pc, #92]	; (8008ca4 <MX_I2C2_Init+0x74>)
 8008c48:	2201      	movs	r2, #1
 8008c4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008c4c:	4b15      	ldr	r3, [pc, #84]	; (8008ca4 <MX_I2C2_Init+0x74>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008c52:	4b14      	ldr	r3, [pc, #80]	; (8008ca4 <MX_I2C2_Init+0x74>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008c58:	4b12      	ldr	r3, [pc, #72]	; (8008ca4 <MX_I2C2_Init+0x74>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008c5e:	4b11      	ldr	r3, [pc, #68]	; (8008ca4 <MX_I2C2_Init+0x74>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008c64:	4b0f      	ldr	r3, [pc, #60]	; (8008ca4 <MX_I2C2_Init+0x74>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008c6a:	480e      	ldr	r0, [pc, #56]	; (8008ca4 <MX_I2C2_Init+0x74>)
 8008c6c:	f7f9 f8ae 	bl	8001dcc <HAL_I2C_Init>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8008c76:	f000 fadd 	bl	8009234 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	4809      	ldr	r0, [pc, #36]	; (8008ca4 <MX_I2C2_Init+0x74>)
 8008c7e:	f7f9 fd97 	bl	80027b0 <HAL_I2CEx_ConfigAnalogFilter>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8008c88:	f000 fad4 	bl	8009234 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4805      	ldr	r0, [pc, #20]	; (8008ca4 <MX_I2C2_Init+0x74>)
 8008c90:	f7f9 fdd9 	bl	8002846 <HAL_I2CEx_ConfigDigitalFilter>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8008c9a:	f000 facb 	bl	8009234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8008c9e:	bf00      	nop
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	200014d0 	.word	0x200014d0
 8008ca8:	40005800 	.word	0x40005800
 8008cac:	10909cec 	.word	0x10909cec

08008cb0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8008cb6:	1d3b      	adds	r3, r7, #4
 8008cb8:	2200      	movs	r2, #0
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	605a      	str	r2, [r3, #4]
 8008cbe:	609a      	str	r2, [r3, #8]
 8008cc0:	60da      	str	r2, [r3, #12]
 8008cc2:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8008cc4:	4b23      	ldr	r3, [pc, #140]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008cc6:	4a24      	ldr	r2, [pc, #144]	; (8008d58 <MX_OCTOSPI1_Init+0xa8>)
 8008cc8:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8008cca:	4b22      	ldr	r3, [pc, #136]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008ccc:	2201      	movs	r2, #1
 8008cce:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8008cd0:	4b20      	ldr	r3, [pc, #128]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8008cd6:	4b1f      	ldr	r3, [pc, #124]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008cdc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8008cde:	4b1d      	ldr	r3, [pc, #116]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8008ce4:	4b1b      	ldr	r3, [pc, #108]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8008cea:	4b1a      	ldr	r3, [pc, #104]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8008cf0:	4b18      	ldr	r3, [pc, #96]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8008cf6:	4b17      	ldr	r3, [pc, #92]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8008cfc:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8008d02:	4b14      	ldr	r3, [pc, #80]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8008d08:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8008d0e:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008d10:	2208      	movs	r2, #8
 8008d12:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8008d14:	480f      	ldr	r0, [pc, #60]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008d16:	f7f9 fde3 	bl	80028e0 <HAL_OSPI_Init>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8008d20:	f000 fa88 	bl	8009234 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8008d24:	2301      	movs	r3, #1
 8008d26:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8008d2c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8008d30:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d32:	1d3b      	adds	r3, r7, #4
 8008d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4806      	ldr	r0, [pc, #24]	; (8008d54 <MX_OCTOSPI1_Init+0xa4>)
 8008d3c:	f7fa f8ce 	bl	8002edc <HAL_OSPIM_Config>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8008d46:	f000 fa75 	bl	8009234 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8008d4a:	bf00      	nop
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20001524 	.word	0x20001524
 8008d58:	a0001000 	.word	0xa0001000

08008d5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d62:	f107 0310 	add.w	r3, r7, #16
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	605a      	str	r2, [r3, #4]
 8008d6c:	609a      	str	r2, [r3, #8]
 8008d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d70:	1d3b      	adds	r3, r7, #4
 8008d72:	2200      	movs	r2, #0
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	605a      	str	r2, [r3, #4]
 8008d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008d7a:	4b1e      	ldr	r3, [pc, #120]	; (8008df4 <MX_TIM2_Init+0x98>)
 8008d7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008d80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008d82:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <MX_TIM2_Init+0x98>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d88:	4b1a      	ldr	r3, [pc, #104]	; (8008df4 <MX_TIM2_Init+0x98>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8008d8e:	4b19      	ldr	r3, [pc, #100]	; (8008df4 <MX_TIM2_Init+0x98>)
 8008d90:	f240 7216 	movw	r2, #1814	; 0x716
 8008d94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d96:	4b17      	ldr	r3, [pc, #92]	; (8008df4 <MX_TIM2_Init+0x98>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d9c:	4b15      	ldr	r3, [pc, #84]	; (8008df4 <MX_TIM2_Init+0x98>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008da2:	4814      	ldr	r0, [pc, #80]	; (8008df4 <MX_TIM2_Init+0x98>)
 8008da4:	f7fc fafe 	bl	80053a4 <HAL_TIM_Base_Init>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008dae:	f000 fa41 	bl	8009234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008db8:	f107 0310 	add.w	r3, r7, #16
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	480d      	ldr	r0, [pc, #52]	; (8008df4 <MX_TIM2_Init+0x98>)
 8008dc0:	f7fc fd3f 	bl	8005842 <HAL_TIM_ConfigClockSource>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8008dca:	f000 fa33 	bl	8009234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008dce:	2320      	movs	r3, #32
 8008dd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008dd6:	1d3b      	adds	r3, r7, #4
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4806      	ldr	r0, [pc, #24]	; (8008df4 <MX_TIM2_Init+0x98>)
 8008ddc:	f7fc ff56 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8008de6:	f000 fa25 	bl	8009234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008dea:	bf00      	nop
 8008dec:	3720      	adds	r7, #32
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20001574 	.word	0x20001574

08008df8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008dfc:	4b22      	ldr	r3, [pc, #136]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008dfe:	4a23      	ldr	r2, [pc, #140]	; (8008e8c <MX_USART1_UART_Init+0x94>)
 8008e00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008e02:	4b21      	ldr	r3, [pc, #132]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008e08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008e0a:	4b1f      	ldr	r3, [pc, #124]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008e10:	4b1d      	ldr	r3, [pc, #116]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008e16:	4b1c      	ldr	r3, [pc, #112]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008e1c:	4b1a      	ldr	r3, [pc, #104]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e1e:	220c      	movs	r2, #12
 8008e20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e22:	4b19      	ldr	r3, [pc, #100]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e28:	4b17      	ldr	r3, [pc, #92]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008e2e:	4b16      	ldr	r3, [pc, #88]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008e34:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008e3a:	4b13      	ldr	r3, [pc, #76]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008e40:	4811      	ldr	r0, [pc, #68]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e42:	f7fc ffc9 	bl	8005dd8 <HAL_UART_Init>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008e4c:	f000 f9f2 	bl	8009234 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008e50:	2100      	movs	r1, #0
 8008e52:	480d      	ldr	r0, [pc, #52]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e54:	f7fe f98f 	bl	8007176 <HAL_UARTEx_SetTxFifoThreshold>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008e5e:	f000 f9e9 	bl	8009234 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008e62:	2100      	movs	r1, #0
 8008e64:	4808      	ldr	r0, [pc, #32]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e66:	f7fe f9c4 	bl	80071f2 <HAL_UARTEx_SetRxFifoThreshold>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008e70:	f000 f9e0 	bl	8009234 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008e74:	4804      	ldr	r0, [pc, #16]	; (8008e88 <MX_USART1_UART_Init+0x90>)
 8008e76:	f7fe f945 	bl	8007104 <HAL_UARTEx_DisableFifoMode>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008e80:	f000 f9d8 	bl	8009234 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008e84:	bf00      	nop
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20001620 	.word	0x20001620
 8008e8c:	40013800 	.word	0x40013800

08008e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008e96:	4b22      	ldr	r3, [pc, #136]	; (8008f20 <MX_DMA_Init+0x90>)
 8008e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e9a:	4a21      	ldr	r2, [pc, #132]	; (8008f20 <MX_DMA_Init+0x90>)
 8008e9c:	f043 0304 	orr.w	r3, r3, #4
 8008ea0:	6493      	str	r3, [r2, #72]	; 0x48
 8008ea2:	4b1f      	ldr	r3, [pc, #124]	; (8008f20 <MX_DMA_Init+0x90>)
 8008ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ea6:	f003 0304 	and.w	r3, r3, #4
 8008eaa:	607b      	str	r3, [r7, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008eae:	4b1c      	ldr	r3, [pc, #112]	; (8008f20 <MX_DMA_Init+0x90>)
 8008eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eb2:	4a1b      	ldr	r2, [pc, #108]	; (8008f20 <MX_DMA_Init+0x90>)
 8008eb4:	f043 0301 	orr.w	r3, r3, #1
 8008eb8:	6493      	str	r3, [r2, #72]	; 0x48
 8008eba:	4b19      	ldr	r3, [pc, #100]	; (8008f20 <MX_DMA_Init+0x90>)
 8008ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2105      	movs	r1, #5
 8008eca:	200b      	movs	r0, #11
 8008ecc:	f7f7 fc96 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008ed0:	200b      	movs	r0, #11
 8008ed2:	f7f7 fcaf 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2105      	movs	r1, #5
 8008eda:	200c      	movs	r0, #12
 8008edc:	f7f7 fc8e 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008ee0:	200c      	movs	r0, #12
 8008ee2:	f7f7 fca7 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2105      	movs	r1, #5
 8008eea:	200d      	movs	r0, #13
 8008eec:	f7f7 fc86 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8008ef0:	200d      	movs	r0, #13
 8008ef2:	f7f7 fc9f 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	2105      	movs	r1, #5
 8008efa:	200e      	movs	r0, #14
 8008efc:	f7f7 fc7e 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8008f00:	200e      	movs	r0, #14
 8008f02:	f7f7 fc97 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8008f06:	2200      	movs	r2, #0
 8008f08:	2105      	movs	r1, #5
 8008f0a:	200f      	movs	r0, #15
 8008f0c:	f7f7 fc76 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8008f10:	200f      	movs	r0, #15
 8008f12:	f7f7 fc8f 	bl	8000834 <HAL_NVIC_EnableIRQ>

}
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	40021000 	.word	0x40021000

08008f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08a      	sub	sp, #40	; 0x28
 8008f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f2a:	f107 0314 	add.w	r3, r7, #20
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	605a      	str	r2, [r3, #4]
 8008f34:	609a      	str	r2, [r3, #8]
 8008f36:	60da      	str	r2, [r3, #12]
 8008f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f3a:	4b3c      	ldr	r3, [pc, #240]	; (800902c <MX_GPIO_Init+0x108>)
 8008f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f3e:	4a3b      	ldr	r2, [pc, #236]	; (800902c <MX_GPIO_Init+0x108>)
 8008f40:	f043 0304 	orr.w	r3, r3, #4
 8008f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f46:	4b39      	ldr	r3, [pc, #228]	; (800902c <MX_GPIO_Init+0x108>)
 8008f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	613b      	str	r3, [r7, #16]
 8008f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f52:	4b36      	ldr	r3, [pc, #216]	; (800902c <MX_GPIO_Init+0x108>)
 8008f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f56:	4a35      	ldr	r2, [pc, #212]	; (800902c <MX_GPIO_Init+0x108>)
 8008f58:	f043 0301 	orr.w	r3, r3, #1
 8008f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f5e:	4b33      	ldr	r3, [pc, #204]	; (800902c <MX_GPIO_Init+0x108>)
 8008f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008f6a:	4b30      	ldr	r3, [pc, #192]	; (800902c <MX_GPIO_Init+0x108>)
 8008f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6e:	4a2f      	ldr	r2, [pc, #188]	; (800902c <MX_GPIO_Init+0x108>)
 8008f70:	f043 0310 	orr.w	r3, r3, #16
 8008f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f76:	4b2d      	ldr	r3, [pc, #180]	; (800902c <MX_GPIO_Init+0x108>)
 8008f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7a:	f003 0310 	and.w	r3, r3, #16
 8008f7e:	60bb      	str	r3, [r7, #8]
 8008f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f82:	4b2a      	ldr	r3, [pc, #168]	; (800902c <MX_GPIO_Init+0x108>)
 8008f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f86:	4a29      	ldr	r2, [pc, #164]	; (800902c <MX_GPIO_Init+0x108>)
 8008f88:	f043 0302 	orr.w	r3, r3, #2
 8008f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f8e:	4b27      	ldr	r3, [pc, #156]	; (800902c <MX_GPIO_Init+0x108>)
 8008f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	607b      	str	r3, [r7, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f9a:	4b24      	ldr	r3, [pc, #144]	; (800902c <MX_GPIO_Init+0x108>)
 8008f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f9e:	4a23      	ldr	r2, [pc, #140]	; (800902c <MX_GPIO_Init+0x108>)
 8008fa0:	f043 0308 	orr.w	r3, r3, #8
 8008fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fa6:	4b21      	ldr	r3, [pc, #132]	; (800902c <MX_GPIO_Init+0x108>)
 8008fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008faa:	f003 0308 	and.w	r3, r3, #8
 8008fae:	603b      	str	r3, [r7, #0]
 8008fb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008fb8:	481d      	ldr	r0, [pc, #116]	; (8009030 <MX_GPIO_Init+0x10c>)
 8008fba:	f7f8 fed7 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUEBUTTON_Pin */
  GPIO_InitStruct.Pin = BLUEBUTTON_Pin;
 8008fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008fc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUEBUTTON_GPIO_Port, &GPIO_InitStruct);
 8008fce:	f107 0314 	add.w	r3, r7, #20
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	4817      	ldr	r0, [pc, #92]	; (8009034 <MX_GPIO_Init+0x110>)
 8008fd6:	f7f8 fc45 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8008fda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8008fec:	f107 0314 	add.w	r3, r7, #20
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	480f      	ldr	r0, [pc, #60]	; (8009030 <MX_GPIO_Init+0x10c>)
 8008ff4:	f7f8 fc36 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008ffe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009004:	2300      	movs	r3, #0
 8009006:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009008:	f107 0314 	add.w	r3, r7, #20
 800900c:	4619      	mov	r1, r3
 800900e:	480a      	ldr	r0, [pc, #40]	; (8009038 <MX_GPIO_Init+0x114>)
 8009010:	f7f8 fc28 	bl	8001864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8009014:	2200      	movs	r2, #0
 8009016:	2105      	movs	r1, #5
 8009018:	2028      	movs	r0, #40	; 0x28
 800901a:	f7f7 fbef 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800901e:	2028      	movs	r0, #40	; 0x28
 8009020:	f7f7 fc08 	bl	8000834 <HAL_NVIC_EnableIRQ>

}
 8009024:	bf00      	nop
 8009026:	3728      	adds	r7, #40	; 0x28
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	40021000 	.word	0x40021000
 8009030:	48000400 	.word	0x48000400
 8009034:	48000800 	.word	0x48000800
 8009038:	48000c00 	.word	0x48000c00

0800903c <read_char_morse>:
    VL53L0X_GetPalErrorString(status, buffer);
    printf("API Status: %i : %s\n", status, buffer);
}

void read_char_morse() // reads a single ascii character (multiple morse codes)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
	int mode = 0; // 0=not started reading. 1=reading(waiting for hand to leave sensor). 2=waiting for additional morse code
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	60bb      	str	r3, [r7, #8]
	int counter = 0;
 800904a:	2300      	movs	r3, #0
 800904c:	607b      	str	r3, [r7, #4]
	while(1)
	{
		  status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice, &rangeData);
 800904e:	4b2d      	ldr	r3, [pc, #180]	; (8009104 <read_char_morse+0xc8>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	492d      	ldr	r1, [pc, #180]	; (8009108 <read_char_morse+0xcc>)
 8009054:	4618      	mov	r0, r3
 8009056:	f002 fcb5 	bl	800b9c4 <VL53L0X_PerformSingleRangingMeasurement>
 800905a:	4603      	mov	r3, r0
 800905c:	461a      	mov	r2, r3
 800905e:	4b2b      	ldr	r3, [pc, #172]	; (800910c <read_char_morse+0xd0>)
 8009060:	701a      	strb	r2, [r3, #0]
		  distance_output = pRangeData->RangeMilliMeter;
 8009062:	4b2b      	ldr	r3, [pc, #172]	; (8009110 <read_char_morse+0xd4>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	891a      	ldrh	r2, [r3, #8]
 8009068:	4b2a      	ldr	r3, [pc, #168]	; (8009114 <read_char_morse+0xd8>)
 800906a:	801a      	strh	r2, [r3, #0]
		  //snprintf(output, sizeof(output), "%d\n\r", distance_output);
		  //HAL_UART_Transmit(&huart1, output, strlen(output), 100);
		  if (distance_output>THRES_DISTANCE)
 800906c:	4b29      	ldr	r3, [pc, #164]	; (8009114 <read_char_morse+0xd8>)
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	2b64      	cmp	r3, #100	; 0x64
 8009072:	d924      	bls.n	80090be <read_char_morse+0x82>
		  {
			  if (mode==1){
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d112      	bne.n	80090a0 <read_char_morse+0x64>
				  mode = 2;
 800907a:	2302      	movs	r3, #2
 800907c:	60fb      	str	r3, [r7, #12]
				  morse[i] = (counter>=DURATION_THRES) ? '-' : '.';
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b07      	cmp	r3, #7
 8009082:	dd01      	ble.n	8009088 <read_char_morse+0x4c>
 8009084:	212d      	movs	r1, #45	; 0x2d
 8009086:	e000      	b.n	800908a <read_char_morse+0x4e>
 8009088:	212e      	movs	r1, #46	; 0x2e
 800908a:	4a23      	ldr	r2, [pc, #140]	; (8009118 <read_char_morse+0xdc>)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	4413      	add	r3, r2
 8009090:	460a      	mov	r2, r1
 8009092:	701a      	strb	r2, [r3, #0]
				  i++;
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	3301      	adds	r3, #1
 8009098:	60bb      	str	r3, [r7, #8]
				  counter = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	607b      	str	r3, [r7, #4]
 800909e:	e028      	b.n	80090f2 <read_char_morse+0xb6>
			  } else if (mode==2){
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d125      	bne.n	80090f2 <read_char_morse+0xb6>
				  counter++;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3301      	adds	r3, #1
 80090aa:	607b      	str	r3, [r7, #4]
				  if (counter>14){
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b0e      	cmp	r3, #14
 80090b0:	dd1f      	ble.n	80090f2 <read_char_morse+0xb6>
					  morse[i]='\0';
 80090b2:	4a19      	ldr	r2, [pc, #100]	; (8009118 <read_char_morse+0xdc>)
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4413      	add	r3, r2
 80090b8:	2200      	movs	r2, #0
 80090ba:	701a      	strb	r2, [r3, #0]
					  break;
 80090bc:	e01d      	b.n	80090fa <read_char_morse+0xbe>
				  }
			  }


		  } else  if (distance_output<THRES_DISTANCE && (mode==0||mode==2)) {
 80090be:	4b15      	ldr	r3, [pc, #84]	; (8009114 <read_char_morse+0xd8>)
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	2b63      	cmp	r3, #99	; 0x63
 80090c4:	d80b      	bhi.n	80090de <read_char_morse+0xa2>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <read_char_morse+0x96>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d105      	bne.n	80090de <read_char_morse+0xa2>
			  counter++;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	3301      	adds	r3, #1
 80090d6:	607b      	str	r3, [r7, #4]
			  mode = 1;
 80090d8:	2301      	movs	r3, #1
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	e009      	b.n	80090f2 <read_char_morse+0xb6>
		  } else if (distance_output<THRES_DISTANCE && mode==1) {
 80090de:	4b0d      	ldr	r3, [pc, #52]	; (8009114 <read_char_morse+0xd8>)
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	2b63      	cmp	r3, #99	; 0x63
 80090e4:	d805      	bhi.n	80090f2 <read_char_morse+0xb6>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d102      	bne.n	80090f2 <read_char_morse+0xb6>
			  counter++;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	3301      	adds	r3, #1
 80090f0:	607b      	str	r3, [r7, #4]
		  }

		  osDelay(WAITTIME);
 80090f2:	2001      	movs	r0, #1
 80090f4:	f7fe f975 	bl	80073e2 <osDelay>
		  status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice, &rangeData);
 80090f8:	e7a9      	b.n	800904e <read_char_morse+0x12>
	}



}
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	2000009c 	.word	0x2000009c
 8009108:	2000196c 	.word	0x2000196c
 800910c:	20001960 	.word	0x20001960
 8009110:	200000a0 	.word	0x200000a0
 8009114:	200000a4 	.word	0x200000a4
 8009118:	20001988 	.word	0x20001988

0800911c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	80fb      	strh	r3, [r7, #6]
//		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
//	} else {
//		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
//	}

}
 8009126:	bf00      	nop
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <HAL_DFSDM_FilterRegConvCpltCallback>:
	interruptFlag = 1;
	HAL_UART_Receive_IT(&huart1, UART2_rxBuffer, 1);

}
//
void HAL_DFSDM_FilterRegConvCpltCallback (DFSDM_Filter_HandleTypeDef * hdfsdm_filter) {
 8009132:	b480      	push	{r7}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
//	if (BSP_QSPI_Write(&forDac, 0x330000, 100000) != QSPI_OK) Error_Handler();

//	if (BSP_QSPI_Read(&forDac, 0x210000, 100000) != 0) Error_Handler();
//	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 100000, DAC_ALIGN_12B_R);

}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
	...

08009148 <StartReceivingTerminal>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceivingTerminal */
void StartReceivingTerminal(void const * argument)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char ascii_char[2];
  /* Infinite loop */
  for(;;)
  {
	  	osDelay(1000);
 8009150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009154:	f7fe f945 	bl	80073e2 <osDelay>
	  	char* array[1];
		read_char_morse();
 8009158:	f7ff ff70 	bl	800903c <read_char_morse>
		array[0] = morse;
 800915c:	4b16      	ldr	r3, [pc, #88]	; (80091b8 <StartReceivingTerminal+0x70>)
 800915e:	60bb      	str	r3, [r7, #8]
		convertMorseToText(array, ascii_char, 1);
 8009160:	f107 010c 	add.w	r1, r7, #12
 8009164:	f107 0308 	add.w	r3, r7, #8
 8009168:	2201      	movs	r2, #1
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fb46 	bl	80087fc <convertMorseToText>
		ascii_char[1]='\0';
 8009170:	2300      	movs	r3, #0
 8009172:	737b      	strb	r3, [r7, #13]
		snprintf(output, sizeof(output), "%s\n\r", ascii_char);
 8009174:	f107 030c 	add.w	r3, r7, #12
 8009178:	4a10      	ldr	r2, [pc, #64]	; (80091bc <StartReceivingTerminal+0x74>)
 800917a:	2132      	movs	r1, #50	; 0x32
 800917c:	4810      	ldr	r0, [pc, #64]	; (80091c0 <StartReceivingTerminal+0x78>)
 800917e:	f005 fee1 	bl	800ef44 <sniprintf>
		HAL_UART_Transmit(&huart1, output, strlen(output), 100);
 8009182:	480f      	ldr	r0, [pc, #60]	; (80091c0 <StartReceivingTerminal+0x78>)
 8009184:	f7f7 f846 	bl	8000214 <strlen>
 8009188:	4603      	mov	r3, r0
 800918a:	b29a      	uxth	r2, r3
 800918c:	2364      	movs	r3, #100	; 0x64
 800918e:	490c      	ldr	r1, [pc, #48]	; (80091c0 <StartReceivingTerminal+0x78>)
 8009190:	480c      	ldr	r0, [pc, #48]	; (80091c4 <StartReceivingTerminal+0x7c>)
 8009192:	f7fc fe71 	bl	8005e78 <HAL_UART_Transmit>
		snprintf(output, sizeof(output), "%s\n\r", morse);
 8009196:	4b08      	ldr	r3, [pc, #32]	; (80091b8 <StartReceivingTerminal+0x70>)
 8009198:	4a08      	ldr	r2, [pc, #32]	; (80091bc <StartReceivingTerminal+0x74>)
 800919a:	2132      	movs	r1, #50	; 0x32
 800919c:	4808      	ldr	r0, [pc, #32]	; (80091c0 <StartReceivingTerminal+0x78>)
 800919e:	f005 fed1 	bl	800ef44 <sniprintf>
		HAL_UART_Transmit(&huart1, output, strlen(output), 100);
 80091a2:	4807      	ldr	r0, [pc, #28]	; (80091c0 <StartReceivingTerminal+0x78>)
 80091a4:	f7f7 f836 	bl	8000214 <strlen>
 80091a8:	4603      	mov	r3, r0
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	2364      	movs	r3, #100	; 0x64
 80091ae:	4904      	ldr	r1, [pc, #16]	; (80091c0 <StartReceivingTerminal+0x78>)
 80091b0:	4804      	ldr	r0, [pc, #16]	; (80091c4 <StartReceivingTerminal+0x7c>)
 80091b2:	f7fc fe61 	bl	8005e78 <HAL_UART_Transmit>
  {
 80091b6:	e7cb      	b.n	8009150 <StartReceivingTerminal+0x8>
 80091b8:	20001988 	.word	0x20001988
 80091bc:	0800f9d4 	.word	0x0800f9d4
 80091c0:	20001778 	.word	0x20001778
 80091c4:	20001620 	.word	0x20001620

080091c8 <StartSideTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSideTask */
void StartSideTask(void const * argument)
{
 80091c8:	b5b0      	push	{r4, r5, r7, lr}
 80091ca:	b08c      	sub	sp, #48	; 0x30
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSideTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80091d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80091d4:	f7fe f905 	bl	80073e2 <osDelay>
    char Message[] = "Write anything on Serial Terminal\r\n";
 80091d8:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <StartSideTask+0x40>)
 80091da:	f107 040c 	add.w	r4, r7, #12
 80091de:	461d      	mov	r5, r3
 80091e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	6023      	str	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)Message, strlen(Message), 10);
 80091ec:	f107 030c 	add.w	r3, r7, #12
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7f7 f80f 	bl	8000214 <strlen>
 80091f6:	4603      	mov	r3, r0
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	f107 010c 	add.w	r1, r7, #12
 80091fe:	230a      	movs	r3, #10
 8009200:	4802      	ldr	r0, [pc, #8]	; (800920c <StartSideTask+0x44>)
 8009202:	f7fc fe39 	bl	8005e78 <HAL_UART_Transmit>
  {
 8009206:	e7e3      	b.n	80091d0 <StartSideTask+0x8>
 8009208:	0800f960 	.word	0x0800f960
 800920c:	20001620 	.word	0x20001620

08009210 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a04      	ldr	r2, [pc, #16]	; (8009230 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d101      	bne.n	8009226 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8009222:	f7f7 f9ef 	bl	8000604 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40001400 	.word	0x40001400

08009234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009238:	b672      	cpsid	i
}
 800923a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800923c:	2201      	movs	r2, #1
 800923e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009242:	4802      	ldr	r0, [pc, #8]	; (800924c <Error_Handler+0x18>)
 8009244:	f7f8 fd92 	bl	8001d6c <HAL_GPIO_WritePin>
 8009248:	e7f8      	b.n	800923c <Error_Handler+0x8>
 800924a:	bf00      	nop
 800924c:	48000400 	.word	0x48000400

08009250 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8009256:	4b37      	ldr	r3, [pc, #220]	; (8009334 <BSP_QSPI_Init+0xe4>)
 8009258:	4a37      	ldr	r2, [pc, #220]	; (8009338 <BSP_QSPI_Init+0xe8>)
 800925a:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 800925c:	4835      	ldr	r0, [pc, #212]	; (8009334 <BSP_QSPI_Init+0xe4>)
 800925e:	f7f9 fbe9 	bl	8002a34 <HAL_OSPI_DeInit>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e05f      	b.n	800932c <BSP_QSPI_Init+0xdc>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 800926c:	f000 f866 	bl	800933c <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8009270:	4b30      	ldr	r3, [pc, #192]	; (8009334 <BSP_QSPI_Init+0xe4>)
 8009272:	2204      	movs	r2, #4
 8009274:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8009276:	4b2f      	ldr	r3, [pc, #188]	; (8009334 <BSP_QSPI_Init+0xe4>)
 8009278:	2200      	movs	r2, #0
 800927a:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800927c:	4b2d      	ldr	r3, [pc, #180]	; (8009334 <BSP_QSPI_Init+0xe4>)
 800927e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009282:	60da      	str	r2, [r3, #12]
 8009284:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009288:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	fa93 f3a3 	rbit	r3, r3
 8009290:	607b      	str	r3, [r7, #4]
  return result;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <BSP_QSPI_Init+0x50>
    return 32U;
 800929c:	2320      	movs	r3, #32
 800929e:	e003      	b.n	80092a8 <BSP_QSPI_Init+0x58>
  return __builtin_clz(value);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	fab3 f383 	clz	r3, r3
 80092a6:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 80092a8:	461a      	mov	r2, r3
 80092aa:	4b22      	ldr	r3, [pc, #136]	; (8009334 <BSP_QSPI_Init+0xe4>)
 80092ac:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 80092ae:	4b21      	ldr	r3, [pc, #132]	; (8009334 <BSP_QSPI_Init+0xe4>)
 80092b0:	2201      	movs	r2, #1
 80092b2:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 80092b4:	4b1f      	ldr	r3, [pc, #124]	; (8009334 <BSP_QSPI_Init+0xe4>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 80092ba:	4b1e      	ldr	r3, [pc, #120]	; (8009334 <BSP_QSPI_Init+0xe4>)
 80092bc:	2200      	movs	r2, #0
 80092be:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 80092c0:	4b1c      	ldr	r3, [pc, #112]	; (8009334 <BSP_QSPI_Init+0xe4>)
 80092c2:	2204      	movs	r2, #4
 80092c4:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80092c6:	4b1b      	ldr	r3, [pc, #108]	; (8009334 <BSP_QSPI_Init+0xe4>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80092cc:	4b19      	ldr	r3, [pc, #100]	; (8009334 <BSP_QSPI_Init+0xe4>)
 80092ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d2:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 80092d4:	4b17      	ldr	r3, [pc, #92]	; (8009334 <BSP_QSPI_Init+0xe4>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 80092da:	4b16      	ldr	r3, [pc, #88]	; (8009334 <BSP_QSPI_Init+0xe4>)
 80092dc:	2200      	movs	r2, #0
 80092de:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80092e0:	4814      	ldr	r0, [pc, #80]	; (8009334 <BSP_QSPI_Init+0xe4>)
 80092e2:	f7f9 fafd 	bl	80028e0 <HAL_OSPI_Init>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e01d      	b.n	800932c <BSP_QSPI_Init+0xdc>
//  {
//    return QSPI_NOT_SUPPORTED;
//  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80092f0:	2101      	movs	r1, #1
 80092f2:	4810      	ldr	r0, [pc, #64]	; (8009334 <BSP_QSPI_Init+0xe4>)
 80092f4:	f000 f909 	bl	800950a <QSPI_QuadMode>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <BSP_QSPI_Init+0xb2>
  {
    return QSPI_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e014      	b.n	800932c <BSP_QSPI_Init+0xdc>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8009302:	2101      	movs	r1, #1
 8009304:	480b      	ldr	r0, [pc, #44]	; (8009334 <BSP_QSPI_Init+0xe4>)
 8009306:	f000 f9ac 	bl	8009662 <QSPI_HighPerfMode>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e00b      	b.n	800932c <BSP_QSPI_Init+0xdc>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 8009314:	4b07      	ldr	r3, [pc, #28]	; (8009334 <BSP_QSPI_Init+0xe4>)
 8009316:	2202      	movs	r2, #2
 8009318:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 800931a:	4806      	ldr	r0, [pc, #24]	; (8009334 <BSP_QSPI_Init+0xe4>)
 800931c:	f7f9 fae0 	bl	80028e0 <HAL_OSPI_Init>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <BSP_QSPI_Init+0xda>
  {
    return QSPI_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e000      	b.n	800932c <BSP_QSPI_Init+0xdc>
  }

  return QSPI_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	20001990 	.word	0x20001990
 8009338:	a0001000 	.word	0xa0001000

0800933c <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 8009342:	4b1c      	ldr	r3, [pc, #112]	; (80093b4 <BSP_QSPI_MspInit+0x78>)
 8009344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009346:	4a1b      	ldr	r2, [pc, #108]	; (80093b4 <BSP_QSPI_MspInit+0x78>)
 8009348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800934c:	6513      	str	r3, [r2, #80]	; 0x50
 800934e:	4b19      	ldr	r3, [pc, #100]	; (80093b4 <BSP_QSPI_MspInit+0x78>)
 8009350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009356:	60bb      	str	r3, [r7, #8]
 8009358:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 800935a:	4b16      	ldr	r3, [pc, #88]	; (80093b4 <BSP_QSPI_MspInit+0x78>)
 800935c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935e:	4a15      	ldr	r2, [pc, #84]	; (80093b4 <BSP_QSPI_MspInit+0x78>)
 8009360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009364:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 8009366:	4b13      	ldr	r3, [pc, #76]	; (80093b4 <BSP_QSPI_MspInit+0x78>)
 8009368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936a:	4a12      	ldr	r2, [pc, #72]	; (80093b4 <BSP_QSPI_MspInit+0x78>)
 800936c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009370:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009372:	4b10      	ldr	r3, [pc, #64]	; (80093b4 <BSP_QSPI_MspInit+0x78>)
 8009374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009376:	4a0f      	ldr	r2, [pc, #60]	; (80093b4 <BSP_QSPI_MspInit+0x78>)
 8009378:	f043 0310 	orr.w	r3, r3, #16
 800937c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800937e:	4b0d      	ldr	r3, [pc, #52]	; (80093b4 <BSP_QSPI_MspInit+0x78>)
 8009380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009382:	f003 0310 	and.w	r3, r3, #16
 8009386:	607b      	str	r3, [r7, #4]
 8009388:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 800938a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800938e:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009390:	2302      	movs	r3, #2
 8009392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009394:	2300      	movs	r3, #0
 8009396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009398:	2303      	movs	r3, #3
 800939a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800939c:	230a      	movs	r3, #10
 800939e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80093a0:	f107 030c 	add.w	r3, r7, #12
 80093a4:	4619      	mov	r1, r3
 80093a6:	4804      	ldr	r0, [pc, #16]	; (80093b8 <BSP_QSPI_MspInit+0x7c>)
 80093a8:	f7f8 fa5c 	bl	8001864 <HAL_GPIO_Init>
}
 80093ac:	bf00      	nop
 80093ae:	3720      	adds	r7, #32
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	40021000 	.word	0x40021000
 80093b8:	48001000 	.word	0x48001000

080093bc <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b09c      	sub	sp, #112	; 0x70
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80093c4:	2300      	movs	r3, #0
 80093c6:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80093c8:	2300      	movs	r3, #0
 80093ca:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 80093cc:	2306      	movs	r3, #6
 80093ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80093d0:	2301      	movs	r3, #1
 80093d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80093d4:	2300      	movs	r3, #0
 80093d6:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80093d8:	2300      	movs	r3, #0
 80093da:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80093dc:	2300      	movs	r3, #0
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80093e0:	2300      	movs	r3, #0
 80093e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80093e4:	2300      	movs	r3, #0
 80093e6:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80093f0:	2300      	movs	r3, #0
 80093f2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80093f4:	f107 0320 	add.w	r3, r7, #32
 80093f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7f9 fb3f 	bl	8002a82 <HAL_OSPI_Command>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e02e      	b.n	800946c <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 800940e:	2302      	movs	r3, #2
 8009410:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8009412:	2302      	movs	r3, #2
 8009414:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8009416:	2300      	movs	r3, #0
 8009418:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800941a:	2310      	movs	r3, #16
 800941c:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800941e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009422:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 8009424:	2305      	movs	r3, #5
 8009426:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 8009428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800942c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 800942e:	2301      	movs	r3, #1
 8009430:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8009432:	2300      	movs	r3, #0
 8009434:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009436:	f107 0320 	add.w	r3, r7, #32
 800943a:	f241 3288 	movw	r2, #5000	; 0x1388
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7f9 fb1e 	bl	8002a82 <HAL_OSPI_Command>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e00d      	b.n	800946c <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009450:	f107 030c 	add.w	r3, r7, #12
 8009454:	f241 3288 	movw	r2, #5000	; 0x1388
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7f9 fca8 	bl	8002db0 <HAL_OSPI_AutoPolling>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e000      	b.n	800946c <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3770      	adds	r7, #112	; 0x70
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b09c      	sub	sp, #112	; 0x70
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800947e:	2300      	movs	r3, #0
 8009480:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009482:	2300      	movs	r3, #0
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8009486:	2305      	movs	r3, #5
 8009488:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800948a:	2301      	movs	r3, #1
 800948c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800948e:	2300      	movs	r3, #0
 8009490:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009492:	2300      	movs	r3, #0
 8009494:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009496:	2300      	movs	r3, #0
 8009498:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800949a:	2300      	movs	r3, #0
 800949c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800949e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094a2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 80094a4:	2301      	movs	r3, #1
 80094a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80094a8:	2300      	movs	r3, #0
 80094aa:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80094b0:	2300      	movs	r3, #0
 80094b2:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80094b4:	2300      	movs	r3, #0
 80094b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 80094bc:	2301      	movs	r3, #1
 80094be:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80094c0:	2300      	movs	r3, #0
 80094c2:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80094c4:	2310      	movs	r3, #16
 80094c6:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80094c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094cc:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80094ce:	f107 0320 	add.w	r3, r7, #32
 80094d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7f9 fad2 	bl	8002a82 <HAL_OSPI_Command>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e00c      	b.n	8009502 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 80094e8:	f107 030c 	add.w	r3, r7, #12
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7f9 fc5d 	bl	8002db0 <HAL_OSPI_AutoPolling>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e000      	b.n	8009502 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3770      	adds	r7, #112	; 0x70
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b098      	sub	sp, #96	; 0x60
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009516:	2300      	movs	r3, #0
 8009518:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800951a:	2300      	movs	r3, #0
 800951c:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800951e:	2305      	movs	r3, #5
 8009520:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009522:	2301      	movs	r3, #1
 8009524:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009526:	2300      	movs	r3, #0
 8009528:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800952a:	2300      	movs	r3, #0
 800952c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800952e:	2300      	movs	r3, #0
 8009530:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009532:	2300      	movs	r3, #0
 8009534:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8009536:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800953a:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800953c:	2300      	movs	r3, #0
 800953e:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8009544:	2301      	movs	r3, #1
 8009546:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009548:	2300      	movs	r3, #0
 800954a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800954c:	2300      	movs	r3, #0
 800954e:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009550:	f107 0310 	add.w	r3, r7, #16
 8009554:	f241 3288 	movw	r2, #5000	; 0x1388
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7f9 fa91 	bl	8002a82 <HAL_OSPI_Command>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e077      	b.n	800965a <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800956a:	f107 030f 	add.w	r3, r7, #15
 800956e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7f9 fb78 	bl	8002c6a <HAL_OSPI_Receive>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e06a      	b.n	800965a <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff ff19 	bl	80093bc <QSPI_WriteEnable>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e062      	b.n	800965a <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d105      	bne.n	80095a6 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	73fb      	strb	r3, [r7, #15]
 80095a4:	e004      	b.n	80095b0 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
 80095a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80095b0:	2301      	movs	r3, #1
 80095b2:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80095b4:	f107 0310 	add.w	r3, r7, #16
 80095b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095bc:	4619      	mov	r1, r3
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7f9 fa5f 	bl	8002a82 <HAL_OSPI_Command>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e045      	b.n	800965a <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80095ce:	f107 030f 	add.w	r3, r7, #15
 80095d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7f9 fad3 	bl	8002b84 <HAL_OSPI_Transmit>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e038      	b.n	800965a <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80095e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff ff41 	bl	8009474 <QSPI_AutoPollingMemReady>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e02e      	b.n	800965a <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80095fc:	2305      	movs	r3, #5
 80095fe:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009600:	f107 0310 	add.w	r3, r7, #16
 8009604:	f241 3288 	movw	r2, #5000	; 0x1388
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7f9 fa39 	bl	8002a82 <HAL_OSPI_Command>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e01f      	b.n	800965a <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800961a:	f107 030f 	add.w	r3, r7, #15
 800961e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7f9 fb20 	bl	8002c6a <HAL_OSPI_Receive>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e012      	b.n	800965a <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963a:	2b00      	cmp	r3, #0
 800963c:	d102      	bne.n	8009644 <QSPI_QuadMode+0x13a>
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d007      	beq.n	8009654 <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800964a:	2b00      	cmp	r3, #0
 800964c:	d004      	beq.n	8009658 <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800964e:	78fb      	ldrb	r3, [r7, #3]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d101      	bne.n	8009658 <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e000      	b.n	800965a <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3760      	adds	r7, #96	; 0x60
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b098      	sub	sp, #96	; 0x60
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	460b      	mov	r3, r1
 800966c:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800966e:	2300      	movs	r3, #0
 8009670:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009672:	2300      	movs	r3, #0
 8009674:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8009676:	2305      	movs	r3, #5
 8009678:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800967a:	2301      	movs	r3, #1
 800967c:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800967e:	2300      	movs	r3, #0
 8009680:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009682:	2300      	movs	r3, #0
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009686:	2300      	movs	r3, #0
 8009688:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800968a:	2300      	movs	r3, #0
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800968e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009692:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8009694:	2300      	movs	r3, #0
 8009696:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800969c:	2301      	movs	r3, #1
 800969e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80096a0:	2300      	movs	r3, #0
 80096a2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80096a4:	2300      	movs	r3, #0
 80096a6:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096a8:	f107 0310 	add.w	r3, r7, #16
 80096ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7f9 f9e5 	bl	8002a82 <HAL_OSPI_Command>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e09a      	b.n	80097f8 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096c2:	f107 030c 	add.w	r3, r7, #12
 80096c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7f9 facc 	bl	8002c6a <HAL_OSPI_Receive>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e08d      	b.n	80097f8 <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80096dc:	2315      	movs	r3, #21
 80096de:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 80096e0:	2302      	movs	r3, #2
 80096e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096e4:	f107 0310 	add.w	r3, r7, #16
 80096e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7f9 f9c7 	bl	8002a82 <HAL_OSPI_Command>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e07c      	b.n	80097f8 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096fe:	f107 030c 	add.w	r3, r7, #12
 8009702:	3301      	adds	r3, #1
 8009704:	f241 3288 	movw	r2, #5000	; 0x1388
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7f9 faad 	bl	8002c6a <HAL_OSPI_Receive>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e06e      	b.n	80097f8 <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff fe4e 	bl	80093bc <QSPI_WriteEnable>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e066      	b.n	80097f8 <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 800972a:	78fb      	ldrb	r3, [r7, #3]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d105      	bne.n	800973c <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	f043 0302 	orr.w	r3, r3, #2
 8009736:	b2db      	uxtb	r3, r3
 8009738:	73bb      	strb	r3, [r7, #14]
 800973a:	e004      	b.n	8009746 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	f023 0302 	bic.w	r3, r3, #2
 8009742:	b2db      	uxtb	r3, r3
 8009744:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8009746:	2301      	movs	r3, #1
 8009748:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 800974a:	2303      	movs	r3, #3
 800974c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800974e:	f107 0310 	add.w	r3, r7, #16
 8009752:	f241 3288 	movw	r2, #5000	; 0x1388
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7f9 f992 	bl	8002a82 <HAL_OSPI_Command>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e047      	b.n	80097f8 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009768:	f107 030c 	add.w	r3, r7, #12
 800976c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7f9 fa06 	bl	8002b84 <HAL_OSPI_Transmit>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e03a      	b.n	80097f8 <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8009782:	f241 3188 	movw	r1, #5000	; 0x1388
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7ff fe74 	bl	8009474 <QSPI_AutoPollingMemReady>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e030      	b.n	80097f8 <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8009796:	2315      	movs	r3, #21
 8009798:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800979a:	2302      	movs	r3, #2
 800979c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800979e:	f107 0310 	add.w	r3, r7, #16
 80097a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7f9 f96a 	bl	8002a82 <HAL_OSPI_Command>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e01f      	b.n	80097f8 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097b8:	f107 030c 	add.w	r3, r7, #12
 80097bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7f9 fa51 	bl	8002c6a <HAL_OSPI_Receive>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e012      	b.n	80097f8 <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80097d2:	7b7b      	ldrb	r3, [r7, #13]
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d102      	bne.n	80097e2 <QSPI_HighPerfMode+0x180>
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d007      	beq.n	80097f2 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80097e2:	7b7b      	ldrb	r3, [r7, #13]
 80097e4:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d004      	beq.n	80097f6 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e000      	b.n	80097f8 <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3760      	adds	r7, #96	; 0x60
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009806:	4b11      	ldr	r3, [pc, #68]	; (800984c <HAL_MspInit+0x4c>)
 8009808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800980a:	4a10      	ldr	r2, [pc, #64]	; (800984c <HAL_MspInit+0x4c>)
 800980c:	f043 0301 	orr.w	r3, r3, #1
 8009810:	6613      	str	r3, [r2, #96]	; 0x60
 8009812:	4b0e      	ldr	r3, [pc, #56]	; (800984c <HAL_MspInit+0x4c>)
 8009814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	607b      	str	r3, [r7, #4]
 800981c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800981e:	4b0b      	ldr	r3, [pc, #44]	; (800984c <HAL_MspInit+0x4c>)
 8009820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009822:	4a0a      	ldr	r2, [pc, #40]	; (800984c <HAL_MspInit+0x4c>)
 8009824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009828:	6593      	str	r3, [r2, #88]	; 0x58
 800982a:	4b08      	ldr	r3, [pc, #32]	; (800984c <HAL_MspInit+0x4c>)
 800982c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009832:	603b      	str	r3, [r7, #0]
 8009834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009836:	2200      	movs	r2, #0
 8009838:	210f      	movs	r1, #15
 800983a:	f06f 0001 	mvn.w	r0, #1
 800983e:	f7f6 ffdd 	bl	80007fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009842:	bf00      	nop
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	40021000 	.word	0x40021000

08009850 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08a      	sub	sp, #40	; 0x28
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009858:	f107 0314 	add.w	r3, r7, #20
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	605a      	str	r2, [r3, #4]
 8009862:	609a      	str	r2, [r3, #8]
 8009864:	60da      	str	r2, [r3, #12]
 8009866:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a2f      	ldr	r2, [pc, #188]	; (800992c <HAL_DAC_MspInit+0xdc>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d157      	bne.n	8009922 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8009872:	4b2f      	ldr	r3, [pc, #188]	; (8009930 <HAL_DAC_MspInit+0xe0>)
 8009874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009876:	4a2e      	ldr	r2, [pc, #184]	; (8009930 <HAL_DAC_MspInit+0xe0>)
 8009878:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800987c:	6593      	str	r3, [r2, #88]	; 0x58
 800987e:	4b2c      	ldr	r3, [pc, #176]	; (8009930 <HAL_DAC_MspInit+0xe0>)
 8009880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009886:	613b      	str	r3, [r7, #16]
 8009888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800988a:	4b29      	ldr	r3, [pc, #164]	; (8009930 <HAL_DAC_MspInit+0xe0>)
 800988c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800988e:	4a28      	ldr	r2, [pc, #160]	; (8009930 <HAL_DAC_MspInit+0xe0>)
 8009890:	f043 0301 	orr.w	r3, r3, #1
 8009894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009896:	4b26      	ldr	r3, [pc, #152]	; (8009930 <HAL_DAC_MspInit+0xe0>)
 8009898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80098a2:	2310      	movs	r3, #16
 80098a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80098a6:	2303      	movs	r3, #3
 80098a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098aa:	2300      	movs	r3, #0
 80098ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098ae:	f107 0314 	add.w	r3, r7, #20
 80098b2:	4619      	mov	r1, r3
 80098b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80098b8:	f7f7 ffd4 	bl	8001864 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 80098bc:	4b1d      	ldr	r3, [pc, #116]	; (8009934 <HAL_DAC_MspInit+0xe4>)
 80098be:	4a1e      	ldr	r2, [pc, #120]	; (8009938 <HAL_DAC_MspInit+0xe8>)
 80098c0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80098c2:	4b1c      	ldr	r3, [pc, #112]	; (8009934 <HAL_DAC_MspInit+0xe4>)
 80098c4:	2206      	movs	r2, #6
 80098c6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80098c8:	4b1a      	ldr	r3, [pc, #104]	; (8009934 <HAL_DAC_MspInit+0xe4>)
 80098ca:	2210      	movs	r2, #16
 80098cc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80098ce:	4b19      	ldr	r3, [pc, #100]	; (8009934 <HAL_DAC_MspInit+0xe4>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80098d4:	4b17      	ldr	r3, [pc, #92]	; (8009934 <HAL_DAC_MspInit+0xe4>)
 80098d6:	2280      	movs	r2, #128	; 0x80
 80098d8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80098da:	4b16      	ldr	r3, [pc, #88]	; (8009934 <HAL_DAC_MspInit+0xe4>)
 80098dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098e0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80098e2:	4b14      	ldr	r3, [pc, #80]	; (8009934 <HAL_DAC_MspInit+0xe4>)
 80098e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098e8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 80098ea:	4b12      	ldr	r3, [pc, #72]	; (8009934 <HAL_DAC_MspInit+0xe4>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80098f0:	4b10      	ldr	r3, [pc, #64]	; (8009934 <HAL_DAC_MspInit+0xe4>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80098f6:	480f      	ldr	r0, [pc, #60]	; (8009934 <HAL_DAC_MspInit+0xe4>)
 80098f8:	f7f7 fd40 	bl	800137c <HAL_DMA_Init>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8009902:	f7ff fc97 	bl	8009234 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a0a      	ldr	r2, [pc, #40]	; (8009934 <HAL_DAC_MspInit+0xe4>)
 800990a:	609a      	str	r2, [r3, #8]
 800990c:	4a09      	ldr	r2, [pc, #36]	; (8009934 <HAL_DAC_MspInit+0xe4>)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8009912:	2200      	movs	r2, #0
 8009914:	2105      	movs	r1, #5
 8009916:	2036      	movs	r0, #54	; 0x36
 8009918:	f7f6 ff70 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800991c:	2036      	movs	r0, #54	; 0x36
 800991e:	f7f6 ff89 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8009922:	bf00      	nop
 8009924:	3728      	adds	r7, #40	; 0x28
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	40007400 	.word	0x40007400
 8009930:	40021000 	.word	0x40021000
 8009934:	20001384 	.word	0x20001384
 8009938:	40020044 	.word	0x40020044

0800993c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b0ae      	sub	sp, #184	; 0xb8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009944:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	605a      	str	r2, [r3, #4]
 800994e:	609a      	str	r2, [r3, #8]
 8009950:	60da      	str	r2, [r3, #12]
 8009952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009954:	f107 0310 	add.w	r3, r7, #16
 8009958:	2294      	movs	r2, #148	; 0x94
 800995a:	2100      	movs	r1, #0
 800995c:	4618      	mov	r0, r3
 800995e:	f005 fae9 	bl	800ef34 <memset>
  if(DFSDM1_Init == 0)
 8009962:	4b49      	ldr	r3, [pc, #292]	; (8009a88 <HAL_DFSDM_FilterMspInit+0x14c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d153      	bne.n	8009a12 <HAL_DFSDM_FilterMspInit+0xd6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800996a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800996e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8009970:	2300      	movs	r3, #0
 8009972:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009976:	f107 0310 	add.w	r3, r7, #16
 800997a:	4618      	mov	r0, r3
 800997c:	f7fa fffa 	bl	8004974 <HAL_RCCEx_PeriphCLKConfig>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8009986:	f7ff fc55 	bl	8009234 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800998a:	4b40      	ldr	r3, [pc, #256]	; (8009a8c <HAL_DFSDM_FilterMspInit+0x150>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3301      	adds	r3, #1
 8009990:	4a3e      	ldr	r2, [pc, #248]	; (8009a8c <HAL_DFSDM_FilterMspInit+0x150>)
 8009992:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8009994:	4b3d      	ldr	r3, [pc, #244]	; (8009a8c <HAL_DFSDM_FilterMspInit+0x150>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d10b      	bne.n	80099b4 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800999c:	4b3c      	ldr	r3, [pc, #240]	; (8009a90 <HAL_DFSDM_FilterMspInit+0x154>)
 800999e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a0:	4a3b      	ldr	r2, [pc, #236]	; (8009a90 <HAL_DFSDM_FilterMspInit+0x154>)
 80099a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099a6:	6613      	str	r3, [r2, #96]	; 0x60
 80099a8:	4b39      	ldr	r3, [pc, #228]	; (8009a90 <HAL_DFSDM_FilterMspInit+0x154>)
 80099aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099b0:	60fb      	str	r3, [r7, #12]
 80099b2:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80099b4:	4b36      	ldr	r3, [pc, #216]	; (8009a90 <HAL_DFSDM_FilterMspInit+0x154>)
 80099b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099b8:	4a35      	ldr	r2, [pc, #212]	; (8009a90 <HAL_DFSDM_FilterMspInit+0x154>)
 80099ba:	f043 0310 	orr.w	r3, r3, #16
 80099be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099c0:	4b33      	ldr	r3, [pc, #204]	; (8009a90 <HAL_DFSDM_FilterMspInit+0x154>)
 80099c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c4:	f003 0310 	and.w	r3, r3, #16
 80099c8:	60bb      	str	r3, [r7, #8]
 80099ca:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80099cc:	f44f 7320 	mov.w	r3, #640	; 0x280
 80099d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099d4:	2302      	movs	r3, #2
 80099d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099e0:	2300      	movs	r3, #0
 80099e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80099e6:	2306      	movs	r3, #6
 80099e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80099ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80099f0:	4619      	mov	r1, r3
 80099f2:	4828      	ldr	r0, [pc, #160]	; (8009a94 <HAL_DFSDM_FilterMspInit+0x158>)
 80099f4:	f7f7 ff36 	bl	8001864 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 5, 0);
 80099f8:	2200      	movs	r2, #0
 80099fa:	2105      	movs	r1, #5
 80099fc:	203d      	movs	r0, #61	; 0x3d
 80099fe:	f7f6 fefd 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 8009a02:	203d      	movs	r0, #61	; 0x3d
 8009a04:	f7f6 ff16 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8009a08:	4b1f      	ldr	r3, [pc, #124]	; (8009a88 <HAL_DFSDM_FilterMspInit+0x14c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	4a1e      	ldr	r2, [pc, #120]	; (8009a88 <HAL_DFSDM_FilterMspInit+0x14c>)
 8009a10:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a20      	ldr	r2, [pc, #128]	; (8009a98 <HAL_DFSDM_FilterMspInit+0x15c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d130      	bne.n	8009a7e <HAL_DFSDM_FilterMspInit+0x142>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel3;
 8009a1c:	4b1f      	ldr	r3, [pc, #124]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a1e:	4a20      	ldr	r2, [pc, #128]	; (8009aa0 <HAL_DFSDM_FilterMspInit+0x164>)
 8009a20:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8009a22:	4b1e      	ldr	r3, [pc, #120]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a24:	2256      	movs	r2, #86	; 0x56
 8009a26:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009a28:	4b1c      	ldr	r3, [pc, #112]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a2e:	4b1b      	ldr	r3, [pc, #108]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8009a34:	4b19      	ldr	r3, [pc, #100]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a36:	2280      	movs	r2, #128	; 0x80
 8009a38:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009a3a:	4b18      	ldr	r3, [pc, #96]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a40:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009a42:	4b16      	ldr	r3, [pc, #88]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a48:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8009a4a:	4b14      	ldr	r3, [pc, #80]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8009a50:	4b12      	ldr	r3, [pc, #72]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8009a56:	4811      	ldr	r0, [pc, #68]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a58:	f7f7 fc90 	bl	800137c <HAL_DMA_Init>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <HAL_DFSDM_FilterMspInit+0x12a>
    {
      Error_Handler();
 8009a62:	f7ff fbe7 	bl	8009234 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a0c      	ldr	r2, [pc, #48]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8009a6c:	4a0b      	ldr	r2, [pc, #44]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a09      	ldr	r2, [pc, #36]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a76:	629a      	str	r2, [r3, #40]	; 0x28
 8009a78:	4a08      	ldr	r2, [pc, #32]	; (8009a9c <HAL_DFSDM_FilterMspInit+0x160>)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8009a7e:	bf00      	nop
 8009a80:	37b8      	adds	r7, #184	; 0xb8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	200019e4 	.word	0x200019e4
 8009a8c:	200019e0 	.word	0x200019e0
 8009a90:	40021000 	.word	0x40021000
 8009a94:	48001000 	.word	0x48001000
 8009a98:	40016100 	.word	0x40016100
 8009a9c:	20001470 	.word	0x20001470
 8009aa0:	40020030 	.word	0x40020030

08009aa4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b0ae      	sub	sp, #184	; 0xb8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009aac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	605a      	str	r2, [r3, #4]
 8009ab6:	609a      	str	r2, [r3, #8]
 8009ab8:	60da      	str	r2, [r3, #12]
 8009aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009abc:	f107 0310 	add.w	r3, r7, #16
 8009ac0:	2294      	movs	r2, #148	; 0x94
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f005 fa35 	bl	800ef34 <memset>
  if(DFSDM1_Init == 0)
 8009aca:	4b2a      	ldr	r3, [pc, #168]	; (8009b74 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d14b      	bne.n	8009b6a <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8009ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ad6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009ade:	f107 0310 	add.w	r3, r7, #16
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fa ff46 	bl	8004974 <HAL_RCCEx_PeriphCLKConfig>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8009aee:	f7ff fba1 	bl	8009234 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8009af2:	4b21      	ldr	r3, [pc, #132]	; (8009b78 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3301      	adds	r3, #1
 8009af8:	4a1f      	ldr	r2, [pc, #124]	; (8009b78 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8009afa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8009afc:	4b1e      	ldr	r3, [pc, #120]	; (8009b78 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d10b      	bne.n	8009b1c <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8009b04:	4b1d      	ldr	r3, [pc, #116]	; (8009b7c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8009b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b08:	4a1c      	ldr	r2, [pc, #112]	; (8009b7c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8009b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b0e:	6613      	str	r3, [r2, #96]	; 0x60
 8009b10:	4b1a      	ldr	r3, [pc, #104]	; (8009b7c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8009b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009b1c:	4b17      	ldr	r3, [pc, #92]	; (8009b7c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8009b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b20:	4a16      	ldr	r2, [pc, #88]	; (8009b7c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8009b22:	f043 0310 	orr.w	r3, r3, #16
 8009b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b28:	4b14      	ldr	r3, [pc, #80]	; (8009b7c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8009b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b2c:	f003 0310 	and.w	r3, r3, #16
 8009b30:	60bb      	str	r3, [r7, #8]
 8009b32:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8009b34:	f44f 7320 	mov.w	r3, #640	; 0x280
 8009b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8009b4e:	2306      	movs	r3, #6
 8009b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009b54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009b58:	4619      	mov	r1, r3
 8009b5a:	4809      	ldr	r0, [pc, #36]	; (8009b80 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8009b5c:	f7f7 fe82 	bl	8001864 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8009b60:	4b04      	ldr	r3, [pc, #16]	; (8009b74 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	4a03      	ldr	r2, [pc, #12]	; (8009b74 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8009b68:	6013      	str	r3, [r2, #0]
  }

}
 8009b6a:	bf00      	nop
 8009b6c:	37b8      	adds	r7, #184	; 0xb8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200019e4 	.word	0x200019e4
 8009b78:	200019e0 	.word	0x200019e0
 8009b7c:	40021000 	.word	0x40021000
 8009b80:	48001000 	.word	0x48001000

08009b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b0ae      	sub	sp, #184	; 0xb8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
 8009b94:	605a      	str	r2, [r3, #4]
 8009b96:	609a      	str	r2, [r3, #8]
 8009b98:	60da      	str	r2, [r3, #12]
 8009b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009b9c:	f107 0310 	add.w	r3, r7, #16
 8009ba0:	2294      	movs	r2, #148	; 0x94
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f005 f9c5 	bl	800ef34 <memset>
  if(hi2c->Instance==I2C2)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a21      	ldr	r2, [pc, #132]	; (8009c34 <HAL_I2C_MspInit+0xb0>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d13b      	bne.n	8009c2c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009bb4:	2380      	movs	r3, #128	; 0x80
 8009bb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009bbc:	f107 0310 	add.w	r3, r7, #16
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fa fed7 	bl	8004974 <HAL_RCCEx_PeriphCLKConfig>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8009bcc:	f7ff fb32 	bl	8009234 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009bd0:	4b19      	ldr	r3, [pc, #100]	; (8009c38 <HAL_I2C_MspInit+0xb4>)
 8009bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bd4:	4a18      	ldr	r2, [pc, #96]	; (8009c38 <HAL_I2C_MspInit+0xb4>)
 8009bd6:	f043 0302 	orr.w	r3, r3, #2
 8009bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bdc:	4b16      	ldr	r3, [pc, #88]	; (8009c38 <HAL_I2C_MspInit+0xb4>)
 8009bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	60fb      	str	r3, [r7, #12]
 8009be6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009be8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009bec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009bf0:	2312      	movs	r3, #18
 8009bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009c02:	2304      	movs	r3, #4
 8009c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	480b      	ldr	r0, [pc, #44]	; (8009c3c <HAL_I2C_MspInit+0xb8>)
 8009c10:	f7f7 fe28 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009c14:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <HAL_I2C_MspInit+0xb4>)
 8009c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c18:	4a07      	ldr	r2, [pc, #28]	; (8009c38 <HAL_I2C_MspInit+0xb4>)
 8009c1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8009c20:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <HAL_I2C_MspInit+0xb4>)
 8009c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c28:	60bb      	str	r3, [r7, #8]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8009c2c:	bf00      	nop
 8009c2e:	37b8      	adds	r7, #184	; 0xb8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	40005800 	.word	0x40005800
 8009c38:	40021000 	.word	0x40021000
 8009c3c:	48000400 	.word	0x48000400

08009c40 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b0b0      	sub	sp, #192	; 0xc0
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	605a      	str	r2, [r3, #4]
 8009c52:	609a      	str	r2, [r3, #8]
 8009c54:	60da      	str	r2, [r3, #12]
 8009c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009c58:	f107 0318 	add.w	r3, r7, #24
 8009c5c:	2294      	movs	r2, #148	; 0x94
 8009c5e:	2100      	movs	r1, #0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f005 f967 	bl	800ef34 <memset>
  if(hospi->Instance==OCTOSPI1)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a39      	ldr	r2, [pc, #228]	; (8009d50 <HAL_OSPI_MspInit+0x110>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d16b      	bne.n	8009d48 <HAL_OSPI_MspInit+0x108>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8009c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c74:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009c7c:	f107 0318 	add.w	r3, r7, #24
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fa fe77 	bl	8004974 <HAL_RCCEx_PeriphCLKConfig>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8009c8c:	f7ff fad2 	bl	8009234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8009c90:	4b30      	ldr	r3, [pc, #192]	; (8009d54 <HAL_OSPI_MspInit+0x114>)
 8009c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c94:	4a2f      	ldr	r2, [pc, #188]	; (8009d54 <HAL_OSPI_MspInit+0x114>)
 8009c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c9c:	4b2d      	ldr	r3, [pc, #180]	; (8009d54 <HAL_OSPI_MspInit+0x114>)
 8009c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ca4:	617b      	str	r3, [r7, #20]
 8009ca6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8009ca8:	4b2a      	ldr	r3, [pc, #168]	; (8009d54 <HAL_OSPI_MspInit+0x114>)
 8009caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cac:	4a29      	ldr	r2, [pc, #164]	; (8009d54 <HAL_OSPI_MspInit+0x114>)
 8009cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cb2:	6513      	str	r3, [r2, #80]	; 0x50
 8009cb4:	4b27      	ldr	r3, [pc, #156]	; (8009d54 <HAL_OSPI_MspInit+0x114>)
 8009cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cbc:	613b      	str	r3, [r7, #16]
 8009cbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cc0:	4b24      	ldr	r3, [pc, #144]	; (8009d54 <HAL_OSPI_MspInit+0x114>)
 8009cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cc4:	4a23      	ldr	r2, [pc, #140]	; (8009d54 <HAL_OSPI_MspInit+0x114>)
 8009cc6:	f043 0301 	orr.w	r3, r3, #1
 8009cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ccc:	4b21      	ldr	r3, [pc, #132]	; (8009d54 <HAL_OSPI_MspInit+0x114>)
 8009cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	60fb      	str	r3, [r7, #12]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009cd8:	4b1e      	ldr	r3, [pc, #120]	; (8009d54 <HAL_OSPI_MspInit+0x114>)
 8009cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cdc:	4a1d      	ldr	r2, [pc, #116]	; (8009d54 <HAL_OSPI_MspInit+0x114>)
 8009cde:	f043 0310 	orr.w	r3, r3, #16
 8009ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ce4:	4b1b      	ldr	r3, [pc, #108]	; (8009d54 <HAL_OSPI_MspInit+0x114>)
 8009ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ce8:	f003 0310 	and.w	r3, r3, #16
 8009cec:	60bb      	str	r3, [r7, #8]
 8009cee:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009cf0:	230c      	movs	r3, #12
 8009cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d02:	2303      	movs	r3, #3
 8009d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8009d08:	230a      	movs	r3, #10
 8009d0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d0e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009d12:	4619      	mov	r1, r3
 8009d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d18:	f7f7 fda4 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8009d1c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d24:	2302      	movs	r3, #2
 8009d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d30:	2303      	movs	r3, #3
 8009d32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8009d36:	230a      	movs	r3, #10
 8009d38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009d3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009d40:	4619      	mov	r1, r3
 8009d42:	4805      	ldr	r0, [pc, #20]	; (8009d58 <HAL_OSPI_MspInit+0x118>)
 8009d44:	f7f7 fd8e 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8009d48:	bf00      	nop
 8009d4a:	37c0      	adds	r7, #192	; 0xc0
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	a0001000 	.word	0xa0001000
 8009d54:	40021000 	.word	0x40021000
 8009d58:	48001000 	.word	0x48001000

08009d5c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a0e      	ldr	r2, [pc, #56]	; (8009da4 <HAL_OSPI_MspDeInit+0x48>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d115      	bne.n	8009d9a <HAL_OSPI_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8009d6e:	4b0e      	ldr	r3, [pc, #56]	; (8009da8 <HAL_OSPI_MspDeInit+0x4c>)
 8009d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d72:	4a0d      	ldr	r2, [pc, #52]	; (8009da8 <HAL_OSPI_MspDeInit+0x4c>)
 8009d74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009d78:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8009d7a:	4b0b      	ldr	r3, [pc, #44]	; (8009da8 <HAL_OSPI_MspDeInit+0x4c>)
 8009d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d7e:	4a0a      	ldr	r2, [pc, #40]	; (8009da8 <HAL_OSPI_MspDeInit+0x4c>)
 8009d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d84:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8009d86:	210c      	movs	r1, #12
 8009d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d8c:	f7f7 fefc 	bl	8001b88 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8009d90:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8009d94:	4805      	ldr	r0, [pc, #20]	; (8009dac <HAL_OSPI_MspDeInit+0x50>)
 8009d96:	f7f7 fef7 	bl	8001b88 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8009d9a:	bf00      	nop
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	a0001000 	.word	0xa0001000
 8009da8:	40021000 	.word	0x40021000
 8009dac:	48001000 	.word	0x48001000

08009db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dc0:	d13e      	bne.n	8009e40 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009dc2:	4b21      	ldr	r3, [pc, #132]	; (8009e48 <HAL_TIM_Base_MspInit+0x98>)
 8009dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc6:	4a20      	ldr	r2, [pc, #128]	; (8009e48 <HAL_TIM_Base_MspInit+0x98>)
 8009dc8:	f043 0301 	orr.w	r3, r3, #1
 8009dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8009dce:	4b1e      	ldr	r3, [pc, #120]	; (8009e48 <HAL_TIM_Base_MspInit+0x98>)
 8009dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel5;
 8009dda:	4b1c      	ldr	r3, [pc, #112]	; (8009e4c <HAL_TIM_Base_MspInit+0x9c>)
 8009ddc:	4a1c      	ldr	r2, [pc, #112]	; (8009e50 <HAL_TIM_Base_MspInit+0xa0>)
 8009dde:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 8009de0:	4b1a      	ldr	r3, [pc, #104]	; (8009e4c <HAL_TIM_Base_MspInit+0x9c>)
 8009de2:	223c      	movs	r2, #60	; 0x3c
 8009de4:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009de6:	4b19      	ldr	r3, [pc, #100]	; (8009e4c <HAL_TIM_Base_MspInit+0x9c>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8009dec:	4b17      	ldr	r3, [pc, #92]	; (8009e4c <HAL_TIM_Base_MspInit+0x9c>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8009df2:	4b16      	ldr	r3, [pc, #88]	; (8009e4c <HAL_TIM_Base_MspInit+0x9c>)
 8009df4:	2280      	movs	r2, #128	; 0x80
 8009df6:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009df8:	4b14      	ldr	r3, [pc, #80]	; (8009e4c <HAL_TIM_Base_MspInit+0x9c>)
 8009dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dfe:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009e00:	4b12      	ldr	r3, [pc, #72]	; (8009e4c <HAL_TIM_Base_MspInit+0x9c>)
 8009e02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e06:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8009e08:	4b10      	ldr	r3, [pc, #64]	; (8009e4c <HAL_TIM_Base_MspInit+0x9c>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8009e0e:	4b0f      	ldr	r3, [pc, #60]	; (8009e4c <HAL_TIM_Base_MspInit+0x9c>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8009e14:	480d      	ldr	r0, [pc, #52]	; (8009e4c <HAL_TIM_Base_MspInit+0x9c>)
 8009e16:	f7f7 fab1 	bl	800137c <HAL_DMA_Init>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8009e20:	f7ff fa08 	bl	8009234 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a09      	ldr	r2, [pc, #36]	; (8009e4c <HAL_TIM_Base_MspInit+0x9c>)
 8009e28:	621a      	str	r2, [r3, #32]
 8009e2a:	4a08      	ldr	r2, [pc, #32]	; (8009e4c <HAL_TIM_Base_MspInit+0x9c>)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8009e30:	2200      	movs	r2, #0
 8009e32:	2105      	movs	r1, #5
 8009e34:	201c      	movs	r0, #28
 8009e36:	f7f6 fce1 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009e3a:	201c      	movs	r0, #28
 8009e3c:	f7f6 fcfa 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8009e40:	bf00      	nop
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	40021000 	.word	0x40021000
 8009e4c:	200015c0 	.word	0x200015c0
 8009e50:	40020058 	.word	0x40020058

08009e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b0ae      	sub	sp, #184	; 0xb8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	605a      	str	r2, [r3, #4]
 8009e66:	609a      	str	r2, [r3, #8]
 8009e68:	60da      	str	r2, [r3, #12]
 8009e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009e6c:	f107 0310 	add.w	r3, r7, #16
 8009e70:	2294      	movs	r2, #148	; 0x94
 8009e72:	2100      	movs	r1, #0
 8009e74:	4618      	mov	r0, r3
 8009e76:	f005 f85d 	bl	800ef34 <memset>
  if(huart->Instance==USART1)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a4e      	ldr	r2, [pc, #312]	; (8009fb8 <HAL_UART_MspInit+0x164>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	f040 8095 	bne.w	8009fb0 <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009e86:	2301      	movs	r3, #1
 8009e88:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009e8e:	f107 0310 	add.w	r3, r7, #16
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fa fd6e 	bl	8004974 <HAL_RCCEx_PeriphCLKConfig>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8009e9e:	f7ff f9c9 	bl	8009234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009ea2:	4b46      	ldr	r3, [pc, #280]	; (8009fbc <HAL_UART_MspInit+0x168>)
 8009ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ea6:	4a45      	ldr	r2, [pc, #276]	; (8009fbc <HAL_UART_MspInit+0x168>)
 8009ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009eac:	6613      	str	r3, [r2, #96]	; 0x60
 8009eae:	4b43      	ldr	r3, [pc, #268]	; (8009fbc <HAL_UART_MspInit+0x168>)
 8009eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eb6:	60fb      	str	r3, [r7, #12]
 8009eb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009eba:	4b40      	ldr	r3, [pc, #256]	; (8009fbc <HAL_UART_MspInit+0x168>)
 8009ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ebe:	4a3f      	ldr	r2, [pc, #252]	; (8009fbc <HAL_UART_MspInit+0x168>)
 8009ec0:	f043 0302 	orr.w	r3, r3, #2
 8009ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ec6:	4b3d      	ldr	r3, [pc, #244]	; (8009fbc <HAL_UART_MspInit+0x168>)
 8009ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eca:	f003 0302 	and.w	r3, r3, #2
 8009ece:	60bb      	str	r3, [r7, #8]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009ed2:	23c0      	movs	r3, #192	; 0xc0
 8009ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ed8:	2302      	movs	r3, #2
 8009eda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009eea:	2307      	movs	r3, #7
 8009eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ef0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4832      	ldr	r0, [pc, #200]	; (8009fc0 <HAL_UART_MspInit+0x16c>)
 8009ef8:	f7f7 fcb4 	bl	8001864 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8009efc:	4b31      	ldr	r3, [pc, #196]	; (8009fc4 <HAL_UART_MspInit+0x170>)
 8009efe:	4a32      	ldr	r2, [pc, #200]	; (8009fc8 <HAL_UART_MspInit+0x174>)
 8009f00:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8009f02:	4b30      	ldr	r3, [pc, #192]	; (8009fc4 <HAL_UART_MspInit+0x170>)
 8009f04:	2218      	movs	r2, #24
 8009f06:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009f08:	4b2e      	ldr	r3, [pc, #184]	; (8009fc4 <HAL_UART_MspInit+0x170>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f0e:	4b2d      	ldr	r3, [pc, #180]	; (8009fc4 <HAL_UART_MspInit+0x170>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009f14:	4b2b      	ldr	r3, [pc, #172]	; (8009fc4 <HAL_UART_MspInit+0x170>)
 8009f16:	2280      	movs	r2, #128	; 0x80
 8009f18:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f1a:	4b2a      	ldr	r3, [pc, #168]	; (8009fc4 <HAL_UART_MspInit+0x170>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f20:	4b28      	ldr	r3, [pc, #160]	; (8009fc4 <HAL_UART_MspInit+0x170>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8009f26:	4b27      	ldr	r3, [pc, #156]	; (8009fc4 <HAL_UART_MspInit+0x170>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009f2c:	4b25      	ldr	r3, [pc, #148]	; (8009fc4 <HAL_UART_MspInit+0x170>)
 8009f2e:	2200      	movs	r2, #0
 8009f30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009f32:	4824      	ldr	r0, [pc, #144]	; (8009fc4 <HAL_UART_MspInit+0x170>)
 8009f34:	f7f7 fa22 	bl	800137c <HAL_DMA_Init>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8009f3e:	f7ff f979 	bl	8009234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a1f      	ldr	r2, [pc, #124]	; (8009fc4 <HAL_UART_MspInit+0x170>)
 8009f46:	67da      	str	r2, [r3, #124]	; 0x7c
 8009f48:	4a1e      	ldr	r2, [pc, #120]	; (8009fc4 <HAL_UART_MspInit+0x170>)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8009f4e:	4b1f      	ldr	r3, [pc, #124]	; (8009fcc <HAL_UART_MspInit+0x178>)
 8009f50:	4a1f      	ldr	r2, [pc, #124]	; (8009fd0 <HAL_UART_MspInit+0x17c>)
 8009f52:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8009f54:	4b1d      	ldr	r3, [pc, #116]	; (8009fcc <HAL_UART_MspInit+0x178>)
 8009f56:	2219      	movs	r2, #25
 8009f58:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f5a:	4b1c      	ldr	r3, [pc, #112]	; (8009fcc <HAL_UART_MspInit+0x178>)
 8009f5c:	2210      	movs	r2, #16
 8009f5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f60:	4b1a      	ldr	r3, [pc, #104]	; (8009fcc <HAL_UART_MspInit+0x178>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009f66:	4b19      	ldr	r3, [pc, #100]	; (8009fcc <HAL_UART_MspInit+0x178>)
 8009f68:	2280      	movs	r2, #128	; 0x80
 8009f6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f6c:	4b17      	ldr	r3, [pc, #92]	; (8009fcc <HAL_UART_MspInit+0x178>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f72:	4b16      	ldr	r3, [pc, #88]	; (8009fcc <HAL_UART_MspInit+0x178>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009f78:	4b14      	ldr	r3, [pc, #80]	; (8009fcc <HAL_UART_MspInit+0x178>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009f7e:	4b13      	ldr	r3, [pc, #76]	; (8009fcc <HAL_UART_MspInit+0x178>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009f84:	4811      	ldr	r0, [pc, #68]	; (8009fcc <HAL_UART_MspInit+0x178>)
 8009f86:	f7f7 f9f9 	bl	800137c <HAL_DMA_Init>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8009f90:	f7ff f950 	bl	8009234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a0d      	ldr	r2, [pc, #52]	; (8009fcc <HAL_UART_MspInit+0x178>)
 8009f98:	679a      	str	r2, [r3, #120]	; 0x78
 8009f9a:	4a0c      	ldr	r2, [pc, #48]	; (8009fcc <HAL_UART_MspInit+0x178>)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	2105      	movs	r1, #5
 8009fa4:	2025      	movs	r0, #37	; 0x25
 8009fa6:	f7f6 fc29 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009faa:	2025      	movs	r0, #37	; 0x25
 8009fac:	f7f6 fc42 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009fb0:	bf00      	nop
 8009fb2:	37b8      	adds	r7, #184	; 0xb8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	40013800 	.word	0x40013800
 8009fbc:	40021000 	.word	0x40021000
 8009fc0:	48000400 	.word	0x48000400
 8009fc4:	200016b0 	.word	0x200016b0
 8009fc8:	40020008 	.word	0x40020008
 8009fcc:	20001710 	.word	0x20001710
 8009fd0:	4002001c 	.word	0x4002001c

08009fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08e      	sub	sp, #56	; 0x38
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8009fe2:	4b34      	ldr	r3, [pc, #208]	; (800a0b4 <HAL_InitTick+0xe0>)
 8009fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe6:	4a33      	ldr	r2, [pc, #204]	; (800a0b4 <HAL_InitTick+0xe0>)
 8009fe8:	f043 0320 	orr.w	r3, r3, #32
 8009fec:	6593      	str	r3, [r2, #88]	; 0x58
 8009fee:	4b31      	ldr	r3, [pc, #196]	; (800a0b4 <HAL_InitTick+0xe0>)
 8009ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff2:	f003 0320 	and.w	r3, r3, #32
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009ffa:	f107 0210 	add.w	r2, r7, #16
 8009ffe:	f107 0314 	add.w	r3, r7, #20
 800a002:	4611      	mov	r1, r2
 800a004:	4618      	mov	r0, r3
 800a006:	f7fa fbc3 	bl	8004790 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800a00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a010:	2b00      	cmp	r3, #0
 800a012:	d103      	bne.n	800a01c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800a014:	f7fa fb90 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 800a018:	6378      	str	r0, [r7, #52]	; 0x34
 800a01a:	e004      	b.n	800a026 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800a01c:	f7fa fb8c 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 800a020:	4603      	mov	r3, r0
 800a022:	005b      	lsls	r3, r3, #1
 800a024:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a028:	4a23      	ldr	r2, [pc, #140]	; (800a0b8 <HAL_InitTick+0xe4>)
 800a02a:	fba2 2303 	umull	r2, r3, r2, r3
 800a02e:	0c9b      	lsrs	r3, r3, #18
 800a030:	3b01      	subs	r3, #1
 800a032:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800a034:	4b21      	ldr	r3, [pc, #132]	; (800a0bc <HAL_InitTick+0xe8>)
 800a036:	4a22      	ldr	r2, [pc, #136]	; (800a0c0 <HAL_InitTick+0xec>)
 800a038:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800a03a:	4b20      	ldr	r3, [pc, #128]	; (800a0bc <HAL_InitTick+0xe8>)
 800a03c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a040:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800a042:	4a1e      	ldr	r2, [pc, #120]	; (800a0bc <HAL_InitTick+0xe8>)
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800a048:	4b1c      	ldr	r3, [pc, #112]	; (800a0bc <HAL_InitTick+0xe8>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a04e:	4b1b      	ldr	r3, [pc, #108]	; (800a0bc <HAL_InitTick+0xe8>)
 800a050:	2200      	movs	r2, #0
 800a052:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a054:	4b19      	ldr	r3, [pc, #100]	; (800a0bc <HAL_InitTick+0xe8>)
 800a056:	2200      	movs	r2, #0
 800a058:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800a05a:	4818      	ldr	r0, [pc, #96]	; (800a0bc <HAL_InitTick+0xe8>)
 800a05c:	f7fb f9a2 	bl	80053a4 <HAL_TIM_Base_Init>
 800a060:	4603      	mov	r3, r0
 800a062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800a066:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d11b      	bne.n	800a0a6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800a06e:	4813      	ldr	r0, [pc, #76]	; (800a0bc <HAL_InitTick+0xe8>)
 800a070:	f7fb fa58 	bl	8005524 <HAL_TIM_Base_Start_IT>
 800a074:	4603      	mov	r3, r0
 800a076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800a07a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d111      	bne.n	800a0a6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a082:	2037      	movs	r0, #55	; 0x37
 800a084:	f7f6 fbd6 	bl	8000834 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b0f      	cmp	r3, #15
 800a08c:	d808      	bhi.n	800a0a0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800a08e:	2200      	movs	r2, #0
 800a090:	6879      	ldr	r1, [r7, #4]
 800a092:	2037      	movs	r0, #55	; 0x37
 800a094:	f7f6 fbb2 	bl	80007fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a098:	4a0a      	ldr	r2, [pc, #40]	; (800a0c4 <HAL_InitTick+0xf0>)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	e002      	b.n	800a0a6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800a0a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3738      	adds	r7, #56	; 0x38
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	40021000 	.word	0x40021000
 800a0b8:	431bde83 	.word	0x431bde83
 800a0bc:	200019e8 	.word	0x200019e8
 800a0c0:	40001400 	.word	0x40001400
 800a0c4:	20000000 	.word	0x20000000

0800a0c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a0cc:	e7fe      	b.n	800a0cc <NMI_Handler+0x4>

0800a0ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a0d2:	e7fe      	b.n	800a0d2 <HardFault_Handler+0x4>

0800a0d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a0d8:	e7fe      	b.n	800a0d8 <MemManage_Handler+0x4>

0800a0da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a0de:	e7fe      	b.n	800a0de <BusFault_Handler+0x4>

0800a0e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a0e4:	e7fe      	b.n	800a0e4 <UsageFault_Handler+0x4>

0800a0e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a0ea:	bf00      	nop
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a0f8:	4802      	ldr	r0, [pc, #8]	; (800a104 <DMA1_Channel1_IRQHandler+0x10>)
 800a0fa:	f7f7 faa2 	bl	8001642 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a0fe:	bf00      	nop
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	200016b0 	.word	0x200016b0

0800a108 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a10c:	4802      	ldr	r0, [pc, #8]	; (800a118 <DMA1_Channel2_IRQHandler+0x10>)
 800a10e:	f7f7 fa98 	bl	8001642 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800a112:	bf00      	nop
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20001710 	.word	0x20001710

0800a11c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800a120:	4802      	ldr	r0, [pc, #8]	; (800a12c <DMA1_Channel3_IRQHandler+0x10>)
 800a122:	f7f7 fa8e 	bl	8001642 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800a126:	bf00      	nop
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20001470 	.word	0x20001470

0800a130 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800a134:	4802      	ldr	r0, [pc, #8]	; (800a140 <DMA1_Channel4_IRQHandler+0x10>)
 800a136:	f7f7 fa84 	bl	8001642 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800a13a:	bf00      	nop
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	20001384 	.word	0x20001384

0800a144 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 800a148:	4802      	ldr	r0, [pc, #8]	; (800a154 <DMA1_Channel5_IRQHandler+0x10>)
 800a14a:	f7f7 fa7a 	bl	8001642 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800a14e:	bf00      	nop
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	200015c0 	.word	0x200015c0

0800a158 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a15c:	4802      	ldr	r0, [pc, #8]	; (800a168 <TIM2_IRQHandler+0x10>)
 800a15e:	f7fb fa51 	bl	8005604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a162:	bf00      	nop
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	20001574 	.word	0x20001574

0800a16c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a170:	4802      	ldr	r0, [pc, #8]	; (800a17c <USART1_IRQHandler+0x10>)
 800a172:	f7fb ff19 	bl	8005fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a176:	bf00      	nop
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	20001620 	.word	0x20001620

0800a180 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUEBUTTON_Pin);
 800a184:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a188:	f7f7 fe08 	bl	8001d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a18c:	bf00      	nop
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800a194:	4802      	ldr	r0, [pc, #8]	; (800a1a0 <TIM6_DAC_IRQHandler+0x10>)
 800a196:	f7f6 fb7d 	bl	8000894 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a19a:	bf00      	nop
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	20001370 	.word	0x20001370

0800a1a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a1a8:	4802      	ldr	r0, [pc, #8]	; (800a1b4 <TIM7_IRQHandler+0x10>)
 800a1aa:	f7fb fa2b 	bl	8005604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800a1ae:	bf00      	nop
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	200019e8 	.word	0x200019e8

0800a1b8 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 800a1bc:	4802      	ldr	r0, [pc, #8]	; (800a1c8 <DFSDM1_FLT0_IRQHandler+0x10>)
 800a1be:	f7f6 ff0b 	bl	8000fd8 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 800a1c2:	bf00      	nop
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	200013e4 	.word	0x200013e4

0800a1cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a1d4:	4a14      	ldr	r2, [pc, #80]	; (800a228 <_sbrk+0x5c>)
 800a1d6:	4b15      	ldr	r3, [pc, #84]	; (800a22c <_sbrk+0x60>)
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a1e0:	4b13      	ldr	r3, [pc, #76]	; (800a230 <_sbrk+0x64>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a1e8:	4b11      	ldr	r3, [pc, #68]	; (800a230 <_sbrk+0x64>)
 800a1ea:	4a12      	ldr	r2, [pc, #72]	; (800a234 <_sbrk+0x68>)
 800a1ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a1ee:	4b10      	ldr	r3, [pc, #64]	; (800a230 <_sbrk+0x64>)
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d207      	bcs.n	800a20c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a1fc:	f004 fe62 	bl	800eec4 <__errno>
 800a200:	4603      	mov	r3, r0
 800a202:	220c      	movs	r2, #12
 800a204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a206:	f04f 33ff 	mov.w	r3, #4294967295
 800a20a:	e009      	b.n	800a220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a20c:	4b08      	ldr	r3, [pc, #32]	; (800a230 <_sbrk+0x64>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a212:	4b07      	ldr	r3, [pc, #28]	; (800a230 <_sbrk+0x64>)
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4413      	add	r3, r2
 800a21a:	4a05      	ldr	r2, [pc, #20]	; (800a230 <_sbrk+0x64>)
 800a21c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a21e:	68fb      	ldr	r3, [r7, #12]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3718      	adds	r7, #24
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	200a0000 	.word	0x200a0000
 800a22c:	00000400 	.word	0x00000400
 800a230:	20001a34 	.word	0x20001a34
 800a234:	20001a88 	.word	0x20001a88

0800a238 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a238:	b480      	push	{r7}
 800a23a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a23c:	4b06      	ldr	r3, [pc, #24]	; (800a258 <SystemInit+0x20>)
 800a23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a242:	4a05      	ldr	r2, [pc, #20]	; (800a258 <SystemInit+0x20>)
 800a244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800a24c:	bf00      	nop
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	e000ed00 	.word	0xe000ed00

0800a25c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a266:	2300      	movs	r3, #0
 800a268:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f001 fdaa 	bl	800bdc6 <VL53L0X_get_offset_calibration_data_micro_meter>
 800a272:	4603      	mov	r3, r0
 800a274:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800a276:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
	...

0800a284 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b0a4      	sub	sp, #144	; 0x90
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800a292:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a296:	2b00      	cmp	r3, #0
 800a298:	d107      	bne.n	800a2aa <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800a29a:	2200      	movs	r2, #0
 800a29c:	2188      	movs	r1, #136	; 0x88
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f004 fcb6 	bl	800ec10 <VL53L0X_WrByte>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2b8:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4aae      	ldr	r2, [pc, #696]	; (800a578 <VL53L0X_DataInit+0x2f4>)
 800a2c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a2ca:	f107 0310 	add.w	r3, r7, #16
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fb29 	bl	800a928 <VL53L0X_GetDeviceParameters>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 800a2dc:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d130      	bne.n	800a346 <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 800a2f0:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 800a2f4:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 800a2f6:	f24b 3333 	movw	r3, #45875	; 0xb333
 800a2fa:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 800a2fc:	4b9f      	ldr	r3, [pc, #636]	; (800a57c <VL53L0X_DataInit+0x2f8>)
 800a2fe:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 800a300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a304:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 800a306:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 800a30a:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 800a30c:	4b9c      	ldr	r3, [pc, #624]	; (800a580 <VL53L0X_DataInit+0x2fc>)
 800a30e:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 800a310:	4b9c      	ldr	r3, [pc, #624]	; (800a584 <VL53L0X_DataInit+0x300>)
 800a312:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 800a314:	4b9c      	ldr	r3, [pc, #624]	; (800a588 <VL53L0X_DataInit+0x304>)
 800a316:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 800a318:	4b9c      	ldr	r3, [pc, #624]	; (800a58c <VL53L0X_DataInit+0x308>)
 800a31a:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 800a31c:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800a320:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 800a322:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 800a326:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 800a328:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800a32c:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 800a32e:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 800a332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3308      	adds	r3, #8
 800a33a:	f107 0110 	add.w	r1, r7, #16
 800a33e:	2278      	movs	r2, #120	; 0x78
 800a340:	4618      	mov	r0, r3
 800a342:	f004 fde9 	bl	800ef18 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2264      	movs	r2, #100	; 0x64
 800a34a:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a354:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a35e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800a368:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a374:	2201      	movs	r2, #1
 800a376:	2180      	movs	r1, #128	; 0x80
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f004 fc49 	bl	800ec10 <VL53L0X_WrByte>
 800a37e:	4603      	mov	r3, r0
 800a380:	461a      	mov	r2, r3
 800a382:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a386:	4313      	orrs	r3, r2
 800a388:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a38c:	2201      	movs	r2, #1
 800a38e:	21ff      	movs	r1, #255	; 0xff
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f004 fc3d 	bl	800ec10 <VL53L0X_WrByte>
 800a396:	4603      	mov	r3, r0
 800a398:	461a      	mov	r2, r3
 800a39a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f004 fc31 	bl	800ec10 <VL53L0X_WrByte>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800a3bc:	f107 030f 	add.w	r3, r7, #15
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	2191      	movs	r1, #145	; 0x91
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f004 fca5 	bl	800ed14 <VL53L0X_RdByte>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800a3d8:	7bfa      	ldrb	r2, [r7, #15]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f004 fc13 	bl	800ec10 <VL53L0X_WrByte>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	21ff      	movs	r1, #255	; 0xff
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f004 fc07 	bl	800ec10 <VL53L0X_WrByte>
 800a402:	4603      	mov	r3, r0
 800a404:	461a      	mov	r2, r3
 800a406:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a40a:	4313      	orrs	r3, r2
 800a40c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a410:	2200      	movs	r2, #0
 800a412:	2180      	movs	r1, #128	; 0x80
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f004 fbfb 	bl	800ec10 <VL53L0X_WrByte>
 800a41a:	4603      	mov	r3, r0
 800a41c:	461a      	mov	r2, r3
 800a41e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a422:	4313      	orrs	r3, r2
 800a424:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a428:	2300      	movs	r3, #0
 800a42a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a42e:	e017      	b.n	800a460 <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 800a430:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a434:	2b00      	cmp	r3, #0
 800a436:	d118      	bne.n	800a46a <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800a438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	2201      	movs	r2, #1
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 fd8a 	bl	800af5c <VL53L0X_SetLimitCheckEnable>
 800a448:	4603      	mov	r3, r0
 800a44a:	461a      	mov	r2, r3
 800a44c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a450:	4313      	orrs	r3, r2
 800a452:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a45a:	3301      	adds	r3, #1
 800a45c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a460:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a464:	2b05      	cmp	r3, #5
 800a466:	dde3      	ble.n	800a430 <VL53L0X_DataInit+0x1ac>
 800a468:	e000      	b.n	800a46c <VL53L0X_DataInit+0x1e8>
		else
			break;
 800a46a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800a46c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a470:	2b00      	cmp	r3, #0
 800a472:	d107      	bne.n	800a484 <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a474:	2200      	movs	r2, #0
 800a476:	2102      	movs	r1, #2
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fd6f 	bl	800af5c <VL53L0X_SetLimitCheckEnable>
 800a47e:	4603      	mov	r3, r0
 800a480:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a484:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d107      	bne.n	800a49c <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a48c:	2200      	movs	r2, #0
 800a48e:	2103      	movs	r1, #3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fd63 	bl	800af5c <VL53L0X_SetLimitCheckEnable>
 800a496:	4603      	mov	r3, r0
 800a498:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a49c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d107      	bne.n	800a4b4 <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	2104      	movs	r1, #4
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fd57 	bl	800af5c <VL53L0X_SetLimitCheckEnable>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a4b4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d107      	bne.n	800a4cc <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2105      	movs	r1, #5
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fd4b 	bl	800af5c <VL53L0X_SetLimitCheckEnable>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800a4cc:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d108      	bne.n	800a4e6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a4d4:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800a4d8:	2100      	movs	r1, #0
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fdee 	bl	800b0bc <VL53L0X_SetLimitCheckValue>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a4e6:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d108      	bne.n	800a500 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a4ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fde1 	bl	800b0bc <VL53L0X_SetLimitCheckValue>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a500:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a504:	2b00      	cmp	r3, #0
 800a506:	d108      	bne.n	800a51a <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a508:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800a50c:	2102      	movs	r1, #2
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fdd4 	bl	800b0bc <VL53L0X_SetLimitCheckValue>
 800a514:	4603      	mov	r3, r0
 800a516:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a51a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d107      	bne.n	800a532 <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a522:	2200      	movs	r2, #0
 800a524:	2103      	movs	r1, #3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fdc8 	bl	800b0bc <VL53L0X_SetLimitCheckValue>
 800a52c:	4603      	mov	r3, r0
 800a52e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a532:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10f      	bne.n	800a55a <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	22ff      	movs	r2, #255	; 0xff
 800a53e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a542:	22ff      	movs	r2, #255	; 0xff
 800a544:	2101      	movs	r1, #1
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f004 fb62 	bl	800ec10 <VL53L0X_WrByte>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a55a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d103      	bne.n	800a56a <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 800a56a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3790      	adds	r7, #144	; 0x90
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	000970a4 	.word	0x000970a4
 800a57c:	044c0000 	.word	0x044c0000
 800a580:	0003cccc 	.word	0x0003cccc
 800a584:	02ee0000 	.word	0x02ee0000
 800a588:	00074ccc 	.word	0x00074ccc
 800a58c:	02260000 	.word	0x02260000

0800a590 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b0ac      	sub	sp, #176	; 0xb0
 800a594:	af02      	add	r7, sp, #8
 800a596:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a598:	2300      	movs	r3, #0
 800a59a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800a59e:	f107 031c 	add.w	r3, r7, #28
 800a5a2:	2278      	movs	r2, #120	; 0x78
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f004 fcc4 	bl	800ef34 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800a5ce:	2101      	movs	r1, #1
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f002 fb3b 	bl	800cc4c <VL53L0X_get_info_from_device>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800a5e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800a5ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800a5f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d80f      	bhi.n	800a618 <VL53L0X_StaticInit+0x88>
 800a5f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d103      	bne.n	800a608 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 800a600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a604:	2b20      	cmp	r3, #32
 800a606:	d807      	bhi.n	800a618 <VL53L0X_StaticInit+0x88>
 800a608:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10f      	bne.n	800a630 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 800a610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a614:	2b0c      	cmp	r3, #12
 800a616:	d90b      	bls.n	800a630 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800a618:	f107 0218 	add.w	r2, r7, #24
 800a61c:	f107 0314 	add.w	r3, r7, #20
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 fdca 	bl	800c1bc <VL53L0X_perform_ref_spad_management>
 800a628:	4603      	mov	r3, r0
 800a62a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800a62e:	e00a      	b.n	800a646 <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800a630:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a634:	461a      	mov	r2, r3
 800a636:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f001 ffca 	bl	800c5d4 <VL53L0X_set_reference_spads>
 800a640:	4603      	mov	r3, r0
 800a642:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800a646:	4b93      	ldr	r3, [pc, #588]	; (800a894 <VL53L0X_StaticInit+0x304>)
 800a648:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a64c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a650:	2b00      	cmp	r3, #0
 800a652:	d111      	bne.n	800a678 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800a65a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800a65e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800a662:	2b00      	cmp	r3, #0
 800a664:	d105      	bne.n	800a672 <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800a66c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a670:	e002      	b.n	800a678 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800a672:	4b88      	ldr	r3, [pc, #544]	; (800a894 <VL53L0X_StaticInit+0x304>)
 800a674:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a678:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d107      	bne.n	800a690 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 800a680:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f003 fbf1 	bl	800de6c <VL53L0X_load_tuning_settings>
 800a68a:	4603      	mov	r3, r0
 800a68c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800a690:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10a      	bne.n	800a6ae <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800a698:	2300      	movs	r3, #0
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	2304      	movs	r3, #4
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f001 f9be 	bl	800ba24 <VL53L0X_SetGpioConfig>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a6ae:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d121      	bne.n	800a6fa <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	21ff      	movs	r1, #255	; 0xff
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f004 faa8 	bl	800ec10 <VL53L0X_WrByte>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800a6c6:	f107 031a 	add.w	r3, r7, #26
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	2184      	movs	r1, #132	; 0x84
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f004 fb4a 	bl	800ed68 <VL53L0X_RdWord>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	21ff      	movs	r1, #255	; 0xff
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f004 fa92 	bl	800ec10 <VL53L0X_WrByte>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a6fa:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d105      	bne.n	800a70e <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800a702:	8b7b      	ldrh	r3, [r7, #26]
 800a704:	011b      	lsls	r3, r3, #4
 800a706:	461a      	mov	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a70e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a712:	2b00      	cmp	r3, #0
 800a714:	d108      	bne.n	800a728 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a716:	f107 031c 	add.w	r3, r7, #28
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f903 	bl	800a928 <VL53L0X_GetDeviceParameters>
 800a722:	4603      	mov	r3, r0
 800a724:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 800a728:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d110      	bne.n	800a752 <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800a730:	f107 0319 	add.w	r3, r7, #25
 800a734:	4619      	mov	r1, r3
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f9eb 	bl	800ab12 <VL53L0X_GetFractionEnable>
 800a73c:	4603      	mov	r3, r0
 800a73e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 800a742:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a746:	2b00      	cmp	r3, #0
 800a748:	d103      	bne.n	800a752 <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800a74a:	7e7a      	ldrb	r2, [r7, #25]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a752:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a756:	2b00      	cmp	r3, #0
 800a758:	d107      	bne.n	800a76a <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	3308      	adds	r3, #8
 800a75e:	f107 011c 	add.w	r1, r7, #28
 800a762:	2278      	movs	r2, #120	; 0x78
 800a764:	4618      	mov	r0, r3
 800a766:	f004 fbd7 	bl	800ef18 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800a76a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d111      	bne.n	800a796 <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 800a772:	f107 0319 	add.w	r3, r7, #25
 800a776:	461a      	mov	r2, r3
 800a778:	2101      	movs	r1, #1
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f004 faca 	bl	800ed14 <VL53L0X_RdByte>
 800a780:	4603      	mov	r3, r0
 800a782:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800a786:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d103      	bne.n	800a796 <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800a78e:	7e7a      	ldrb	r2, [r7, #25]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800a796:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d107      	bne.n	800a7ae <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fa12 	bl	800abcc <VL53L0X_SetSequenceStepEnable>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a7ae:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d107      	bne.n	800a7c6 <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2102      	movs	r1, #2
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fa06 	bl	800abcc <VL53L0X_SetSequenceStepEnable>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800a7c6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d103      	bne.n	800a7d6 <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2203      	movs	r2, #3
 800a7d2:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a7d6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d109      	bne.n	800a7f2 <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a7de:	f107 0313 	add.w	r3, r7, #19
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f9d8 	bl	800ab9c <VL53L0X_GetVcselPulsePeriod>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a7f2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d103      	bne.n	800a802 <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a7fa:	7cfa      	ldrb	r2, [r7, #19]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a802:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a806:	2b00      	cmp	r3, #0
 800a808:	d109      	bne.n	800a81e <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a80a:	f107 0313 	add.w	r3, r7, #19
 800a80e:	461a      	mov	r2, r3
 800a810:	2101      	movs	r1, #1
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f9c2 	bl	800ab9c <VL53L0X_GetVcselPulsePeriod>
 800a818:	4603      	mov	r3, r0
 800a81a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a81e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a822:	2b00      	cmp	r3, #0
 800a824:	d103      	bne.n	800a82e <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a826:	7cfa      	ldrb	r2, [r7, #19]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a82e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a832:	2b00      	cmp	r3, #0
 800a834:	d109      	bne.n	800a84a <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 800a836:	f107 030c 	add.w	r3, r7, #12
 800a83a:	461a      	mov	r2, r3
 800a83c:	2103      	movs	r1, #3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f002 ff86 	bl	800d750 <get_sequence_step_timeout>
 800a844:	4603      	mov	r3, r0
 800a846:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a84a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d103      	bne.n	800a85a <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a85a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d109      	bne.n	800a876 <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 800a862:	f107 030c 	add.w	r3, r7, #12
 800a866:	461a      	mov	r2, r3
 800a868:	2104      	movs	r1, #4
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f002 ff70 	bl	800d750 <get_sequence_step_timeout>
 800a870:	4603      	mov	r3, r0
 800a872:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a876:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d103      	bne.n	800a886 <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a886:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	37a8      	adds	r7, #168	; 0xa8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	200000ac 	.word	0x200000ac

0800a898 <VL53L0X_ResetDevice>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_ResetDevice(VL53L0X_DEV Dev)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* Set reset bit */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	21bf      	movs	r1, #191	; 0xbf
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f004 f9b1 	bl	800ec10 <VL53L0X_WrByte>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	73fb      	strb	r3, [r7, #15]
		0x00);

	/* Wait for some time */
	if (Status == VL53L0X_ERROR_NONE) {
 800a8b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10b      	bne.n	800a8d2 <VL53L0X_ResetDevice+0x3a>
		do {
			Status = VL53L0X_RdByte(Dev,
 800a8ba:	f107 030e 	add.w	r3, r7, #14
 800a8be:	461a      	mov	r2, r3
 800a8c0:	21c0      	movs	r1, #192	; 0xc0
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f004 fa26 	bl	800ed14 <VL53L0X_RdByte>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Byte);
		} while (Byte != 0x00);
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1f3      	bne.n	800a8ba <VL53L0X_ResetDevice+0x22>
	}

	VL53L0X_PollingDelay(Dev);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f004 fabc 	bl	800ee50 <VL53L0X_PollingDelay>

	/* Release reset */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 800a8d8:	2201      	movs	r2, #1
 800a8da:	21bf      	movs	r1, #191	; 0xbf
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f004 f997 	bl	800ec10 <VL53L0X_WrByte>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	73fb      	strb	r3, [r7, #15]
		0x01);

	/* Wait until correct boot-up of the device */
	if (Status == VL53L0X_ERROR_NONE) {
 800a8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10b      	bne.n	800a906 <VL53L0X_ResetDevice+0x6e>
		do {
			Status = VL53L0X_RdByte(Dev,
 800a8ee:	f107 030e 	add.w	r3, r7, #14
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	21c0      	movs	r1, #192	; 0xc0
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f004 fa0c 	bl	800ed14 <VL53L0X_RdByte>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Byte);
		} while (Byte == 0x00);
 800a900:	7bbb      	ldrb	r3, [r7, #14]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d0f3      	beq.n	800a8ee <VL53L0X_ResetDevice+0x56>
	}

	VL53L0X_PollingDelay(Dev);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f004 faa2 	bl	800ee50 <VL53L0X_PollingDelay>

	/* Set PAL State to VL53L0X_STATE_POWERDOWN */
	if (Status == VL53L0X_ERROR_NONE)
 800a90c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d103      	bne.n	800a91c <VL53L0X_ResetDevice+0x84>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_POWERDOWN);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 800a91c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a932:	2300      	movs	r3, #0
 800a934:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f8d6 	bl	800aaec <VL53L0X_GetDeviceMode>
 800a940:	4603      	mov	r3, r0
 800a942:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d107      	bne.n	800a95c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	3308      	adds	r3, #8
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fa86 	bl	800ae64 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800a958:	4603      	mov	r3, r0
 800a95a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800a95c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	2200      	movs	r2, #0
 800a968:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800a96a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d107      	bne.n	800a982 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	3310      	adds	r3, #16
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fabc 	bl	800aef6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800a97e:	4603      	mov	r3, r0
 800a980:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800a982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d107      	bne.n	800a99a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	3314      	adds	r3, #20
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff fc63 	bl	800a25c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800a996:	4603      	mov	r3, r0
 800a998:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800a99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d134      	bne.n	800aa0c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	60bb      	str	r3, [r7, #8]
 800a9a6:	e02a      	b.n	800a9fe <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a9a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d12a      	bne.n	800aa06 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	b299      	uxth	r1, r3
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	3308      	adds	r3, #8
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	4413      	add	r3, r2
 800a9be:	3304      	adds	r3, #4
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fbdc 	bl	800b180 <VL53L0X_GetLimitCheckValue>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d117      	bne.n	800aa0a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	b299      	uxth	r1, r3
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	3318      	adds	r3, #24
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fb43 	bl	800b074 <VL53L0X_GetLimitCheckEnable>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	7bfb      	ldrb	r3, [r7, #15]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	60bb      	str	r3, [r7, #8]
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	2b05      	cmp	r3, #5
 800aa02:	ddd1      	ble.n	800a9a8 <VL53L0X_GetDeviceParameters+0x80>
 800aa04:	e002      	b.n	800aa0c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800aa06:	bf00      	nop
 800aa08:	e000      	b.n	800aa0c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800aa0a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aa0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d107      	bne.n	800aa24 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	3374      	adds	r3, #116	; 0x74
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fc3e 	bl	800b29c <VL53L0X_GetWrapAroundCheckEnable>
 800aa20:	4603      	mov	r3, r0
 800aa22:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800aa24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d107      	bne.n	800aa3c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	3304      	adds	r3, #4
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f89f 	bl	800ab76 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aa3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d120      	bne.n	800aa86 <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 800aa44:	2300      	movs	r3, #0
 800aa46:	60bb      	str	r3, [r7, #8]
 800aa48:	e01a      	b.n	800aa80 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	3310      	adds	r3, #16
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	330e      	adds	r3, #14
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	440b      	add	r3, r1
 800aa60:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	3316      	adds	r3, #22
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	3314      	adds	r3, #20
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	60bb      	str	r3, [r7, #8]
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2b06      	cmp	r3, #6
 800aa84:	dde1      	ble.n	800aa4a <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
	...

0800aa94 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800aaa4:	78fb      	ldrb	r3, [r7, #3]
 800aaa6:	2b15      	cmp	r3, #21
 800aaa8:	bf8c      	ite	hi
 800aaaa:	2201      	movhi	r2, #1
 800aaac:	2200      	movls	r2, #0
 800aaae:	b2d2      	uxtb	r2, r2
 800aab0:	2a00      	cmp	r2, #0
 800aab2:	d10e      	bne.n	800aad2 <VL53L0X_SetDeviceMode+0x3e>
 800aab4:	2201      	movs	r2, #1
 800aab6:	409a      	lsls	r2, r3
 800aab8:	4b0b      	ldr	r3, [pc, #44]	; (800aae8 <VL53L0X_SetDeviceMode+0x54>)
 800aaba:	4013      	ands	r3, r2
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	bf14      	ite	ne
 800aac0:	2301      	movne	r3, #1
 800aac2:	2300      	moveq	r3, #0
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d003      	beq.n	800aad2 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	78fa      	ldrb	r2, [r7, #3]
 800aace:	721a      	strb	r2, [r3, #8]
		break;
 800aad0:	e001      	b.n	800aad6 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800aad2:	23f8      	movs	r3, #248	; 0xf8
 800aad4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	0030000b 	.word	0x0030000b

0800aaec <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	7a1a      	ldrb	r2, [r3, #8]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800ab02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	2109      	movs	r1, #9
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f004 f8f5 	bl	800ed14 <VL53L0X_RdByte>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800ab2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d106      	bne.n	800ab44 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	f003 0301 	and.w	r3, r3, #1
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800ab44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f002 ffff 	bl	800db64 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800ab66:	4603      	mov	r3, r0
 800ab68:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800ab6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b084      	sub	sp, #16
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f003 f8bf 	bl	800dd0a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800ab90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b086      	sub	sp, #24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	460b      	mov	r3, r1
 800aba6:	607a      	str	r2, [r7, #4]
 800aba8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abaa:	2300      	movs	r3, #0
 800abac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800abae:	7afb      	ldrb	r3, [r7, #11]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	4619      	mov	r1, r3
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f002 ff9e 	bl	800daf6 <VL53L0X_get_vcsel_pulse_period>
 800abba:	4603      	mov	r3, r0
 800abbc:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800abbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b086      	sub	sp, #24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	70fb      	strb	r3, [r7, #3]
 800abd8:	4613      	mov	r3, r2
 800abda:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abdc:	2300      	movs	r3, #0
 800abde:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800abe4:	2300      	movs	r3, #0
 800abe6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800abe8:	f107 030f 	add.w	r3, r7, #15
 800abec:	461a      	mov	r2, r3
 800abee:	2101      	movs	r1, #1
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f004 f88f 	bl	800ed14 <VL53L0X_RdByte>
 800abf6:	4603      	mov	r3, r0
 800abf8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
 800abfc:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800abfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d15a      	bne.n	800acbc <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800ac06:	78bb      	ldrb	r3, [r7, #2]
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d12b      	bne.n	800ac64 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800ac0c:	78fb      	ldrb	r3, [r7, #3]
 800ac0e:	2b04      	cmp	r3, #4
 800ac10:	d825      	bhi.n	800ac5e <VL53L0X_SetSequenceStepEnable+0x92>
 800ac12:	a201      	add	r2, pc, #4	; (adr r2, 800ac18 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800ac14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac18:	0800ac2d 	.word	0x0800ac2d
 800ac1c:	0800ac37 	.word	0x0800ac37
 800ac20:	0800ac41 	.word	0x0800ac41
 800ac24:	0800ac4b 	.word	0x0800ac4b
 800ac28:	0800ac55 	.word	0x0800ac55
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800ac2c:	7dbb      	ldrb	r3, [r7, #22]
 800ac2e:	f043 0310 	orr.w	r3, r3, #16
 800ac32:	75bb      	strb	r3, [r7, #22]
				break;
 800ac34:	e043      	b.n	800acbe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800ac36:	7dbb      	ldrb	r3, [r7, #22]
 800ac38:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800ac3c:	75bb      	strb	r3, [r7, #22]
				break;
 800ac3e:	e03e      	b.n	800acbe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800ac40:	7dbb      	ldrb	r3, [r7, #22]
 800ac42:	f043 0304 	orr.w	r3, r3, #4
 800ac46:	75bb      	strb	r3, [r7, #22]
				break;
 800ac48:	e039      	b.n	800acbe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800ac4a:	7dbb      	ldrb	r3, [r7, #22]
 800ac4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac50:	75bb      	strb	r3, [r7, #22]
				break;
 800ac52:	e034      	b.n	800acbe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800ac54:	7dbb      	ldrb	r3, [r7, #22]
 800ac56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac5a:	75bb      	strb	r3, [r7, #22]
				break;
 800ac5c:	e02f      	b.n	800acbe <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac5e:	23fc      	movs	r3, #252	; 0xfc
 800ac60:	75fb      	strb	r3, [r7, #23]
 800ac62:	e02c      	b.n	800acbe <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800ac64:	78fb      	ldrb	r3, [r7, #3]
 800ac66:	2b04      	cmp	r3, #4
 800ac68:	d825      	bhi.n	800acb6 <VL53L0X_SetSequenceStepEnable+0xea>
 800ac6a:	a201      	add	r2, pc, #4	; (adr r2, 800ac70 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800ac85 	.word	0x0800ac85
 800ac74:	0800ac8f 	.word	0x0800ac8f
 800ac78:	0800ac99 	.word	0x0800ac99
 800ac7c:	0800aca3 	.word	0x0800aca3
 800ac80:	0800acad 	.word	0x0800acad
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800ac84:	7dbb      	ldrb	r3, [r7, #22]
 800ac86:	f023 0310 	bic.w	r3, r3, #16
 800ac8a:	75bb      	strb	r3, [r7, #22]
				break;
 800ac8c:	e017      	b.n	800acbe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800ac8e:	7dbb      	ldrb	r3, [r7, #22]
 800ac90:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800ac94:	75bb      	strb	r3, [r7, #22]
				break;
 800ac96:	e012      	b.n	800acbe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800ac98:	7dbb      	ldrb	r3, [r7, #22]
 800ac9a:	f023 0304 	bic.w	r3, r3, #4
 800ac9e:	75bb      	strb	r3, [r7, #22]
				break;
 800aca0:	e00d      	b.n	800acbe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800aca2:	7dbb      	ldrb	r3, [r7, #22]
 800aca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aca8:	75bb      	strb	r3, [r7, #22]
				break;
 800acaa:	e008      	b.n	800acbe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800acac:	7dbb      	ldrb	r3, [r7, #22]
 800acae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb2:	75bb      	strb	r3, [r7, #22]
				break;
 800acb4:	e003      	b.n	800acbe <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acb6:	23fc      	movs	r3, #252	; 0xfc
 800acb8:	75fb      	strb	r3, [r7, #23]
 800acba:	e000      	b.n	800acbe <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800acbc:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800acbe:	7bfb      	ldrb	r3, [r7, #15]
 800acc0:	7dba      	ldrb	r2, [r7, #22]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d01e      	beq.n	800ad04 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800acc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d107      	bne.n	800acde <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800acce:	7dbb      	ldrb	r3, [r7, #22]
 800acd0:	461a      	mov	r2, r3
 800acd2:	2101      	movs	r1, #1
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f003 ff9b 	bl	800ec10 <VL53L0X_WrByte>
 800acda:	4603      	mov	r3, r0
 800acdc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800acde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d103      	bne.n	800acee <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	7dba      	ldrb	r2, [r7, #22]
 800acea:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800acee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d106      	bne.n	800ad04 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800acfc:	6939      	ldr	r1, [r7, #16]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7ff ff26 	bl	800ab50 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800ad04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	607b      	str	r3, [r7, #4]
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	72fb      	strb	r3, [r7, #11]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad22:	2300      	movs	r3, #0
 800ad24:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800ad2c:	7afb      	ldrb	r3, [r7, #11]
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d836      	bhi.n	800ada0 <sequence_step_enabled+0x90>
 800ad32:	a201      	add	r2, pc, #4	; (adr r2, 800ad38 <sequence_step_enabled+0x28>)
 800ad34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad38:	0800ad4d 	.word	0x0800ad4d
 800ad3c:	0800ad5f 	.word	0x0800ad5f
 800ad40:	0800ad71 	.word	0x0800ad71
 800ad44:	0800ad83 	.word	0x0800ad83
 800ad48:	0800ad95 	.word	0x0800ad95
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800ad4c:	7abb      	ldrb	r3, [r7, #10]
 800ad4e:	111b      	asrs	r3, r3, #4
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	701a      	strb	r2, [r3, #0]
		break;
 800ad5c:	e022      	b.n	800ada4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800ad5e:	7abb      	ldrb	r3, [r7, #10]
 800ad60:	10db      	asrs	r3, r3, #3
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	f003 0301 	and.w	r3, r3, #1
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	701a      	strb	r2, [r3, #0]
		break;
 800ad6e:	e019      	b.n	800ada4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800ad70:	7abb      	ldrb	r3, [r7, #10]
 800ad72:	109b      	asrs	r3, r3, #2
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	f003 0301 	and.w	r3, r3, #1
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	701a      	strb	r2, [r3, #0]
		break;
 800ad80:	e010      	b.n	800ada4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800ad82:	7abb      	ldrb	r3, [r7, #10]
 800ad84:	119b      	asrs	r3, r3, #6
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	f003 0301 	and.w	r3, r3, #1
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	701a      	strb	r2, [r3, #0]
		break;
 800ad92:	e007      	b.n	800ada4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800ad94:	7abb      	ldrb	r3, [r7, #10]
 800ad96:	09db      	lsrs	r3, r3, #7
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	701a      	strb	r2, [r3, #0]
		break;
 800ad9e:	e001      	b.n	800ada4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ada0:	23fc      	movs	r3, #252	; 0xfc
 800ada2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ada4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	371c      	adds	r7, #28
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adbe:	2300      	movs	r3, #0
 800adc0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800adc6:	f107 030e 	add.w	r3, r7, #14
 800adca:	461a      	mov	r2, r3
 800adcc:	2101      	movs	r1, #1
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f003 ffa0 	bl	800ed14 <VL53L0X_RdByte>
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800add8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d107      	bne.n	800adf0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800ade0:	7bba      	ldrb	r2, [r7, #14]
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	2100      	movs	r1, #0
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7ff ff92 	bl	800ad10 <sequence_step_enabled>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800adf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d108      	bne.n	800ae0a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800adf8:	7bba      	ldrb	r2, [r7, #14]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	3302      	adds	r3, #2
 800adfe:	2101      	movs	r1, #1
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff ff85 	bl	800ad10 <sequence_step_enabled>
 800ae06:	4603      	mov	r3, r0
 800ae08:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ae0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d108      	bne.n	800ae24 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800ae12:	7bba      	ldrb	r2, [r7, #14]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	3301      	adds	r3, #1
 800ae18:	2102      	movs	r1, #2
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff ff78 	bl	800ad10 <sequence_step_enabled>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ae24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d108      	bne.n	800ae3e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800ae2c:	7bba      	ldrb	r2, [r7, #14]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	3303      	adds	r3, #3
 800ae32:	2103      	movs	r1, #3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff ff6b 	bl	800ad10 <sequence_step_enabled>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ae3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d108      	bne.n	800ae58 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800ae46:	7bba      	ldrb	r2, [r7, #14]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	2104      	movs	r1, #4
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7ff ff5e 	bl	800ad10 <sequence_step_enabled>
 800ae54:	4603      	mov	r3, r0
 800ae56:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800ae72:	f107 030c 	add.w	r3, r7, #12
 800ae76:	461a      	mov	r2, r3
 800ae78:	21f8      	movs	r1, #248	; 0xf8
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f003 ff74 	bl	800ed68 <VL53L0X_RdWord>
 800ae80:	4603      	mov	r3, r0
 800ae82:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800ae84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d108      	bne.n	800ae9e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800ae8c:	f107 0308 	add.w	r3, r7, #8
 800ae90:	461a      	mov	r2, r3
 800ae92:	2104      	movs	r1, #4
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f003 ff9f 	bl	800edd8 <VL53L0X_RdDWord>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10c      	bne.n	800aec0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800aea6:	89bb      	ldrh	r3, [r7, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d005      	beq.n	800aeb8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	89ba      	ldrh	r2, [r7, #12]
 800aeb0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	7d1b      	ldrb	r3, [r3, #20]
 800aede:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	7bba      	ldrb	r2, [r7, #14]
 800aee4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800aee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr

0800aef6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b086      	sub	sp, #24
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
 800aefe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af00:	2300      	movs	r3, #0
 800af02:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800af04:	f107 030e 	add.w	r3, r7, #14
 800af08:	461a      	mov	r2, r3
 800af0a:	2120      	movs	r1, #32
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f003 ff2b 	bl	800ed68 <VL53L0X_RdWord>
 800af12:	4603      	mov	r3, r0
 800af14:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800af16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d118      	bne.n	800af50 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800af1e:	89fb      	ldrh	r3, [r7, #14]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d109      	bne.n	800af38 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	751a      	strb	r2, [r3, #20]
 800af36:	e00b      	b.n	800af50 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800af38:	89fb      	ldrh	r3, [r7, #14]
 800af3a:	00db      	lsls	r3, r3, #3
 800af3c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af54:	4618      	mov	r0, r3
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	460b      	mov	r3, r1
 800af66:	807b      	strh	r3, [r7, #2]
 800af68:	4613      	mov	r3, r2
 800af6a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af6c:	2300      	movs	r3, #0
 800af6e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800af70:	2300      	movs	r3, #0
 800af72:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800af7c:	887b      	ldrh	r3, [r7, #2]
 800af7e:	2b05      	cmp	r3, #5
 800af80:	d902      	bls.n	800af88 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800af82:	23fc      	movs	r3, #252	; 0xfc
 800af84:	75fb      	strb	r3, [r7, #23]
 800af86:	e05b      	b.n	800b040 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800af88:	787b      	ldrb	r3, [r7, #1]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d106      	bne.n	800af9c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800af96:	2301      	movs	r3, #1
 800af98:	73bb      	strb	r3, [r7, #14]
 800af9a:	e00a      	b.n	800afb2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800af9c:	887b      	ldrh	r3, [r7, #2]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	330a      	adds	r3, #10
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	4413      	add	r3, r2
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800afaa:	2300      	movs	r3, #0
 800afac:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800afae:	2301      	movs	r3, #1
 800afb0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800afb2:	887b      	ldrh	r3, [r7, #2]
 800afb4:	2b05      	cmp	r3, #5
 800afb6:	d841      	bhi.n	800b03c <VL53L0X_SetLimitCheckEnable+0xe0>
 800afb8:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <VL53L0X_SetLimitCheckEnable+0x64>)
 800afba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbe:	bf00      	nop
 800afc0:	0800afd9 	.word	0x0800afd9
 800afc4:	0800afe3 	.word	0x0800afe3
 800afc8:	0800aff9 	.word	0x0800aff9
 800afcc:	0800b003 	.word	0x0800b003
 800afd0:	0800b00d 	.word	0x0800b00d
 800afd4:	0800b025 	.word	0x0800b025

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	7bfa      	ldrb	r2, [r7, #15]
 800afdc:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800afe0:	e02e      	b.n	800b040 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	461a      	mov	r2, r3
 800afea:	2144      	movs	r1, #68	; 0x44
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f003 fe33 	bl	800ec58 <VL53L0X_WrWord>
 800aff2:	4603      	mov	r3, r0
 800aff4:	75fb      	strb	r3, [r7, #23]

			break;
 800aff6:	e023      	b.n	800b040 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	7bfa      	ldrb	r2, [r7, #15]
 800affc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800b000:	e01e      	b.n	800b040 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	7bfa      	ldrb	r2, [r7, #15]
 800b006:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800b00a:	e019      	b.n	800b040 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	005b      	lsls	r3, r3, #1
 800b010:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800b012:	7b7b      	ldrb	r3, [r7, #13]
 800b014:	22fe      	movs	r2, #254	; 0xfe
 800b016:	2160      	movs	r1, #96	; 0x60
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f003 fe47 	bl	800ecac <VL53L0X_UpdateByte>
 800b01e:	4603      	mov	r3, r0
 800b020:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800b022:	e00d      	b.n	800b040 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800b024:	7bbb      	ldrb	r3, [r7, #14]
 800b026:	011b      	lsls	r3, r3, #4
 800b028:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800b02a:	7b7b      	ldrb	r3, [r7, #13]
 800b02c:	22ef      	movs	r2, #239	; 0xef
 800b02e:	2160      	movs	r1, #96	; 0x60
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f003 fe3b 	bl	800ecac <VL53L0X_UpdateByte>
 800b036:	4603      	mov	r3, r0
 800b038:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800b03a:	e001      	b.n	800b040 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b03c:	23fc      	movs	r3, #252	; 0xfc
 800b03e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b040:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10f      	bne.n	800b068 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800b048:	787b      	ldrb	r3, [r7, #1]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d106      	bne.n	800b05c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b04e:	887b      	ldrh	r3, [r7, #2]
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	4413      	add	r3, r2
 800b054:	2200      	movs	r2, #0
 800b056:	f883 2020 	strb.w	r2, [r3, #32]
 800b05a:	e005      	b.n	800b068 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b05c:	887b      	ldrh	r3, [r7, #2]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	4413      	add	r3, r2
 800b062:	2201      	movs	r2, #1
 800b064:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b068:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800b074:	b480      	push	{r7}
 800b076:	b087      	sub	sp, #28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	460b      	mov	r3, r1
 800b07e:	607a      	str	r2, [r7, #4]
 800b080:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b082:	2300      	movs	r3, #0
 800b084:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b086:	897b      	ldrh	r3, [r7, #10]
 800b088:	2b05      	cmp	r3, #5
 800b08a:	d905      	bls.n	800b098 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b08c:	23fc      	movs	r3, #252	; 0xfc
 800b08e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	701a      	strb	r2, [r3, #0]
 800b096:	e008      	b.n	800b0aa <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b098:	897b      	ldrh	r3, [r7, #10]
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4413      	add	r3, r2
 800b09e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b0a2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	7dba      	ldrb	r2, [r7, #22]
 800b0a8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b0aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	371c      	adds	r7, #28
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
	...

0800b0bc <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	607a      	str	r2, [r7, #4]
 800b0c8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800b0ce:	897b      	ldrh	r3, [r7, #10]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b0d8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800b0da:	7dbb      	ldrb	r3, [r7, #22]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d107      	bne.n	800b0f0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b0e0:	897b      	ldrh	r3, [r7, #10]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	330a      	adds	r3, #10
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	605a      	str	r2, [r3, #4]
 800b0ee:	e040      	b.n	800b172 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800b0f0:	897b      	ldrh	r3, [r7, #10]
 800b0f2:	2b05      	cmp	r3, #5
 800b0f4:	d830      	bhi.n	800b158 <VL53L0X_SetLimitCheckValue+0x9c>
 800b0f6:	a201      	add	r2, pc, #4	; (adr r2, 800b0fc <VL53L0X_SetLimitCheckValue+0x40>)
 800b0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fc:	0800b115 	.word	0x0800b115
 800b100:	0800b11d 	.word	0x0800b11d
 800b104:	0800b133 	.word	0x0800b133
 800b108:	0800b13b 	.word	0x0800b13b
 800b10c:	0800b143 	.word	0x0800b143
 800b110:	0800b143 	.word	0x0800b143

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800b11a:	e01f      	b.n	800b15c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b120:	b29b      	uxth	r3, r3
 800b122:	461a      	mov	r2, r3
 800b124:	2144      	movs	r1, #68	; 0x44
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f003 fd96 	bl	800ec58 <VL53L0X_WrWord>
 800b12c:	4603      	mov	r3, r0
 800b12e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800b130:	e014      	b.n	800b15c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800b138:	e010      	b.n	800b15c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800b140:	e00c      	b.n	800b15c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b146:	b29b      	uxth	r3, r3
 800b148:	461a      	mov	r2, r3
 800b14a:	2164      	movs	r1, #100	; 0x64
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f003 fd83 	bl	800ec58 <VL53L0X_WrWord>
 800b152:	4603      	mov	r3, r0
 800b154:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800b156:	e001      	b.n	800b15c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b158:	23fc      	movs	r3, #252	; 0xfc
 800b15a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d106      	bne.n	800b172 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b164:	897b      	ldrh	r3, [r7, #10]
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	330a      	adds	r3, #10
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b172:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop

0800b180 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b088      	sub	sp, #32
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	460b      	mov	r3, r1
 800b18a:	607a      	str	r2, [r7, #4]
 800b18c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b18e:	2300      	movs	r3, #0
 800b190:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b196:	897b      	ldrh	r3, [r7, #10]
 800b198:	2b05      	cmp	r3, #5
 800b19a:	d847      	bhi.n	800b22c <VL53L0X_GetLimitCheckValue+0xac>
 800b19c:	a201      	add	r2, pc, #4	; (adr r2, 800b1a4 <VL53L0X_GetLimitCheckValue+0x24>)
 800b19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a2:	bf00      	nop
 800b1a4:	0800b1bd 	.word	0x0800b1bd
 800b1a8:	0800b1c9 	.word	0x0800b1c9
 800b1ac:	0800b1ef 	.word	0x0800b1ef
 800b1b0:	0800b1fb 	.word	0x0800b1fb
 800b1b4:	0800b207 	.word	0x0800b207
 800b1b8:	0800b207 	.word	0x0800b207

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	77bb      	strb	r3, [r7, #30]
		break;
 800b1c6:	e033      	b.n	800b230 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800b1c8:	f107 0316 	add.w	r3, r7, #22
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	2144      	movs	r1, #68	; 0x44
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f003 fdc9 	bl	800ed68 <VL53L0X_RdWord>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800b1da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d102      	bne.n	800b1e8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800b1e2:	8afb      	ldrh	r3, [r7, #22]
 800b1e4:	025b      	lsls	r3, r3, #9
 800b1e6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	77bb      	strb	r3, [r7, #30]
		break;
 800b1ec:	e020      	b.n	800b230 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	77bb      	strb	r3, [r7, #30]
		break;
 800b1f8:	e01a      	b.n	800b230 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fe:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 800b200:	2300      	movs	r3, #0
 800b202:	77bb      	strb	r3, [r7, #30]
		break;
 800b204:	e014      	b.n	800b230 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800b206:	f107 0316 	add.w	r3, r7, #22
 800b20a:	461a      	mov	r2, r3
 800b20c:	2164      	movs	r1, #100	; 0x64
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f003 fdaa 	bl	800ed68 <VL53L0X_RdWord>
 800b214:	4603      	mov	r3, r0
 800b216:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800b218:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d102      	bne.n	800b226 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800b220:	8afb      	ldrh	r3, [r7, #22]
 800b222:	025b      	lsls	r3, r3, #9
 800b224:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	77bb      	strb	r3, [r7, #30]
		break;
 800b22a:	e001      	b.n	800b230 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b22c:	23fc      	movs	r3, #252	; 0xfc
 800b22e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b230:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d12a      	bne.n	800b28e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800b238:	7fbb      	ldrb	r3, [r7, #30]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d124      	bne.n	800b288 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d110      	bne.n	800b266 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800b244:	897b      	ldrh	r3, [r7, #10]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	330a      	adds	r3, #10
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4413      	add	r3, r2
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	69ba      	ldr	r2, [r7, #24]
 800b256:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800b258:	897b      	ldrh	r3, [r7, #10]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	4413      	add	r3, r2
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2020 	strb.w	r2, [r3, #32]
 800b264:	e013      	b.n	800b28e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800b26c:	897b      	ldrh	r3, [r7, #10]
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	330a      	adds	r3, #10
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800b27a:	897b      	ldrh	r3, [r7, #10]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	2201      	movs	r2, #1
 800b282:	f883 2020 	strb.w	r2, [r3, #32]
 800b286:	e002      	b.n	800b28e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	69ba      	ldr	r2, [r7, #24]
 800b28c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b28e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b292:	4618      	mov	r0, r3
 800b294:	3720      	adds	r7, #32
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop

0800b29c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800b2aa:	f107 030e 	add.w	r3, r7, #14
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	2101      	movs	r1, #1
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f003 fd2e 	bl	800ed14 <VL53L0X_RdByte>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800b2bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10e      	bne.n	800b2e2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800b2c4:	7bba      	ldrb	r2, [r7, #14]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 800b2cc:	7bbb      	ldrb	r3, [r7, #14]
 800b2ce:	b25b      	sxtb	r3, r3
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	da03      	bge.n	800b2dc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	701a      	strb	r2, [r3, #0]
 800b2da:	e002      	b.n	800b2e2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b2e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d104      	bne.n	800b2f4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b2f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b308:	2300      	movs	r3, #0
 800b30a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800b30c:	f107 030e 	add.w	r3, r7, #14
 800b310:	4619      	mov	r1, r3
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7ff fbea 	bl	800aaec <VL53L0X_GetDeviceMode>
 800b318:	4603      	mov	r3, r0
 800b31a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 800b31c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d107      	bne.n	800b334 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800b324:	7bbb      	ldrb	r3, [r7, #14]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d104      	bne.n	800b334 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f924 	bl	800b578 <VL53L0X_StartMeasurement>
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800b334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d104      	bne.n	800b346 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f001 fbcb 	bl	800cad8 <VL53L0X_measurement_poll_for_completion>
 800b342:	4603      	mov	r3, r0
 800b344:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800b346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d106      	bne.n	800b35c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800b34e:	7bbb      	ldrb	r3, [r7, #14]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d103      	bne.n	800b35c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2203      	movs	r2, #3
 800b358:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 800b35c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b374:	2300      	movs	r3, #0
 800b376:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800b378:	2301      	movs	r3, #1
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	68b9      	ldr	r1, [r7, #8]
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f001 fb6d 	bl	800ca5e <VL53L0X_perform_ref_calibration>
 800b384:	4603      	mov	r3, r0
 800b386:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800b388:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800b3aa:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 800b3ac:	7dbb      	ldrb	r3, [r7, #22]
 800b3ae:	2b03      	cmp	r3, #3
 800b3b0:	f000 8093 	beq.w	800b4da <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	f300 80d6 	bgt.w	800b566 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d002      	beq.n	800b3c4 <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d047      	beq.n	800b452 <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 800b3c2:	e0d0      	b.n	800b566 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800b3c4:	f107 030c 	add.w	r3, r7, #12
 800b3c8:	f107 0210 	add.w	r2, r7, #16
 800b3cc:	2101      	movs	r1, #1
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fc4c 	bl	800bc6c <VL53L0X_GetInterruptThresholds>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800b3de:	f240 80bd 	bls.w	800b55c <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 800b3e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f040 80b8 	bne.w	800b55c <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800b3ec:	78fb      	ldrb	r3, [r7, #3]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d006      	beq.n	800b400 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 800b3f2:	4960      	ldr	r1, [pc, #384]	; (800b574 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f002 fd39 	bl	800de6c <VL53L0X_load_tuning_settings>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800b3fe:	e0ad      	b.n	800b55c <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800b400:	2204      	movs	r2, #4
 800b402:	21ff      	movs	r1, #255	; 0xff
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f003 fc03 	bl	800ec10 <VL53L0X_WrByte>
 800b40a:	4603      	mov	r3, r0
 800b40c:	461a      	mov	r2, r3
 800b40e:	7dfb      	ldrb	r3, [r7, #23]
 800b410:	4313      	orrs	r3, r2
 800b412:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800b414:	2200      	movs	r2, #0
 800b416:	2170      	movs	r1, #112	; 0x70
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f003 fbf9 	bl	800ec10 <VL53L0X_WrByte>
 800b41e:	4603      	mov	r3, r0
 800b420:	461a      	mov	r2, r3
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	4313      	orrs	r3, r2
 800b426:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b428:	2200      	movs	r2, #0
 800b42a:	21ff      	movs	r1, #255	; 0xff
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f003 fbef 	bl	800ec10 <VL53L0X_WrByte>
 800b432:	4603      	mov	r3, r0
 800b434:	461a      	mov	r2, r3
 800b436:	7dfb      	ldrb	r3, [r7, #23]
 800b438:	4313      	orrs	r3, r2
 800b43a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b43c:	2200      	movs	r2, #0
 800b43e:	2180      	movs	r1, #128	; 0x80
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f003 fbe5 	bl	800ec10 <VL53L0X_WrByte>
 800b446:	4603      	mov	r3, r0
 800b448:	461a      	mov	r2, r3
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	75fb      	strb	r3, [r7, #23]
		break;
 800b450:	e084      	b.n	800b55c <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800b452:	f107 030c 	add.w	r3, r7, #12
 800b456:	f107 0210 	add.w	r2, r7, #16
 800b45a:	2101      	movs	r1, #1
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fc05 	bl	800bc6c <VL53L0X_GetInterruptThresholds>
 800b462:	4603      	mov	r3, r0
 800b464:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d079      	beq.n	800b560 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 800b46c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d175      	bne.n	800b560 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800b474:	78fb      	ldrb	r3, [r7, #3]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d006      	beq.n	800b488 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 800b47a:	493e      	ldr	r1, [pc, #248]	; (800b574 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f002 fcf5 	bl	800de6c <VL53L0X_load_tuning_settings>
 800b482:	4603      	mov	r3, r0
 800b484:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800b486:	e06b      	b.n	800b560 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800b488:	2204      	movs	r2, #4
 800b48a:	21ff      	movs	r1, #255	; 0xff
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f003 fbbf 	bl	800ec10 <VL53L0X_WrByte>
 800b492:	4603      	mov	r3, r0
 800b494:	461a      	mov	r2, r3
 800b496:	7dfb      	ldrb	r3, [r7, #23]
 800b498:	4313      	orrs	r3, r2
 800b49a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800b49c:	2200      	movs	r2, #0
 800b49e:	2170      	movs	r1, #112	; 0x70
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f003 fbb5 	bl	800ec10 <VL53L0X_WrByte>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	7dfb      	ldrb	r3, [r7, #23]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	21ff      	movs	r1, #255	; 0xff
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f003 fbab 	bl	800ec10 <VL53L0X_WrByte>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	461a      	mov	r2, r3
 800b4be:	7dfb      	ldrb	r3, [r7, #23]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	2180      	movs	r1, #128	; 0x80
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f003 fba1 	bl	800ec10 <VL53L0X_WrByte>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	7dfb      	ldrb	r3, [r7, #23]
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	75fb      	strb	r3, [r7, #23]
		break;
 800b4d8:	e042      	b.n	800b560 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800b4da:	f107 030c 	add.w	r3, r7, #12
 800b4de:	f107 0210 	add.w	r2, r7, #16
 800b4e2:	2101      	movs	r1, #1
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fbc1 	bl	800bc6c <VL53L0X_GetInterruptThresholds>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 800b4ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d136      	bne.n	800b564 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 800b4f6:	78fb      	ldrb	r3, [r7, #3]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d006      	beq.n	800b50a <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 800b4fc:	491d      	ldr	r1, [pc, #116]	; (800b574 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f002 fcb4 	bl	800de6c <VL53L0X_load_tuning_settings>
 800b504:	4603      	mov	r3, r0
 800b506:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800b508:	e02c      	b.n	800b564 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800b50a:	2204      	movs	r2, #4
 800b50c:	21ff      	movs	r1, #255	; 0xff
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f003 fb7e 	bl	800ec10 <VL53L0X_WrByte>
 800b514:	4603      	mov	r3, r0
 800b516:	461a      	mov	r2, r3
 800b518:	7dfb      	ldrb	r3, [r7, #23]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800b51e:	2200      	movs	r2, #0
 800b520:	2170      	movs	r1, #112	; 0x70
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f003 fb74 	bl	800ec10 <VL53L0X_WrByte>
 800b528:	4603      	mov	r3, r0
 800b52a:	461a      	mov	r2, r3
 800b52c:	7dfb      	ldrb	r3, [r7, #23]
 800b52e:	4313      	orrs	r3, r2
 800b530:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b532:	2200      	movs	r2, #0
 800b534:	21ff      	movs	r1, #255	; 0xff
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f003 fb6a 	bl	800ec10 <VL53L0X_WrByte>
 800b53c:	4603      	mov	r3, r0
 800b53e:	461a      	mov	r2, r3
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	4313      	orrs	r3, r2
 800b544:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b546:	2200      	movs	r2, #0
 800b548:	2180      	movs	r1, #128	; 0x80
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f003 fb60 	bl	800ec10 <VL53L0X_WrByte>
 800b550:	4603      	mov	r3, r0
 800b552:	461a      	mov	r2, r3
 800b554:	7dfb      	ldrb	r3, [r7, #23]
 800b556:	4313      	orrs	r3, r2
 800b558:	75fb      	strb	r3, [r7, #23]
		break;
 800b55a:	e003      	b.n	800b564 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 800b55c:	bf00      	nop
 800b55e:	e002      	b.n	800b566 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 800b560:	bf00      	nop
 800b562:	e000      	b.n	800b566 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 800b564:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b566:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	200001a0 	.word	0x200001a0

0800b578 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b580:	2300      	movs	r3, #0
 800b582:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800b584:	2301      	movs	r3, #1
 800b586:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800b588:	f107 030e 	add.w	r3, r7, #14
 800b58c:	4619      	mov	r1, r3
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7ff faac 	bl	800aaec <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b594:	2201      	movs	r2, #1
 800b596:	2180      	movs	r1, #128	; 0x80
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f003 fb39 	bl	800ec10 <VL53L0X_WrByte>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	21ff      	movs	r1, #255	; 0xff
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f003 fb32 	bl	800ec10 <VL53L0X_WrByte>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f003 fb2b 	bl	800ec10 <VL53L0X_WrByte>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	2191      	movs	r1, #145	; 0x91
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f003 fb21 	bl	800ec10 <VL53L0X_WrByte>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f003 fb1a 	bl	800ec10 <VL53L0X_WrByte>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	21ff      	movs	r1, #255	; 0xff
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f003 fb13 	bl	800ec10 <VL53L0X_WrByte>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2180      	movs	r1, #128	; 0x80
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f003 fb0c 	bl	800ec10 <VL53L0X_WrByte>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	2b03      	cmp	r3, #3
 800b600:	d054      	beq.n	800b6ac <VL53L0X_StartMeasurement+0x134>
 800b602:	2b03      	cmp	r3, #3
 800b604:	dc6c      	bgt.n	800b6e0 <VL53L0X_StartMeasurement+0x168>
 800b606:	2b00      	cmp	r3, #0
 800b608:	d002      	beq.n	800b610 <VL53L0X_StartMeasurement+0x98>
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d034      	beq.n	800b678 <VL53L0X_StartMeasurement+0x100>
 800b60e:	e067      	b.n	800b6e0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800b610:	2201      	movs	r2, #1
 800b612:	2100      	movs	r1, #0
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f003 fafb 	bl	800ec10 <VL53L0X_WrByte>
 800b61a:	4603      	mov	r3, r0
 800b61c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
 800b620:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800b622:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d15d      	bne.n	800b6e6 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d008      	beq.n	800b646 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800b634:	f107 030d 	add.w	r3, r7, #13
 800b638:	461a      	mov	r2, r3
 800b63a:	2100      	movs	r1, #0
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f003 fb69 	bl	800ed14 <VL53L0X_RdByte>
 800b642:	4603      	mov	r3, r0
 800b644:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	3301      	adds	r3, #1
 800b64a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800b64c:	7b7a      	ldrb	r2, [r7, #13]
 800b64e:	7bfb      	ldrb	r3, [r7, #15]
 800b650:	4013      	ands	r3, r2
 800b652:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b654:	7bfa      	ldrb	r2, [r7, #15]
 800b656:	429a      	cmp	r2, r3
 800b658:	d107      	bne.n	800b66a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800b65a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d103      	bne.n	800b66a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b668:	d3e1      	bcc.n	800b62e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b670:	d339      	bcc.n	800b6e6 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800b672:	23f9      	movs	r3, #249	; 0xf9
 800b674:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800b676:	e036      	b.n	800b6e6 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b678:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d105      	bne.n	800b68c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b680:	2101      	movs	r1, #1
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff fe86 	bl	800b394 <VL53L0X_CheckAndLoadInterruptSettings>
 800b688:	4603      	mov	r3, r0
 800b68a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b68c:	2202      	movs	r2, #2
 800b68e:	2100      	movs	r1, #0
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f003 fabd 	bl	800ec10 <VL53L0X_WrByte>
 800b696:	4603      	mov	r3, r0
 800b698:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800b69a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d123      	bne.n	800b6ea <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2204      	movs	r2, #4
 800b6a6:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 800b6aa:	e01e      	b.n	800b6ea <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b6ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d105      	bne.n	800b6c0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b6b4:	2101      	movs	r1, #1
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f7ff fe6c 	bl	800b394 <VL53L0X_CheckAndLoadInterruptSettings>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b6c0:	2204      	movs	r2, #4
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f003 faa3 	bl	800ec10 <VL53L0X_WrByte>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800b6ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10b      	bne.n	800b6ee <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2204      	movs	r2, #4
 800b6da:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 800b6de:	e006      	b.n	800b6ee <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b6e0:	23f8      	movs	r3, #248	; 0xf8
 800b6e2:	75fb      	strb	r3, [r7, #23]
 800b6e4:	e004      	b.n	800b6f0 <VL53L0X_StartMeasurement+0x178>
		break;
 800b6e6:	bf00      	nop
 800b6e8:	e002      	b.n	800b6f0 <VL53L0X_StartMeasurement+0x178>
		break;
 800b6ea:	bf00      	nop
 800b6ec:	e000      	b.n	800b6f0 <VL53L0X_StartMeasurement+0x178>
		break;
 800b6ee:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b6f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3718      	adds	r7, #24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b706:	2300      	movs	r3, #0
 800b708:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800b710:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800b712:	7bbb      	ldrb	r3, [r7, #14]
 800b714:	2b04      	cmp	r3, #4
 800b716:	d112      	bne.n	800b73e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800b718:	f107 0308 	add.w	r3, r7, #8
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fb1a 	bl	800bd58 <VL53L0X_GetInterruptMaskStatus>
 800b724:	4603      	mov	r3, r0
 800b726:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	2b04      	cmp	r3, #4
 800b72c:	d103      	bne.n	800b736 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2201      	movs	r2, #1
 800b732:	701a      	strb	r2, [r3, #0]
 800b734:	e01c      	b.n	800b770 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	2200      	movs	r2, #0
 800b73a:	701a      	strb	r2, [r3, #0]
 800b73c:	e018      	b.n	800b770 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800b73e:	f107 030d 	add.w	r3, r7, #13
 800b742:	461a      	mov	r2, r3
 800b744:	2114      	movs	r1, #20
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f003 fae4 	bl	800ed14 <VL53L0X_RdByte>
 800b74c:	4603      	mov	r3, r0
 800b74e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800b750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10b      	bne.n	800b770 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800b758:	7b7b      	ldrb	r3, [r7, #13]
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d003      	beq.n	800b76a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2201      	movs	r2, #1
 800b766:	701a      	strb	r2, [r3, #0]
 800b768:	e002      	b.n	800b770 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2200      	movs	r2, #0
 800b76e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b774:	4618      	mov	r0, r3
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b77c:	b5b0      	push	{r4, r5, r7, lr}
 800b77e:	b096      	sub	sp, #88	; 0x58
 800b780:	af02      	add	r7, sp, #8
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b786:	2300      	movs	r3, #0
 800b788:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800b78c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b790:	230c      	movs	r3, #12
 800b792:	2114      	movs	r1, #20
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f003 fa0f 	bl	800ebb8 <VL53L0X_ReadMulti>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800b7a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f040 80d1 	bne.w	800b94c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 800b7b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	021b      	lsls	r3, r3, #8
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	4413      	add	r3, r2
 800b7c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800b7d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	021b      	lsls	r3, r3, #8
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	4413      	add	r3, r2
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	025b      	lsls	r3, r3, #9
 800b7e8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7ee:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 800b7f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	021b      	lsls	r3, r3, #8
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	4413      	add	r3, r2
 800b802:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800b806:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b80a:	025b      	lsls	r3, r3, #9
 800b80c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800b812:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800b816:	b29b      	uxth	r3, r3
 800b818:	021b      	lsls	r3, r3, #8
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b820:	b29b      	uxth	r3, r3
 800b822:	4413      	add	r3, r2
 800b824:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b82e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800b830:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b834:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 800b83e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 800b846:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800b84a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b84c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b850:	d046      	beq.n	800b8e0 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800b852:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b854:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b858:	fb02 f303 	mul.w	r3, r2, r3
 800b85c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b860:	4a57      	ldr	r2, [pc, #348]	; (800b9c0 <VL53L0X_GetRangingMeasurementData+0x244>)
 800b862:	fb82 1203 	smull	r1, r2, r2, r3
 800b866:	1192      	asrs	r2, r2, #6
 800b868:	17db      	asrs	r3, r3, #31
 800b86a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800b86c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	7d1b      	ldrb	r3, [r3, #20]
 800b87a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800b87e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b882:	2b00      	cmp	r3, #0
 800b884:	d02c      	beq.n	800b8e0 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800b886:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b888:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b88c:	fb02 f303 	mul.w	r3, r2, r3
 800b890:	121a      	asrs	r2, r3, #8
					<= 0) {
 800b892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800b894:	429a      	cmp	r2, r3
 800b896:	d10d      	bne.n	800b8b4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800b898:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d004      	beq.n	800b8aa <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800b8a0:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800b8a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b8a8:	e016      	b.n	800b8d8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800b8aa:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800b8ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b8b2:	e011      	b.n	800b8d8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800b8b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b8b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8ba:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800b8be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b8c0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800b8c4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800b8c8:	121b      	asrs	r3, r3, #8
 800b8ca:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800b8cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ce:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800b8d0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800b8d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800b8d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b8dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800b8e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00d      	beq.n	800b904 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800b8e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b8ec:	089b      	lsrs	r3, r3, #2
 800b8ee:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800b8f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	019b      	lsls	r3, r3, #6
 800b8fc:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	75da      	strb	r2, [r3, #23]
 800b902:	e006      	b.n	800b912 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b90a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	2200      	movs	r2, #0
 800b910:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800b912:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b916:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800b91a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	4613      	mov	r3, r2
 800b926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f002 fef1 	bl	800e710 <VL53L0X_get_pal_range_status>
 800b92e:	4603      	mov	r3, r0
 800b930:	461a      	mov	r2, r3
 800b932:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b936:	4313      	orrs	r3, r2
 800b938:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800b93c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b940:	2b00      	cmp	r3, #0
 800b942:	d103      	bne.n	800b94c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800b944:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b94c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b950:	2b00      	cmp	r3, #0
 800b952:	d12f      	bne.n	800b9b4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f107 040c 	add.w	r4, r7, #12
 800b95a:	f103 0580 	add.w	r5, r3, #128	; 0x80
 800b95e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b962:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b966:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800b96e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800b974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800b97c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800b982:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800b988:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800b98e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800b994:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800b99a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800b9a4:	f107 050c 	add.w	r5, r7, #12
 800b9a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b9b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b9b4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3750      	adds	r7, #80	; 0x50
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bdb0      	pop	{r4, r5, r7, pc}
 800b9c0:	10624dd3 	.word	0x10624dd3

0800b9c4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f7ff f85d 	bl	800aa94 <VL53L0X_SetDeviceMode>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b9de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d104      	bne.n	800b9f0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7ff fc8a 	bl	800b300 <VL53L0X_PerformSingleMeasurement>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800b9f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d105      	bne.n	800ba04 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff febe 	bl	800b77c <VL53L0X_GetRangingMeasurementData>
 800ba00:	4603      	mov	r3, r0
 800ba02:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800ba04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d105      	bne.n	800ba18 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f962 	bl	800bcd8 <VL53L0X_ClearInterruptMask>
 800ba14:	4603      	mov	r3, r0
 800ba16:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800ba18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	4608      	mov	r0, r1
 800ba2e:	4611      	mov	r1, r2
 800ba30:	461a      	mov	r2, r3
 800ba32:	4603      	mov	r3, r0
 800ba34:	70fb      	strb	r3, [r7, #3]
 800ba36:	460b      	mov	r3, r1
 800ba38:	70bb      	strb	r3, [r7, #2]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800ba42:	78fb      	ldrb	r3, [r7, #3]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800ba48:	23f6      	movs	r3, #246	; 0xf6
 800ba4a:	73fb      	strb	r3, [r7, #15]
 800ba4c:	e107      	b.n	800bc5e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800ba4e:	78bb      	ldrb	r3, [r7, #2]
 800ba50:	2b14      	cmp	r3, #20
 800ba52:	d110      	bne.n	800ba76 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800ba54:	7e3b      	ldrb	r3, [r7, #24]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d102      	bne.n	800ba60 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800ba5a:	2310      	movs	r3, #16
 800ba5c:	73bb      	strb	r3, [r7, #14]
 800ba5e:	e001      	b.n	800ba64 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800ba60:	2301      	movs	r3, #1
 800ba62:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	461a      	mov	r2, r3
 800ba68:	2184      	movs	r1, #132	; 0x84
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f003 f8d0 	bl	800ec10 <VL53L0X_WrByte>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
 800ba74:	e0f3      	b.n	800bc5e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800ba76:	78bb      	ldrb	r3, [r7, #2]
 800ba78:	2b15      	cmp	r3, #21
 800ba7a:	f040 8097 	bne.w	800bbac <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ba7e:	2201      	movs	r2, #1
 800ba80:	21ff      	movs	r1, #255	; 0xff
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f003 f8c4 	bl	800ec10 <VL53L0X_WrByte>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ba92:	2200      	movs	r2, #0
 800ba94:	2100      	movs	r1, #0
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f003 f8ba 	bl	800ec10 <VL53L0X_WrByte>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	461a      	mov	r2, r3
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800baa6:	2200      	movs	r2, #0
 800baa8:	21ff      	movs	r1, #255	; 0xff
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f003 f8b0 	bl	800ec10 <VL53L0X_WrByte>
 800bab0:	4603      	mov	r3, r0
 800bab2:	461a      	mov	r2, r3
 800bab4:	7bfb      	ldrb	r3, [r7, #15]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800baba:	2201      	movs	r2, #1
 800babc:	2180      	movs	r1, #128	; 0x80
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f003 f8a6 	bl	800ec10 <VL53L0X_WrByte>
 800bac4:	4603      	mov	r3, r0
 800bac6:	461a      	mov	r2, r3
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
 800baca:	4313      	orrs	r3, r2
 800bacc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800bace:	2202      	movs	r2, #2
 800bad0:	2185      	movs	r1, #133	; 0x85
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f003 f89c 	bl	800ec10 <VL53L0X_WrByte>
 800bad8:	4603      	mov	r3, r0
 800bada:	461a      	mov	r2, r3
 800badc:	7bfb      	ldrb	r3, [r7, #15]
 800bade:	4313      	orrs	r3, r2
 800bae0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800bae2:	2204      	movs	r2, #4
 800bae4:	21ff      	movs	r1, #255	; 0xff
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f003 f892 	bl	800ec10 <VL53L0X_WrByte>
 800baec:	4603      	mov	r3, r0
 800baee:	461a      	mov	r2, r3
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800baf6:	2200      	movs	r2, #0
 800baf8:	21cd      	movs	r1, #205	; 0xcd
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f003 f888 	bl	800ec10 <VL53L0X_WrByte>
 800bb00:	4603      	mov	r3, r0
 800bb02:	461a      	mov	r2, r3
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800bb0a:	2211      	movs	r2, #17
 800bb0c:	21cc      	movs	r1, #204	; 0xcc
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f003 f87e 	bl	800ec10 <VL53L0X_WrByte>
 800bb14:	4603      	mov	r3, r0
 800bb16:	461a      	mov	r2, r3
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800bb1e:	2207      	movs	r2, #7
 800bb20:	21ff      	movs	r1, #255	; 0xff
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f003 f874 	bl	800ec10 <VL53L0X_WrByte>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800bb32:	2200      	movs	r2, #0
 800bb34:	21be      	movs	r1, #190	; 0xbe
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f003 f86a 	bl	800ec10 <VL53L0X_WrByte>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	461a      	mov	r2, r3
 800bb40:	7bfb      	ldrb	r3, [r7, #15]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800bb46:	2206      	movs	r2, #6
 800bb48:	21ff      	movs	r1, #255	; 0xff
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f003 f860 	bl	800ec10 <VL53L0X_WrByte>
 800bb50:	4603      	mov	r3, r0
 800bb52:	461a      	mov	r2, r3
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800bb5a:	2209      	movs	r2, #9
 800bb5c:	21cc      	movs	r1, #204	; 0xcc
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f003 f856 	bl	800ec10 <VL53L0X_WrByte>
 800bb64:	4603      	mov	r3, r0
 800bb66:	461a      	mov	r2, r3
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800bb6e:	2200      	movs	r2, #0
 800bb70:	21ff      	movs	r1, #255	; 0xff
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f003 f84c 	bl	800ec10 <VL53L0X_WrByte>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	7bfb      	ldrb	r3, [r7, #15]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800bb82:	2201      	movs	r2, #1
 800bb84:	21ff      	movs	r1, #255	; 0xff
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f003 f842 	bl	800ec10 <VL53L0X_WrByte>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	461a      	mov	r2, r3
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800bb96:	2200      	movs	r2, #0
 800bb98:	2100      	movs	r1, #0
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f003 f838 	bl	800ec10 <VL53L0X_WrByte>
 800bba0:	4603      	mov	r3, r0
 800bba2:	461a      	mov	r2, r3
 800bba4:	7bfb      	ldrb	r3, [r7, #15]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	73fb      	strb	r3, [r7, #15]
 800bbaa:	e058      	b.n	800bc5e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800bbac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d121      	bne.n	800bbf8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800bbb4:	787b      	ldrb	r3, [r7, #1]
 800bbb6:	2b04      	cmp	r3, #4
 800bbb8:	d81b      	bhi.n	800bbf2 <VL53L0X_SetGpioConfig+0x1ce>
 800bbba:	a201      	add	r2, pc, #4	; (adr r2, 800bbc0 <VL53L0X_SetGpioConfig+0x19c>)
 800bbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc0:	0800bbd5 	.word	0x0800bbd5
 800bbc4:	0800bbdb 	.word	0x0800bbdb
 800bbc8:	0800bbe1 	.word	0x0800bbe1
 800bbcc:	0800bbe7 	.word	0x0800bbe7
 800bbd0:	0800bbed 	.word	0x0800bbed
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	73bb      	strb	r3, [r7, #14]
				break;
 800bbd8:	e00f      	b.n	800bbfa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	73bb      	strb	r3, [r7, #14]
				break;
 800bbde:	e00c      	b.n	800bbfa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	73bb      	strb	r3, [r7, #14]
				break;
 800bbe4:	e009      	b.n	800bbfa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	73bb      	strb	r3, [r7, #14]
				break;
 800bbea:	e006      	b.n	800bbfa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800bbec:	2304      	movs	r3, #4
 800bbee:	73bb      	strb	r3, [r7, #14]
				break;
 800bbf0:	e003      	b.n	800bbfa <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800bbf2:	23f5      	movs	r3, #245	; 0xf5
 800bbf4:	73fb      	strb	r3, [r7, #15]
 800bbf6:	e000      	b.n	800bbfa <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800bbf8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800bbfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d107      	bne.n	800bc12 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800bc02:	7bbb      	ldrb	r3, [r7, #14]
 800bc04:	461a      	mov	r2, r3
 800bc06:	210a      	movs	r1, #10
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f003 f801 	bl	800ec10 <VL53L0X_WrByte>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800bc12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10f      	bne.n	800bc3a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800bc1a:	7e3b      	ldrb	r3, [r7, #24]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d102      	bne.n	800bc26 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	73bb      	strb	r3, [r7, #14]
 800bc24:	e001      	b.n	800bc2a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800bc26:	2310      	movs	r3, #16
 800bc28:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800bc2a:	7bbb      	ldrb	r3, [r7, #14]
 800bc2c:	22ef      	movs	r2, #239	; 0xef
 800bc2e:	2184      	movs	r1, #132	; 0x84
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f003 f83b 	bl	800ecac <VL53L0X_UpdateByte>
 800bc36:	4603      	mov	r3, r0
 800bc38:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800bc3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d103      	bne.n	800bc4a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	787a      	ldrb	r2, [r7, #1]
 800bc46:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800bc4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d105      	bne.n	800bc5e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800bc52:	2100      	movs	r1, #0
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 f83f 	bl	800bcd8 <VL53L0X_ClearInterruptMask>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bc5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop

0800bc6c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	607a      	str	r2, [r7, #4]
 800bc76:	603b      	str	r3, [r7, #0]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 800bc80:	f107 0314 	add.w	r3, r7, #20
 800bc84:	461a      	mov	r2, r3
 800bc86:	210e      	movs	r1, #14
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f003 f86d 	bl	800ed68 <VL53L0X_RdWord>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800bc92:	8abb      	ldrh	r3, [r7, #20]
 800bc94:	045b      	lsls	r3, r3, #17
 800bc96:	461a      	mov	r2, r3
 800bc98:	4b0e      	ldr	r3, [pc, #56]	; (800bcd4 <VL53L0X_GetInterruptThresholds+0x68>)
 800bc9a:	4013      	ands	r3, r2
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800bca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10f      	bne.n	800bcc8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800bca8:	f107 0314 	add.w	r3, r7, #20
 800bcac:	461a      	mov	r2, r3
 800bcae:	210c      	movs	r1, #12
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f003 f859 	bl	800ed68 <VL53L0X_RdWord>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800bcba:	8abb      	ldrh	r3, [r7, #20]
 800bcbc:	045b      	lsls	r3, r3, #17
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	4b04      	ldr	r3, [pc, #16]	; (800bcd4 <VL53L0X_GetInterruptThresholds+0x68>)
 800bcc2:	4013      	ands	r3, r2
		*pThresholdHigh =
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bcc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	1ffe0000 	.word	0x1ffe0000

0800bcd8 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800bcea:	2201      	movs	r2, #1
 800bcec:	210b      	movs	r1, #11
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f002 ff8e 	bl	800ec10 <VL53L0X_WrByte>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	210b      	movs	r1, #11
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f002 ff87 	bl	800ec10 <VL53L0X_WrByte>
 800bd02:	4603      	mov	r3, r0
 800bd04:	461a      	mov	r2, r3
 800bd06:	7bfb      	ldrb	r3, [r7, #15]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800bd0c:	f107 030d 	add.w	r3, r7, #13
 800bd10:	461a      	mov	r2, r3
 800bd12:	2113      	movs	r1, #19
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f002 fffd 	bl	800ed14 <VL53L0X_RdByte>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800bd24:	7bbb      	ldrb	r3, [r7, #14]
 800bd26:	3301      	adds	r3, #1
 800bd28:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800bd2a:	7b7b      	ldrb	r3, [r7, #13]
 800bd2c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d006      	beq.n	800bd42 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800bd34:	7bbb      	ldrb	r3, [r7, #14]
 800bd36:	2b02      	cmp	r3, #2
 800bd38:	d803      	bhi.n	800bd42 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800bd3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d0d3      	beq.n	800bcea <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800bd42:	7bbb      	ldrb	r3, [r7, #14]
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d901      	bls.n	800bd4c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800bd48:	23f4      	movs	r3, #244	; 0xf4
 800bd4a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800bd4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd62:	2300      	movs	r3, #0
 800bd64:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 800bd66:	f107 030e 	add.w	r3, r7, #14
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	2113      	movs	r1, #19
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f002 ffd0 	bl	800ed14 <VL53L0X_RdByte>
 800bd74:	4603      	mov	r3, r0
 800bd76:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	f003 0207 	and.w	r2, r3, #7
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
 800bd84:	f003 0318 	and.w	r3, r3, #24
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d001      	beq.n	800bd90 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800bd8c:	23fa      	movs	r3, #250	; 0xfa
 800bd8e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800bd90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	68b9      	ldr	r1, [r7, #8]
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f000 fa03 	bl	800c1bc <VL53L0X_perform_ref_spad_management>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800bdba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3718      	adds	r7, #24
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b084      	sub	sp, #16
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800bdd4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800bdd8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800bdda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdde:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800bde0:	f107 0308 	add.w	r3, r7, #8
 800bde4:	461a      	mov	r2, r3
 800bde6:	2128      	movs	r1, #40	; 0x28
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f002 ffbd 	bl	800ed68 <VL53L0X_RdWord>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800bdf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d11e      	bne.n	800be38 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800bdfa:	893b      	ldrh	r3, [r7, #8]
 800bdfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be00:	b29b      	uxth	r3, r3
 800be02:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800be04:	893b      	ldrh	r3, [r7, #8]
 800be06:	461a      	mov	r2, r3
 800be08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	dd0b      	ble.n	800be28 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800be10:	893a      	ldrh	r2, [r7, #8]
 800be12:	897b      	ldrh	r3, [r7, #10]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	b29b      	uxth	r3, r3
 800be18:	b21b      	sxth	r3, r3
 800be1a:	461a      	mov	r2, r3
					* 250;
 800be1c:	23fa      	movs	r3, #250	; 0xfa
 800be1e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	601a      	str	r2, [r3, #0]
 800be26:	e007      	b.n	800be38 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800be28:	893b      	ldrh	r3, [r7, #8]
 800be2a:	b21b      	sxth	r3, r3
 800be2c:	461a      	mov	r2, r3
 800be2e:	23fa      	movs	r3, #250	; 0xfa
 800be30:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800be38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800be44:	b480      	push	{r7}
 800be46:	b08b      	sub	sp, #44	; 0x2c
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800be52:	2308      	movs	r3, #8
 800be54:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800be56:	2300      	movs	r3, #0
 800be58:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	f04f 32ff 	mov.w	r2, #4294967295
 800be60:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	fbb2 f3f3 	udiv	r3, r2, r3
 800be6a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	69ba      	ldr	r2, [r7, #24]
 800be70:	fbb3 f2f2 	udiv	r2, r3, r2
 800be74:	69b9      	ldr	r1, [r7, #24]
 800be76:	fb01 f202 	mul.w	r2, r1, r2
 800be7a:	1a9b      	subs	r3, r3, r2
 800be7c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	627b      	str	r3, [r7, #36]	; 0x24
 800be82:	e030      	b.n	800bee6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800be84:	2300      	movs	r3, #0
 800be86:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	4413      	add	r3, r2
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800be92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	429a      	cmp	r2, r3
 800be98:	d11e      	bne.n	800bed8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 800be9a:	7ffa      	ldrb	r2, [r7, #31]
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	fa42 f303 	asr.w	r3, r2, r3
 800bea2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800bea8:	e016      	b.n	800bed8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800beaa:	7ffb      	ldrb	r3, [r7, #31]
 800beac:	f003 0301 	and.w	r3, r3, #1
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00b      	beq.n	800becc <get_next_good_spad+0x88>
				success = 1;
 800beb4:	2301      	movs	r3, #1
 800beb6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800beb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beba:	69ba      	ldr	r2, [r7, #24]
 800bebc:	fb03 f202 	mul.w	r2, r3, r2
 800bec0:	6a3b      	ldr	r3, [r7, #32]
 800bec2:	4413      	add	r3, r2
 800bec4:	461a      	mov	r2, r3
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	601a      	str	r2, [r3, #0]
				break;
 800beca:	e009      	b.n	800bee0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800becc:	7ffb      	ldrb	r3, [r7, #31]
 800bece:	085b      	lsrs	r3, r3, #1
 800bed0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800bed2:	6a3b      	ldr	r3, [r7, #32]
 800bed4:	3301      	adds	r3, #1
 800bed6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800bed8:	6a3a      	ldr	r2, [r7, #32]
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d3e4      	bcc.n	800beaa <get_next_good_spad+0x66>
				coarseIndex++) {
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	3301      	adds	r3, #1
 800bee4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800bee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	429a      	cmp	r2, r3
 800beec:	d202      	bcs.n	800bef4 <get_next_good_spad+0xb0>
 800beee:	7fbb      	ldrb	r3, [r7, #30]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d0c7      	beq.n	800be84 <get_next_good_spad+0x40>
		}
	}
}
 800bef4:	bf00      	nop
 800bef6:	372c      	adds	r7, #44	; 0x2c
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	099b      	lsrs	r3, r3, #6
 800bf10:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800bf12:	4a07      	ldr	r2, [pc, #28]	; (800bf30 <is_aperture+0x30>)
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <is_aperture+0x22>
		isAperture = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800bf22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	20000358 	.word	0x20000358

0800bf34 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b089      	sub	sp, #36	; 0x24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bf40:	2300      	movs	r3, #0
 800bf42:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800bf44:	2308      	movs	r3, #8
 800bf46:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf50:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	69ba      	ldr	r2, [r7, #24]
 800bf56:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf5a:	69b9      	ldr	r1, [r7, #24]
 800bf5c:	fb01 f202 	mul.w	r2, r1, r2
 800bf60:	1a9b      	subs	r3, r3, r2
 800bf62:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800bf64:	697a      	ldr	r2, [r7, #20]
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d302      	bcc.n	800bf72 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bf6c:	23ce      	movs	r3, #206	; 0xce
 800bf6e:	77fb      	strb	r3, [r7, #31]
 800bf70:	e010      	b.n	800bf94 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	4413      	add	r3, r2
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	b25a      	sxtb	r2, r3
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	fa01 f303 	lsl.w	r3, r1, r3
 800bf84:	b25b      	sxtb	r3, r3
 800bf86:	4313      	orrs	r3, r2
 800bf88:	b259      	sxtb	r1, r3
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	4413      	add	r3, r2
 800bf90:	b2ca      	uxtb	r2, r1
 800bf92:	701a      	strb	r2, [r3, #0]

	return status;
 800bf94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3724      	adds	r7, #36	; 0x24
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800bfae:	2306      	movs	r3, #6
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	21b0      	movs	r1, #176	; 0xb0
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f002 fdcf 	bl	800eb58 <VL53L0X_WriteMulti>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800bfbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b084      	sub	sp, #16
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800bfd4:	2306      	movs	r3, #6
 800bfd6:	683a      	ldr	r2, [r7, #0]
 800bfd8:	21b0      	movs	r1, #176	; 0xb0
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f002 fdec 	bl	800ebb8 <VL53L0X_ReadMulti>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800bfe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b08c      	sub	sp, #48	; 0x30
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	607a      	str	r2, [r7, #4]
 800bffa:	603b      	str	r3, [r7, #0]
 800bffc:	460b      	mov	r3, r1
 800bffe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c000:	2300      	movs	r3, #0
 800c002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800c006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c008:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800c00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c00c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800c00e:	2300      	movs	r3, #0
 800c010:	62bb      	str	r3, [r7, #40]	; 0x28
 800c012:	e02b      	b.n	800c06c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800c014:	f107 031c 	add.w	r3, r7, #28
 800c018:	6a3a      	ldr	r2, [r7, #32]
 800c01a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff ff11 	bl	800be44 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c028:	d103      	bne.n	800c032 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c02a:	23ce      	movs	r3, #206	; 0xce
 800c02c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800c030:	e020      	b.n	800c074 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	461a      	mov	r2, r3
 800c036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c038:	4413      	add	r3, r2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7ff ff60 	bl	800bf00 <is_aperture>
 800c040:	4603      	mov	r3, r0
 800c042:	461a      	mov	r2, r3
 800c044:	7afb      	ldrb	r3, [r7, #11]
 800c046:	4293      	cmp	r3, r2
 800c048:	d003      	beq.n	800c052 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c04a:	23ce      	movs	r3, #206	; 0xce
 800c04c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800c050:	e010      	b.n	800c074 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800c056:	6a3a      	ldr	r2, [r7, #32]
 800c058:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c05a:	6838      	ldr	r0, [r7, #0]
 800c05c:	f7ff ff6a 	bl	800bf34 <enable_spad_bit>
		currentSpad++;
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	3301      	adds	r3, #1
 800c064:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800c066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c068:	3301      	adds	r3, #1
 800c06a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c06c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c06e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c070:	429a      	cmp	r2, r3
 800c072:	d3cf      	bcc.n	800c014 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800c074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c076:	6a3a      	ldr	r2, [r7, #32]
 800c078:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800c07a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d106      	bne.n	800c090 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f7ff ff8d 	bl	800bfa4 <set_ref_spad_map>
 800c08a:	4603      	mov	r3, r0
 800c08c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800c090:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c094:	2b00      	cmp	r3, #0
 800c096:	d121      	bne.n	800c0dc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800c098:	f107 0314 	add.w	r3, r7, #20
 800c09c:	4619      	mov	r1, r3
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f7ff ff93 	bl	800bfca <get_ref_spad_map>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800c0ae:	e011      	b.n	800c0d4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b4:	4413      	add	r3, r2
 800c0b6:	781a      	ldrb	r2, [r3, #0]
 800c0b8:	f107 0114 	add.w	r1, r7, #20
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0be:	440b      	add	r3, r1
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d003      	beq.n	800c0ce <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c0c6:	23ce      	movs	r3, #206	; 0xce
 800c0c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800c0cc:	e006      	b.n	800c0dc <enable_ref_spads+0xec>
			}
			i++;
 800c0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800c0d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d3e9      	bcc.n	800c0b0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800c0dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3730      	adds	r7, #48	; 0x30
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b08a      	sub	sp, #40	; 0x28
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800c104:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800c108:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d107      	bne.n	800c120 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800c110:	22c0      	movs	r2, #192	; 0xc0
 800c112:	2101      	movs	r1, #1
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f002 fd7b 	bl	800ec10 <VL53L0X_WrByte>
 800c11a:	4603      	mov	r3, r0
 800c11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800c120:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c124:	2b00      	cmp	r3, #0
 800c126:	d108      	bne.n	800c13a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800c128:	f107 0308 	add.w	r3, r7, #8
 800c12c:	4619      	mov	r1, r3
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7ff fc48 	bl	800b9c4 <VL53L0X_PerformSingleRangingMeasurement>
 800c134:	4603      	mov	r3, r0
 800c136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800c13a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d107      	bne.n	800c152 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c142:	2201      	movs	r2, #1
 800c144:	21ff      	movs	r1, #255	; 0xff
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f002 fd62 	bl	800ec10 <VL53L0X_WrByte>
 800c14c:	4603      	mov	r3, r0
 800c14e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800c152:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c156:	2b00      	cmp	r3, #0
 800c158:	d107      	bne.n	800c16a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	21b6      	movs	r1, #182	; 0xb6
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f002 fe02 	bl	800ed68 <VL53L0X_RdWord>
 800c164:	4603      	mov	r3, r0
 800c166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800c16a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d107      	bne.n	800c182 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c172:	2200      	movs	r2, #0
 800c174:	21ff      	movs	r1, #255	; 0xff
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f002 fd4a 	bl	800ec10 <VL53L0X_WrByte>
 800c17c:	4603      	mov	r3, r0
 800c17e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800c182:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c186:	2b00      	cmp	r3, #0
 800c188:	d112      	bne.n	800c1b0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c18a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c18e:	461a      	mov	r2, r3
 800c190:	2101      	movs	r1, #1
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f002 fd3c 	bl	800ec10 <VL53L0X_WrByte>
 800c198:	4603      	mov	r3, r0
 800c19a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800c19e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d104      	bne.n	800c1b0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c1ac:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 800c1b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3728      	adds	r7, #40	; 0x28
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800c1bc:	b590      	push	{r4, r7, lr}
 800c1be:	b09d      	sub	sp, #116	; 0x74
 800c1c0:	af06      	add	r7, sp, #24
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800c1ce:	23b4      	movs	r3, #180	; 0xb4
 800c1d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800c1d8:	232c      	movs	r3, #44	; 0x2c
 800c1da:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800c1e8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800c1ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800c1f6:	2306      	movs	r3, #6
 800c1f8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800c202:	2300      	movs	r3, #0
 800c204:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800c20c:	2300      	movs	r3, #0
 800c20e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800c210:	2300      	movs	r3, #0
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 800c220:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800c222:	2300      	movs	r3, #0
 800c224:	64bb      	str	r3, [r7, #72]	; 0x48
 800c226:	e009      	b.n	800c23c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c22c:	4413      	add	r3, r2
 800c22e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c232:	2200      	movs	r2, #0
 800c234:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c238:	3301      	adds	r3, #1
 800c23a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c23c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c240:	429a      	cmp	r2, r3
 800c242:	d3f1      	bcc.n	800c228 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c244:	2201      	movs	r2, #1
 800c246:	21ff      	movs	r1, #255	; 0xff
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f002 fce1 	bl	800ec10 <VL53L0X_WrByte>
 800c24e:	4603      	mov	r3, r0
 800c250:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800c254:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d107      	bne.n	800c26c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800c25c:	2200      	movs	r2, #0
 800c25e:	214f      	movs	r1, #79	; 0x4f
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f002 fcd5 	bl	800ec10 <VL53L0X_WrByte>
 800c266:	4603      	mov	r3, r0
 800c268:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c26c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c270:	2b00      	cmp	r3, #0
 800c272:	d107      	bne.n	800c284 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800c274:	222c      	movs	r2, #44	; 0x2c
 800c276:	214e      	movs	r1, #78	; 0x4e
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	f002 fcc9 	bl	800ec10 <VL53L0X_WrByte>
 800c27e:	4603      	mov	r3, r0
 800c280:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c284:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d107      	bne.n	800c29c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c28c:	2200      	movs	r2, #0
 800c28e:	21ff      	movs	r1, #255	; 0xff
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f002 fcbd 	bl	800ec10 <VL53L0X_WrByte>
 800c296:	4603      	mov	r3, r0
 800c298:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800c29c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d109      	bne.n	800c2b8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800c2a4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	21b6      	movs	r1, #182	; 0xb6
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f002 fcaf 	bl	800ec10 <VL53L0X_WrByte>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800c2b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d107      	bne.n	800c2d0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	2180      	movs	r1, #128	; 0x80
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f002 fca3 	bl	800ec10 <VL53L0X_WrByte>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800c2d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10a      	bne.n	800c2ee <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800c2d8:	f107 0210 	add.w	r2, r7, #16
 800c2dc:	f107 0111 	add.w	r1, r7, #17
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f000 fbbb 	bl	800ca5e <VL53L0X_perform_ref_calibration>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800c2ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d121      	bne.n	800c33a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800c2fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2fc:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800c302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c304:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 800c312:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c316:	f107 0218 	add.w	r2, r7, #24
 800c31a:	9204      	str	r2, [sp, #16]
 800c31c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c31e:	9203      	str	r2, [sp, #12]
 800c320:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c322:	9202      	str	r2, [sp, #8]
 800c324:	9301      	str	r3, [sp, #4]
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	4623      	mov	r3, r4
 800c32c:	4602      	mov	r2, r0
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	f7ff fe5e 	bl	800bff0 <enable_ref_spads>
 800c334:	4603      	mov	r3, r0
 800c336:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c33a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d174      	bne.n	800c42c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800c346:	f107 0312 	add.w	r3, r7, #18
 800c34a:	4619      	mov	r1, r3
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f7ff fecb 	bl	800c0e8 <perform_ref_signal_measurement>
 800c352:	4603      	mov	r3, r0
 800c354:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800c358:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d161      	bne.n	800c424 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800c360:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800c362:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c364:	429a      	cmp	r2, r3
 800c366:	d25d      	bcs.n	800c424 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 800c368:	2300      	movs	r3, #0
 800c36a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c36c:	e009      	b.n	800c382 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c372:	4413      	add	r3, r2
 800c374:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c378:	2200      	movs	r2, #0
 800c37a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800c37c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c37e:	3301      	adds	r3, #1
 800c380:	64bb      	str	r3, [r7, #72]	; 0x48
 800c382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c386:	429a      	cmp	r2, r3
 800c388:	d3f1      	bcc.n	800c36e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800c38a:	e002      	b.n	800c392 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800c38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c38e:	3301      	adds	r3, #1
 800c390:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800c392:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800c396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c398:	4413      	add	r3, r2
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7ff fdb0 	bl	800bf00 <is_aperture>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d103      	bne.n	800c3ae <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800c3a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d3ee      	bcc.n	800c38c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800c3b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3b4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 800c3c2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c3c6:	f107 0218 	add.w	r2, r7, #24
 800c3ca:	9204      	str	r2, [sp, #16]
 800c3cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3ce:	9203      	str	r2, [sp, #12]
 800c3d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3d2:	9202      	str	r2, [sp, #8]
 800c3d4:	9301      	str	r3, [sp, #4]
 800c3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	4623      	mov	r3, r4
 800c3dc:	4602      	mov	r2, r0
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	f7ff fe06 	bl	800bff0 <enable_ref_spads>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800c3ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d11b      	bne.n	800c42a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800c3f6:	f107 0312 	add.w	r3, r7, #18
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f7ff fe73 	bl	800c0e8 <perform_ref_signal_measurement>
 800c402:	4603      	mov	r3, r0
 800c404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800c408:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10c      	bne.n	800c42a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800c410:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800c412:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c414:	429a      	cmp	r2, r3
 800c416:	d208      	bcs.n	800c42a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800c418:	2301      	movs	r3, #1
 800c41a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800c41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800c422:	e002      	b.n	800c42a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c428:	e000      	b.n	800c42c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800c42a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c42c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c430:	2b00      	cmp	r3, #0
 800c432:	f040 80af 	bne.w	800c594 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800c436:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800c438:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c43a:	429a      	cmp	r2, r3
 800c43c:	f240 80aa 	bls.w	800c594 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800c440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800c446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c448:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 800c450:	f107 031c 	add.w	r3, r7, #28
 800c454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c456:	4618      	mov	r0, r3
 800c458:	f002 fd5e 	bl	800ef18 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800c45c:	8a7b      	ldrh	r3, [r7, #18]
 800c45e:	461a      	mov	r2, r3
 800c460:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c462:	1ad3      	subs	r3, r2, r3
 800c464:	2b00      	cmp	r3, #0
 800c466:	bfb8      	it	lt
 800c468:	425b      	neglt	r3, r3
 800c46a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800c46c:	2300      	movs	r3, #0
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800c472:	e086      	b.n	800c582 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 800c47a:	f107 0314 	add.w	r3, r7, #20
 800c47e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c482:	f7ff fcdf 	bl	800be44 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48c:	d103      	bne.n	800c496 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c48e:	23ce      	movs	r3, #206	; 0xce
 800c490:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800c494:	e07e      	b.n	800c594 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800c496:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c49a:	697a      	ldr	r2, [r7, #20]
 800c49c:	4413      	add	r3, r2
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7ff fd2e 	bl	800bf00 <is_aperture>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d003      	beq.n	800c4b6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800c4b4:	e06e      	b.n	800c594 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800c4b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 800c4c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff fd32 	bl	800bf34 <enable_spad_bit>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800c4d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10c      	bne.n	800c4f8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800c4de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f7ff fd59 	bl	800bfa4 <set_ref_spad_map>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800c4f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d146      	bne.n	800c58e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800c500:	f107 0312 	add.w	r3, r7, #18
 800c504:	4619      	mov	r1, r3
 800c506:	68f8      	ldr	r0, [r7, #12]
 800c508:	f7ff fdee 	bl	800c0e8 <perform_ref_signal_measurement>
 800c50c:	4603      	mov	r3, r0
 800c50e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800c512:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c516:	2b00      	cmp	r3, #0
 800c518:	d13b      	bne.n	800c592 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800c51a:	8a7b      	ldrh	r3, [r7, #18]
 800c51c:	461a      	mov	r2, r3
 800c51e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	2b00      	cmp	r3, #0
 800c524:	bfb8      	it	lt
 800c526:	425b      	neglt	r3, r3
 800c528:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800c52a:	8a7b      	ldrh	r3, [r7, #18]
 800c52c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c52e:	429a      	cmp	r2, r3
 800c530:	d21c      	bcs.n	800c56c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800c532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c536:	429a      	cmp	r2, r3
 800c538:	d914      	bls.n	800c564 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 800c53a:	f107 031c 	add.w	r3, r7, #28
 800c53e:	4619      	mov	r1, r3
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f7ff fd2f 	bl	800bfa4 <set_ref_spad_map>
 800c546:	4603      	mov	r3, r0
 800c548:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 800c552:	f107 011c 	add.w	r1, r7, #28
 800c556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c558:	4618      	mov	r0, r3
 800c55a:	f002 fcdd 	bl	800ef18 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800c55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c560:	3b01      	subs	r3, #1
 800c562:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800c564:	2301      	movs	r3, #1
 800c566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56a:	e00a      	b.n	800c582 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800c56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 800c576:	f107 031c 	add.w	r3, r7, #28
 800c57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c57c:	4618      	mov	r0, r3
 800c57e:	f002 fccb 	bl	800ef18 <memcpy>
		while (!complete) {
 800c582:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c586:	2b00      	cmp	r3, #0
 800c588:	f43f af74 	beq.w	800c474 <VL53L0X_perform_ref_spad_management+0x2b8>
 800c58c:	e002      	b.n	800c594 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c58e:	bf00      	nop
 800c590:	e000      	b.n	800c594 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c592:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c594:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d115      	bne.n	800c5c8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5a0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800c5a8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	781a      	ldrb	r2, [r3, #0]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800c5c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	375c      	adds	r7, #92	; 0x5c
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd90      	pop	{r4, r7, pc}

0800c5d4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800c5d4:	b590      	push	{r4, r7, lr}
 800c5d6:	b093      	sub	sp, #76	; 0x4c
 800c5d8:	af06      	add	r7, sp, #24
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	4613      	mov	r3, r2
 800c5e0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800c5ec:	23b4      	movs	r3, #180	; 0xb4
 800c5ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800c5f2:	2306      	movs	r3, #6
 800c5f4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800c5f6:	232c      	movs	r3, #44	; 0x2c
 800c5f8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	21ff      	movs	r1, #255	; 0xff
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f002 fb06 	bl	800ec10 <VL53L0X_WrByte>
 800c604:	4603      	mov	r3, r0
 800c606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c60a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d107      	bne.n	800c622 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800c612:	2200      	movs	r2, #0
 800c614:	214f      	movs	r1, #79	; 0x4f
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f002 fafa 	bl	800ec10 <VL53L0X_WrByte>
 800c61c:	4603      	mov	r3, r0
 800c61e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c622:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c626:	2b00      	cmp	r3, #0
 800c628:	d107      	bne.n	800c63a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800c62a:	222c      	movs	r2, #44	; 0x2c
 800c62c:	214e      	movs	r1, #78	; 0x4e
 800c62e:	68f8      	ldr	r0, [r7, #12]
 800c630:	f002 faee 	bl	800ec10 <VL53L0X_WrByte>
 800c634:	4603      	mov	r3, r0
 800c636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c63a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d107      	bne.n	800c652 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c642:	2200      	movs	r2, #0
 800c644:	21ff      	movs	r1, #255	; 0xff
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f002 fae2 	bl	800ec10 <VL53L0X_WrByte>
 800c64c:	4603      	mov	r3, r0
 800c64e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c652:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c656:	2b00      	cmp	r3, #0
 800c658:	d109      	bne.n	800c66e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800c65a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c65e:	461a      	mov	r2, r3
 800c660:	21b6      	movs	r1, #182	; 0xb6
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f002 fad4 	bl	800ec10 <VL53L0X_WrByte>
 800c668:	4603      	mov	r3, r0
 800c66a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800c66e:	2300      	movs	r3, #0
 800c670:	627b      	str	r3, [r7, #36]	; 0x24
 800c672:	e009      	b.n	800c688 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c678:	4413      	add	r3, r2
 800c67a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c67e:	2200      	movs	r2, #0
 800c680:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c684:	3301      	adds	r3, #1
 800c686:	627b      	str	r3, [r7, #36]	; 0x24
 800c688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d3f1      	bcc.n	800c674 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800c690:	79fb      	ldrb	r3, [r7, #7]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d011      	beq.n	800c6ba <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c696:	e002      	b.n	800c69e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800c698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69a:	3301      	adds	r3, #1
 800c69c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c69e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800c6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a4:	4413      	add	r3, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7ff fc2a 	bl	800bf00 <is_aperture>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d103      	bne.n	800c6ba <VL53L0X_set_reference_spads+0xe6>
 800c6b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d3ee      	bcc.n	800c698 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 800c6c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c6ca:	79f9      	ldrb	r1, [r7, #7]
 800c6cc:	f107 0214 	add.w	r2, r7, #20
 800c6d0:	9204      	str	r2, [sp, #16]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	9203      	str	r2, [sp, #12]
 800c6d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6d8:	9202      	str	r2, [sp, #8]
 800c6da:	9301      	str	r3, [sp, #4]
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	4623      	mov	r3, r4
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f7ff fc83 	bl	800bff0 <enable_ref_spads>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800c6f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10c      	bne.n	800c712 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	b2da      	uxtb	r2, r3
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	79fa      	ldrb	r2, [r7, #7]
 800c70e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800c712:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c716:	4618      	mov	r0, r3
 800c718:	3734      	adds	r7, #52	; 0x34
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd90      	pop	{r4, r7, pc}

0800c71e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b084      	sub	sp, #16
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
 800c726:	460b      	mov	r3, r1
 800c728:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c72a:	2300      	movs	r3, #0
 800c72c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10a      	bne.n	800c74c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c736:	78fb      	ldrb	r3, [r7, #3]
 800c738:	f043 0301 	orr.w	r3, r3, #1
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	461a      	mov	r2, r3
 800c740:	2100      	movs	r1, #0
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f002 fa64 	bl	800ec10 <VL53L0X_WrByte>
 800c748:	4603      	mov	r3, r0
 800c74a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800c74c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d104      	bne.n	800c75e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f9bf 	bl	800cad8 <VL53L0X_measurement_poll_for_completion>
 800c75a:	4603      	mov	r3, r0
 800c75c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d105      	bne.n	800c772 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c766:	2100      	movs	r1, #0
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f7ff fab5 	bl	800bcd8 <VL53L0X_ClearInterruptMask>
 800c76e:	4603      	mov	r3, r0
 800c770:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d106      	bne.n	800c788 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800c77a:	2200      	movs	r2, #0
 800c77c:	2100      	movs	r1, #0
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f002 fa46 	bl	800ec10 <VL53L0X_WrByte>
 800c784:	4603      	mov	r3, r0
 800c786:	73fb      	strb	r3, [r7, #15]

	return Status;
 800c788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	4608      	mov	r0, r1
 800c79e:	4611      	mov	r1, r2
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	70fb      	strb	r3, [r7, #3]
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	70bb      	strb	r3, [r7, #2]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	21ff      	movs	r1, #255	; 0xff
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f002 fa28 	bl	800ec10 <VL53L0X_WrByte>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	7bfb      	ldrb	r3, [r7, #15]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f002 fa1e 	bl	800ec10 <VL53L0X_WrByte>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	7bfb      	ldrb	r3, [r7, #15]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c7de:	2200      	movs	r2, #0
 800c7e0:	21ff      	movs	r1, #255	; 0xff
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f002 fa14 	bl	800ec10 <VL53L0X_WrByte>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800c7f2:	78fb      	ldrb	r3, [r7, #3]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d01e      	beq.n	800c836 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800c7f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d009      	beq.n	800c814 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800c800:	69ba      	ldr	r2, [r7, #24]
 800c802:	21cb      	movs	r1, #203	; 0xcb
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f002 fa85 	bl	800ed14 <VL53L0X_RdByte>
 800c80a:	4603      	mov	r3, r0
 800c80c:	461a      	mov	r2, r3
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
 800c810:	4313      	orrs	r3, r2
 800c812:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c814:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d02a      	beq.n	800c872 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800c81c:	f107 030e 	add.w	r3, r7, #14
 800c820:	461a      	mov	r2, r3
 800c822:	21ee      	movs	r1, #238	; 0xee
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f002 fa75 	bl	800ed14 <VL53L0X_RdByte>
 800c82a:	4603      	mov	r3, r0
 800c82c:	461a      	mov	r2, r3
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
 800c830:	4313      	orrs	r3, r2
 800c832:	73fb      	strb	r3, [r7, #15]
 800c834:	e01d      	b.n	800c872 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800c836:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00a      	beq.n	800c854 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800c83e:	78bb      	ldrb	r3, [r7, #2]
 800c840:	461a      	mov	r2, r3
 800c842:	21cb      	movs	r1, #203	; 0xcb
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f002 f9e3 	bl	800ec10 <VL53L0X_WrByte>
 800c84a:	4603      	mov	r3, r0
 800c84c:	461a      	mov	r2, r3
 800c84e:	7bfb      	ldrb	r3, [r7, #15]
 800c850:	4313      	orrs	r3, r2
 800c852:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c854:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00a      	beq.n	800c872 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800c85c:	787b      	ldrb	r3, [r7, #1]
 800c85e:	2280      	movs	r2, #128	; 0x80
 800c860:	21ee      	movs	r1, #238	; 0xee
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f002 fa22 	bl	800ecac <VL53L0X_UpdateByte>
 800c868:	4603      	mov	r3, r0
 800c86a:	461a      	mov	r2, r3
 800c86c:	7bfb      	ldrb	r3, [r7, #15]
 800c86e:	4313      	orrs	r3, r2
 800c870:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c872:	2201      	movs	r2, #1
 800c874:	21ff      	movs	r1, #255	; 0xff
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f002 f9ca 	bl	800ec10 <VL53L0X_WrByte>
 800c87c:	4603      	mov	r3, r0
 800c87e:	461a      	mov	r2, r3
 800c880:	7bfb      	ldrb	r3, [r7, #15]
 800c882:	4313      	orrs	r3, r2
 800c884:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c886:	2201      	movs	r2, #1
 800c888:	2100      	movs	r1, #0
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f002 f9c0 	bl	800ec10 <VL53L0X_WrByte>
 800c890:	4603      	mov	r3, r0
 800c892:	461a      	mov	r2, r3
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	4313      	orrs	r3, r2
 800c898:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c89a:	2200      	movs	r2, #0
 800c89c:	21ff      	movs	r1, #255	; 0xff
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f002 f9b6 	bl	800ec10 <VL53L0X_WrByte>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	7bfb      	ldrb	r3, [r7, #15]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800c8ae:	7bbb      	ldrb	r3, [r7, #14]
 800c8b0:	f023 0310 	bic.w	r3, r3, #16
 800c8b4:	b2da      	uxtb	r2, r3
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	701a      	strb	r2, [r3, #0]

	return Status;
 800c8ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b08a      	sub	sp, #40	; 0x28
 800c8ca:	af04      	add	r7, sp, #16
 800c8cc:	60f8      	str	r0, [r7, #12]
 800c8ce:	60b9      	str	r1, [r7, #8]
 800c8d0:	4611      	mov	r1, r2
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	71fb      	strb	r3, [r7, #7]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c8f0:	79bb      	ldrb	r3, [r7, #6]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d003      	beq.n	800c8fe <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800c8fc:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800c8fe:	2201      	movs	r2, #1
 800c900:	2101      	movs	r1, #1
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f002 f984 	bl	800ec10 <VL53L0X_WrByte>
 800c908:	4603      	mov	r3, r0
 800c90a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c90c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d105      	bne.n	800c920 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800c914:	2140      	movs	r1, #64	; 0x40
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f7ff ff01 	bl	800c71e <VL53L0X_perform_single_ref_calibration>
 800c91c:	4603      	mov	r3, r0
 800c91e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c920:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d115      	bne.n	800c954 <VL53L0X_perform_vhv_calibration+0x8e>
 800c928:	79fb      	ldrb	r3, [r7, #7]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d112      	bne.n	800c954 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c92e:	7d39      	ldrb	r1, [r7, #20]
 800c930:	7d7a      	ldrb	r2, [r7, #21]
 800c932:	2300      	movs	r3, #0
 800c934:	9303      	str	r3, [sp, #12]
 800c936:	2301      	movs	r3, #1
 800c938:	9302      	str	r3, [sp, #8]
 800c93a:	f107 0313 	add.w	r3, r7, #19
 800c93e:	9301      	str	r3, [sp, #4]
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	460b      	mov	r3, r1
 800c946:	2101      	movs	r1, #1
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f7ff ff23 	bl	800c794 <VL53L0X_ref_calibration_io>
 800c94e:	4603      	mov	r3, r0
 800c950:	75fb      	strb	r3, [r7, #23]
 800c952:	e002      	b.n	800c95a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	2200      	movs	r2, #0
 800c958:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c95a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d112      	bne.n	800c988 <VL53L0X_perform_vhv_calibration+0xc2>
 800c962:	79bb      	ldrb	r3, [r7, #6]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d00f      	beq.n	800c988 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c968:	7dbb      	ldrb	r3, [r7, #22]
 800c96a:	461a      	mov	r2, r3
 800c96c:	2101      	movs	r1, #1
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f002 f94e 	bl	800ec10 <VL53L0X_WrByte>
 800c974:	4603      	mov	r3, r0
 800c976:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d103      	bne.n	800c988 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	7dba      	ldrb	r2, [r7, #22]
 800c984:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800c988:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3718      	adds	r7, #24
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b08a      	sub	sp, #40	; 0x28
 800c998:	af04      	add	r7, sp, #16
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	4611      	mov	r1, r2
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	71fb      	strb	r3, [r7, #7]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c9ba:	79bb      	ldrb	r3, [r7, #6]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d003      	beq.n	800c9c8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800c9c6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800c9c8:	2202      	movs	r2, #2
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f002 f91f 	bl	800ec10 <VL53L0X_WrByte>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c9d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d105      	bne.n	800c9ea <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800c9de:	2100      	movs	r1, #0
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f7ff fe9c 	bl	800c71e <VL53L0X_perform_single_ref_calibration>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c9ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d115      	bne.n	800ca1e <VL53L0X_perform_phase_calibration+0x8a>
 800c9f2:	79fb      	ldrb	r3, [r7, #7]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d112      	bne.n	800ca1e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c9f8:	7d39      	ldrb	r1, [r7, #20]
 800c9fa:	7d7a      	ldrb	r2, [r7, #21]
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	9303      	str	r3, [sp, #12]
 800ca00:	2300      	movs	r3, #0
 800ca02:	9302      	str	r3, [sp, #8]
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	9301      	str	r3, [sp, #4]
 800ca08:	f107 0313 	add.w	r3, r7, #19
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	460b      	mov	r3, r1
 800ca10:	2101      	movs	r1, #1
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f7ff febe 	bl	800c794 <VL53L0X_ref_calibration_io>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	75fb      	strb	r3, [r7, #23]
 800ca1c:	e002      	b.n	800ca24 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	2200      	movs	r2, #0
 800ca22:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800ca24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d112      	bne.n	800ca52 <VL53L0X_perform_phase_calibration+0xbe>
 800ca2c:	79bb      	ldrb	r3, [r7, #6]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00f      	beq.n	800ca52 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ca32:	7dbb      	ldrb	r3, [r7, #22]
 800ca34:	461a      	mov	r2, r3
 800ca36:	2101      	movs	r1, #1
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f002 f8e9 	bl	800ec10 <VL53L0X_WrByte>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800ca42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d103      	bne.n	800ca52 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	7dba      	ldrb	r2, [r7, #22]
 800ca4e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800ca52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b086      	sub	sp, #24
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	60b9      	str	r1, [r7, #8]
 800ca68:	607a      	str	r2, [r7, #4]
 800ca6a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800ca70:	2300      	movs	r3, #0
 800ca72:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ca7a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 800ca7c:	78fa      	ldrb	r2, [r7, #3]
 800ca7e:	2300      	movs	r3, #0
 800ca80:	68b9      	ldr	r1, [r7, #8]
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	f7ff ff1f 	bl	800c8c6 <VL53L0X_perform_vhv_calibration>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800ca8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d107      	bne.n	800caa4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800ca94:	78fa      	ldrb	r2, [r7, #3]
 800ca96:	2300      	movs	r3, #0
 800ca98:	6879      	ldr	r1, [r7, #4]
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f7ff ff7a 	bl	800c994 <VL53L0X_perform_phase_calibration>
 800caa0:	4603      	mov	r3, r0
 800caa2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800caa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10f      	bne.n	800cacc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800caac:	7dbb      	ldrb	r3, [r7, #22]
 800caae:	461a      	mov	r2, r3
 800cab0:	2101      	movs	r1, #1
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f002 f8ac 	bl	800ec10 <VL53L0X_WrByte>
 800cab8:	4603      	mov	r3, r0
 800caba:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800cabc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d103      	bne.n	800cacc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	7dba      	ldrb	r2, [r7, #22]
 800cac8:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800cacc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3718      	adds	r7, #24
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b086      	sub	sp, #24
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cae0:	2300      	movs	r3, #0
 800cae2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800cae4:	2300      	movs	r3, #0
 800cae6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800cae8:	2300      	movs	r3, #0
 800caea:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800caec:	f107 030f 	add.w	r3, r7, #15
 800caf0:	4619      	mov	r1, r3
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f7fe fe02 	bl	800b6fc <VL53L0X_GetMeasurementDataReady>
 800caf8:	4603      	mov	r3, r0
 800cafa:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800cafc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d110      	bne.n	800cb26 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800cb04:	7bfb      	ldrb	r3, [r7, #15]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d00f      	beq.n	800cb2a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800cb16:	d302      	bcc.n	800cb1e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800cb18:	23f9      	movs	r3, #249	; 0xf9
 800cb1a:	75fb      	strb	r3, [r7, #23]
			break;
 800cb1c:	e006      	b.n	800cb2c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f002 f996 	bl	800ee50 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800cb24:	e7e2      	b.n	800caec <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800cb26:	bf00      	nop
 800cb28:	e000      	b.n	800cb2c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800cb2a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800cb2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	4603      	mov	r3, r0
 800cb40:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800cb46:	79fb      	ldrb	r3, [r7, #7]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3714      	adds	r7, #20
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr

0800cb5e <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b085      	sub	sp, #20
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800cb6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb6e:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800cb70:	e002      	b.n	800cb78 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	089b      	lsrs	r3, r3, #2
 800cb76:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d8f8      	bhi.n	800cb72 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800cb80:	e017      	b.n	800cbb2 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	4413      	add	r3, r2
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d30b      	bcc.n	800cba6 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800cb8e:	68fa      	ldr	r2, [r7, #12]
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	4413      	add	r3, r2
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	1ad3      	subs	r3, r2, r3
 800cb98:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	085b      	lsrs	r3, r3, #1
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	4413      	add	r3, r2
 800cba2:	60fb      	str	r3, [r7, #12]
 800cba4:	e002      	b.n	800cbac <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	085b      	lsrs	r3, r3, #1
 800cbaa:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	089b      	lsrs	r3, r3, #2
 800cbb0:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d1e4      	bne.n	800cb82 <VL53L0X_isqrt+0x24>
	}

	return res;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3714      	adds	r7, #20
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr

0800cbc6 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b086      	sub	sp, #24
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	2183      	movs	r1, #131	; 0x83
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f002 f81a 	bl	800ec10 <VL53L0X_WrByte>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	461a      	mov	r2, r3
 800cbe0:	7dfb      	ldrb	r3, [r7, #23]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 800cbe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d11e      	bne.n	800cc2c <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800cbf2:	f107 030f 	add.w	r3, r7, #15
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	2183      	movs	r1, #131	; 0x83
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f002 f88a 	bl	800ed14 <VL53L0X_RdByte>
 800cc00:	4603      	mov	r3, r0
 800cc02:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d10a      	bne.n	800cc20 <VL53L0X_device_read_strobe+0x5a>
 800cc0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d106      	bne.n	800cc20 <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	3301      	adds	r3, #1
 800cc16:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800cc1e:	d3e8      	bcc.n	800cbf2 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800cc26:	d301      	bcc.n	800cc2c <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800cc28:	23f9      	movs	r3, #249	; 0xf9
 800cc2a:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	2183      	movs	r1, #131	; 0x83
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f001 ffed 	bl	800ec10 <VL53L0X_WrByte>
 800cc36:	4603      	mov	r3, r0
 800cc38:	461a      	mov	r2, r3
 800cc3a:	7dfb      	ldrb	r3, [r7, #23]
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800cc40:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3718      	adds	r7, #24
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b098      	sub	sp, #96	; 0x60
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	460b      	mov	r3, r1
 800cc56:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800cc64:	2300      	movs	r3, #0
 800cc66:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800cc7c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800cc80:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800cc94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 800cc98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc9c:	2b07      	cmp	r3, #7
 800cc9e:	f000 8408 	beq.w	800d4b2 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800cca2:	2201      	movs	r2, #1
 800cca4:	2180      	movs	r1, #128	; 0x80
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f001 ffb2 	bl	800ec10 <VL53L0X_WrByte>
 800ccac:	4603      	mov	r3, r0
 800ccae:	461a      	mov	r2, r3
 800ccb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ccba:	2201      	movs	r2, #1
 800ccbc:	21ff      	movs	r1, #255	; 0xff
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f001 ffa6 	bl	800ec10 <VL53L0X_WrByte>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cccc:	4313      	orrs	r3, r2
 800ccce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f001 ff9a 	bl	800ec10 <VL53L0X_WrByte>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	461a      	mov	r2, r3
 800cce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cce4:	4313      	orrs	r3, r2
 800cce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800ccea:	2206      	movs	r2, #6
 800ccec:	21ff      	movs	r1, #255	; 0xff
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f001 ff8e 	bl	800ec10 <VL53L0X_WrByte>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800cd02:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800cd06:	461a      	mov	r2, r3
 800cd08:	2183      	movs	r1, #131	; 0x83
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f002 f802 	bl	800ed14 <VL53L0X_RdByte>
 800cd10:	4603      	mov	r3, r0
 800cd12:	461a      	mov	r2, r3
 800cd14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800cd1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cd22:	f043 0304 	orr.w	r3, r3, #4
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	461a      	mov	r2, r3
 800cd2a:	2183      	movs	r1, #131	; 0x83
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f001 ff6f 	bl	800ec10 <VL53L0X_WrByte>
 800cd32:	4603      	mov	r3, r0
 800cd34:	461a      	mov	r2, r3
 800cd36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800cd40:	2207      	movs	r2, #7
 800cd42:	21ff      	movs	r1, #255	; 0xff
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f001 ff63 	bl	800ec10 <VL53L0X_WrByte>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd52:	4313      	orrs	r3, r2
 800cd54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800cd58:	2201      	movs	r2, #1
 800cd5a:	2181      	movs	r1, #129	; 0x81
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f001 ff57 	bl	800ec10 <VL53L0X_WrByte>
 800cd62:	4603      	mov	r3, r0
 800cd64:	461a      	mov	r2, r3
 800cd66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f002 f86d 	bl	800ee50 <VL53L0X_PollingDelay>
 800cd76:	4603      	mov	r3, r0
 800cd78:	461a      	mov	r2, r3
 800cd7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800cd84:	2201      	movs	r2, #1
 800cd86:	2180      	movs	r1, #128	; 0x80
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f001 ff41 	bl	800ec10 <VL53L0X_WrByte>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	461a      	mov	r2, r3
 800cd92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd96:	4313      	orrs	r3, r2
 800cd98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800cd9c:	78fb      	ldrb	r3, [r7, #3]
 800cd9e:	f003 0301 	and.w	r3, r3, #1
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f000 8098 	beq.w	800ced8 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800cda8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdac:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f040 8091 	bne.w	800ced8 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800cdb6:	226b      	movs	r2, #107	; 0x6b
 800cdb8:	2194      	movs	r1, #148	; 0x94
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f001 ff28 	bl	800ec10 <VL53L0X_WrByte>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7ff fef9 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cddc:	4313      	orrs	r3, r2
 800cdde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cde2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cde6:	461a      	mov	r2, r3
 800cde8:	2190      	movs	r1, #144	; 0x90
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f001 fff4 	bl	800edd8 <VL53L0X_RdDWord>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	0a1b      	lsrs	r3, r3, #8
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce08:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0e:	0bdb      	lsrs	r3, r3, #15
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	f003 0301 	and.w	r3, r3, #1
 800ce16:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800ce1a:	2224      	movs	r2, #36	; 0x24
 800ce1c:	2194      	movs	r1, #148	; 0x94
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f001 fef6 	bl	800ec10 <VL53L0X_WrByte>
 800ce24:	4603      	mov	r3, r0
 800ce26:	461a      	mov	r2, r3
 800ce28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7ff fec7 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce40:	4313      	orrs	r3, r2
 800ce42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ce46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	2190      	movs	r1, #144	; 0x90
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f001 ffc2 	bl	800edd8 <VL53L0X_RdDWord>
 800ce54:	4603      	mov	r3, r0
 800ce56:	461a      	mov	r2, r3
 800ce58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800ce62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce64:	0e1b      	lsrs	r3, r3, #24
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6c:	0c1b      	lsrs	r3, r3, #16
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800ce72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce74:	0a1b      	lsrs	r3, r3, #8
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800ce7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800ce80:	2225      	movs	r2, #37	; 0x25
 800ce82:	2194      	movs	r1, #148	; 0x94
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f001 fec3 	bl	800ec10 <VL53L0X_WrByte>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce92:	4313      	orrs	r3, r2
 800ce94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7ff fe94 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	461a      	mov	r2, r3
 800cea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cea6:	4313      	orrs	r3, r2
 800cea8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ceac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	2190      	movs	r1, #144	; 0x90
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f001 ff8f 	bl	800edd8 <VL53L0X_RdDWord>
 800ceba:	4603      	mov	r3, r0
 800cebc:	461a      	mov	r2, r3
 800cebe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cec2:	4313      	orrs	r3, r2
 800cec4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800cec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceca:	0e1b      	lsrs	r3, r3, #24
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced2:	0c1b      	lsrs	r3, r3, #16
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800ced8:	78fb      	ldrb	r3, [r7, #3]
 800ceda:	f003 0302 	and.w	r3, r3, #2
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f000 8189 	beq.w	800d1f6 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800cee4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cee8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f040 8182 	bne.w	800d1f6 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800cef2:	2202      	movs	r2, #2
 800cef4:	2194      	movs	r1, #148	; 0x94
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f001 fe8a 	bl	800ec10 <VL53L0X_WrByte>
 800cefc:	4603      	mov	r3, r0
 800cefe:	461a      	mov	r2, r3
 800cf00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf04:	4313      	orrs	r3, r2
 800cf06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7ff fe5b 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800cf10:	4603      	mov	r3, r0
 800cf12:	461a      	mov	r2, r3
 800cf14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800cf1e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800cf22:	461a      	mov	r2, r3
 800cf24:	2190      	movs	r1, #144	; 0x90
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f001 fef4 	bl	800ed14 <VL53L0X_RdByte>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	461a      	mov	r2, r3
 800cf30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf34:	4313      	orrs	r3, r2
 800cf36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800cf3a:	227b      	movs	r2, #123	; 0x7b
 800cf3c:	2194      	movs	r1, #148	; 0x94
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f001 fe66 	bl	800ec10 <VL53L0X_WrByte>
 800cf44:	4603      	mov	r3, r0
 800cf46:	461a      	mov	r2, r3
 800cf48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f7ff fe37 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf60:	4313      	orrs	r3, r2
 800cf62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800cf66:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	2190      	movs	r1, #144	; 0x90
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f001 fed0 	bl	800ed14 <VL53L0X_RdByte>
 800cf74:	4603      	mov	r3, r0
 800cf76:	461a      	mov	r2, r3
 800cf78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800cf82:	2277      	movs	r2, #119	; 0x77
 800cf84:	2194      	movs	r1, #148	; 0x94
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f001 fe42 	bl	800ec10 <VL53L0X_WrByte>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	461a      	mov	r2, r3
 800cf90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf94:	4313      	orrs	r3, r2
 800cf96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7ff fe13 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cfae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	2190      	movs	r1, #144	; 0x90
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f001 ff0e 	bl	800edd8 <VL53L0X_RdDWord>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800cfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfcc:	0e5b      	lsrs	r3, r3, #25
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800cfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfda:	0c9b      	lsrs	r3, r3, #18
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800cfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe8:	0adb      	lsrs	r3, r3, #11
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800cff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff6:	091b      	lsrs	r3, r3, #4
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	b2db      	uxtb	r3, r3
 800d006:	00db      	lsls	r3, r3, #3
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800d014:	2278      	movs	r2, #120	; 0x78
 800d016:	2194      	movs	r1, #148	; 0x94
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f001 fdf9 	bl	800ec10 <VL53L0X_WrByte>
 800d01e:	4603      	mov	r3, r0
 800d020:	461a      	mov	r2, r3
 800d022:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d026:	4313      	orrs	r3, r2
 800d028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff fdca 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800d032:	4603      	mov	r3, r0
 800d034:	461a      	mov	r2, r3
 800d036:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d03a:	4313      	orrs	r3, r2
 800d03c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d040:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d044:	461a      	mov	r2, r3
 800d046:	2190      	movs	r1, #144	; 0x90
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f001 fec5 	bl	800edd8 <VL53L0X_RdDWord>
 800d04e:	4603      	mov	r3, r0
 800d050:	461a      	mov	r2, r3
 800d052:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d056:	4313      	orrs	r3, r2
 800d058:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800d05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05e:	0f5b      	lsrs	r3, r3, #29
 800d060:	b2db      	uxtb	r3, r3
 800d062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d066:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800d068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d06c:	4413      	add	r3, r2
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800d072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d074:	0d9b      	lsrs	r3, r3, #22
 800d076:	b2db      	uxtb	r3, r3
 800d078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800d080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d082:	0bdb      	lsrs	r3, r3, #15
 800d084:	b2db      	uxtb	r3, r3
 800d086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	0a1b      	lsrs	r3, r3, #8
 800d092:	b2db      	uxtb	r3, r3
 800d094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	085b      	lsrs	r3, r3, #1
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	019b      	lsls	r3, r3, #6
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800d0bc:	2279      	movs	r2, #121	; 0x79
 800d0be:	2194      	movs	r1, #148	; 0x94
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f001 fda5 	bl	800ec10 <VL53L0X_WrByte>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f7ff fd76 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	461a      	mov	r2, r3
 800d0de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d0e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	2190      	movs	r1, #144	; 0x90
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f001 fe71 	bl	800edd8 <VL53L0X_RdDWord>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0fe:	4313      	orrs	r3, r2
 800d100:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800d104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d106:	0e9b      	lsrs	r3, r3, #26
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d10e:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800d110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d114:	4413      	add	r3, r2
 800d116:	b2db      	uxtb	r3, r3
 800d118:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800d11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11c:	0cdb      	lsrs	r3, r3, #19
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d124:	b2db      	uxtb	r3, r3
 800d126:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800d128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12a:	0b1b      	lsrs	r3, r3, #12
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d132:	b2db      	uxtb	r3, r3
 800d134:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800d136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d138:	095b      	lsrs	r3, r3, #5
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d140:	b2db      	uxtb	r3, r3
 800d142:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800d144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d146:	b2db      	uxtb	r3, r3
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800d150:	b2db      	uxtb	r3, r3
 800d152:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800d156:	227a      	movs	r2, #122	; 0x7a
 800d158:	2194      	movs	r1, #148	; 0x94
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f001 fd58 	bl	800ec10 <VL53L0X_WrByte>
 800d160:	4603      	mov	r3, r0
 800d162:	461a      	mov	r2, r3
 800d164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d168:	4313      	orrs	r3, r2
 800d16a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7ff fd29 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800d174:	4603      	mov	r3, r0
 800d176:	461a      	mov	r2, r3
 800d178:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d17c:	4313      	orrs	r3, r2
 800d17e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d186:	461a      	mov	r2, r3
 800d188:	2190      	movs	r1, #144	; 0x90
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f001 fe24 	bl	800edd8 <VL53L0X_RdDWord>
 800d190:	4603      	mov	r3, r0
 800d192:	461a      	mov	r2, r3
 800d194:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d198:	4313      	orrs	r3, r2
 800d19a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800d19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a0:	0f9b      	lsrs	r3, r3, #30
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1a8:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800d1aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1ae:	4413      	add	r3, r2
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800d1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b6:	0ddb      	lsrs	r3, r3, #23
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800d1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c4:	0c1b      	lsrs	r3, r3, #16
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d2:	0a5b      	lsrs	r3, r3, #9
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800d1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e2:	089b      	lsrs	r3, r3, #2
 800d1e4:	b2db      	uxtb	r3, r3
 800d1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800d1f6:	78fb      	ldrb	r3, [r7, #3]
 800d1f8:	f003 0304 	and.w	r3, r3, #4
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f000 80f1 	beq.w	800d3e4 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d202:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d206:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f040 80ea 	bne.w	800d3e4 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d210:	227b      	movs	r2, #123	; 0x7b
 800d212:	2194      	movs	r1, #148	; 0x94
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f001 fcfb 	bl	800ec10 <VL53L0X_WrByte>
 800d21a:	4603      	mov	r3, r0
 800d21c:	461a      	mov	r2, r3
 800d21e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d222:	4313      	orrs	r3, r2
 800d224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f7ff fccc 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800d22e:	4603      	mov	r3, r0
 800d230:	461a      	mov	r2, r3
 800d232:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d236:	4313      	orrs	r3, r2
 800d238:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800d23c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d240:	461a      	mov	r2, r3
 800d242:	2190      	movs	r1, #144	; 0x90
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f001 fdc7 	bl	800edd8 <VL53L0X_RdDWord>
 800d24a:	4603      	mov	r3, r0
 800d24c:	461a      	mov	r2, r3
 800d24e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d252:	4313      	orrs	r3, r2
 800d254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800d258:	227c      	movs	r2, #124	; 0x7c
 800d25a:	2194      	movs	r1, #148	; 0x94
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f001 fcd7 	bl	800ec10 <VL53L0X_WrByte>
 800d262:	4603      	mov	r3, r0
 800d264:	461a      	mov	r2, r3
 800d266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d26a:	4313      	orrs	r3, r2
 800d26c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f7ff fca8 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800d276:	4603      	mov	r3, r0
 800d278:	461a      	mov	r2, r3
 800d27a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d27e:	4313      	orrs	r3, r2
 800d280:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800d284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d288:	461a      	mov	r2, r3
 800d28a:	2190      	movs	r1, #144	; 0x90
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f001 fda3 	bl	800edd8 <VL53L0X_RdDWord>
 800d292:	4603      	mov	r3, r0
 800d294:	461a      	mov	r2, r3
 800d296:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d29a:	4313      	orrs	r3, r2
 800d29c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800d2a0:	2273      	movs	r2, #115	; 0x73
 800d2a2:	2194      	movs	r1, #148	; 0x94
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f001 fcb3 	bl	800ec10 <VL53L0X_WrByte>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f7ff fc84 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d2cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	2190      	movs	r1, #144	; 0x90
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f001 fd7f 	bl	800edd8 <VL53L0X_RdDWord>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	461a      	mov	r2, r3
 800d2de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800d2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ea:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800d2f0:	2274      	movs	r2, #116	; 0x74
 800d2f2:	2194      	movs	r1, #148	; 0x94
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f001 fc8b 	bl	800ec10 <VL53L0X_WrByte>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d302:	4313      	orrs	r3, r2
 800d304:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7ff fc5c 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800d30e:	4603      	mov	r3, r0
 800d310:	461a      	mov	r2, r3
 800d312:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d316:	4313      	orrs	r3, r2
 800d318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d31c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d320:	461a      	mov	r2, r3
 800d322:	2190      	movs	r1, #144	; 0x90
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f001 fd57 	bl	800edd8 <VL53L0X_RdDWord>
 800d32a:	4603      	mov	r3, r0
 800d32c:	461a      	mov	r2, r3
 800d32e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d332:	4313      	orrs	r3, r2
 800d334:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800d338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800d33c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d33e:	4313      	orrs	r3, r2
 800d340:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800d342:	2275      	movs	r2, #117	; 0x75
 800d344:	2194      	movs	r1, #148	; 0x94
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f001 fc62 	bl	800ec10 <VL53L0X_WrByte>
 800d34c:	4603      	mov	r3, r0
 800d34e:	461a      	mov	r2, r3
 800d350:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d354:	4313      	orrs	r3, r2
 800d356:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f7ff fc33 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800d360:	4603      	mov	r3, r0
 800d362:	461a      	mov	r2, r3
 800d364:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d368:	4313      	orrs	r3, r2
 800d36a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d36e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d372:	461a      	mov	r2, r3
 800d374:	2190      	movs	r1, #144	; 0x90
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f001 fd2e 	bl	800edd8 <VL53L0X_RdDWord>
 800d37c:	4603      	mov	r3, r0
 800d37e:	461a      	mov	r2, r3
 800d380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d384:	4313      	orrs	r3, r2
 800d386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800d38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38c:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800d38e:	b29b      	uxth	r3, r3
 800d390:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800d392:	2276      	movs	r2, #118	; 0x76
 800d394:	2194      	movs	r1, #148	; 0x94
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f001 fc3a 	bl	800ec10 <VL53L0X_WrByte>
 800d39c:	4603      	mov	r3, r0
 800d39e:	461a      	mov	r2, r3
 800d3a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7ff fc0b 	bl	800cbc6 <VL53L0X_device_read_strobe>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d3be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	2190      	movs	r1, #144	; 0x90
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f001 fd06 	bl	800edd8 <VL53L0X_RdDWord>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800d3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3dc:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800d3de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	2181      	movs	r1, #129	; 0x81
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f001 fc11 	bl	800ec10 <VL53L0X_WrByte>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800d3fc:	2206      	movs	r2, #6
 800d3fe:	21ff      	movs	r1, #255	; 0xff
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f001 fc05 	bl	800ec10 <VL53L0X_WrByte>
 800d406:	4603      	mov	r3, r0
 800d408:	461a      	mov	r2, r3
 800d40a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d40e:	4313      	orrs	r3, r2
 800d410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800d414:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800d418:	461a      	mov	r2, r3
 800d41a:	2183      	movs	r1, #131	; 0x83
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f001 fc79 	bl	800ed14 <VL53L0X_RdByte>
 800d422:	4603      	mov	r3, r0
 800d424:	461a      	mov	r2, r3
 800d426:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d42a:	4313      	orrs	r3, r2
 800d42c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800d430:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d434:	f023 0304 	bic.w	r3, r3, #4
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	461a      	mov	r2, r3
 800d43c:	2183      	movs	r1, #131	; 0x83
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f001 fbe6 	bl	800ec10 <VL53L0X_WrByte>
 800d444:	4603      	mov	r3, r0
 800d446:	461a      	mov	r2, r3
 800d448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d44c:	4313      	orrs	r3, r2
 800d44e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d452:	2201      	movs	r2, #1
 800d454:	21ff      	movs	r1, #255	; 0xff
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f001 fbda 	bl	800ec10 <VL53L0X_WrByte>
 800d45c:	4603      	mov	r3, r0
 800d45e:	461a      	mov	r2, r3
 800d460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d464:	4313      	orrs	r3, r2
 800d466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d46a:	2201      	movs	r2, #1
 800d46c:	2100      	movs	r1, #0
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f001 fbce 	bl	800ec10 <VL53L0X_WrByte>
 800d474:	4603      	mov	r3, r0
 800d476:	461a      	mov	r2, r3
 800d478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d47c:	4313      	orrs	r3, r2
 800d47e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d482:	2200      	movs	r2, #0
 800d484:	21ff      	movs	r1, #255	; 0xff
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f001 fbc2 	bl	800ec10 <VL53L0X_WrByte>
 800d48c:	4603      	mov	r3, r0
 800d48e:	461a      	mov	r2, r3
 800d490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d494:	4313      	orrs	r3, r2
 800d496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800d49a:	2200      	movs	r2, #0
 800d49c:	2180      	movs	r1, #128	; 0x80
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f001 fbb6 	bl	800ec10 <VL53L0X_WrByte>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d4b2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f040 8090 	bne.w	800d5dc <VL53L0X_get_info_from_device+0x990>
 800d4bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d4c0:	2b07      	cmp	r3, #7
 800d4c2:	f000 808b 	beq.w	800d5dc <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800d4c6:	78fb      	ldrb	r3, [r7, #3]
 800d4c8:	f003 0301 	and.w	r3, r3, #1
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d024      	beq.n	800d51a <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d4d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d4d4:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d11e      	bne.n	800d51a <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800d4e2:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800d4ec:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4f4:	e00e      	b.n	800d514 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800d4f6:	f107 0208 	add.w	r2, r7, #8
 800d4fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4fc:	4413      	add	r3, r2
 800d4fe:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d504:	4413      	add	r3, r2
 800d506:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 800d50a:	460a      	mov	r2, r1
 800d50c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d50e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d510:	3301      	adds	r3, #1
 800d512:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d516:	2b05      	cmp	r3, #5
 800d518:	dded      	ble.n	800d4f6 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800d51a:	78fb      	ldrb	r3, [r7, #3]
 800d51c:	f003 0302 	and.w	r3, r3, #2
 800d520:	2b00      	cmp	r3, #0
 800d522:	d019      	beq.n	800d558 <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d524:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d528:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d113      	bne.n	800d558 <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d530:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d53a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f203 131f 	addw	r3, r3, #287	; 0x11f
 800d54a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800d54c:	f107 0310 	add.w	r3, r7, #16
 800d550:	4619      	mov	r1, r3
 800d552:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d554:	f001 fd2a 	bl	800efac <strcpy>

		}

		if (((option & 4) == 4) &&
 800d558:	78fb      	ldrb	r3, [r7, #3]
 800d55a:	f003 0304 	and.w	r3, r3, #4
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d030      	beq.n	800d5c4 <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d562:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d566:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d12a      	bne.n	800d5c4 <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d56e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800d57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d580:	025b      	lsls	r3, r3, #9
 800d582:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d588:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800d592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d594:	2b00      	cmp	r3, #0
 800d596:	d011      	beq.n	800d5bc <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 800d598:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d59a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d59c:	1ad3      	subs	r3, r2, r3
 800d59e:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800d5a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d5a6:	fb02 f303 	mul.w	r3, r2, r3
 800d5aa:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 800d5ac:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 800d5b0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800d5b4:	425b      	negs	r3, r3
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800d5bc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800d5c4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d5c8:	78fb      	ldrb	r3, [r7, #3]
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800d5d2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d5dc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3760      	adds	r7, #96	; 0x60
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b087      	sub	sp, #28
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 800d5f4:	f240 6277 	movw	r2, #1655	; 0x677
 800d5f8:	f04f 0300 	mov.w	r3, #0
 800d5fc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800d600:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800d604:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800d606:	78fb      	ldrb	r3, [r7, #3]
 800d608:	68fa      	ldr	r2, [r7, #12]
 800d60a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800d60e:	693a      	ldr	r2, [r7, #16]
 800d610:	fb02 f303 	mul.w	r3, r2, r3
 800d614:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800d616:	68bb      	ldr	r3, [r7, #8]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	371c      	adds	r7, #28
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800d624:	b480      	push	{r7}
 800d626:	b087      	sub	sp, #28
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800d630:	2300      	movs	r3, #0
 800d632:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800d634:	2300      	movs	r3, #0
 800d636:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d017      	beq.n	800d66e <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	3b01      	subs	r3, #1
 800d642:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d644:	e005      	b.n	800d652 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	085b      	lsrs	r3, r3, #1
 800d64a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800d64c:	89fb      	ldrh	r3, [r7, #14]
 800d64e:	3301      	adds	r3, #1
 800d650:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d1f4      	bne.n	800d646 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800d65c:	89fb      	ldrh	r3, [r7, #14]
 800d65e:	021b      	lsls	r3, r3, #8
 800d660:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	b29b      	uxth	r3, r3
 800d666:	b2db      	uxtb	r3, r3
 800d668:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800d66a:	4413      	add	r3, r2
 800d66c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800d66e:	8afb      	ldrh	r3, [r7, #22]

}
 800d670:	4618      	mov	r0, r3
 800d672:	371c      	adds	r7, #28
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	4603      	mov	r3, r0
 800d684:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800d686:	2300      	movs	r3, #0
 800d688:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d68a:	88fb      	ldrh	r3, [r7, #6]
 800d68c:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800d68e:	88fa      	ldrh	r2, [r7, #6]
 800d690:	0a12      	lsrs	r2, r2, #8
 800d692:	b292      	uxth	r2, r2
 800d694:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d696:	3301      	adds	r3, #1
 800d698:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800d69a:	68fb      	ldr	r3, [r7, #12]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3714      	adds	r7, #20
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b088      	sub	sp, #32
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d6ba:	79fb      	ldrb	r3, [r7, #7]
 800d6bc:	4619      	mov	r1, r3
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f7ff ff92 	bl	800d5e8 <VL53L0X_calc_macro_period_ps>
 800d6c4:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d6cc:	4a0a      	ldr	r2, [pc, #40]	; (800d6f8 <VL53L0X_calc_timeout_mclks+0x50>)
 800d6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d6d2:	099b      	lsrs	r3, r3, #6
 800d6d4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d6dc:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	085b      	lsrs	r3, r3, #1
 800d6e4:	441a      	add	r2, r3
	timeout_period_mclks =
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ec:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800d6ee:	69fb      	ldr	r3, [r7, #28]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3720      	adds	r7, #32
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	10624dd3 	.word	0x10624dd3

0800d6fc <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b086      	sub	sp, #24
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	460b      	mov	r3, r1
 800d706:	807b      	strh	r3, [r7, #2]
 800d708:	4613      	mov	r3, r2
 800d70a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800d70c:	2300      	movs	r3, #0
 800d70e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d710:	787b      	ldrb	r3, [r7, #1]
 800d712:	4619      	mov	r1, r3
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f7ff ff67 	bl	800d5e8 <VL53L0X_calc_macro_period_ps>
 800d71a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d722:	4a0a      	ldr	r2, [pc, #40]	; (800d74c <VL53L0X_calc_timeout_us+0x50>)
 800d724:	fba2 2303 	umull	r2, r3, r2, r3
 800d728:	099b      	lsrs	r3, r3, #6
 800d72a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800d72c:	887b      	ldrh	r3, [r7, #2]
 800d72e:	68fa      	ldr	r2, [r7, #12]
 800d730:	fb02 f303 	mul.w	r3, r2, r3
 800d734:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800d738:	4a04      	ldr	r2, [pc, #16]	; (800d74c <VL53L0X_calc_timeout_us+0x50>)
 800d73a:	fba2 2303 	umull	r2, r3, r2, r3
 800d73e:	099b      	lsrs	r3, r3, #6
 800d740:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800d742:	697b      	ldr	r3, [r7, #20]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3718      	adds	r7, #24
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	10624dd3 	.word	0x10624dd3

0800d750 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b08c      	sub	sp, #48	; 0x30
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	460b      	mov	r3, r1
 800d75a:	607a      	str	r2, [r7, #4]
 800d75c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d75e:	2300      	movs	r3, #0
 800d760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800d764:	2300      	movs	r3, #0
 800d766:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800d76a:	2300      	movs	r3, #0
 800d76c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800d772:	2300      	movs	r3, #0
 800d774:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d776:	7afb      	ldrb	r3, [r7, #11]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d005      	beq.n	800d788 <get_sequence_step_timeout+0x38>
 800d77c:	7afb      	ldrb	r3, [r7, #11]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d002      	beq.n	800d788 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d782:	7afb      	ldrb	r3, [r7, #11]
 800d784:	2b02      	cmp	r3, #2
 800d786:	d128      	bne.n	800d7da <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d788:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d78c:	461a      	mov	r2, r3
 800d78e:	2100      	movs	r1, #0
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f7fd fa03 	bl	800ab9c <VL53L0X_GetVcselPulsePeriod>
 800d796:	4603      	mov	r3, r0
 800d798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800d79c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d109      	bne.n	800d7b8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800d7a4:	f107 0320 	add.w	r3, r7, #32
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	2146      	movs	r1, #70	; 0x46
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f001 fab1 	bl	800ed14 <VL53L0X_RdByte>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800d7b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7ff ff5c 	bl	800d67c <VL53L0X_decode_timeout>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d7c8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d7cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f7ff ff93 	bl	800d6fc <VL53L0X_calc_timeout_us>
 800d7d6:	62b8      	str	r0, [r7, #40]	; 0x28
 800d7d8:	e092      	b.n	800d900 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d7da:	7afb      	ldrb	r3, [r7, #11]
 800d7dc:	2b03      	cmp	r3, #3
 800d7de:	d135      	bne.n	800d84c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d7e0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	2100      	movs	r1, #0
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f7fd f9d7 	bl	800ab9c <VL53L0X_GetVcselPulsePeriod>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d7f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f040 8081 	bne.w	800d900 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d7fe:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d802:	461a      	mov	r2, r3
 800d804:	2100      	movs	r1, #0
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f7fd f9c8 	bl	800ab9c <VL53L0X_GetVcselPulsePeriod>
 800d80c:	4603      	mov	r3, r0
 800d80e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800d812:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d816:	2b00      	cmp	r3, #0
 800d818:	d109      	bne.n	800d82e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800d81a:	f107 031e 	add.w	r3, r7, #30
 800d81e:	461a      	mov	r2, r3
 800d820:	2151      	movs	r1, #81	; 0x51
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f001 faa0 	bl	800ed68 <VL53L0X_RdWord>
 800d828:	4603      	mov	r3, r0
 800d82a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d82e:	8bfb      	ldrh	r3, [r7, #30]
 800d830:	4618      	mov	r0, r3
 800d832:	f7ff ff23 	bl	800d67c <VL53L0X_decode_timeout>
 800d836:	4603      	mov	r3, r0
 800d838:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d83a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d83e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d840:	4619      	mov	r1, r3
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f7ff ff5a 	bl	800d6fc <VL53L0X_calc_timeout_us>
 800d848:	62b8      	str	r0, [r7, #40]	; 0x28
 800d84a:	e059      	b.n	800d900 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d84c:	7afb      	ldrb	r3, [r7, #11]
 800d84e:	2b04      	cmp	r3, #4
 800d850:	d156      	bne.n	800d900 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d852:	f107 0314 	add.w	r3, r7, #20
 800d856:	4619      	mov	r1, r3
 800d858:	68f8      	ldr	r0, [r7, #12]
 800d85a:	f7fd faab 	bl	800adb4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800d85e:	2300      	movs	r3, #0
 800d860:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800d862:	7dfb      	ldrb	r3, [r7, #23]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d01d      	beq.n	800d8a4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d868:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d86c:	461a      	mov	r2, r3
 800d86e:	2100      	movs	r1, #0
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f7fd f993 	bl	800ab9c <VL53L0X_GetVcselPulsePeriod>
 800d876:	4603      	mov	r3, r0
 800d878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800d87c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d880:	2b00      	cmp	r3, #0
 800d882:	d10f      	bne.n	800d8a4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800d884:	f107 031e 	add.w	r3, r7, #30
 800d888:	461a      	mov	r2, r3
 800d88a:	2151      	movs	r1, #81	; 0x51
 800d88c:	68f8      	ldr	r0, [r7, #12]
 800d88e:	f001 fa6b 	bl	800ed68 <VL53L0X_RdWord>
 800d892:	4603      	mov	r3, r0
 800d894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d898:	8bfb      	ldrh	r3, [r7, #30]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7ff feee 	bl	800d67c <VL53L0X_decode_timeout>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d8a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d109      	bne.n	800d8c0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d8ac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	2101      	movs	r1, #1
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f7fd f971 	bl	800ab9c <VL53L0X_GetVcselPulsePeriod>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d8c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10f      	bne.n	800d8e8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800d8c8:	f107 031c 	add.w	r3, r7, #28
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	2171      	movs	r1, #113	; 0x71
 800d8d0:	68f8      	ldr	r0, [r7, #12]
 800d8d2:	f001 fa49 	bl	800ed68 <VL53L0X_RdWord>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d8dc:	8bbb      	ldrh	r3, [r7, #28]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff fecc 	bl	800d67c <VL53L0X_decode_timeout>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800d8e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d8ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8ec:	1ad3      	subs	r3, r2, r3
 800d8ee:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d8f0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d8f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	f7ff feff 	bl	800d6fc <VL53L0X_calc_timeout_us>
 800d8fe:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d904:	601a      	str	r2, [r3, #0]

	return Status;
 800d906:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3730      	adds	r7, #48	; 0x30
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b08a      	sub	sp, #40	; 0x28
 800d916:	af00      	add	r7, sp, #0
 800d918:	60f8      	str	r0, [r7, #12]
 800d91a:	460b      	mov	r3, r1
 800d91c:	607a      	str	r2, [r7, #4]
 800d91e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d920:	2300      	movs	r3, #0
 800d922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d926:	7afb      	ldrb	r3, [r7, #11]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d005      	beq.n	800d938 <set_sequence_step_timeout+0x26>
 800d92c:	7afb      	ldrb	r3, [r7, #11]
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d002      	beq.n	800d938 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d932:	7afb      	ldrb	r3, [r7, #11]
 800d934:	2b02      	cmp	r3, #2
 800d936:	d138      	bne.n	800d9aa <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d938:	f107 031b 	add.w	r3, r7, #27
 800d93c:	461a      	mov	r2, r3
 800d93e:	2100      	movs	r1, #0
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f7fd f92b 	bl	800ab9c <VL53L0X_GetVcselPulsePeriod>
 800d946:	4603      	mov	r3, r0
 800d948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800d94c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d950:	2b00      	cmp	r3, #0
 800d952:	d11a      	bne.n	800d98a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800d954:	7efb      	ldrb	r3, [r7, #27]
 800d956:	461a      	mov	r2, r3
 800d958:	6879      	ldr	r1, [r7, #4]
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	f7ff fea4 	bl	800d6a8 <VL53L0X_calc_timeout_mclks>
 800d960:	4603      	mov	r3, r0
 800d962:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800d964:	8bbb      	ldrh	r3, [r7, #28]
 800d966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d96a:	d903      	bls.n	800d974 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800d96c:	23ff      	movs	r3, #255	; 0xff
 800d96e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d972:	e004      	b.n	800d97e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800d974:	8bbb      	ldrh	r3, [r7, #28]
 800d976:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800d978:	3b01      	subs	r3, #1
 800d97a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d97e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d982:	b29a      	uxth	r2, r3
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d98a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f040 80ab 	bne.w	800daea <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800d994:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d998:	461a      	mov	r2, r3
 800d99a:	2146      	movs	r1, #70	; 0x46
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f001 f937 	bl	800ec10 <VL53L0X_WrByte>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800d9a8:	e09f      	b.n	800daea <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d9aa:	7afb      	ldrb	r3, [r7, #11]
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	d135      	bne.n	800da1c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800d9b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d11b      	bne.n	800d9f0 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d9b8:	f107 031b 	add.w	r3, r7, #27
 800d9bc:	461a      	mov	r2, r3
 800d9be:	2100      	movs	r1, #0
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f7fd f8eb 	bl	800ab9c <VL53L0X_GetVcselPulsePeriod>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d9cc:	7efb      	ldrb	r3, [r7, #27]
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	6879      	ldr	r1, [r7, #4]
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	f7ff fe68 	bl	800d6a8 <VL53L0X_calc_timeout_mclks>
 800d9d8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800d9da:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800d9dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7ff fe20 	bl	800d624 <VL53L0X_encode_timeout>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d9e8:	8b3a      	ldrh	r2, [r7, #24]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d9f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d108      	bne.n	800da0a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800d9f8:	8b3b      	ldrh	r3, [r7, #24]
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	2151      	movs	r1, #81	; 0x51
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f001 f92a 	bl	800ec58 <VL53L0X_WrWord>
 800da04:	4603      	mov	r3, r0
 800da06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800da0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d16b      	bne.n	800daea <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800da1a:	e066      	b.n	800daea <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800da1c:	7afb      	ldrb	r3, [r7, #11]
 800da1e:	2b04      	cmp	r3, #4
 800da20:	d160      	bne.n	800dae4 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800da22:	f107 0310 	add.w	r3, r7, #16
 800da26:	4619      	mov	r1, r3
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f7fd f9c3 	bl	800adb4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800da32:	7cfb      	ldrb	r3, [r7, #19]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d01d      	beq.n	800da74 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800da38:	f107 031b 	add.w	r3, r7, #27
 800da3c:	461a      	mov	r2, r3
 800da3e:	2100      	movs	r1, #0
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f7fd f8ab 	bl	800ab9c <VL53L0X_GetVcselPulsePeriod>
 800da46:	4603      	mov	r3, r0
 800da48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 800da4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da50:	2b00      	cmp	r3, #0
 800da52:	d10f      	bne.n	800da74 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800da54:	f107 0318 	add.w	r3, r7, #24
 800da58:	461a      	mov	r2, r3
 800da5a:	2151      	movs	r1, #81	; 0x51
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f001 f983 	bl	800ed68 <VL53L0X_RdWord>
 800da62:	4603      	mov	r3, r0
 800da64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800da68:	8b3b      	ldrh	r3, [r7, #24]
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7ff fe06 	bl	800d67c <VL53L0X_decode_timeout>
 800da70:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800da72:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800da74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d109      	bne.n	800da90 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800da7c:	f107 031b 	add.w	r3, r7, #27
 800da80:	461a      	mov	r2, r3
 800da82:	2101      	movs	r1, #1
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f7fd f889 	bl	800ab9c <VL53L0X_GetVcselPulsePeriod>
 800da8a:	4603      	mov	r3, r0
 800da8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800da90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da94:	2b00      	cmp	r3, #0
 800da96:	d128      	bne.n	800daea <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800da98:	7efb      	ldrb	r3, [r7, #27]
 800da9a:	461a      	mov	r2, r3
 800da9c:	6879      	ldr	r1, [r7, #4]
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	f7ff fe02 	bl	800d6a8 <VL53L0X_calc_timeout_mclks>
 800daa4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800daa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daa8:	6a3a      	ldr	r2, [r7, #32]
 800daaa:	4413      	add	r3, r2
 800daac:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800daae:	6a38      	ldr	r0, [r7, #32]
 800dab0:	f7ff fdb8 	bl	800d624 <VL53L0X_encode_timeout>
 800dab4:	4603      	mov	r3, r0
 800dab6:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800dab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d108      	bne.n	800dad2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800dac0:	8bfb      	ldrh	r3, [r7, #30]
 800dac2:	461a      	mov	r2, r3
 800dac4:	2171      	movs	r1, #113	; 0x71
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f001 f8c6 	bl	800ec58 <VL53L0X_WrWord>
 800dacc:	4603      	mov	r3, r0
 800dace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800dad2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d107      	bne.n	800daea <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800dae2:	e002      	b.n	800daea <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dae4:	23fc      	movs	r3, #252	; 0xfc
 800dae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800daea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3728      	adds	r7, #40	; 0x28
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b086      	sub	sp, #24
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	60f8      	str	r0, [r7, #12]
 800dafe:	460b      	mov	r3, r1
 800db00:	607a      	str	r2, [r7, #4]
 800db02:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db04:	2300      	movs	r3, #0
 800db06:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800db08:	7afb      	ldrb	r3, [r7, #11]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d002      	beq.n	800db14 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800db0e:	2b01      	cmp	r3, #1
 800db10:	d00a      	beq.n	800db28 <VL53L0X_get_vcsel_pulse_period+0x32>
 800db12:	e013      	b.n	800db3c <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800db14:	f107 0316 	add.w	r3, r7, #22
 800db18:	461a      	mov	r2, r3
 800db1a:	2150      	movs	r1, #80	; 0x50
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f001 f8f9 	bl	800ed14 <VL53L0X_RdByte>
 800db22:	4603      	mov	r3, r0
 800db24:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800db26:	e00b      	b.n	800db40 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800db28:	f107 0316 	add.w	r3, r7, #22
 800db2c:	461a      	mov	r2, r3
 800db2e:	2170      	movs	r1, #112	; 0x70
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f001 f8ef 	bl	800ed14 <VL53L0X_RdByte>
 800db36:	4603      	mov	r3, r0
 800db38:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800db3a:	e001      	b.n	800db40 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800db3c:	23fc      	movs	r3, #252	; 0xfc
 800db3e:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800db40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d107      	bne.n	800db58 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800db48:	7dbb      	ldrb	r3, [r7, #22]
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fe fff4 	bl	800cb38 <VL53L0X_decode_vcsel_period>
 800db50:	4603      	mov	r3, r0
 800db52:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	701a      	strb	r2, [r3, #0]

	return Status;
 800db58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3718      	adds	r7, #24
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b090      	sub	sp, #64	; 0x40
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db6e:	2300      	movs	r3, #0
 800db70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800db74:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800db78:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800db7a:	f240 7376 	movw	r3, #1910	; 0x776
 800db7e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 800db80:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800db84:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800db86:	f44f 7325 	mov.w	r3, #660	; 0x294
 800db8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 800db8c:	f240 234e 	movw	r3, #590	; 0x24e
 800db90:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 800db92:	f240 23b2 	movw	r3, #690	; 0x2b2
 800db96:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800db98:	f44f 7325 	mov.w	r3, #660	; 0x294
 800db9c:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800db9e:	f240 2326 	movw	r3, #550	; 0x226
 800dba2:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800dba4:	2300      	movs	r3, #0
 800dba6:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800dbac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800dbb2:	683a      	ldr	r2, [r7, #0]
 800dbb4:	1ad3      	subs	r3, r2, r3
 800dbb6:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800dbb8:	f107 0310 	add.w	r3, r7, #16
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7fd f8f8 	bl	800adb4 <VL53L0X_GetSequenceStepEnables>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 800dbca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d15b      	bne.n	800dc8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 800dbd2:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d105      	bne.n	800dbe4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800dbd8:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d102      	bne.n	800dbe4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 800dbde:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d052      	beq.n	800dc8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800dbe4:	f107 030c 	add.w	r3, r7, #12
 800dbe8:	461a      	mov	r2, r3
 800dbea:	2102      	movs	r1, #2
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7ff fdaf 	bl	800d750 <get_sequence_step_timeout>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 800dbf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d002      	beq.n	800dc06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 800dc00:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc04:	e07d      	b.n	800dd02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800dc06:	7c3b      	ldrb	r3, [r7, #16]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00f      	beq.n	800dc2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800dc0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc10:	4413      	add	r3, r2
 800dc12:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 800dc14:	69ba      	ldr	r2, [r7, #24]
 800dc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d204      	bcs.n	800dc26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800dc1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	1ad3      	subs	r3, r2, r3
 800dc22:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc24:	e002      	b.n	800dc2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dc26:	23fc      	movs	r3, #252	; 0xfc
 800dc28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800dc2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d002      	beq.n	800dc3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 800dc34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc38:	e063      	b.n	800dd02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800dc3a:	7cbb      	ldrb	r3, [r7, #18]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d011      	beq.n	800dc64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	4413      	add	r3, r2
 800dc46:	005b      	lsls	r3, r3, #1
 800dc48:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dc4a:	69ba      	ldr	r2, [r7, #24]
 800dc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d204      	bcs.n	800dc5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800dc52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc54:	69bb      	ldr	r3, [r7, #24]
 800dc56:	1ad3      	subs	r3, r2, r3
 800dc58:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc5a:	e016      	b.n	800dc8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dc5c:	23fc      	movs	r3, #252	; 0xfc
 800dc5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dc62:	e012      	b.n	800dc8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800dc64:	7c7b      	ldrb	r3, [r7, #17]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00f      	beq.n	800dc8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc6e:	4413      	add	r3, r2
 800dc70:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dc72:	69ba      	ldr	r2, [r7, #24]
 800dc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d204      	bcs.n	800dc84 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800dc7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	1ad3      	subs	r3, r2, r3
 800dc80:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc82:	e002      	b.n	800dc8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dc84:	23fc      	movs	r3, #252	; 0xfc
 800dc86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800dc8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d002      	beq.n	800dc98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 800dc92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc96:	e034      	b.n	800dd02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800dc98:	7cfb      	ldrb	r3, [r7, #19]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d019      	beq.n	800dcd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800dc9e:	f107 0308 	add.w	r3, r7, #8
 800dca2:	461a      	mov	r2, r3
 800dca4:	2103      	movs	r1, #3
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f7ff fd52 	bl	800d750 <get_sequence_step_timeout>
 800dcac:	4603      	mov	r3, r0
 800dcae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	6a3a      	ldr	r2, [r7, #32]
 800dcb6:	4413      	add	r3, r2
 800dcb8:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dcba:	69ba      	ldr	r2, [r7, #24]
 800dcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d204      	bcs.n	800dccc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800dcc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800dcca:	e002      	b.n	800dcd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dccc:	23fc      	movs	r3, #252	; 0xfc
 800dcce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800dcd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d111      	bne.n	800dcfe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 800dcda:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d00e      	beq.n	800dcfe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 800dce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800dce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcea:	2104      	movs	r1, #4
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f7ff fe10 	bl	800d912 <set_sequence_step_timeout>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	683a      	ldr	r2, [r7, #0]
 800dcfc:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800dcfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3740      	adds	r7, #64	; 0x40
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b090      	sub	sp, #64	; 0x40
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd14:	2300      	movs	r3, #0
 800dd16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800dd1a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dd1e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800dd20:	f240 7376 	movw	r3, #1910	; 0x776
 800dd24:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800dd26:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800dd2a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800dd2c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800dd30:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800dd32:	f240 234e 	movw	r3, #590	; 0x24e
 800dd36:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800dd38:	f240 23b2 	movw	r3, #690	; 0x2b2
 800dd3c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800dd3e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800dd42:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800dd44:	f240 2326 	movw	r3, #550	; 0x226
 800dd48:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800dd4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd52:	441a      	add	r2, r3
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800dd58:	f107 0318 	add.w	r3, r7, #24
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f7fd f828 	bl	800adb4 <VL53L0X_GetSequenceStepEnables>
 800dd64:	4603      	mov	r3, r0
 800dd66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800dd6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d002      	beq.n	800dd78 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800dd72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dd76:	e075      	b.n	800de64 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800dd78:	7e3b      	ldrb	r3, [r7, #24]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d105      	bne.n	800dd8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800dd7e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d102      	bne.n	800dd8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800dd84:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d030      	beq.n	800ddec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800dd8a:	f107 0310 	add.w	r3, r7, #16
 800dd8e:	461a      	mov	r2, r3
 800dd90:	2102      	movs	r1, #2
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7ff fcdc 	bl	800d750 <get_sequence_step_timeout>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800dd9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d122      	bne.n	800ddec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800dda6:	7e3b      	ldrb	r3, [r7, #24]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d007      	beq.n	800ddbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ddb0:	6939      	ldr	r1, [r7, #16]
 800ddb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ddb6:	441a      	add	r2, r3
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800ddbc:	7ebb      	ldrb	r3, [r7, #26]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d009      	beq.n	800ddd6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800ddc6:	6939      	ldr	r1, [r7, #16]
 800ddc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddca:	440b      	add	r3, r1
 800ddcc:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ddce:	441a      	add	r2, r3
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	601a      	str	r2, [r3, #0]
 800ddd4:	e00a      	b.n	800ddec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800ddd6:	7e7b      	ldrb	r3, [r7, #25]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d007      	beq.n	800ddec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800dde0:	6939      	ldr	r1, [r7, #16]
 800dde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800dde6:	441a      	add	r2, r3
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ddec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d114      	bne.n	800de1e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800ddf4:	7efb      	ldrb	r3, [r7, #27]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d011      	beq.n	800de1e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800ddfa:	f107 030c 	add.w	r3, r7, #12
 800ddfe:	461a      	mov	r2, r3
 800de00:	2103      	movs	r1, #3
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7ff fca4 	bl	800d750 <get_sequence_step_timeout>
 800de08:	4603      	mov	r3, r0
 800de0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800de12:	68f9      	ldr	r1, [r7, #12]
 800de14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de16:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800de18:	441a      	add	r2, r3
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800de1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800de22:	2b00      	cmp	r3, #0
 800de24:	d114      	bne.n	800de50 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800de26:	7f3b      	ldrb	r3, [r7, #28]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d011      	beq.n	800de50 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800de2c:	f107 0314 	add.w	r3, r7, #20
 800de30:	461a      	mov	r2, r3
 800de32:	2104      	movs	r1, #4
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7ff fc8b 	bl	800d750 <get_sequence_step_timeout>
 800de3a:	4603      	mov	r3, r0
 800de3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800de44:	6979      	ldr	r1, [r7, #20]
 800de46:	6a3b      	ldr	r3, [r7, #32]
 800de48:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800de4a:	441a      	add	r2, r3
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800de50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800de54:	2b00      	cmp	r3, #0
 800de56:	d103      	bne.n	800de60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800de60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800de64:	4618      	mov	r0, r3
 800de66:	3740      	adds	r7, #64	; 0x40
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b088      	sub	sp, #32
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de76:	2300      	movs	r3, #0
 800de78:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800de7a:	2300      	movs	r3, #0
 800de7c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800de7e:	e0c6      	b.n	800e00e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	4413      	add	r3, r2
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	74fb      	strb	r3, [r7, #19]
		Index++;
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	3301      	adds	r3, #1
 800de8e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800de90:	7cfb      	ldrb	r3, [r7, #19]
 800de92:	2bff      	cmp	r3, #255	; 0xff
 800de94:	f040 808d 	bne.w	800dfb2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	683a      	ldr	r2, [r7, #0]
 800de9c:	4413      	add	r3, r2
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	747b      	strb	r3, [r7, #17]
			Index++;
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	3301      	adds	r3, #1
 800dea6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800dea8:	7c7b      	ldrb	r3, [r7, #17]
 800deaa:	2b03      	cmp	r3, #3
 800deac:	d87e      	bhi.n	800dfac <VL53L0X_load_tuning_settings+0x140>
 800deae:	a201      	add	r2, pc, #4	; (adr r2, 800deb4 <VL53L0X_load_tuning_settings+0x48>)
 800deb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb4:	0800dec5 	.word	0x0800dec5
 800deb8:	0800deff 	.word	0x0800deff
 800debc:	0800df39 	.word	0x0800df39
 800dec0:	0800df73 	.word	0x0800df73
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	683a      	ldr	r2, [r7, #0]
 800dec8:	4413      	add	r3, r2
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	743b      	strb	r3, [r7, #16]
				Index++;
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	3301      	adds	r3, #1
 800ded2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	4413      	add	r3, r2
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	3301      	adds	r3, #1
 800dee2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dee4:	7c3b      	ldrb	r3, [r7, #16]
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	021b      	lsls	r3, r3, #8
 800deea:	b29a      	uxth	r2, r3
 800deec:	7bfb      	ldrb	r3, [r7, #15]
 800deee:	b29b      	uxth	r3, r3
 800def0:	4413      	add	r3, r2
 800def2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	89ba      	ldrh	r2, [r7, #12]
 800def8:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 800defc:	e087      	b.n	800e00e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	683a      	ldr	r2, [r7, #0]
 800df02:	4413      	add	r3, r2
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	743b      	strb	r3, [r7, #16]
				Index++;
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	3301      	adds	r3, #1
 800df0c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	683a      	ldr	r2, [r7, #0]
 800df12:	4413      	add	r3, r2
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	73fb      	strb	r3, [r7, #15]
				Index++;
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	3301      	adds	r3, #1
 800df1c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800df1e:	7c3b      	ldrb	r3, [r7, #16]
 800df20:	b29b      	uxth	r3, r3
 800df22:	021b      	lsls	r3, r3, #8
 800df24:	b29a      	uxth	r2, r3
 800df26:	7bfb      	ldrb	r3, [r7, #15]
 800df28:	b29b      	uxth	r3, r3
 800df2a:	4413      	add	r3, r2
 800df2c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	89ba      	ldrh	r2, [r7, #12]
 800df32:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 800df36:	e06a      	b.n	800e00e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	4413      	add	r3, r2
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	743b      	strb	r3, [r7, #16]
				Index++;
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	3301      	adds	r3, #1
 800df46:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	683a      	ldr	r2, [r7, #0]
 800df4c:	4413      	add	r3, r2
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	73fb      	strb	r3, [r7, #15]
				Index++;
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	3301      	adds	r3, #1
 800df56:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800df58:	7c3b      	ldrb	r3, [r7, #16]
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	021b      	lsls	r3, r3, #8
 800df5e:	b29a      	uxth	r2, r3
 800df60:	7bfb      	ldrb	r3, [r7, #15]
 800df62:	b29b      	uxth	r3, r3
 800df64:	4413      	add	r3, r2
 800df66:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	89ba      	ldrh	r2, [r7, #12]
 800df6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 800df70:	e04d      	b.n	800e00e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	683a      	ldr	r2, [r7, #0]
 800df76:	4413      	add	r3, r2
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	743b      	strb	r3, [r7, #16]
				Index++;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	3301      	adds	r3, #1
 800df80:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	683a      	ldr	r2, [r7, #0]
 800df86:	4413      	add	r3, r2
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	3301      	adds	r3, #1
 800df90:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800df92:	7c3b      	ldrb	r3, [r7, #16]
 800df94:	b29b      	uxth	r3, r3
 800df96:	021b      	lsls	r3, r3, #8
 800df98:	b29a      	uxth	r2, r3
 800df9a:	7bfb      	ldrb	r3, [r7, #15]
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	4413      	add	r3, r2
 800dfa0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	89ba      	ldrh	r2, [r7, #12]
 800dfa6:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 800dfaa:	e030      	b.n	800e00e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dfac:	23fc      	movs	r3, #252	; 0xfc
 800dfae:	77fb      	strb	r3, [r7, #31]
 800dfb0:	e02d      	b.n	800e00e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800dfb2:	7cfb      	ldrb	r3, [r7, #19]
 800dfb4:	2b04      	cmp	r3, #4
 800dfb6:	d828      	bhi.n	800e00a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	74bb      	strb	r3, [r7, #18]
			Index++;
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800dfc8:	2300      	movs	r3, #0
 800dfca:	61bb      	str	r3, [r7, #24]
 800dfcc:	e00f      	b.n	800dfee <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	683a      	ldr	r2, [r7, #0]
 800dfd2:	4413      	add	r3, r2
 800dfd4:	7819      	ldrb	r1, [r3, #0]
 800dfd6:	f107 0208 	add.w	r2, r7, #8
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	4413      	add	r3, r2
 800dfde:	460a      	mov	r2, r1
 800dfe0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	3301      	adds	r3, #1
 800dfec:	61bb      	str	r3, [r7, #24]
 800dfee:	7cfb      	ldrb	r3, [r7, #19]
 800dff0:	69ba      	ldr	r2, [r7, #24]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	dbeb      	blt.n	800dfce <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800dff6:	7cfb      	ldrb	r3, [r7, #19]
 800dff8:	f107 0208 	add.w	r2, r7, #8
 800dffc:	7cb9      	ldrb	r1, [r7, #18]
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fdaa 	bl	800eb58 <VL53L0X_WriteMulti>
 800e004:	4603      	mov	r3, r0
 800e006:	77fb      	strb	r3, [r7, #31]
 800e008:	e001      	b.n	800e00e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e00a:	23fc      	movs	r3, #252	; 0xfc
 800e00c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	683a      	ldr	r2, [r7, #0]
 800e012:	4413      	add	r3, r2
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d004      	beq.n	800e024 <VL53L0X_load_tuning_settings+0x1b8>
 800e01a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f43f af2e 	beq.w	800de80 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e024:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3720      	adds	r7, #32
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b088      	sub	sp, #32
 800e034:	af00      	add	r7, sp, #0
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e03c:	2300      	movs	r3, #0
 800e03e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2200      	movs	r2, #0
 800e044:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800e046:	f107 0313 	add.w	r3, r7, #19
 800e04a:	4619      	mov	r1, r3
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f7fc ff3d 	bl	800aecc <VL53L0X_GetXTalkCompensationEnable>
 800e052:	4603      	mov	r3, r0
 800e054:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800e056:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d111      	bne.n	800e082 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800e05e:	7cfb      	ldrb	r3, [r7, #19]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00e      	beq.n	800e082 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	699b      	ldr	r3, [r3, #24]
 800e068:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	8a9b      	ldrh	r3, [r3, #20]
 800e06e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	fb02 f303 	mul.w	r3, r2, r3
 800e076:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	3380      	adds	r3, #128	; 0x80
 800e07c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800e082:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3720      	adds	r7, #32
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b086      	sub	sp, #24
 800e092:	af00      	add	r7, sp, #0
 800e094:	60f8      	str	r0, [r7, #12]
 800e096:	60b9      	str	r1, [r7, #8]
 800e098:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e09a:	2300      	movs	r3, #0
 800e09c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800e0a6:	f107 0310 	add.w	r3, r7, #16
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	68b9      	ldr	r1, [r7, #8]
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	f7ff ffbe 	bl	800e030 <VL53L0X_get_total_xtalk_rate>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800e0b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d105      	bne.n	800e0cc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	441a      	add	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	601a      	str	r2, [r3, #0]

	return Status;
 800e0cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3718      	adds	r7, #24
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 800e0d8:	b084      	sub	sp, #16
 800e0da:	b480      	push	{r7}
 800e0dc:	b085      	sub	sp, #20
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	f107 0c18 	add.w	ip, r7, #24
 800e0e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	60bb      	str	r3, [r7, #8]
	int index = 0;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	607b      	str	r3, [r7, #4]
 800e0fc:	e00d      	b.n	800e11a <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f107 0218 	add.w	r2, r7, #24
 800e104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e108:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d802      	bhi.n	800e114 <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	60bb      	str	r3, [r7, #8]
			break;
 800e112:	e006      	b.n	800e122 <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	3301      	adds	r3, #1
 800e118:	607b      	str	r3, [r7, #4]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e11e:	429a      	cmp	r2, r3
 800e120:	d8ed      	bhi.n	800e0fe <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 800e122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	429a      	cmp	r2, r3
 800e128:	d105      	bne.n	800e136 <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 800e12a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e12c:	3b01      	subs	r3, #1
 800e12e:	60bb      	str	r3, [r7, #8]
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	60fb      	str	r3, [r7, #12]
 800e134:	e008      	b.n	800e148 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d102      	bne.n	800e142 <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 800e13c:	2300      	movs	r3, #0
 800e13e:	60fb      	str	r3, [r7, #12]
 800e140:	e002      	b.n	800e148 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	3b01      	subs	r3, #1
 800e146:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 800e148:	68fa      	ldr	r2, [r7, #12]
 800e14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e14c:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 800e14e:	68ba      	ldr	r2, [r7, #8]
 800e150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e152:	601a      	str	r2, [r3, #0]

	return Status;
 800e154:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3714      	adds	r7, #20
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	b004      	add	sp, #16
 800e164:	4770      	bx	lr

0800e166 <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 800e166:	b5b0      	push	{r4, r5, r7, lr}
 800e168:	b0ba      	sub	sp, #232	; 0xe8
 800e16a:	af0e      	add	r7, sp, #56	; 0x38
 800e16c:	60f8      	str	r0, [r7, #12]
 800e16e:	60b9      	str	r1, [r7, #8]
 800e170:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e172:	2300      	movs	r3, #0
 800e174:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 800e178:	2300      	movs	r3, #0
 800e17a:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 800e17c:	2300      	movs	r3, #0
 800e17e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800e180:	f107 031c 	add.w	r3, r7, #28
 800e184:	4619      	mov	r1, r3
 800e186:	68f8      	ldr	r0, [r7, #12]
 800e188:	f7fc fbce 	bl	800a928 <VL53L0X_GetDeviceParameters>
 800e18c:	4603      	mov	r3, r0
 800e18e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 800e192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	429a      	cmp	r2, r3
 800e198:	d803      	bhi.n	800e1a2 <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 800e19a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e19c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e1a0:	e07c      	b.n	800e29c <VL53L0X_calc_dmax+0x136>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 800e1a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 800e1a4:	68ba      	ldr	r2, [r7, #8]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d304      	bcc.n	800e1b4 <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 800e1aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e1ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e1b2:	e073      	b.n	800e29c <VL53L0X_calc_dmax+0x136>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 800e1b4:	f107 0314 	add.w	r3, r7, #20
 800e1b8:	930d      	str	r3, [sp, #52]	; 0x34
 800e1ba:	f107 0318 	add.w	r3, r7, #24
 800e1be:	930c      	str	r3, [sp, #48]	; 0x30
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1c4:	2307      	movs	r3, #7
 800e1c6:	930a      	str	r3, [sp, #40]	; 0x28
 800e1c8:	466d      	mov	r5, sp
 800e1ca:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800e1ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e1da:	e885 0003 	stmia.w	r5, {r0, r1}
 800e1de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e1e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e1e4:	f7ff ff78 	bl	800e0d8 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 800e1e8:	69ba      	ldr	r2, [r7, #24]
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d109      	bne.n	800e204 <VL53L0X_calc_dmax+0x9e>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	3314      	adds	r3, #20
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	33b0      	adds	r3, #176	; 0xb0
 800e1f8:	443b      	add	r3, r7
 800e1fa:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800e1fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e202:	e04b      	b.n	800e29c <VL53L0X_calc_dmax+0x136>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	330e      	adds	r3, #14
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	33b0      	adds	r3, #176	; 0xb0
 800e20c:	443b      	add	r3, r7
 800e20e:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800e212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	330e      	adds	r3, #14
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	33b0      	adds	r3, #176	; 0xb0
 800e21e:	443b      	add	r3, r7
 800e220:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800e224:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	3314      	adds	r3, #20
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	33b0      	adds	r3, #176	; 0xb0
 800e230:	443b      	add	r3, r7
 800e232:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800e236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	3314      	adds	r3, #20
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	33b0      	adds	r3, #176	; 0xb0
 800e242:	443b      	add	r3, r7
 800e244:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800e248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 800e24c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e250:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e254:	429a      	cmp	r2, r3
 800e256:	d01d      	beq.n	800e294 <VL53L0X_calc_dmax+0x12e>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 800e258:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e25c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e260:	1ad2      	subs	r2, r2, r3
 800e262:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800e266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e26a:	1acb      	subs	r3, r1, r3
 800e26c:	0a1b      	lsrs	r3, r3, #8
 800e26e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e272:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 800e276:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 800e27e:	0a1b      	lsrs	r3, r3, #8
 800e280:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e284:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 800e288:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e28c:	4413      	add	r3, r2
 800e28e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e292:	e003      	b.n	800e29c <VL53L0X_calc_dmax+0x136>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 800e294:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 800e29c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e2a0:	0c1a      	lsrs	r2, r3, #16
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800e2a6:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	37b0      	adds	r7, #176	; 0xb0
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e2b4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b0b0      	sub	sp, #192	; 0xc0
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	60b9      	str	r1, [r7, #8]
 800e2be:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800e2c0:	f44f 7348 	mov.w	r3, #800	; 0x320
 800e2c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800e2c8:	f44f 7316 	mov.w	r3, #600	; 0x258
 800e2cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 800e2d0:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800e2d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800e2d8:	f241 235c 	movw	r3, #4700	; 0x125c
 800e2dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800e2e0:	4b98      	ldr	r3, [pc, #608]	; (800e544 <VL53L0X_calc_sigma_estimate+0x290>)
 800e2e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800e2e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800e2ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800e2ee:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800e2f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800e2fe:	4b92      	ldr	r3, [pc, #584]	; (800e548 <VL53L0X_calc_sigma_estimate+0x294>)
 800e300:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800e302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e306:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800e308:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800e30c:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 800e30e:	f240 6377 	movw	r3, #1655	; 0x677
 800e312:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e314:	2300      	movs	r3, #0
 800e316:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	699b      	ldr	r3, [r3, #24]
 800e31e:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e328:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800e32c:	0c1b      	lsrs	r3, r3, #16
 800e32e:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 800e330:	f107 0314 	add.w	r3, r7, #20
 800e334:	461a      	mov	r2, r3
 800e336:	68b9      	ldr	r1, [r7, #8]
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f7ff fea8 	bl	800e08e <VL53L0X_get_total_signal_rate>
 800e33e:	4603      	mov	r3, r0
 800e340:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800e344:	f107 0318 	add.w	r3, r7, #24
 800e348:	461a      	mov	r2, r3
 800e34a:	68b9      	ldr	r1, [r7, #8]
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f7ff fe6f 	bl	800e030 <VL53L0X_get_total_xtalk_rate>
 800e352:	4603      	mov	r3, r0
 800e354:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e35e:	fb02 f303 	mul.w	r3, r2, r3
 800e362:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800e364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e366:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e36a:	0c1b      	lsrs	r3, r3, #16
 800e36c:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e374:	fb02 f303 	mul.w	r3, r2, r3
 800e378:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800e37c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e382:	429a      	cmp	r2, r3
 800e384:	d902      	bls.n	800e38c <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800e386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e388:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800e38c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800e390:	2b00      	cmp	r3, #0
 800e392:	d160      	bne.n	800e456 <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800e39a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800e3a4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e3a8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f7ff f978 	bl	800d6a8 <VL53L0X_calc_timeout_mclks>
 800e3b8:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800e3c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800e3ca:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e3ce:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	f7ff f965 	bl	800d6a8 <VL53L0X_calc_timeout_mclks>
 800e3de:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800e3e0:	2303      	movs	r3, #3
 800e3e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800e3e6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e3ea:	2b08      	cmp	r3, #8
 800e3ec:	d102      	bne.n	800e3f4 <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 800e3ee:	2302      	movs	r3, #2
 800e3f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800e3f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3f8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800e3fa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e3fe:	fb02 f303 	mul.w	r3, r2, r3
 800e402:	02db      	lsls	r3, r3, #11
 800e404:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e408:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e40c:	4a4f      	ldr	r2, [pc, #316]	; (800e54c <VL53L0X_calc_sigma_estimate+0x298>)
 800e40e:	fba2 2303 	umull	r2, r3, r2, r3
 800e412:	099b      	lsrs	r3, r3, #6
 800e414:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 800e416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e418:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e41a:	fb02 f303 	mul.w	r3, r2, r3
 800e41e:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e422:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e426:	4a49      	ldr	r2, [pc, #292]	; (800e54c <VL53L0X_calc_sigma_estimate+0x298>)
 800e428:	fba2 2303 	umull	r2, r3, r2, r3
 800e42c:	099b      	lsrs	r3, r3, #6
 800e42e:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	3380      	adds	r3, #128	; 0x80
 800e434:	0a1b      	lsrs	r3, r3, #8
 800e436:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800e438:	697a      	ldr	r2, [r7, #20]
 800e43a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e43c:	fb02 f303 	mul.w	r3, r2, r3
 800e440:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800e444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e448:	3380      	adds	r3, #128	; 0x80
 800e44a:	0a1b      	lsrs	r3, r3, #8
 800e44c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	021b      	lsls	r3, r3, #8
 800e454:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e456:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d002      	beq.n	800e464 <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 800e45e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800e462:	e14a      	b.n	800e6fa <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 800e464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e466:	2b00      	cmp	r3, #0
 800e468:	d109      	bne.n	800e47e <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e470:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e478:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800e47c:	e13b      	b.n	800e6f6 <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 800e47e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e482:	2b00      	cmp	r3, #0
 800e484:	d102      	bne.n	800e48c <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 800e486:	2301      	movs	r3, #1
 800e488:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800e48c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e490:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800e492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e494:	041a      	lsls	r2, r3, #16
 800e496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e498:	fbb2 f3f3 	udiv	r3, r2, r3
 800e49c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800e4a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e4a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d903      	bls.n	800e4b4 <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800e4ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e4b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800e4b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e4b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e4bc:	fb02 f303 	mul.w	r3, r2, r3
 800e4c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800e4c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	005b      	lsls	r3, r3, #1
 800e4cc:	4413      	add	r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7fe fb44 	bl	800cb5e <VL53L0X_isqrt>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	005b      	lsls	r3, r3, #1
 800e4da:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	891b      	ldrh	r3, [r3, #8]
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e4e4:	fb02 f303 	mul.w	r3, r2, r3
 800e4e8:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e4ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4ec:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e4ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e4f2:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e4f4:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e4f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e4fa:	4a14      	ldr	r2, [pc, #80]	; (800e54c <VL53L0X_calc_sigma_estimate+0x298>)
 800e4fc:	fba2 2303 	umull	r2, r3, r2, r3
 800e500:	099b      	lsrs	r3, r3, #6
 800e502:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800e504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e506:	041b      	lsls	r3, r3, #16
 800e508:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e50c:	4a0f      	ldr	r2, [pc, #60]	; (800e54c <VL53L0X_calc_sigma_estimate+0x298>)
 800e50e:	fba2 2303 	umull	r2, r3, r2, r3
 800e512:	099b      	lsrs	r3, r3, #6
 800e514:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 800e516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e518:	021b      	lsls	r3, r3, #8
 800e51a:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800e51c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e520:	fbb2 f3f3 	udiv	r3, r2, r3
 800e524:	2b00      	cmp	r3, #0
 800e526:	bfb8      	it	lt
 800e528:	425b      	neglt	r3, r3
 800e52a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800e52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52e:	021b      	lsls	r3, r3, #8
 800e530:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	7e1b      	ldrb	r3, [r3, #24]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00a      	beq.n	800e550 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 800e53a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e53e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e542:	e032      	b.n	800e5aa <VL53L0X_calc_sigma_estimate+0x2f6>
 800e544:	028f87ae 	.word	0x028f87ae
 800e548:	0006999a 	.word	0x0006999a
 800e54c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 800e550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e556:	fbb2 f3f3 	udiv	r3, r2, r3
 800e55a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800e55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e560:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800e564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e568:	fb02 f303 	mul.w	r3, r2, r3
 800e56c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800e570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e576:	4413      	add	r3, r2
 800e578:	0c1b      	lsrs	r3, r3, #16
 800e57a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800e57e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e582:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 800e58a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e58e:	085b      	lsrs	r3, r3, #1
 800e590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800e594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e598:	fb03 f303 	mul.w	r3, r3, r3
 800e59c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800e5a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5a4:	0b9b      	lsrs	r3, r3, #14
 800e5a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800e5aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e5b0:	fb02 f303 	mul.w	r3, r2, r3
 800e5b4:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800e5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e5bc:	0c1b      	lsrs	r3, r3, #16
 800e5be:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800e5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5c2:	fb03 f303 	mul.w	r3, r3, r3
 800e5c6:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 800e5c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e5cc:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800e5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e5d4:	0c1b      	lsrs	r3, r3, #16
 800e5d6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800e5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5da:	fb03 f303 	mul.w	r3, r3, r3
 800e5de:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800e5e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e4:	4413      	add	r3, r2
 800e5e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800e5e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5ea:	f7fe fab8 	bl	800cb5e <VL53L0X_isqrt>
 800e5ee:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800e5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f2:	041b      	lsls	r3, r3, #16
 800e5f4:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f8:	3332      	adds	r3, #50	; 0x32
 800e5fa:	4a42      	ldr	r2, [pc, #264]	; (800e704 <VL53L0X_calc_sigma_estimate+0x450>)
 800e5fc:	fba2 2303 	umull	r2, r3, r2, r3
 800e600:	095a      	lsrs	r2, r3, #5
 800e602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e604:	fbb2 f3f3 	udiv	r3, r2, r3
 800e608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800e60c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e610:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800e614:	fb02 f303 	mul.w	r3, r2, r3
 800e618:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800e61c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e620:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e624:	3308      	adds	r3, #8
 800e626:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800e62a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e62e:	4a36      	ldr	r2, [pc, #216]	; (800e708 <VL53L0X_calc_sigma_estimate+0x454>)
 800e630:	fba2 2303 	umull	r2, r3, r2, r3
 800e634:	0b5b      	lsrs	r3, r3, #13
 800e636:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800e63a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e63e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e642:	429a      	cmp	r2, r3
 800e644:	d903      	bls.n	800e64e <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 800e646:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e64a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 800e64e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e656:	4413      	add	r3, r2
 800e658:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800e65c:	4a2b      	ldr	r2, [pc, #172]	; (800e70c <VL53L0X_calc_sigma_estimate+0x458>)
 800e65e:	fba2 2303 	umull	r2, r3, r2, r3
 800e662:	099b      	lsrs	r3, r3, #6
 800e664:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800e666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e668:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800e66a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e66e:	441a      	add	r2, r3
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	fbb2 f3f3 	udiv	r3, r2, r3
 800e676:	4618      	mov	r0, r3
 800e678:	f7fe fa71 	bl	800cb5e <VL53L0X_isqrt>
 800e67c:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800e67e:	6a3b      	ldr	r3, [r7, #32]
 800e680:	021b      	lsls	r3, r3, #8
 800e682:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e68a:	4a20      	ldr	r2, [pc, #128]	; (800e70c <VL53L0X_calc_sigma_estimate+0x458>)
 800e68c:	fba2 2303 	umull	r2, r3, r2, r3
 800e690:	099b      	lsrs	r3, r3, #6
 800e692:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800e694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e698:	fb03 f303 	mul.w	r3, r3, r3
 800e69c:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800e69e:	6a3b      	ldr	r3, [r7, #32]
 800e6a0:	fb03 f303 	mul.w	r3, r3, r3
 800e6a4:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800e6a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6aa:	4413      	add	r3, r2
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fe fa56 	bl	800cb5e <VL53L0X_isqrt>
 800e6b2:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e6ba:	fb02 f303 	mul.w	r3, r2, r3
 800e6be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800e6c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d009      	beq.n	800e6dc <VL53L0X_calc_sigma_estimate+0x428>
 800e6c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d005      	beq.n	800e6dc <VL53L0X_calc_sigma_estimate+0x428>
 800e6d0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e6d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d903      	bls.n	800e6e4 <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 800e6dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e6e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e6ea:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e6f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	37c0      	adds	r7, #192	; 0xc0
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop
 800e704:	51eb851f 	.word	0x51eb851f
 800e708:	d1b71759 	.word	0xd1b71759
 800e70c:	10624dd3 	.word	0x10624dd3

0800e710 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b090      	sub	sp, #64	; 0x40
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	607a      	str	r2, [r7, #4]
 800e71a:	461a      	mov	r2, r3
 800e71c:	460b      	mov	r3, r1
 800e71e:	72fb      	strb	r3, [r7, #11]
 800e720:	4613      	mov	r3, r2
 800e722:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e724:	2300      	movs	r3, #0
 800e726:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800e72a:	2300      	movs	r3, #0
 800e72c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800e730:	2300      	movs	r3, #0
 800e732:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800e736:	2300      	movs	r3, #0
 800e738:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800e73c:	2300      	movs	r3, #0
 800e73e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800e742:	2300      	movs	r3, #0
 800e744:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800e748:	2300      	movs	r3, #0
 800e74a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800e74e:	2300      	movs	r3, #0
 800e750:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800e754:	2300      	movs	r3, #0
 800e756:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800e75a:	2300      	movs	r3, #0
 800e75c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800e75e:	2300      	movs	r3, #0
 800e760:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800e762:	7afb      	ldrb	r3, [r7, #11]
 800e764:	10db      	asrs	r3, r3, #3
 800e766:	b2db      	uxtb	r3, r3
 800e768:	f003 030f 	and.w	r3, r3, #15
 800e76c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800e770:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e774:	2b00      	cmp	r3, #0
 800e776:	d017      	beq.n	800e7a8 <VL53L0X_get_pal_range_status+0x98>
 800e778:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e77c:	2b05      	cmp	r3, #5
 800e77e:	d013      	beq.n	800e7a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800e780:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e784:	2b07      	cmp	r3, #7
 800e786:	d00f      	beq.n	800e7a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800e788:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e78c:	2b0c      	cmp	r3, #12
 800e78e:	d00b      	beq.n	800e7a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800e790:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e794:	2b0d      	cmp	r3, #13
 800e796:	d007      	beq.n	800e7a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800e798:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e79c:	2b0e      	cmp	r3, #14
 800e79e:	d003      	beq.n	800e7a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800e7a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e7a4:	2b0f      	cmp	r3, #15
 800e7a6:	d103      	bne.n	800e7b0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800e7ae:	e002      	b.n	800e7b6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e7b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d109      	bne.n	800e7d2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e7be:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	2100      	movs	r1, #0
 800e7c6:	68f8      	ldr	r0, [r7, #12]
 800e7c8:	f7fc fc54 	bl	800b074 <VL53L0X_GetLimitCheckEnable>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800e7d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d03c      	beq.n	800e854 <VL53L0X_get_pal_range_status+0x144>
 800e7da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d138      	bne.n	800e854 <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800e7e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f7ff fd62 	bl	800e2b4 <VL53L0X_calc_sigma_estimate>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 800e7f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d10a      	bne.n	800e814 <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 800e7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	f107 0210 	add.w	r2, r7, #16
 800e806:	4619      	mov	r1, r3
 800e808:	68f8      	ldr	r0, [r7, #12]
 800e80a:	f7ff fcac 	bl	800e166 <VL53L0X_calc_dmax>
 800e80e:	4603      	mov	r3, r0
 800e810:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800e814:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d103      	bne.n	800e824 <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	b29a      	uxth	r2, r3
 800e820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e822:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800e824:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d113      	bne.n	800e854 <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800e82c:	f107 0320 	add.w	r3, r7, #32
 800e830:	461a      	mov	r2, r3
 800e832:	2100      	movs	r1, #0
 800e834:	68f8      	ldr	r0, [r7, #12]
 800e836:	f7fc fca3 	bl	800b180 <VL53L0X_GetLimitCheckValue>
 800e83a:	4603      	mov	r3, r0
 800e83c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800e840:	6a3b      	ldr	r3, [r7, #32]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d006      	beq.n	800e854 <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 800e846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e848:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d902      	bls.n	800e854 <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 800e84e:	2301      	movs	r3, #1
 800e850:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e854:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d109      	bne.n	800e870 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e85c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800e860:	461a      	mov	r2, r3
 800e862:	2102      	movs	r1, #2
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f7fc fc05 	bl	800b074 <VL53L0X_GetLimitCheckEnable>
 800e86a:	4603      	mov	r3, r0
 800e86c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800e870:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e874:	2b00      	cmp	r3, #0
 800e876:	d044      	beq.n	800e902 <VL53L0X_get_pal_range_status+0x1f2>
 800e878:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d140      	bne.n	800e902 <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e880:	f107 031c 	add.w	r3, r7, #28
 800e884:	461a      	mov	r2, r3
 800e886:	2102      	movs	r1, #2
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f7fc fc79 	bl	800b180 <VL53L0X_GetLimitCheckValue>
 800e88e:	4603      	mov	r3, r0
 800e890:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800e894:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d107      	bne.n	800e8ac <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e89c:	2201      	movs	r2, #1
 800e89e:	21ff      	movs	r1, #255	; 0xff
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f000 f9b5 	bl	800ec10 <VL53L0X_WrByte>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800e8ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d109      	bne.n	800e8c8 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 800e8b4:	f107 0316 	add.w	r3, r7, #22
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	21b6      	movs	r1, #182	; 0xb6
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f000 fa53 	bl	800ed68 <VL53L0X_RdWord>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800e8c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d107      	bne.n	800e8e0 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	21ff      	movs	r1, #255	; 0xff
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f000 f99b 	bl	800ec10 <VL53L0X_WrByte>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800e8e0:	8afb      	ldrh	r3, [r7, #22]
 800e8e2:	025b      	lsls	r3, r3, #9
 800e8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8ea:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d006      	beq.n	800e902 <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800e8f4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800e8f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d902      	bls.n	800e902 <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e902:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e906:	2b00      	cmp	r3, #0
 800e908:	d109      	bne.n	800e91e <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e90a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e90e:	461a      	mov	r2, r3
 800e910:	2103      	movs	r1, #3
 800e912:	68f8      	ldr	r0, [r7, #12]
 800e914:	f7fc fbae 	bl	800b074 <VL53L0X_GetLimitCheckEnable>
 800e918:	4603      	mov	r3, r0
 800e91a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800e91e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e922:	2b00      	cmp	r3, #0
 800e924:	d023      	beq.n	800e96e <VL53L0X_get_pal_range_status+0x25e>
 800e926:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d11f      	bne.n	800e96e <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800e92e:	893b      	ldrh	r3, [r7, #8]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d102      	bne.n	800e93a <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 800e934:	2300      	movs	r3, #0
 800e936:	637b      	str	r3, [r7, #52]	; 0x34
 800e938:	e005      	b.n	800e946 <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	021a      	lsls	r2, r3, #8
 800e93e:	893b      	ldrh	r3, [r7, #8]
 800e940:	fbb2 f3f3 	udiv	r3, r2, r3
 800e944:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e946:	f107 0318 	add.w	r3, r7, #24
 800e94a:	461a      	mov	r2, r3
 800e94c:	2103      	movs	r1, #3
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	f7fc fc16 	bl	800b180 <VL53L0X_GetLimitCheckValue>
 800e954:	4603      	mov	r3, r0
 800e956:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d006      	beq.n	800e96e <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800e960:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800e962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e964:	429a      	cmp	r2, r3
 800e966:	d202      	bcs.n	800e96e <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800e968:	2301      	movs	r3, #1
 800e96a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e96e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e972:	2b00      	cmp	r3, #0
 800e974:	d14a      	bne.n	800ea0c <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 800e976:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d103      	bne.n	800e986 <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 800e97e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e980:	22ff      	movs	r2, #255	; 0xff
 800e982:	701a      	strb	r2, [r3, #0]
 800e984:	e042      	b.n	800ea0c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 800e986:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d007      	beq.n	800e99e <VL53L0X_get_pal_range_status+0x28e>
 800e98e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e992:	2b02      	cmp	r3, #2
 800e994:	d003      	beq.n	800e99e <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 800e996:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e99a:	2b03      	cmp	r3, #3
 800e99c:	d103      	bne.n	800e9a6 <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800e99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9a0:	2205      	movs	r2, #5
 800e9a2:	701a      	strb	r2, [r3, #0]
 800e9a4:	e032      	b.n	800ea0c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 800e9a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e9aa:	2b06      	cmp	r3, #6
 800e9ac:	d003      	beq.n	800e9b6 <VL53L0X_get_pal_range_status+0x2a6>
 800e9ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e9b2:	2b09      	cmp	r3, #9
 800e9b4:	d103      	bne.n	800e9be <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800e9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9b8:	2204      	movs	r2, #4
 800e9ba:	701a      	strb	r2, [r3, #0]
 800e9bc:	e026      	b.n	800ea0c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 800e9be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e9c2:	2b08      	cmp	r3, #8
 800e9c4:	d007      	beq.n	800e9d6 <VL53L0X_get_pal_range_status+0x2c6>
 800e9c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e9ca:	2b0a      	cmp	r3, #10
 800e9cc:	d003      	beq.n	800e9d6 <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 800e9ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d103      	bne.n	800e9de <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800e9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9d8:	2203      	movs	r2, #3
 800e9da:	701a      	strb	r2, [r3, #0]
 800e9dc:	e016      	b.n	800ea0c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 800e9de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e9e2:	2b04      	cmp	r3, #4
 800e9e4:	d003      	beq.n	800e9ee <VL53L0X_get_pal_range_status+0x2de>
 800e9e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d103      	bne.n	800e9f6 <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800e9ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9f0:	2202      	movs	r2, #2
 800e9f2:	701a      	strb	r2, [r3, #0]
 800e9f4:	e00a      	b.n	800ea0c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 800e9f6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d103      	bne.n	800ea06 <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800e9fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea00:	2201      	movs	r2, #1
 800ea02:	701a      	strb	r2, [r3, #0]
 800ea04:	e002      	b.n	800ea0c <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800ea06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea08:	2200      	movs	r2, #0
 800ea0a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ea0c:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800ea10:	461a      	mov	r2, r3
 800ea12:	2101      	movs	r1, #1
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f7fc fb2d 	bl	800b074 <VL53L0X_GetLimitCheckEnable>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800ea20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d14f      	bne.n	800eac8 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800ea28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d003      	beq.n	800ea38 <VL53L0X_get_pal_range_status+0x328>
 800ea30:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d103      	bne.n	800ea40 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea3e:	e002      	b.n	800ea46 <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 800ea40:	2300      	movs	r3, #0
 800ea42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ea4c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800ea50:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ea54:	2b04      	cmp	r3, #4
 800ea56:	d003      	beq.n	800ea60 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800ea58:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d103      	bne.n	800ea68 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 800ea60:	2301      	movs	r3, #1
 800ea62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea66:	e002      	b.n	800ea6e <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ea74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800ea78:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d003      	beq.n	800ea88 <VL53L0X_get_pal_range_status+0x378>
 800ea80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d103      	bne.n	800ea90 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea8e:	e002      	b.n	800ea96 <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 800ea90:	2300      	movs	r3, #0
 800ea92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ea9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800eaa0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d003      	beq.n	800eab0 <VL53L0X_get_pal_range_status+0x3a0>
 800eaa8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d103      	bne.n	800eab8 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800eab0:	2301      	movs	r3, #1
 800eab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eab6:	e002      	b.n	800eabe <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 800eab8:	2300      	movs	r3, #0
 800eaba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800eac4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800eac8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800eacc:	4618      	mov	r0, r3
 800eace:	3740      	adds	r7, #64	; 0x40
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b088      	sub	sp, #32
 800ead8:	af02      	add	r7, sp, #8
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	330a      	adds	r3, #10
 800eae4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800eaf2:	b299      	uxth	r1, r3
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	b29a      	uxth	r2, r3
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	9300      	str	r3, [sp, #0]
 800eafc:	4613      	mov	r3, r2
 800eafe:	68ba      	ldr	r2, [r7, #8]
 800eb00:	f7f3 f9f4 	bl	8001eec <HAL_I2C_Master_Transmit>
 800eb04:	4603      	mov	r3, r0
 800eb06:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800eb08:	693b      	ldr	r3, [r7, #16]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3718      	adds	r7, #24
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b088      	sub	sp, #32
 800eb16:	af02      	add	r7, sp, #8
 800eb18:	60f8      	str	r0, [r7, #12]
 800eb1a:	60b9      	str	r1, [r7, #8]
 800eb1c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	330a      	adds	r3, #10
 800eb22:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800eb30:	f043 0301 	orr.w	r3, r3, #1
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	b299      	uxth	r1, r3
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	4613      	mov	r3, r2
 800eb42:	68ba      	ldr	r2, [r7, #8]
 800eb44:	f7f3 fac6 	bl	80020d4 <HAL_I2C_Master_Receive>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800eb4c:	693b      	ldr	r3, [r7, #16]
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3718      	adds	r7, #24
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
	...

0800eb58 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b086      	sub	sp, #24
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	607a      	str	r2, [r7, #4]
 800eb62:	603b      	str	r3, [r7, #0]
 800eb64:	460b      	mov	r3, r1
 800eb66:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	2b3f      	cmp	r3, #63	; 0x3f
 800eb70:	d902      	bls.n	800eb78 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800eb72:	f06f 0303 	mvn.w	r3, #3
 800eb76:	e016      	b.n	800eba6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800eb78:	4a0d      	ldr	r2, [pc, #52]	; (800ebb0 <VL53L0X_WriteMulti+0x58>)
 800eb7a:	7afb      	ldrb	r3, [r7, #11]
 800eb7c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800eb7e:	683a      	ldr	r2, [r7, #0]
 800eb80:	6879      	ldr	r1, [r7, #4]
 800eb82:	480c      	ldr	r0, [pc, #48]	; (800ebb4 <VL53L0X_WriteMulti+0x5c>)
 800eb84:	f000 f9c8 	bl	800ef18 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	4908      	ldr	r1, [pc, #32]	; (800ebb0 <VL53L0X_WriteMulti+0x58>)
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f7ff ff9f 	bl	800ead4 <_I2CWrite>
 800eb96:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d001      	beq.n	800eba2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eb9e:	23ec      	movs	r3, #236	; 0xec
 800eba0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800eba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3718      	adds	r7, #24
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	20001a38 	.word	0x20001a38
 800ebb4:	20001a39 	.word	0x20001a39

0800ebb8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b086      	sub	sp, #24
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	607a      	str	r2, [r7, #4]
 800ebc2:	603b      	str	r3, [r7, #0]
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ebcc:	f107 030b 	add.w	r3, r7, #11
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f7ff ff7d 	bl	800ead4 <_I2CWrite>
 800ebda:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d002      	beq.n	800ebe8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ebe2:	23ec      	movs	r3, #236	; 0xec
 800ebe4:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ebe6:	e00c      	b.n	800ec02 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ebe8:	683a      	ldr	r2, [r7, #0]
 800ebea:	6879      	ldr	r1, [r7, #4]
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f7ff ff90 	bl	800eb12 <_I2CRead>
 800ebf2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d002      	beq.n	800ec00 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ebfa:	23ec      	movs	r3, #236	; 0xec
 800ebfc:	75fb      	strb	r3, [r7, #23]
 800ebfe:	e000      	b.n	800ec02 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ec00:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ec02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3718      	adds	r7, #24
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
	...

0800ec10 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	70fb      	strb	r3, [r7, #3]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec20:	2300      	movs	r3, #0
 800ec22:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ec24:	4a0b      	ldr	r2, [pc, #44]	; (800ec54 <VL53L0X_WrByte+0x44>)
 800ec26:	78fb      	ldrb	r3, [r7, #3]
 800ec28:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ec2a:	4a0a      	ldr	r2, [pc, #40]	; (800ec54 <VL53L0X_WrByte+0x44>)
 800ec2c:	78bb      	ldrb	r3, [r7, #2]
 800ec2e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ec30:	2202      	movs	r2, #2
 800ec32:	4908      	ldr	r1, [pc, #32]	; (800ec54 <VL53L0X_WrByte+0x44>)
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7ff ff4d 	bl	800ead4 <_I2CWrite>
 800ec3a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d001      	beq.n	800ec46 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ec42:	23ec      	movs	r3, #236	; 0xec
 800ec44:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ec46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3710      	adds	r7, #16
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	20001a38 	.word	0x20001a38

0800ec58 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	460b      	mov	r3, r1
 800ec62:	70fb      	strb	r3, [r7, #3]
 800ec64:	4613      	mov	r3, r2
 800ec66:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ec6c:	4a0e      	ldr	r2, [pc, #56]	; (800eca8 <VL53L0X_WrWord+0x50>)
 800ec6e:	78fb      	ldrb	r3, [r7, #3]
 800ec70:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ec72:	883b      	ldrh	r3, [r7, #0]
 800ec74:	0a1b      	lsrs	r3, r3, #8
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	b2da      	uxtb	r2, r3
 800ec7a:	4b0b      	ldr	r3, [pc, #44]	; (800eca8 <VL53L0X_WrWord+0x50>)
 800ec7c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ec7e:	883b      	ldrh	r3, [r7, #0]
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	4b09      	ldr	r3, [pc, #36]	; (800eca8 <VL53L0X_WrWord+0x50>)
 800ec84:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ec86:	2203      	movs	r2, #3
 800ec88:	4907      	ldr	r1, [pc, #28]	; (800eca8 <VL53L0X_WrWord+0x50>)
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f7ff ff22 	bl	800ead4 <_I2CWrite>
 800ec90:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d001      	beq.n	800ec9c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ec98:	23ec      	movs	r3, #236	; 0xec
 800ec9a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ec9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	20001a38 	.word	0x20001a38

0800ecac <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	4608      	mov	r0, r1
 800ecb6:	4611      	mov	r1, r2
 800ecb8:	461a      	mov	r2, r3
 800ecba:	4603      	mov	r3, r0
 800ecbc:	70fb      	strb	r3, [r7, #3]
 800ecbe:	460b      	mov	r3, r1
 800ecc0:	70bb      	strb	r3, [r7, #2]
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ecca:	f107 020e 	add.w	r2, r7, #14
 800ecce:	78fb      	ldrb	r3, [r7, #3]
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f000 f81e 	bl	800ed14 <VL53L0X_RdByte>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ecdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d110      	bne.n	800ed06 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ece4:	7bba      	ldrb	r2, [r7, #14]
 800ece6:	78bb      	ldrb	r3, [r7, #2]
 800ece8:	4013      	ands	r3, r2
 800ecea:	b2da      	uxtb	r2, r3
 800ecec:	787b      	ldrb	r3, [r7, #1]
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ecf4:	7bba      	ldrb	r2, [r7, #14]
 800ecf6:	78fb      	ldrb	r3, [r7, #3]
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f7ff ff88 	bl	800ec10 <VL53L0X_WrByte>
 800ed00:	4603      	mov	r3, r0
 800ed02:	73fb      	strb	r3, [r7, #15]
 800ed04:	e000      	b.n	800ed08 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ed06:	bf00      	nop
done:
    return Status;
 800ed08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed22:	2300      	movs	r3, #0
 800ed24:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ed26:	f107 030b 	add.w	r3, r7, #11
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	68f8      	ldr	r0, [r7, #12]
 800ed30:	f7ff fed0 	bl	800ead4 <_I2CWrite>
 800ed34:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d002      	beq.n	800ed42 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ed3c:	23ec      	movs	r3, #236	; 0xec
 800ed3e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ed40:	e00c      	b.n	800ed5c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ed42:	2201      	movs	r2, #1
 800ed44:	6879      	ldr	r1, [r7, #4]
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f7ff fee3 	bl	800eb12 <_I2CRead>
 800ed4c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d002      	beq.n	800ed5a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ed54:	23ec      	movs	r3, #236	; 0xec
 800ed56:	75fb      	strb	r3, [r7, #23]
 800ed58:	e000      	b.n	800ed5c <VL53L0X_RdByte+0x48>
    }
done:
 800ed5a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ed5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3718      	adds	r7, #24
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	460b      	mov	r3, r1
 800ed72:	607a      	str	r2, [r7, #4]
 800ed74:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed76:	2300      	movs	r3, #0
 800ed78:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ed7a:	f107 030b 	add.w	r3, r7, #11
 800ed7e:	2201      	movs	r2, #1
 800ed80:	4619      	mov	r1, r3
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f7ff fea6 	bl	800ead4 <_I2CWrite>
 800ed88:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ed90:	23ec      	movs	r3, #236	; 0xec
 800ed92:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ed94:	e017      	b.n	800edc6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ed96:	2202      	movs	r2, #2
 800ed98:	490e      	ldr	r1, [pc, #56]	; (800edd4 <VL53L0X_RdWord+0x6c>)
 800ed9a:	68f8      	ldr	r0, [r7, #12]
 800ed9c:	f7ff feb9 	bl	800eb12 <_I2CRead>
 800eda0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d002      	beq.n	800edae <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eda8:	23ec      	movs	r3, #236	; 0xec
 800edaa:	75fb      	strb	r3, [r7, #23]
        goto done;
 800edac:	e00b      	b.n	800edc6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800edae:	4b09      	ldr	r3, [pc, #36]	; (800edd4 <VL53L0X_RdWord+0x6c>)
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	021b      	lsls	r3, r3, #8
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	4b06      	ldr	r3, [pc, #24]	; (800edd4 <VL53L0X_RdWord+0x6c>)
 800edba:	785b      	ldrb	r3, [r3, #1]
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	4413      	add	r3, r2
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800edc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3718      	adds	r7, #24
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	20001a38 	.word	0x20001a38

0800edd8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800edd8:	b580      	push	{r7, lr}
 800edda:	b086      	sub	sp, #24
 800eddc:	af00      	add	r7, sp, #0
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	460b      	mov	r3, r1
 800ede2:	607a      	str	r2, [r7, #4]
 800ede4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ede6:	2300      	movs	r3, #0
 800ede8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800edea:	f107 030b 	add.w	r3, r7, #11
 800edee:	2201      	movs	r2, #1
 800edf0:	4619      	mov	r1, r3
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	f7ff fe6e 	bl	800ead4 <_I2CWrite>
 800edf8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d002      	beq.n	800ee06 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee00:	23ec      	movs	r3, #236	; 0xec
 800ee02:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ee04:	e01b      	b.n	800ee3e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ee06:	2204      	movs	r2, #4
 800ee08:	4910      	ldr	r1, [pc, #64]	; (800ee4c <VL53L0X_RdDWord+0x74>)
 800ee0a:	68f8      	ldr	r0, [r7, #12]
 800ee0c:	f7ff fe81 	bl	800eb12 <_I2CRead>
 800ee10:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d002      	beq.n	800ee1e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee18:	23ec      	movs	r3, #236	; 0xec
 800ee1a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ee1c:	e00f      	b.n	800ee3e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800ee1e:	4b0b      	ldr	r3, [pc, #44]	; (800ee4c <VL53L0X_RdDWord+0x74>)
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	061a      	lsls	r2, r3, #24
 800ee24:	4b09      	ldr	r3, [pc, #36]	; (800ee4c <VL53L0X_RdDWord+0x74>)
 800ee26:	785b      	ldrb	r3, [r3, #1]
 800ee28:	041b      	lsls	r3, r3, #16
 800ee2a:	441a      	add	r2, r3
 800ee2c:	4b07      	ldr	r3, [pc, #28]	; (800ee4c <VL53L0X_RdDWord+0x74>)
 800ee2e:	789b      	ldrb	r3, [r3, #2]
 800ee30:	021b      	lsls	r3, r3, #8
 800ee32:	4413      	add	r3, r2
 800ee34:	4a05      	ldr	r2, [pc, #20]	; (800ee4c <VL53L0X_RdDWord+0x74>)
 800ee36:	78d2      	ldrb	r2, [r2, #3]
 800ee38:	441a      	add	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800ee3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3718      	adds	r7, #24
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	20001a38 	.word	0x20001a38

0800ee50 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ee5c:	2002      	movs	r0, #2
 800ee5e:	f7f8 fac0 	bl	80073e2 <osDelay>
    return status;
 800ee62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
	...

0800ee70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800ee70:	f8df d034 	ldr.w	sp, [pc, #52]	; 800eea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800ee74:	f7fb f9e0 	bl	800a238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ee78:	480c      	ldr	r0, [pc, #48]	; (800eeac <LoopForever+0x6>)
  ldr r1, =_edata
 800ee7a:	490d      	ldr	r1, [pc, #52]	; (800eeb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ee7c:	4a0d      	ldr	r2, [pc, #52]	; (800eeb4 <LoopForever+0xe>)
  movs r3, #0
 800ee7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ee80:	e002      	b.n	800ee88 <LoopCopyDataInit>

0800ee82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ee82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ee84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ee86:	3304      	adds	r3, #4

0800ee88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ee88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ee8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ee8c:	d3f9      	bcc.n	800ee82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ee8e:	4a0a      	ldr	r2, [pc, #40]	; (800eeb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ee90:	4c0a      	ldr	r4, [pc, #40]	; (800eebc <LoopForever+0x16>)
  movs r3, #0
 800ee92:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ee94:	e001      	b.n	800ee9a <LoopFillZerobss>

0800ee96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ee96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ee98:	3204      	adds	r2, #4

0800ee9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ee9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ee9c:	d3fb      	bcc.n	800ee96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ee9e:	f000 f817 	bl	800eed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800eea2:	f7f9 fd09 	bl	80088b8 <main>

0800eea6 <LoopForever>:

LoopForever:
    b LoopForever
 800eea6:	e7fe      	b.n	800eea6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800eea8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800eeac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800eeb0:	200003cc 	.word	0x200003cc
  ldr r2, =_sidata
 800eeb4:	0800faf0 	.word	0x0800faf0
  ldr r2, =_sbss
 800eeb8:	200003cc 	.word	0x200003cc
  ldr r4, =_ebss
 800eebc:	20001a88 	.word	0x20001a88

0800eec0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800eec0:	e7fe      	b.n	800eec0 <ADC1_IRQHandler>
	...

0800eec4 <__errno>:
 800eec4:	4b01      	ldr	r3, [pc, #4]	; (800eecc <__errno+0x8>)
 800eec6:	6818      	ldr	r0, [r3, #0]
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	20000368 	.word	0x20000368

0800eed0 <__libc_init_array>:
 800eed0:	b570      	push	{r4, r5, r6, lr}
 800eed2:	4d0d      	ldr	r5, [pc, #52]	; (800ef08 <__libc_init_array+0x38>)
 800eed4:	4c0d      	ldr	r4, [pc, #52]	; (800ef0c <__libc_init_array+0x3c>)
 800eed6:	1b64      	subs	r4, r4, r5
 800eed8:	10a4      	asrs	r4, r4, #2
 800eeda:	2600      	movs	r6, #0
 800eedc:	42a6      	cmp	r6, r4
 800eede:	d109      	bne.n	800eef4 <__libc_init_array+0x24>
 800eee0:	4d0b      	ldr	r5, [pc, #44]	; (800ef10 <__libc_init_array+0x40>)
 800eee2:	4c0c      	ldr	r4, [pc, #48]	; (800ef14 <__libc_init_array+0x44>)
 800eee4:	f000 fcaa 	bl	800f83c <_init>
 800eee8:	1b64      	subs	r4, r4, r5
 800eeea:	10a4      	asrs	r4, r4, #2
 800eeec:	2600      	movs	r6, #0
 800eeee:	42a6      	cmp	r6, r4
 800eef0:	d105      	bne.n	800eefe <__libc_init_array+0x2e>
 800eef2:	bd70      	pop	{r4, r5, r6, pc}
 800eef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eef8:	4798      	blx	r3
 800eefa:	3601      	adds	r6, #1
 800eefc:	e7ee      	b.n	800eedc <__libc_init_array+0xc>
 800eefe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef02:	4798      	blx	r3
 800ef04:	3601      	adds	r6, #1
 800ef06:	e7f2      	b.n	800eeee <__libc_init_array+0x1e>
 800ef08:	0800fae8 	.word	0x0800fae8
 800ef0c:	0800fae8 	.word	0x0800fae8
 800ef10:	0800fae8 	.word	0x0800fae8
 800ef14:	0800faec 	.word	0x0800faec

0800ef18 <memcpy>:
 800ef18:	440a      	add	r2, r1
 800ef1a:	4291      	cmp	r1, r2
 800ef1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef20:	d100      	bne.n	800ef24 <memcpy+0xc>
 800ef22:	4770      	bx	lr
 800ef24:	b510      	push	{r4, lr}
 800ef26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef2e:	4291      	cmp	r1, r2
 800ef30:	d1f9      	bne.n	800ef26 <memcpy+0xe>
 800ef32:	bd10      	pop	{r4, pc}

0800ef34 <memset>:
 800ef34:	4402      	add	r2, r0
 800ef36:	4603      	mov	r3, r0
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d100      	bne.n	800ef3e <memset+0xa>
 800ef3c:	4770      	bx	lr
 800ef3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ef42:	e7f9      	b.n	800ef38 <memset+0x4>

0800ef44 <sniprintf>:
 800ef44:	b40c      	push	{r2, r3}
 800ef46:	b530      	push	{r4, r5, lr}
 800ef48:	4b17      	ldr	r3, [pc, #92]	; (800efa8 <sniprintf+0x64>)
 800ef4a:	1e0c      	subs	r4, r1, #0
 800ef4c:	681d      	ldr	r5, [r3, #0]
 800ef4e:	b09d      	sub	sp, #116	; 0x74
 800ef50:	da08      	bge.n	800ef64 <sniprintf+0x20>
 800ef52:	238b      	movs	r3, #139	; 0x8b
 800ef54:	602b      	str	r3, [r5, #0]
 800ef56:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5a:	b01d      	add	sp, #116	; 0x74
 800ef5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef60:	b002      	add	sp, #8
 800ef62:	4770      	bx	lr
 800ef64:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ef68:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef6c:	bf14      	ite	ne
 800ef6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ef72:	4623      	moveq	r3, r4
 800ef74:	9304      	str	r3, [sp, #16]
 800ef76:	9307      	str	r3, [sp, #28]
 800ef78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef7c:	9002      	str	r0, [sp, #8]
 800ef7e:	9006      	str	r0, [sp, #24]
 800ef80:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ef84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef86:	ab21      	add	r3, sp, #132	; 0x84
 800ef88:	a902      	add	r1, sp, #8
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	9301      	str	r3, [sp, #4]
 800ef8e:	f000 f907 	bl	800f1a0 <_svfiprintf_r>
 800ef92:	1c43      	adds	r3, r0, #1
 800ef94:	bfbc      	itt	lt
 800ef96:	238b      	movlt	r3, #139	; 0x8b
 800ef98:	602b      	strlt	r3, [r5, #0]
 800ef9a:	2c00      	cmp	r4, #0
 800ef9c:	d0dd      	beq.n	800ef5a <sniprintf+0x16>
 800ef9e:	9b02      	ldr	r3, [sp, #8]
 800efa0:	2200      	movs	r2, #0
 800efa2:	701a      	strb	r2, [r3, #0]
 800efa4:	e7d9      	b.n	800ef5a <sniprintf+0x16>
 800efa6:	bf00      	nop
 800efa8:	20000368 	.word	0x20000368

0800efac <strcpy>:
 800efac:	4603      	mov	r3, r0
 800efae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efb2:	f803 2b01 	strb.w	r2, [r3], #1
 800efb6:	2a00      	cmp	r2, #0
 800efb8:	d1f9      	bne.n	800efae <strcpy+0x2>
 800efba:	4770      	bx	lr

0800efbc <__retarget_lock_acquire_recursive>:
 800efbc:	4770      	bx	lr

0800efbe <__retarget_lock_release_recursive>:
 800efbe:	4770      	bx	lr

0800efc0 <sbrk_aligned>:
 800efc0:	b570      	push	{r4, r5, r6, lr}
 800efc2:	4e0e      	ldr	r6, [pc, #56]	; (800effc <sbrk_aligned+0x3c>)
 800efc4:	460c      	mov	r4, r1
 800efc6:	6831      	ldr	r1, [r6, #0]
 800efc8:	4605      	mov	r5, r0
 800efca:	b911      	cbnz	r1, 800efd2 <sbrk_aligned+0x12>
 800efcc:	f000 fb7c 	bl	800f6c8 <_sbrk_r>
 800efd0:	6030      	str	r0, [r6, #0]
 800efd2:	4621      	mov	r1, r4
 800efd4:	4628      	mov	r0, r5
 800efd6:	f000 fb77 	bl	800f6c8 <_sbrk_r>
 800efda:	1c43      	adds	r3, r0, #1
 800efdc:	d00a      	beq.n	800eff4 <sbrk_aligned+0x34>
 800efde:	1cc4      	adds	r4, r0, #3
 800efe0:	f024 0403 	bic.w	r4, r4, #3
 800efe4:	42a0      	cmp	r0, r4
 800efe6:	d007      	beq.n	800eff8 <sbrk_aligned+0x38>
 800efe8:	1a21      	subs	r1, r4, r0
 800efea:	4628      	mov	r0, r5
 800efec:	f000 fb6c 	bl	800f6c8 <_sbrk_r>
 800eff0:	3001      	adds	r0, #1
 800eff2:	d101      	bne.n	800eff8 <sbrk_aligned+0x38>
 800eff4:	f04f 34ff 	mov.w	r4, #4294967295
 800eff8:	4620      	mov	r0, r4
 800effa:	bd70      	pop	{r4, r5, r6, pc}
 800effc:	20001a80 	.word	0x20001a80

0800f000 <_malloc_r>:
 800f000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f004:	1ccd      	adds	r5, r1, #3
 800f006:	f025 0503 	bic.w	r5, r5, #3
 800f00a:	3508      	adds	r5, #8
 800f00c:	2d0c      	cmp	r5, #12
 800f00e:	bf38      	it	cc
 800f010:	250c      	movcc	r5, #12
 800f012:	2d00      	cmp	r5, #0
 800f014:	4607      	mov	r7, r0
 800f016:	db01      	blt.n	800f01c <_malloc_r+0x1c>
 800f018:	42a9      	cmp	r1, r5
 800f01a:	d905      	bls.n	800f028 <_malloc_r+0x28>
 800f01c:	230c      	movs	r3, #12
 800f01e:	603b      	str	r3, [r7, #0]
 800f020:	2600      	movs	r6, #0
 800f022:	4630      	mov	r0, r6
 800f024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f028:	4e2e      	ldr	r6, [pc, #184]	; (800f0e4 <_malloc_r+0xe4>)
 800f02a:	f000 fb77 	bl	800f71c <__malloc_lock>
 800f02e:	6833      	ldr	r3, [r6, #0]
 800f030:	461c      	mov	r4, r3
 800f032:	bb34      	cbnz	r4, 800f082 <_malloc_r+0x82>
 800f034:	4629      	mov	r1, r5
 800f036:	4638      	mov	r0, r7
 800f038:	f7ff ffc2 	bl	800efc0 <sbrk_aligned>
 800f03c:	1c43      	adds	r3, r0, #1
 800f03e:	4604      	mov	r4, r0
 800f040:	d14d      	bne.n	800f0de <_malloc_r+0xde>
 800f042:	6834      	ldr	r4, [r6, #0]
 800f044:	4626      	mov	r6, r4
 800f046:	2e00      	cmp	r6, #0
 800f048:	d140      	bne.n	800f0cc <_malloc_r+0xcc>
 800f04a:	6823      	ldr	r3, [r4, #0]
 800f04c:	4631      	mov	r1, r6
 800f04e:	4638      	mov	r0, r7
 800f050:	eb04 0803 	add.w	r8, r4, r3
 800f054:	f000 fb38 	bl	800f6c8 <_sbrk_r>
 800f058:	4580      	cmp	r8, r0
 800f05a:	d13a      	bne.n	800f0d2 <_malloc_r+0xd2>
 800f05c:	6821      	ldr	r1, [r4, #0]
 800f05e:	3503      	adds	r5, #3
 800f060:	1a6d      	subs	r5, r5, r1
 800f062:	f025 0503 	bic.w	r5, r5, #3
 800f066:	3508      	adds	r5, #8
 800f068:	2d0c      	cmp	r5, #12
 800f06a:	bf38      	it	cc
 800f06c:	250c      	movcc	r5, #12
 800f06e:	4629      	mov	r1, r5
 800f070:	4638      	mov	r0, r7
 800f072:	f7ff ffa5 	bl	800efc0 <sbrk_aligned>
 800f076:	3001      	adds	r0, #1
 800f078:	d02b      	beq.n	800f0d2 <_malloc_r+0xd2>
 800f07a:	6823      	ldr	r3, [r4, #0]
 800f07c:	442b      	add	r3, r5
 800f07e:	6023      	str	r3, [r4, #0]
 800f080:	e00e      	b.n	800f0a0 <_malloc_r+0xa0>
 800f082:	6822      	ldr	r2, [r4, #0]
 800f084:	1b52      	subs	r2, r2, r5
 800f086:	d41e      	bmi.n	800f0c6 <_malloc_r+0xc6>
 800f088:	2a0b      	cmp	r2, #11
 800f08a:	d916      	bls.n	800f0ba <_malloc_r+0xba>
 800f08c:	1961      	adds	r1, r4, r5
 800f08e:	42a3      	cmp	r3, r4
 800f090:	6025      	str	r5, [r4, #0]
 800f092:	bf18      	it	ne
 800f094:	6059      	strne	r1, [r3, #4]
 800f096:	6863      	ldr	r3, [r4, #4]
 800f098:	bf08      	it	eq
 800f09a:	6031      	streq	r1, [r6, #0]
 800f09c:	5162      	str	r2, [r4, r5]
 800f09e:	604b      	str	r3, [r1, #4]
 800f0a0:	4638      	mov	r0, r7
 800f0a2:	f104 060b 	add.w	r6, r4, #11
 800f0a6:	f000 fb3f 	bl	800f728 <__malloc_unlock>
 800f0aa:	f026 0607 	bic.w	r6, r6, #7
 800f0ae:	1d23      	adds	r3, r4, #4
 800f0b0:	1af2      	subs	r2, r6, r3
 800f0b2:	d0b6      	beq.n	800f022 <_malloc_r+0x22>
 800f0b4:	1b9b      	subs	r3, r3, r6
 800f0b6:	50a3      	str	r3, [r4, r2]
 800f0b8:	e7b3      	b.n	800f022 <_malloc_r+0x22>
 800f0ba:	6862      	ldr	r2, [r4, #4]
 800f0bc:	42a3      	cmp	r3, r4
 800f0be:	bf0c      	ite	eq
 800f0c0:	6032      	streq	r2, [r6, #0]
 800f0c2:	605a      	strne	r2, [r3, #4]
 800f0c4:	e7ec      	b.n	800f0a0 <_malloc_r+0xa0>
 800f0c6:	4623      	mov	r3, r4
 800f0c8:	6864      	ldr	r4, [r4, #4]
 800f0ca:	e7b2      	b.n	800f032 <_malloc_r+0x32>
 800f0cc:	4634      	mov	r4, r6
 800f0ce:	6876      	ldr	r6, [r6, #4]
 800f0d0:	e7b9      	b.n	800f046 <_malloc_r+0x46>
 800f0d2:	230c      	movs	r3, #12
 800f0d4:	603b      	str	r3, [r7, #0]
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	f000 fb26 	bl	800f728 <__malloc_unlock>
 800f0dc:	e7a1      	b.n	800f022 <_malloc_r+0x22>
 800f0de:	6025      	str	r5, [r4, #0]
 800f0e0:	e7de      	b.n	800f0a0 <_malloc_r+0xa0>
 800f0e2:	bf00      	nop
 800f0e4:	20001a7c 	.word	0x20001a7c

0800f0e8 <__ssputs_r>:
 800f0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0ec:	688e      	ldr	r6, [r1, #8]
 800f0ee:	429e      	cmp	r6, r3
 800f0f0:	4682      	mov	sl, r0
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	4690      	mov	r8, r2
 800f0f6:	461f      	mov	r7, r3
 800f0f8:	d838      	bhi.n	800f16c <__ssputs_r+0x84>
 800f0fa:	898a      	ldrh	r2, [r1, #12]
 800f0fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f100:	d032      	beq.n	800f168 <__ssputs_r+0x80>
 800f102:	6825      	ldr	r5, [r4, #0]
 800f104:	6909      	ldr	r1, [r1, #16]
 800f106:	eba5 0901 	sub.w	r9, r5, r1
 800f10a:	6965      	ldr	r5, [r4, #20]
 800f10c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f110:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f114:	3301      	adds	r3, #1
 800f116:	444b      	add	r3, r9
 800f118:	106d      	asrs	r5, r5, #1
 800f11a:	429d      	cmp	r5, r3
 800f11c:	bf38      	it	cc
 800f11e:	461d      	movcc	r5, r3
 800f120:	0553      	lsls	r3, r2, #21
 800f122:	d531      	bpl.n	800f188 <__ssputs_r+0xa0>
 800f124:	4629      	mov	r1, r5
 800f126:	f7ff ff6b 	bl	800f000 <_malloc_r>
 800f12a:	4606      	mov	r6, r0
 800f12c:	b950      	cbnz	r0, 800f144 <__ssputs_r+0x5c>
 800f12e:	230c      	movs	r3, #12
 800f130:	f8ca 3000 	str.w	r3, [sl]
 800f134:	89a3      	ldrh	r3, [r4, #12]
 800f136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f13a:	81a3      	strh	r3, [r4, #12]
 800f13c:	f04f 30ff 	mov.w	r0, #4294967295
 800f140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f144:	6921      	ldr	r1, [r4, #16]
 800f146:	464a      	mov	r2, r9
 800f148:	f7ff fee6 	bl	800ef18 <memcpy>
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f156:	81a3      	strh	r3, [r4, #12]
 800f158:	6126      	str	r6, [r4, #16]
 800f15a:	6165      	str	r5, [r4, #20]
 800f15c:	444e      	add	r6, r9
 800f15e:	eba5 0509 	sub.w	r5, r5, r9
 800f162:	6026      	str	r6, [r4, #0]
 800f164:	60a5      	str	r5, [r4, #8]
 800f166:	463e      	mov	r6, r7
 800f168:	42be      	cmp	r6, r7
 800f16a:	d900      	bls.n	800f16e <__ssputs_r+0x86>
 800f16c:	463e      	mov	r6, r7
 800f16e:	6820      	ldr	r0, [r4, #0]
 800f170:	4632      	mov	r2, r6
 800f172:	4641      	mov	r1, r8
 800f174:	f000 fab8 	bl	800f6e8 <memmove>
 800f178:	68a3      	ldr	r3, [r4, #8]
 800f17a:	1b9b      	subs	r3, r3, r6
 800f17c:	60a3      	str	r3, [r4, #8]
 800f17e:	6823      	ldr	r3, [r4, #0]
 800f180:	4433      	add	r3, r6
 800f182:	6023      	str	r3, [r4, #0]
 800f184:	2000      	movs	r0, #0
 800f186:	e7db      	b.n	800f140 <__ssputs_r+0x58>
 800f188:	462a      	mov	r2, r5
 800f18a:	f000 fb1f 	bl	800f7cc <_realloc_r>
 800f18e:	4606      	mov	r6, r0
 800f190:	2800      	cmp	r0, #0
 800f192:	d1e1      	bne.n	800f158 <__ssputs_r+0x70>
 800f194:	6921      	ldr	r1, [r4, #16]
 800f196:	4650      	mov	r0, sl
 800f198:	f000 facc 	bl	800f734 <_free_r>
 800f19c:	e7c7      	b.n	800f12e <__ssputs_r+0x46>
	...

0800f1a0 <_svfiprintf_r>:
 800f1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a4:	4698      	mov	r8, r3
 800f1a6:	898b      	ldrh	r3, [r1, #12]
 800f1a8:	061b      	lsls	r3, r3, #24
 800f1aa:	b09d      	sub	sp, #116	; 0x74
 800f1ac:	4607      	mov	r7, r0
 800f1ae:	460d      	mov	r5, r1
 800f1b0:	4614      	mov	r4, r2
 800f1b2:	d50e      	bpl.n	800f1d2 <_svfiprintf_r+0x32>
 800f1b4:	690b      	ldr	r3, [r1, #16]
 800f1b6:	b963      	cbnz	r3, 800f1d2 <_svfiprintf_r+0x32>
 800f1b8:	2140      	movs	r1, #64	; 0x40
 800f1ba:	f7ff ff21 	bl	800f000 <_malloc_r>
 800f1be:	6028      	str	r0, [r5, #0]
 800f1c0:	6128      	str	r0, [r5, #16]
 800f1c2:	b920      	cbnz	r0, 800f1ce <_svfiprintf_r+0x2e>
 800f1c4:	230c      	movs	r3, #12
 800f1c6:	603b      	str	r3, [r7, #0]
 800f1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1cc:	e0d1      	b.n	800f372 <_svfiprintf_r+0x1d2>
 800f1ce:	2340      	movs	r3, #64	; 0x40
 800f1d0:	616b      	str	r3, [r5, #20]
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800f1d6:	2320      	movs	r3, #32
 800f1d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1e0:	2330      	movs	r3, #48	; 0x30
 800f1e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f38c <_svfiprintf_r+0x1ec>
 800f1e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1ea:	f04f 0901 	mov.w	r9, #1
 800f1ee:	4623      	mov	r3, r4
 800f1f0:	469a      	mov	sl, r3
 800f1f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1f6:	b10a      	cbz	r2, 800f1fc <_svfiprintf_r+0x5c>
 800f1f8:	2a25      	cmp	r2, #37	; 0x25
 800f1fa:	d1f9      	bne.n	800f1f0 <_svfiprintf_r+0x50>
 800f1fc:	ebba 0b04 	subs.w	fp, sl, r4
 800f200:	d00b      	beq.n	800f21a <_svfiprintf_r+0x7a>
 800f202:	465b      	mov	r3, fp
 800f204:	4622      	mov	r2, r4
 800f206:	4629      	mov	r1, r5
 800f208:	4638      	mov	r0, r7
 800f20a:	f7ff ff6d 	bl	800f0e8 <__ssputs_r>
 800f20e:	3001      	adds	r0, #1
 800f210:	f000 80aa 	beq.w	800f368 <_svfiprintf_r+0x1c8>
 800f214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f216:	445a      	add	r2, fp
 800f218:	9209      	str	r2, [sp, #36]	; 0x24
 800f21a:	f89a 3000 	ldrb.w	r3, [sl]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	f000 80a2 	beq.w	800f368 <_svfiprintf_r+0x1c8>
 800f224:	2300      	movs	r3, #0
 800f226:	f04f 32ff 	mov.w	r2, #4294967295
 800f22a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f22e:	f10a 0a01 	add.w	sl, sl, #1
 800f232:	9304      	str	r3, [sp, #16]
 800f234:	9307      	str	r3, [sp, #28]
 800f236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f23a:	931a      	str	r3, [sp, #104]	; 0x68
 800f23c:	4654      	mov	r4, sl
 800f23e:	2205      	movs	r2, #5
 800f240:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f244:	4851      	ldr	r0, [pc, #324]	; (800f38c <_svfiprintf_r+0x1ec>)
 800f246:	f7f0 fff3 	bl	8000230 <memchr>
 800f24a:	9a04      	ldr	r2, [sp, #16]
 800f24c:	b9d8      	cbnz	r0, 800f286 <_svfiprintf_r+0xe6>
 800f24e:	06d0      	lsls	r0, r2, #27
 800f250:	bf44      	itt	mi
 800f252:	2320      	movmi	r3, #32
 800f254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f258:	0711      	lsls	r1, r2, #28
 800f25a:	bf44      	itt	mi
 800f25c:	232b      	movmi	r3, #43	; 0x2b
 800f25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f262:	f89a 3000 	ldrb.w	r3, [sl]
 800f266:	2b2a      	cmp	r3, #42	; 0x2a
 800f268:	d015      	beq.n	800f296 <_svfiprintf_r+0xf6>
 800f26a:	9a07      	ldr	r2, [sp, #28]
 800f26c:	4654      	mov	r4, sl
 800f26e:	2000      	movs	r0, #0
 800f270:	f04f 0c0a 	mov.w	ip, #10
 800f274:	4621      	mov	r1, r4
 800f276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f27a:	3b30      	subs	r3, #48	; 0x30
 800f27c:	2b09      	cmp	r3, #9
 800f27e:	d94e      	bls.n	800f31e <_svfiprintf_r+0x17e>
 800f280:	b1b0      	cbz	r0, 800f2b0 <_svfiprintf_r+0x110>
 800f282:	9207      	str	r2, [sp, #28]
 800f284:	e014      	b.n	800f2b0 <_svfiprintf_r+0x110>
 800f286:	eba0 0308 	sub.w	r3, r0, r8
 800f28a:	fa09 f303 	lsl.w	r3, r9, r3
 800f28e:	4313      	orrs	r3, r2
 800f290:	9304      	str	r3, [sp, #16]
 800f292:	46a2      	mov	sl, r4
 800f294:	e7d2      	b.n	800f23c <_svfiprintf_r+0x9c>
 800f296:	9b03      	ldr	r3, [sp, #12]
 800f298:	1d19      	adds	r1, r3, #4
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	9103      	str	r1, [sp, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	bfbb      	ittet	lt
 800f2a2:	425b      	neglt	r3, r3
 800f2a4:	f042 0202 	orrlt.w	r2, r2, #2
 800f2a8:	9307      	strge	r3, [sp, #28]
 800f2aa:	9307      	strlt	r3, [sp, #28]
 800f2ac:	bfb8      	it	lt
 800f2ae:	9204      	strlt	r2, [sp, #16]
 800f2b0:	7823      	ldrb	r3, [r4, #0]
 800f2b2:	2b2e      	cmp	r3, #46	; 0x2e
 800f2b4:	d10c      	bne.n	800f2d0 <_svfiprintf_r+0x130>
 800f2b6:	7863      	ldrb	r3, [r4, #1]
 800f2b8:	2b2a      	cmp	r3, #42	; 0x2a
 800f2ba:	d135      	bne.n	800f328 <_svfiprintf_r+0x188>
 800f2bc:	9b03      	ldr	r3, [sp, #12]
 800f2be:	1d1a      	adds	r2, r3, #4
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	9203      	str	r2, [sp, #12]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	bfb8      	it	lt
 800f2c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2cc:	3402      	adds	r4, #2
 800f2ce:	9305      	str	r3, [sp, #20]
 800f2d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f39c <_svfiprintf_r+0x1fc>
 800f2d4:	7821      	ldrb	r1, [r4, #0]
 800f2d6:	2203      	movs	r2, #3
 800f2d8:	4650      	mov	r0, sl
 800f2da:	f7f0 ffa9 	bl	8000230 <memchr>
 800f2de:	b140      	cbz	r0, 800f2f2 <_svfiprintf_r+0x152>
 800f2e0:	2340      	movs	r3, #64	; 0x40
 800f2e2:	eba0 000a 	sub.w	r0, r0, sl
 800f2e6:	fa03 f000 	lsl.w	r0, r3, r0
 800f2ea:	9b04      	ldr	r3, [sp, #16]
 800f2ec:	4303      	orrs	r3, r0
 800f2ee:	3401      	adds	r4, #1
 800f2f0:	9304      	str	r3, [sp, #16]
 800f2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2f6:	4826      	ldr	r0, [pc, #152]	; (800f390 <_svfiprintf_r+0x1f0>)
 800f2f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2fc:	2206      	movs	r2, #6
 800f2fe:	f7f0 ff97 	bl	8000230 <memchr>
 800f302:	2800      	cmp	r0, #0
 800f304:	d038      	beq.n	800f378 <_svfiprintf_r+0x1d8>
 800f306:	4b23      	ldr	r3, [pc, #140]	; (800f394 <_svfiprintf_r+0x1f4>)
 800f308:	bb1b      	cbnz	r3, 800f352 <_svfiprintf_r+0x1b2>
 800f30a:	9b03      	ldr	r3, [sp, #12]
 800f30c:	3307      	adds	r3, #7
 800f30e:	f023 0307 	bic.w	r3, r3, #7
 800f312:	3308      	adds	r3, #8
 800f314:	9303      	str	r3, [sp, #12]
 800f316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f318:	4433      	add	r3, r6
 800f31a:	9309      	str	r3, [sp, #36]	; 0x24
 800f31c:	e767      	b.n	800f1ee <_svfiprintf_r+0x4e>
 800f31e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f322:	460c      	mov	r4, r1
 800f324:	2001      	movs	r0, #1
 800f326:	e7a5      	b.n	800f274 <_svfiprintf_r+0xd4>
 800f328:	2300      	movs	r3, #0
 800f32a:	3401      	adds	r4, #1
 800f32c:	9305      	str	r3, [sp, #20]
 800f32e:	4619      	mov	r1, r3
 800f330:	f04f 0c0a 	mov.w	ip, #10
 800f334:	4620      	mov	r0, r4
 800f336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f33a:	3a30      	subs	r2, #48	; 0x30
 800f33c:	2a09      	cmp	r2, #9
 800f33e:	d903      	bls.n	800f348 <_svfiprintf_r+0x1a8>
 800f340:	2b00      	cmp	r3, #0
 800f342:	d0c5      	beq.n	800f2d0 <_svfiprintf_r+0x130>
 800f344:	9105      	str	r1, [sp, #20]
 800f346:	e7c3      	b.n	800f2d0 <_svfiprintf_r+0x130>
 800f348:	fb0c 2101 	mla	r1, ip, r1, r2
 800f34c:	4604      	mov	r4, r0
 800f34e:	2301      	movs	r3, #1
 800f350:	e7f0      	b.n	800f334 <_svfiprintf_r+0x194>
 800f352:	ab03      	add	r3, sp, #12
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	462a      	mov	r2, r5
 800f358:	4b0f      	ldr	r3, [pc, #60]	; (800f398 <_svfiprintf_r+0x1f8>)
 800f35a:	a904      	add	r1, sp, #16
 800f35c:	4638      	mov	r0, r7
 800f35e:	f3af 8000 	nop.w
 800f362:	1c42      	adds	r2, r0, #1
 800f364:	4606      	mov	r6, r0
 800f366:	d1d6      	bne.n	800f316 <_svfiprintf_r+0x176>
 800f368:	89ab      	ldrh	r3, [r5, #12]
 800f36a:	065b      	lsls	r3, r3, #25
 800f36c:	f53f af2c 	bmi.w	800f1c8 <_svfiprintf_r+0x28>
 800f370:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f372:	b01d      	add	sp, #116	; 0x74
 800f374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f378:	ab03      	add	r3, sp, #12
 800f37a:	9300      	str	r3, [sp, #0]
 800f37c:	462a      	mov	r2, r5
 800f37e:	4b06      	ldr	r3, [pc, #24]	; (800f398 <_svfiprintf_r+0x1f8>)
 800f380:	a904      	add	r1, sp, #16
 800f382:	4638      	mov	r0, r7
 800f384:	f000 f87a 	bl	800f47c <_printf_i>
 800f388:	e7eb      	b.n	800f362 <_svfiprintf_r+0x1c2>
 800f38a:	bf00      	nop
 800f38c:	0800faac 	.word	0x0800faac
 800f390:	0800fab6 	.word	0x0800fab6
 800f394:	00000000 	.word	0x00000000
 800f398:	0800f0e9 	.word	0x0800f0e9
 800f39c:	0800fab2 	.word	0x0800fab2

0800f3a0 <_printf_common>:
 800f3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a4:	4616      	mov	r6, r2
 800f3a6:	4699      	mov	r9, r3
 800f3a8:	688a      	ldr	r2, [r1, #8]
 800f3aa:	690b      	ldr	r3, [r1, #16]
 800f3ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	bfb8      	it	lt
 800f3b4:	4613      	movlt	r3, r2
 800f3b6:	6033      	str	r3, [r6, #0]
 800f3b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3bc:	4607      	mov	r7, r0
 800f3be:	460c      	mov	r4, r1
 800f3c0:	b10a      	cbz	r2, 800f3c6 <_printf_common+0x26>
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	6033      	str	r3, [r6, #0]
 800f3c6:	6823      	ldr	r3, [r4, #0]
 800f3c8:	0699      	lsls	r1, r3, #26
 800f3ca:	bf42      	ittt	mi
 800f3cc:	6833      	ldrmi	r3, [r6, #0]
 800f3ce:	3302      	addmi	r3, #2
 800f3d0:	6033      	strmi	r3, [r6, #0]
 800f3d2:	6825      	ldr	r5, [r4, #0]
 800f3d4:	f015 0506 	ands.w	r5, r5, #6
 800f3d8:	d106      	bne.n	800f3e8 <_printf_common+0x48>
 800f3da:	f104 0a19 	add.w	sl, r4, #25
 800f3de:	68e3      	ldr	r3, [r4, #12]
 800f3e0:	6832      	ldr	r2, [r6, #0]
 800f3e2:	1a9b      	subs	r3, r3, r2
 800f3e4:	42ab      	cmp	r3, r5
 800f3e6:	dc26      	bgt.n	800f436 <_printf_common+0x96>
 800f3e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f3ec:	1e13      	subs	r3, r2, #0
 800f3ee:	6822      	ldr	r2, [r4, #0]
 800f3f0:	bf18      	it	ne
 800f3f2:	2301      	movne	r3, #1
 800f3f4:	0692      	lsls	r2, r2, #26
 800f3f6:	d42b      	bmi.n	800f450 <_printf_common+0xb0>
 800f3f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3fc:	4649      	mov	r1, r9
 800f3fe:	4638      	mov	r0, r7
 800f400:	47c0      	blx	r8
 800f402:	3001      	adds	r0, #1
 800f404:	d01e      	beq.n	800f444 <_printf_common+0xa4>
 800f406:	6823      	ldr	r3, [r4, #0]
 800f408:	68e5      	ldr	r5, [r4, #12]
 800f40a:	6832      	ldr	r2, [r6, #0]
 800f40c:	f003 0306 	and.w	r3, r3, #6
 800f410:	2b04      	cmp	r3, #4
 800f412:	bf08      	it	eq
 800f414:	1aad      	subeq	r5, r5, r2
 800f416:	68a3      	ldr	r3, [r4, #8]
 800f418:	6922      	ldr	r2, [r4, #16]
 800f41a:	bf0c      	ite	eq
 800f41c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f420:	2500      	movne	r5, #0
 800f422:	4293      	cmp	r3, r2
 800f424:	bfc4      	itt	gt
 800f426:	1a9b      	subgt	r3, r3, r2
 800f428:	18ed      	addgt	r5, r5, r3
 800f42a:	2600      	movs	r6, #0
 800f42c:	341a      	adds	r4, #26
 800f42e:	42b5      	cmp	r5, r6
 800f430:	d11a      	bne.n	800f468 <_printf_common+0xc8>
 800f432:	2000      	movs	r0, #0
 800f434:	e008      	b.n	800f448 <_printf_common+0xa8>
 800f436:	2301      	movs	r3, #1
 800f438:	4652      	mov	r2, sl
 800f43a:	4649      	mov	r1, r9
 800f43c:	4638      	mov	r0, r7
 800f43e:	47c0      	blx	r8
 800f440:	3001      	adds	r0, #1
 800f442:	d103      	bne.n	800f44c <_printf_common+0xac>
 800f444:	f04f 30ff 	mov.w	r0, #4294967295
 800f448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f44c:	3501      	adds	r5, #1
 800f44e:	e7c6      	b.n	800f3de <_printf_common+0x3e>
 800f450:	18e1      	adds	r1, r4, r3
 800f452:	1c5a      	adds	r2, r3, #1
 800f454:	2030      	movs	r0, #48	; 0x30
 800f456:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f45a:	4422      	add	r2, r4
 800f45c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f464:	3302      	adds	r3, #2
 800f466:	e7c7      	b.n	800f3f8 <_printf_common+0x58>
 800f468:	2301      	movs	r3, #1
 800f46a:	4622      	mov	r2, r4
 800f46c:	4649      	mov	r1, r9
 800f46e:	4638      	mov	r0, r7
 800f470:	47c0      	blx	r8
 800f472:	3001      	adds	r0, #1
 800f474:	d0e6      	beq.n	800f444 <_printf_common+0xa4>
 800f476:	3601      	adds	r6, #1
 800f478:	e7d9      	b.n	800f42e <_printf_common+0x8e>
	...

0800f47c <_printf_i>:
 800f47c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f480:	7e0f      	ldrb	r7, [r1, #24]
 800f482:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f484:	2f78      	cmp	r7, #120	; 0x78
 800f486:	4691      	mov	r9, r2
 800f488:	4680      	mov	r8, r0
 800f48a:	460c      	mov	r4, r1
 800f48c:	469a      	mov	sl, r3
 800f48e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f492:	d807      	bhi.n	800f4a4 <_printf_i+0x28>
 800f494:	2f62      	cmp	r7, #98	; 0x62
 800f496:	d80a      	bhi.n	800f4ae <_printf_i+0x32>
 800f498:	2f00      	cmp	r7, #0
 800f49a:	f000 80d8 	beq.w	800f64e <_printf_i+0x1d2>
 800f49e:	2f58      	cmp	r7, #88	; 0x58
 800f4a0:	f000 80a3 	beq.w	800f5ea <_printf_i+0x16e>
 800f4a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f4ac:	e03a      	b.n	800f524 <_printf_i+0xa8>
 800f4ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f4b2:	2b15      	cmp	r3, #21
 800f4b4:	d8f6      	bhi.n	800f4a4 <_printf_i+0x28>
 800f4b6:	a101      	add	r1, pc, #4	; (adr r1, 800f4bc <_printf_i+0x40>)
 800f4b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4bc:	0800f515 	.word	0x0800f515
 800f4c0:	0800f529 	.word	0x0800f529
 800f4c4:	0800f4a5 	.word	0x0800f4a5
 800f4c8:	0800f4a5 	.word	0x0800f4a5
 800f4cc:	0800f4a5 	.word	0x0800f4a5
 800f4d0:	0800f4a5 	.word	0x0800f4a5
 800f4d4:	0800f529 	.word	0x0800f529
 800f4d8:	0800f4a5 	.word	0x0800f4a5
 800f4dc:	0800f4a5 	.word	0x0800f4a5
 800f4e0:	0800f4a5 	.word	0x0800f4a5
 800f4e4:	0800f4a5 	.word	0x0800f4a5
 800f4e8:	0800f635 	.word	0x0800f635
 800f4ec:	0800f559 	.word	0x0800f559
 800f4f0:	0800f617 	.word	0x0800f617
 800f4f4:	0800f4a5 	.word	0x0800f4a5
 800f4f8:	0800f4a5 	.word	0x0800f4a5
 800f4fc:	0800f657 	.word	0x0800f657
 800f500:	0800f4a5 	.word	0x0800f4a5
 800f504:	0800f559 	.word	0x0800f559
 800f508:	0800f4a5 	.word	0x0800f4a5
 800f50c:	0800f4a5 	.word	0x0800f4a5
 800f510:	0800f61f 	.word	0x0800f61f
 800f514:	682b      	ldr	r3, [r5, #0]
 800f516:	1d1a      	adds	r2, r3, #4
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	602a      	str	r2, [r5, #0]
 800f51c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f524:	2301      	movs	r3, #1
 800f526:	e0a3      	b.n	800f670 <_printf_i+0x1f4>
 800f528:	6820      	ldr	r0, [r4, #0]
 800f52a:	6829      	ldr	r1, [r5, #0]
 800f52c:	0606      	lsls	r6, r0, #24
 800f52e:	f101 0304 	add.w	r3, r1, #4
 800f532:	d50a      	bpl.n	800f54a <_printf_i+0xce>
 800f534:	680e      	ldr	r6, [r1, #0]
 800f536:	602b      	str	r3, [r5, #0]
 800f538:	2e00      	cmp	r6, #0
 800f53a:	da03      	bge.n	800f544 <_printf_i+0xc8>
 800f53c:	232d      	movs	r3, #45	; 0x2d
 800f53e:	4276      	negs	r6, r6
 800f540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f544:	485e      	ldr	r0, [pc, #376]	; (800f6c0 <_printf_i+0x244>)
 800f546:	230a      	movs	r3, #10
 800f548:	e019      	b.n	800f57e <_printf_i+0x102>
 800f54a:	680e      	ldr	r6, [r1, #0]
 800f54c:	602b      	str	r3, [r5, #0]
 800f54e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f552:	bf18      	it	ne
 800f554:	b236      	sxthne	r6, r6
 800f556:	e7ef      	b.n	800f538 <_printf_i+0xbc>
 800f558:	682b      	ldr	r3, [r5, #0]
 800f55a:	6820      	ldr	r0, [r4, #0]
 800f55c:	1d19      	adds	r1, r3, #4
 800f55e:	6029      	str	r1, [r5, #0]
 800f560:	0601      	lsls	r1, r0, #24
 800f562:	d501      	bpl.n	800f568 <_printf_i+0xec>
 800f564:	681e      	ldr	r6, [r3, #0]
 800f566:	e002      	b.n	800f56e <_printf_i+0xf2>
 800f568:	0646      	lsls	r6, r0, #25
 800f56a:	d5fb      	bpl.n	800f564 <_printf_i+0xe8>
 800f56c:	881e      	ldrh	r6, [r3, #0]
 800f56e:	4854      	ldr	r0, [pc, #336]	; (800f6c0 <_printf_i+0x244>)
 800f570:	2f6f      	cmp	r7, #111	; 0x6f
 800f572:	bf0c      	ite	eq
 800f574:	2308      	moveq	r3, #8
 800f576:	230a      	movne	r3, #10
 800f578:	2100      	movs	r1, #0
 800f57a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f57e:	6865      	ldr	r5, [r4, #4]
 800f580:	60a5      	str	r5, [r4, #8]
 800f582:	2d00      	cmp	r5, #0
 800f584:	bfa2      	ittt	ge
 800f586:	6821      	ldrge	r1, [r4, #0]
 800f588:	f021 0104 	bicge.w	r1, r1, #4
 800f58c:	6021      	strge	r1, [r4, #0]
 800f58e:	b90e      	cbnz	r6, 800f594 <_printf_i+0x118>
 800f590:	2d00      	cmp	r5, #0
 800f592:	d04d      	beq.n	800f630 <_printf_i+0x1b4>
 800f594:	4615      	mov	r5, r2
 800f596:	fbb6 f1f3 	udiv	r1, r6, r3
 800f59a:	fb03 6711 	mls	r7, r3, r1, r6
 800f59e:	5dc7      	ldrb	r7, [r0, r7]
 800f5a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f5a4:	4637      	mov	r7, r6
 800f5a6:	42bb      	cmp	r3, r7
 800f5a8:	460e      	mov	r6, r1
 800f5aa:	d9f4      	bls.n	800f596 <_printf_i+0x11a>
 800f5ac:	2b08      	cmp	r3, #8
 800f5ae:	d10b      	bne.n	800f5c8 <_printf_i+0x14c>
 800f5b0:	6823      	ldr	r3, [r4, #0]
 800f5b2:	07de      	lsls	r6, r3, #31
 800f5b4:	d508      	bpl.n	800f5c8 <_printf_i+0x14c>
 800f5b6:	6923      	ldr	r3, [r4, #16]
 800f5b8:	6861      	ldr	r1, [r4, #4]
 800f5ba:	4299      	cmp	r1, r3
 800f5bc:	bfde      	ittt	le
 800f5be:	2330      	movle	r3, #48	; 0x30
 800f5c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f5c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f5c8:	1b52      	subs	r2, r2, r5
 800f5ca:	6122      	str	r2, [r4, #16]
 800f5cc:	f8cd a000 	str.w	sl, [sp]
 800f5d0:	464b      	mov	r3, r9
 800f5d2:	aa03      	add	r2, sp, #12
 800f5d4:	4621      	mov	r1, r4
 800f5d6:	4640      	mov	r0, r8
 800f5d8:	f7ff fee2 	bl	800f3a0 <_printf_common>
 800f5dc:	3001      	adds	r0, #1
 800f5de:	d14c      	bne.n	800f67a <_printf_i+0x1fe>
 800f5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5e4:	b004      	add	sp, #16
 800f5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ea:	4835      	ldr	r0, [pc, #212]	; (800f6c0 <_printf_i+0x244>)
 800f5ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f5f0:	6829      	ldr	r1, [r5, #0]
 800f5f2:	6823      	ldr	r3, [r4, #0]
 800f5f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f5f8:	6029      	str	r1, [r5, #0]
 800f5fa:	061d      	lsls	r5, r3, #24
 800f5fc:	d514      	bpl.n	800f628 <_printf_i+0x1ac>
 800f5fe:	07df      	lsls	r7, r3, #31
 800f600:	bf44      	itt	mi
 800f602:	f043 0320 	orrmi.w	r3, r3, #32
 800f606:	6023      	strmi	r3, [r4, #0]
 800f608:	b91e      	cbnz	r6, 800f612 <_printf_i+0x196>
 800f60a:	6823      	ldr	r3, [r4, #0]
 800f60c:	f023 0320 	bic.w	r3, r3, #32
 800f610:	6023      	str	r3, [r4, #0]
 800f612:	2310      	movs	r3, #16
 800f614:	e7b0      	b.n	800f578 <_printf_i+0xfc>
 800f616:	6823      	ldr	r3, [r4, #0]
 800f618:	f043 0320 	orr.w	r3, r3, #32
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	2378      	movs	r3, #120	; 0x78
 800f620:	4828      	ldr	r0, [pc, #160]	; (800f6c4 <_printf_i+0x248>)
 800f622:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f626:	e7e3      	b.n	800f5f0 <_printf_i+0x174>
 800f628:	0659      	lsls	r1, r3, #25
 800f62a:	bf48      	it	mi
 800f62c:	b2b6      	uxthmi	r6, r6
 800f62e:	e7e6      	b.n	800f5fe <_printf_i+0x182>
 800f630:	4615      	mov	r5, r2
 800f632:	e7bb      	b.n	800f5ac <_printf_i+0x130>
 800f634:	682b      	ldr	r3, [r5, #0]
 800f636:	6826      	ldr	r6, [r4, #0]
 800f638:	6961      	ldr	r1, [r4, #20]
 800f63a:	1d18      	adds	r0, r3, #4
 800f63c:	6028      	str	r0, [r5, #0]
 800f63e:	0635      	lsls	r5, r6, #24
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	d501      	bpl.n	800f648 <_printf_i+0x1cc>
 800f644:	6019      	str	r1, [r3, #0]
 800f646:	e002      	b.n	800f64e <_printf_i+0x1d2>
 800f648:	0670      	lsls	r0, r6, #25
 800f64a:	d5fb      	bpl.n	800f644 <_printf_i+0x1c8>
 800f64c:	8019      	strh	r1, [r3, #0]
 800f64e:	2300      	movs	r3, #0
 800f650:	6123      	str	r3, [r4, #16]
 800f652:	4615      	mov	r5, r2
 800f654:	e7ba      	b.n	800f5cc <_printf_i+0x150>
 800f656:	682b      	ldr	r3, [r5, #0]
 800f658:	1d1a      	adds	r2, r3, #4
 800f65a:	602a      	str	r2, [r5, #0]
 800f65c:	681d      	ldr	r5, [r3, #0]
 800f65e:	6862      	ldr	r2, [r4, #4]
 800f660:	2100      	movs	r1, #0
 800f662:	4628      	mov	r0, r5
 800f664:	f7f0 fde4 	bl	8000230 <memchr>
 800f668:	b108      	cbz	r0, 800f66e <_printf_i+0x1f2>
 800f66a:	1b40      	subs	r0, r0, r5
 800f66c:	6060      	str	r0, [r4, #4]
 800f66e:	6863      	ldr	r3, [r4, #4]
 800f670:	6123      	str	r3, [r4, #16]
 800f672:	2300      	movs	r3, #0
 800f674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f678:	e7a8      	b.n	800f5cc <_printf_i+0x150>
 800f67a:	6923      	ldr	r3, [r4, #16]
 800f67c:	462a      	mov	r2, r5
 800f67e:	4649      	mov	r1, r9
 800f680:	4640      	mov	r0, r8
 800f682:	47d0      	blx	sl
 800f684:	3001      	adds	r0, #1
 800f686:	d0ab      	beq.n	800f5e0 <_printf_i+0x164>
 800f688:	6823      	ldr	r3, [r4, #0]
 800f68a:	079b      	lsls	r3, r3, #30
 800f68c:	d413      	bmi.n	800f6b6 <_printf_i+0x23a>
 800f68e:	68e0      	ldr	r0, [r4, #12]
 800f690:	9b03      	ldr	r3, [sp, #12]
 800f692:	4298      	cmp	r0, r3
 800f694:	bfb8      	it	lt
 800f696:	4618      	movlt	r0, r3
 800f698:	e7a4      	b.n	800f5e4 <_printf_i+0x168>
 800f69a:	2301      	movs	r3, #1
 800f69c:	4632      	mov	r2, r6
 800f69e:	4649      	mov	r1, r9
 800f6a0:	4640      	mov	r0, r8
 800f6a2:	47d0      	blx	sl
 800f6a4:	3001      	adds	r0, #1
 800f6a6:	d09b      	beq.n	800f5e0 <_printf_i+0x164>
 800f6a8:	3501      	adds	r5, #1
 800f6aa:	68e3      	ldr	r3, [r4, #12]
 800f6ac:	9903      	ldr	r1, [sp, #12]
 800f6ae:	1a5b      	subs	r3, r3, r1
 800f6b0:	42ab      	cmp	r3, r5
 800f6b2:	dcf2      	bgt.n	800f69a <_printf_i+0x21e>
 800f6b4:	e7eb      	b.n	800f68e <_printf_i+0x212>
 800f6b6:	2500      	movs	r5, #0
 800f6b8:	f104 0619 	add.w	r6, r4, #25
 800f6bc:	e7f5      	b.n	800f6aa <_printf_i+0x22e>
 800f6be:	bf00      	nop
 800f6c0:	0800fabd 	.word	0x0800fabd
 800f6c4:	0800face 	.word	0x0800face

0800f6c8 <_sbrk_r>:
 800f6c8:	b538      	push	{r3, r4, r5, lr}
 800f6ca:	4d06      	ldr	r5, [pc, #24]	; (800f6e4 <_sbrk_r+0x1c>)
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	4604      	mov	r4, r0
 800f6d0:	4608      	mov	r0, r1
 800f6d2:	602b      	str	r3, [r5, #0]
 800f6d4:	f7fa fd7a 	bl	800a1cc <_sbrk>
 800f6d8:	1c43      	adds	r3, r0, #1
 800f6da:	d102      	bne.n	800f6e2 <_sbrk_r+0x1a>
 800f6dc:	682b      	ldr	r3, [r5, #0]
 800f6de:	b103      	cbz	r3, 800f6e2 <_sbrk_r+0x1a>
 800f6e0:	6023      	str	r3, [r4, #0]
 800f6e2:	bd38      	pop	{r3, r4, r5, pc}
 800f6e4:	20001a84 	.word	0x20001a84

0800f6e8 <memmove>:
 800f6e8:	4288      	cmp	r0, r1
 800f6ea:	b510      	push	{r4, lr}
 800f6ec:	eb01 0402 	add.w	r4, r1, r2
 800f6f0:	d902      	bls.n	800f6f8 <memmove+0x10>
 800f6f2:	4284      	cmp	r4, r0
 800f6f4:	4623      	mov	r3, r4
 800f6f6:	d807      	bhi.n	800f708 <memmove+0x20>
 800f6f8:	1e43      	subs	r3, r0, #1
 800f6fa:	42a1      	cmp	r1, r4
 800f6fc:	d008      	beq.n	800f710 <memmove+0x28>
 800f6fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f702:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f706:	e7f8      	b.n	800f6fa <memmove+0x12>
 800f708:	4402      	add	r2, r0
 800f70a:	4601      	mov	r1, r0
 800f70c:	428a      	cmp	r2, r1
 800f70e:	d100      	bne.n	800f712 <memmove+0x2a>
 800f710:	bd10      	pop	{r4, pc}
 800f712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f71a:	e7f7      	b.n	800f70c <memmove+0x24>

0800f71c <__malloc_lock>:
 800f71c:	4801      	ldr	r0, [pc, #4]	; (800f724 <__malloc_lock+0x8>)
 800f71e:	f7ff bc4d 	b.w	800efbc <__retarget_lock_acquire_recursive>
 800f722:	bf00      	nop
 800f724:	20001a78 	.word	0x20001a78

0800f728 <__malloc_unlock>:
 800f728:	4801      	ldr	r0, [pc, #4]	; (800f730 <__malloc_unlock+0x8>)
 800f72a:	f7ff bc48 	b.w	800efbe <__retarget_lock_release_recursive>
 800f72e:	bf00      	nop
 800f730:	20001a78 	.word	0x20001a78

0800f734 <_free_r>:
 800f734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f736:	2900      	cmp	r1, #0
 800f738:	d044      	beq.n	800f7c4 <_free_r+0x90>
 800f73a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f73e:	9001      	str	r0, [sp, #4]
 800f740:	2b00      	cmp	r3, #0
 800f742:	f1a1 0404 	sub.w	r4, r1, #4
 800f746:	bfb8      	it	lt
 800f748:	18e4      	addlt	r4, r4, r3
 800f74a:	f7ff ffe7 	bl	800f71c <__malloc_lock>
 800f74e:	4a1e      	ldr	r2, [pc, #120]	; (800f7c8 <_free_r+0x94>)
 800f750:	9801      	ldr	r0, [sp, #4]
 800f752:	6813      	ldr	r3, [r2, #0]
 800f754:	b933      	cbnz	r3, 800f764 <_free_r+0x30>
 800f756:	6063      	str	r3, [r4, #4]
 800f758:	6014      	str	r4, [r2, #0]
 800f75a:	b003      	add	sp, #12
 800f75c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f760:	f7ff bfe2 	b.w	800f728 <__malloc_unlock>
 800f764:	42a3      	cmp	r3, r4
 800f766:	d908      	bls.n	800f77a <_free_r+0x46>
 800f768:	6825      	ldr	r5, [r4, #0]
 800f76a:	1961      	adds	r1, r4, r5
 800f76c:	428b      	cmp	r3, r1
 800f76e:	bf01      	itttt	eq
 800f770:	6819      	ldreq	r1, [r3, #0]
 800f772:	685b      	ldreq	r3, [r3, #4]
 800f774:	1949      	addeq	r1, r1, r5
 800f776:	6021      	streq	r1, [r4, #0]
 800f778:	e7ed      	b.n	800f756 <_free_r+0x22>
 800f77a:	461a      	mov	r2, r3
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	b10b      	cbz	r3, 800f784 <_free_r+0x50>
 800f780:	42a3      	cmp	r3, r4
 800f782:	d9fa      	bls.n	800f77a <_free_r+0x46>
 800f784:	6811      	ldr	r1, [r2, #0]
 800f786:	1855      	adds	r5, r2, r1
 800f788:	42a5      	cmp	r5, r4
 800f78a:	d10b      	bne.n	800f7a4 <_free_r+0x70>
 800f78c:	6824      	ldr	r4, [r4, #0]
 800f78e:	4421      	add	r1, r4
 800f790:	1854      	adds	r4, r2, r1
 800f792:	42a3      	cmp	r3, r4
 800f794:	6011      	str	r1, [r2, #0]
 800f796:	d1e0      	bne.n	800f75a <_free_r+0x26>
 800f798:	681c      	ldr	r4, [r3, #0]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	6053      	str	r3, [r2, #4]
 800f79e:	4421      	add	r1, r4
 800f7a0:	6011      	str	r1, [r2, #0]
 800f7a2:	e7da      	b.n	800f75a <_free_r+0x26>
 800f7a4:	d902      	bls.n	800f7ac <_free_r+0x78>
 800f7a6:	230c      	movs	r3, #12
 800f7a8:	6003      	str	r3, [r0, #0]
 800f7aa:	e7d6      	b.n	800f75a <_free_r+0x26>
 800f7ac:	6825      	ldr	r5, [r4, #0]
 800f7ae:	1961      	adds	r1, r4, r5
 800f7b0:	428b      	cmp	r3, r1
 800f7b2:	bf04      	itt	eq
 800f7b4:	6819      	ldreq	r1, [r3, #0]
 800f7b6:	685b      	ldreq	r3, [r3, #4]
 800f7b8:	6063      	str	r3, [r4, #4]
 800f7ba:	bf04      	itt	eq
 800f7bc:	1949      	addeq	r1, r1, r5
 800f7be:	6021      	streq	r1, [r4, #0]
 800f7c0:	6054      	str	r4, [r2, #4]
 800f7c2:	e7ca      	b.n	800f75a <_free_r+0x26>
 800f7c4:	b003      	add	sp, #12
 800f7c6:	bd30      	pop	{r4, r5, pc}
 800f7c8:	20001a7c 	.word	0x20001a7c

0800f7cc <_realloc_r>:
 800f7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d0:	4680      	mov	r8, r0
 800f7d2:	4614      	mov	r4, r2
 800f7d4:	460e      	mov	r6, r1
 800f7d6:	b921      	cbnz	r1, 800f7e2 <_realloc_r+0x16>
 800f7d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7dc:	4611      	mov	r1, r2
 800f7de:	f7ff bc0f 	b.w	800f000 <_malloc_r>
 800f7e2:	b92a      	cbnz	r2, 800f7f0 <_realloc_r+0x24>
 800f7e4:	f7ff ffa6 	bl	800f734 <_free_r>
 800f7e8:	4625      	mov	r5, r4
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7f0:	f000 f81b 	bl	800f82a <_malloc_usable_size_r>
 800f7f4:	4284      	cmp	r4, r0
 800f7f6:	4607      	mov	r7, r0
 800f7f8:	d802      	bhi.n	800f800 <_realloc_r+0x34>
 800f7fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f7fe:	d812      	bhi.n	800f826 <_realloc_r+0x5a>
 800f800:	4621      	mov	r1, r4
 800f802:	4640      	mov	r0, r8
 800f804:	f7ff fbfc 	bl	800f000 <_malloc_r>
 800f808:	4605      	mov	r5, r0
 800f80a:	2800      	cmp	r0, #0
 800f80c:	d0ed      	beq.n	800f7ea <_realloc_r+0x1e>
 800f80e:	42bc      	cmp	r4, r7
 800f810:	4622      	mov	r2, r4
 800f812:	4631      	mov	r1, r6
 800f814:	bf28      	it	cs
 800f816:	463a      	movcs	r2, r7
 800f818:	f7ff fb7e 	bl	800ef18 <memcpy>
 800f81c:	4631      	mov	r1, r6
 800f81e:	4640      	mov	r0, r8
 800f820:	f7ff ff88 	bl	800f734 <_free_r>
 800f824:	e7e1      	b.n	800f7ea <_realloc_r+0x1e>
 800f826:	4635      	mov	r5, r6
 800f828:	e7df      	b.n	800f7ea <_realloc_r+0x1e>

0800f82a <_malloc_usable_size_r>:
 800f82a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f82e:	1f18      	subs	r0, r3, #4
 800f830:	2b00      	cmp	r3, #0
 800f832:	bfbc      	itt	lt
 800f834:	580b      	ldrlt	r3, [r1, r0]
 800f836:	18c0      	addlt	r0, r0, r3
 800f838:	4770      	bx	lr
	...

0800f83c <_init>:
 800f83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f83e:	bf00      	nop
 800f840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f842:	bc08      	pop	{r3}
 800f844:	469e      	mov	lr, r3
 800f846:	4770      	bx	lr

0800f848 <_fini>:
 800f848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f84a:	bf00      	nop
 800f84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f84e:	bc08      	pop	{r3}
 800f850:	469e      	mov	lr, r3
 800f852:	4770      	bx	lr
