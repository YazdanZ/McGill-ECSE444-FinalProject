
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006efc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080070bc  080070bc  000170bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800718c  0800718c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007194  08007194  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800719c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000070  0800720c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  0800720c  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001701d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027bd  00000000  00000000  000370bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00039880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  0003abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab9c  00000000  00000000  0003bde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017092  00000000  00000000  00066984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b0c1  00000000  00000000  0007da16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188ad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e0  00000000  00000000  00188b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080070a4 	.word	0x080070a4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	080070a4 	.word	0x080070a4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005be:	2003      	movs	r0, #3
 80005c0:	f000 f93c 	bl	800083c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 f80d 	bl	80005e4 <HAL_InitTick>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	e001      	b.n	80005da <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005d6:	f005 fe93 	bl	8006300 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005da:	79fb      	ldrb	r3, [r7, #7]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_InitTick+0x6c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d023      	beq.n	8000640 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <HAL_InitTick+0x70>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_InitTick+0x6c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f949 	bl	80008a6 <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d10f      	bne.n	800063a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d809      	bhi.n	8000634 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000620:	2200      	movs	r2, #0
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
 8000628:	f000 f913 	bl	8000852 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800062c:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <HAL_InitTick+0x74>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	e007      	b.n	8000644 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e004      	b.n	8000644 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e001      	b.n	8000644 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000004 	.word	0x20000004
 8000654:	20000008 	.word	0x20000008
 8000658:	20000000 	.word	0x20000000

0800065c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_IncTick+0x20>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_IncTick+0x24>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_IncTick+0x24>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000004 	.word	0x20000004
 8000680:	2000008c 	.word	0x2000008c

08000684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <HAL_GetTick+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	2000008c 	.word	0x2000008c

0800069c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <__NVIC_GetPriorityGrouping+0x18>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	f003 0307 	and.w	r3, r3, #7
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db0b      	blt.n	800072a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 021f 	and.w	r2, r3, #31
 8000718:	4907      	ldr	r1, [pc, #28]	; (8000738 <__NVIC_EnableIRQ+0x38>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	2001      	movs	r0, #1
 8000722:	fa00 f202 	lsl.w	r2, r0, r2
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000e100 	.word	0xe000e100

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	; (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	; (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f1c3 0307 	rsb	r3, r3, #7
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	bf28      	it	cs
 80007ae:	2304      	movcs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3304      	adds	r3, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d902      	bls.n	80007c0 <NVIC_EncodePriority+0x30>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3b03      	subs	r3, #3
 80007be:	e000      	b.n	80007c2 <NVIC_EncodePriority+0x32>
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	f04f 32ff 	mov.w	r2, #4294967295
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	401a      	ands	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43d9      	mvns	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	; 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000808:	d301      	bcc.n	800080e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2301      	movs	r3, #1
 800080c:	e00f      	b.n	800082e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <SysTick_Config+0x40>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000816:	210f      	movs	r1, #15
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f7ff ff8e 	bl	800073c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SysTick_Config+0x40>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <SysTick_Config+0x40>)
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000e010 	.word	0xe000e010

0800083c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff29 	bl	800069c <__NVIC_SetPriorityGrouping>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000864:	f7ff ff3e 	bl	80006e4 <__NVIC_GetPriorityGrouping>
 8000868:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	6978      	ldr	r0, [r7, #20]
 8000870:	f7ff ff8e 	bl	8000790 <NVIC_EncodePriority>
 8000874:	4602      	mov	r2, r0
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff5d 	bl	800073c <__NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff31 	bl	8000700 <__NVIC_EnableIRQ>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ffa2 	bl	80007f8 <SysTick_Config>
 80008b4:	4603      	mov	r3, r0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d101      	bne.n	80008d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e08d      	b.n	80009ee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <HAL_DMA_Init+0x138>)
 80008da:	429a      	cmp	r2, r3
 80008dc:	d80f      	bhi.n	80008fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	4b45      	ldr	r3, [pc, #276]	; (80009fc <HAL_DMA_Init+0x13c>)
 80008e6:	4413      	add	r3, r2
 80008e8:	4a45      	ldr	r2, [pc, #276]	; (8000a00 <HAL_DMA_Init+0x140>)
 80008ea:	fba2 2303 	umull	r2, r3, r2, r3
 80008ee:	091b      	lsrs	r3, r3, #4
 80008f0:	009a      	lsls	r2, r3, #2
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a42      	ldr	r2, [pc, #264]	; (8000a04 <HAL_DMA_Init+0x144>)
 80008fa:	641a      	str	r2, [r3, #64]	; 0x40
 80008fc:	e00e      	b.n	800091c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	4b40      	ldr	r3, [pc, #256]	; (8000a08 <HAL_DMA_Init+0x148>)
 8000906:	4413      	add	r3, r2
 8000908:	4a3d      	ldr	r2, [pc, #244]	; (8000a00 <HAL_DMA_Init+0x140>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	009a      	lsls	r2, r3, #2
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a3c      	ldr	r2, [pc, #240]	; (8000a0c <HAL_DMA_Init+0x14c>)
 800091a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2202      	movs	r2, #2
 8000920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000936:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800094c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6a1b      	ldr	r3, [r3, #32]
 800095e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	4313      	orrs	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f000 fa72 	bl	8000e58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800097c:	d102      	bne.n	8000984 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000998:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d010      	beq.n	80009c4 <HAL_DMA_Init+0x104>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	d80c      	bhi.n	80009c4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 fa92 	bl	8000ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	e008      	b.n	80009d6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2201      	movs	r2, #1
 80009e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40020407 	.word	0x40020407
 80009fc:	bffdfff8 	.word	0xbffdfff8
 8000a00:	cccccccd 	.word	0xcccccccd
 8000a04:	40020000 	.word	0x40020000
 8000a08:	bffdfbf8 	.word	0xbffdfbf8
 8000a0c:	40020400 	.word	0x40020400

08000a10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d101      	bne.n	8000a30 <HAL_DMA_Start_IT+0x20>
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	e066      	b.n	8000afe <HAL_DMA_Start_IT+0xee>
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2201      	movs	r2, #1
 8000a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d155      	bne.n	8000af0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2202      	movs	r2, #2
 8000a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f022 0201 	bic.w	r2, r2, #1
 8000a60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	68b9      	ldr	r1, [r7, #8]
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f000 f9b6 	bl	8000dda <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d008      	beq.n	8000a88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f042 020e 	orr.w	r2, r2, #14
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	e00f      	b.n	8000aa8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f022 0204 	bic.w	r2, r2, #4
 8000a96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 020a 	orr.w	r2, r2, #10
 8000aa6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ac4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000adc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f042 0201 	orr.w	r2, r2, #1
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e005      	b.n	8000afc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000af8:	2302      	movs	r3, #2
 8000afa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b085      	sub	sp, #20
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d008      	beq.n	8000b30 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2204      	movs	r2, #4
 8000b22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e040      	b.n	8000bb2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f022 020e 	bic.w	r2, r2, #14
 8000b3e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b4e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0201 	bic.w	r2, r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b64:	f003 021c 	and.w	r2, r3, #28
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b72:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000b7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00c      	beq.n	8000ba0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000b9e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b084      	sub	sp, #16
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d005      	beq.n	8000be2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2204      	movs	r2, #4
 8000bda:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e047      	b.n	8000c72 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f022 020e 	bic.w	r2, r2, #14
 8000bf0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 0201 	bic.w	r2, r2, #1
 8000c00:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f003 021c 	and.w	r2, r3, #28
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	2101      	movs	r1, #1
 8000c20:	fa01 f202 	lsl.w	r2, r1, r2
 8000c24:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000c2e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00c      	beq.n	8000c52 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000c50:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2201      	movs	r2, #1
 8000c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	4798      	blx	r3
    }
  }
  return status;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c98:	f003 031c 	and.w	r3, r3, #28
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d026      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x7a>
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d021      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0320 	and.w	r3, r3, #32
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d107      	bne.n	8000cd0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f022 0204 	bic.w	r2, r2, #4
 8000cce:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd4:	f003 021c 	and.w	r2, r3, #28
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	2104      	movs	r1, #4
 8000cde:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d071      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000cf4:	e06c      	b.n	8000dd0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f003 031c 	and.w	r3, r3, #28
 8000cfe:	2202      	movs	r2, #2
 8000d00:	409a      	lsls	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4013      	ands	r3, r2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d02e      	beq.n	8000d68 <HAL_DMA_IRQHandler+0xec>
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d029      	beq.n	8000d68 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0320 	and.w	r3, r3, #32
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10b      	bne.n	8000d3a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 020a 	bic.w	r2, r2, #10
 8000d30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2201      	movs	r2, #1
 8000d36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f003 021c 	and.w	r2, r3, #28
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	2102      	movs	r1, #2
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d038      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d66:	e033      	b.n	8000dd0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	f003 031c 	and.w	r3, r3, #28
 8000d70:	2208      	movs	r2, #8
 8000d72:	409a      	lsls	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d02a      	beq.n	8000dd2 <HAL_DMA_IRQHandler+0x156>
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d025      	beq.n	8000dd2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 020e 	bic.w	r2, r2, #14
 8000d94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f003 021c 	and.w	r2, r3, #28
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	2101      	movs	r1, #1
 8000da4:	fa01 f202 	lsl.w	r2, r1, r2
 8000da8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d004      	beq.n	8000dd2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
}
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b085      	sub	sp, #20
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000df0:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d004      	beq.n	8000e04 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e02:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e08:	f003 021c 	and.w	r2, r3, #28
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	2101      	movs	r1, #1
 8000e12:	fa01 f202 	lsl.w	r2, r1, r2
 8000e16:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b10      	cmp	r3, #16
 8000e26:	d108      	bne.n	8000e3a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e38:	e007      	b.n	8000e4a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	60da      	str	r2, [r3, #12]
}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d80a      	bhi.n	8000e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e78:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6493      	str	r3, [r2, #72]	; 0x48
 8000e80:	e007      	b.n	8000e92 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	009a      	lsls	r2, r3, #2
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000e8c:	4413      	add	r3, r2
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8000ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f003 031f 	and.w	r3, r3, #31
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40020407 	.word	0x40020407
 8000ec8:	4002081c 	.word	0x4002081c
 8000ecc:	cccccccd 	.word	0xcccccccd
 8000ed0:	40020880 	.word	0x40020880

08000ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000ee8:	4413      	add	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	461a      	mov	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000ef6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2201      	movs	r2, #1
 8000f02:	409a      	lsls	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	1000823f 	.word	0x1000823f
 8000f18:	40020940 	.word	0x40020940

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2a:	e166      	b.n	80011fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8158 	beq.w	80011f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d005      	beq.n	8000f5c <HAL_GPIO_Init+0x40>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d130      	bne.n	8000fbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f92:	2201      	movs	r2, #1
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	091b      	lsrs	r3, r3, #4
 8000fa8:	f003 0201 	and.w	r2, r3, #1
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d017      	beq.n	8000ffa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d123      	bne.n	800104e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	691a      	ldr	r2, [r3, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	6939      	ldr	r1, [r7, #16]
 800104a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0203 	and.w	r2, r3, #3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 80b2 	beq.w	80011f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001090:	4b61      	ldr	r3, [pc, #388]	; (8001218 <HAL_GPIO_Init+0x2fc>)
 8001092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001094:	4a60      	ldr	r2, [pc, #384]	; (8001218 <HAL_GPIO_Init+0x2fc>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6613      	str	r3, [r2, #96]	; 0x60
 800109c:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <HAL_GPIO_Init+0x2fc>)
 800109e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010a8:	4a5c      	ldr	r2, [pc, #368]	; (800121c <HAL_GPIO_Init+0x300>)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010d2:	d02b      	beq.n	800112c <HAL_GPIO_Init+0x210>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a52      	ldr	r2, [pc, #328]	; (8001220 <HAL_GPIO_Init+0x304>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d025      	beq.n	8001128 <HAL_GPIO_Init+0x20c>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a51      	ldr	r2, [pc, #324]	; (8001224 <HAL_GPIO_Init+0x308>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d01f      	beq.n	8001124 <HAL_GPIO_Init+0x208>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a50      	ldr	r2, [pc, #320]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d019      	beq.n	8001120 <HAL_GPIO_Init+0x204>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a4f      	ldr	r2, [pc, #316]	; (800122c <HAL_GPIO_Init+0x310>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d013      	beq.n	800111c <HAL_GPIO_Init+0x200>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <HAL_GPIO_Init+0x314>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d00d      	beq.n	8001118 <HAL_GPIO_Init+0x1fc>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a4d      	ldr	r2, [pc, #308]	; (8001234 <HAL_GPIO_Init+0x318>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d007      	beq.n	8001114 <HAL_GPIO_Init+0x1f8>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a4c      	ldr	r2, [pc, #304]	; (8001238 <HAL_GPIO_Init+0x31c>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d101      	bne.n	8001110 <HAL_GPIO_Init+0x1f4>
 800110c:	2307      	movs	r3, #7
 800110e:	e00e      	b.n	800112e <HAL_GPIO_Init+0x212>
 8001110:	2308      	movs	r3, #8
 8001112:	e00c      	b.n	800112e <HAL_GPIO_Init+0x212>
 8001114:	2306      	movs	r3, #6
 8001116:	e00a      	b.n	800112e <HAL_GPIO_Init+0x212>
 8001118:	2305      	movs	r3, #5
 800111a:	e008      	b.n	800112e <HAL_GPIO_Init+0x212>
 800111c:	2304      	movs	r3, #4
 800111e:	e006      	b.n	800112e <HAL_GPIO_Init+0x212>
 8001120:	2303      	movs	r3, #3
 8001122:	e004      	b.n	800112e <HAL_GPIO_Init+0x212>
 8001124:	2302      	movs	r3, #2
 8001126:	e002      	b.n	800112e <HAL_GPIO_Init+0x212>
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <HAL_GPIO_Init+0x212>
 800112c:	2300      	movs	r3, #0
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	f002 0203 	and.w	r2, r2, #3
 8001134:	0092      	lsls	r2, r2, #2
 8001136:	4093      	lsls	r3, r2
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800113e:	4937      	ldr	r1, [pc, #220]	; (800121c <HAL_GPIO_Init+0x300>)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800114c:	4b3b      	ldr	r3, [pc, #236]	; (800123c <HAL_GPIO_Init+0x320>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001170:	4a32      	ldr	r2, [pc, #200]	; (800123c <HAL_GPIO_Init+0x320>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001176:	4b31      	ldr	r3, [pc, #196]	; (800123c <HAL_GPIO_Init+0x320>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800119a:	4a28      	ldr	r2, [pc, #160]	; (800123c <HAL_GPIO_Init+0x320>)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <HAL_GPIO_Init+0x320>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_GPIO_Init+0x320>)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_GPIO_Init+0x320>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <HAL_GPIO_Init+0x320>)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3301      	adds	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	f47f ae91 	bne.w	8000f2c <HAL_GPIO_Init+0x10>
  }
}
 800120a:	bf00      	nop
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000
 8001220:	48000400 	.word	0x48000400
 8001224:	48000800 	.word	0x48000800
 8001228:	48000c00 	.word	0x48000c00
 800122c:	48001000 	.word	0x48001000
 8001230:	48001400 	.word	0x48001400
 8001234:	48001800 	.word	0x48001800
 8001238:	48001c00 	.word	0x48001c00
 800123c:	40010400 	.word	0x40010400

08001240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	4013      	ands	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e001      	b.n	8001262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800128c:	e002      	b.n	8001294 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 ffb8 	bl	8006234 <HAL_GPIO_EXTI_Callback>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e081      	b.n	80013e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d106      	bne.n	80012fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f005 f826 	bl	8006348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2224      	movs	r2, #36	; 0x24
 8001300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001320:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001330:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d107      	bne.n	800134a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	e006      	b.n	8001358 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001356:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d104      	bne.n	800136a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001368:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800138c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69d9      	ldr	r1, [r3, #28]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1a      	ldr	r2, [r3, #32]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2220      	movs	r2, #32
 80013d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b20      	cmp	r3, #32
 8001402:	d138      	bne.n	8001476 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800140e:	2302      	movs	r3, #2
 8001410:	e032      	b.n	8001478 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2224      	movs	r2, #36	; 0x24
 800141e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0201 	bic.w	r2, r2, #1
 8001430:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001440:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6819      	ldr	r1, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0201 	orr.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2220      	movs	r2, #32
 8001466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001476:	2302      	movs	r3, #2
  }
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b20      	cmp	r3, #32
 8001498:	d139      	bne.n	800150e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e033      	b.n	8001510 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2224      	movs	r2, #36	; 0x24
 80014b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0201 	orr.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2220      	movs	r2, #32
 80014fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800150e:	2302      	movs	r3, #2
  }
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152c:	d102      	bne.n	8001534 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800152e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001532:	e00b      	b.n	800154c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001542:	d102      	bne.n	800154a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001548:	e000      	b.n	800154c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800154a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40007000 	.word	0x40007000

0800155c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d141      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800156a:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001576:	d131      	bne.n	80015dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001578:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800157e:	4a46      	ldr	r2, [pc, #280]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001584:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001588:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001590:	4a41      	ldr	r2, [pc, #260]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001596:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2232      	movs	r2, #50	; 0x32
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9b      	lsrs	r3, r3, #18
 80015aa:	3301      	adds	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ae:	e002      	b.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c2:	d102      	bne.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f2      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ca:	4b33      	ldr	r3, [pc, #204]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d6:	d158      	bne.n	800168a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e057      	b.n	800168c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e2:	4a2d      	ldr	r2, [pc, #180]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015ec:	e04d      	b.n	800168a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f4:	d141      	bne.n	800167a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001602:	d131      	bne.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800160a:	4a23      	ldr	r2, [pc, #140]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800161c:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2232      	movs	r2, #50	; 0x32
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	0c9b      	lsrs	r3, r3, #18
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800163a:	e002      	b.n	8001642 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3b01      	subs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164e:	d102      	bne.n	8001656 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f2      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001662:	d112      	bne.n	800168a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e011      	b.n	800168c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001678:	e007      	b.n	800168a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001684:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001688:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40007000 	.word	0x40007000
 800169c:	20000008 	.word	0x20000008
 80016a0:	431bde83 	.word	0x431bde83

080016a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d102      	bne.n	80016b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f000 bc08 	b.w	8001ec8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b8:	4b96      	ldr	r3, [pc, #600]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c2:	4b94      	ldr	r3, [pc, #592]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80e4 	beq.w	80018a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d007      	beq.n	80016f0 <HAL_RCC_OscConfig+0x4c>
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	f040 808b 	bne.w	80017fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	f040 8087 	bne.w	80017fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f0:	4b88      	ldr	r3, [pc, #544]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_OscConfig+0x64>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e3df      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	4b81      	ldr	r3, [pc, #516]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <HAL_RCC_OscConfig+0x7e>
 8001718:	4b7e      	ldr	r3, [pc, #504]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001720:	e005      	b.n	800172e <HAL_RCC_OscConfig+0x8a>
 8001722:	4b7c      	ldr	r3, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800172e:	4293      	cmp	r3, r2
 8001730:	d223      	bcs.n	800177a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fdcc 	bl	80022d4 <RCC_SetFlashLatencyFromMSIRange>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e3c0      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001746:	4b73      	ldr	r3, [pc, #460]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a72      	ldr	r2, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b70      	ldr	r3, [pc, #448]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	496d      	ldr	r1, [pc, #436]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001764:	4b6b      	ldr	r3, [pc, #428]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	4968      	ldr	r1, [pc, #416]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
 8001778:	e025      	b.n	80017c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800177a:	4b66      	ldr	r3, [pc, #408]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a65      	ldr	r2, [pc, #404]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4960      	ldr	r1, [pc, #384]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001798:	4b5e      	ldr	r3, [pc, #376]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	495b      	ldr	r1, [pc, #364]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fd8c 	bl	80022d4 <RCC_SetFlashLatencyFromMSIRange>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e380      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017c6:	f000 fcc1 	bl	800214c <HAL_RCC_GetSysClockFreq>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b51      	ldr	r3, [pc, #324]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	4950      	ldr	r1, [pc, #320]	; (8001918 <HAL_RCC_OscConfig+0x274>)
 80017d8:	5ccb      	ldrb	r3, [r1, r3]
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	fa22 f303 	lsr.w	r3, r2, r3
 80017e2:	4a4e      	ldr	r2, [pc, #312]	; (800191c <HAL_RCC_OscConfig+0x278>)
 80017e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017e6:	4b4e      	ldr	r3, [pc, #312]	; (8001920 <HAL_RCC_OscConfig+0x27c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fefa 	bl	80005e4 <HAL_InitTick>
 80017f0:	4603      	mov	r3, r0
 80017f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d052      	beq.n	80018a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	e364      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d032      	beq.n	800186c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001806:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a42      	ldr	r2, [pc, #264]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001812:	f7fe ff37 	bl	8000684 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800181a:	f7fe ff33 	bl	8000684 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e34d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a35      	ldr	r2, [pc, #212]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b33      	ldr	r3, [pc, #204]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4930      	ldr	r1, [pc, #192]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001856:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	492b      	ldr	r1, [pc, #172]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
 800186a:	e01a      	b.n	80018a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001878:	f7fe ff04 	bl	8000684 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001880:	f7fe ff00 	bl	8000684 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e31a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x1dc>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d073      	beq.n	8001996 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_OscConfig+0x21c>
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d10e      	bne.n	80018d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d10b      	bne.n	80018d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d063      	beq.n	8001994 <HAL_RCC_OscConfig+0x2f0>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d15f      	bne.n	8001994 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e2f7      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e0:	d106      	bne.n	80018f0 <HAL_RCC_OscConfig+0x24c>
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e025      	b.n	800193c <HAL_RCC_OscConfig+0x298>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f8:	d114      	bne.n	8001924 <HAL_RCC_OscConfig+0x280>
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a02      	ldr	r2, [pc, #8]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e013      	b.n	800193c <HAL_RCC_OscConfig+0x298>
 8001914:	40021000 	.word	0x40021000
 8001918:	08007110 	.word	0x08007110
 800191c:	20000008 	.word	0x20000008
 8001920:	20000000 	.word	0x20000000
 8001924:	4ba0      	ldr	r3, [pc, #640]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a9f      	ldr	r2, [pc, #636]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 800192a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b9d      	ldr	r3, [pc, #628]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a9c      	ldr	r2, [pc, #624]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d013      	beq.n	800196c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7fe fe9e 	bl	8000684 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7fe fe9a 	bl	8000684 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e2b4      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195e:	4b92      	ldr	r3, [pc, #584]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x2a8>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7fe fe8a 	bl	8000684 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001974:	f7fe fe86 	bl	8000684 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	; 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e2a0      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001986:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x2d0>
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d060      	beq.n	8001a64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_OscConfig+0x310>
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d119      	bne.n	80019e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d116      	bne.n	80019e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b4:	4b7c      	ldr	r3, [pc, #496]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_OscConfig+0x328>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e27d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b76      	ldr	r3, [pc, #472]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	4973      	ldr	r1, [pc, #460]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e0:	e040      	b.n	8001a64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d023      	beq.n	8001a32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ea:	4b6f      	ldr	r3, [pc, #444]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a6e      	ldr	r2, [pc, #440]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7fe fe45 	bl	8000684 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fe:	f7fe fe41 	bl	8000684 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e25b      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a10:	4b65      	ldr	r3, [pc, #404]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1c:	4b62      	ldr	r3, [pc, #392]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	061b      	lsls	r3, r3, #24
 8001a2a:	495f      	ldr	r1, [pc, #380]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
 8001a30:	e018      	b.n	8001a64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a32:	4b5d      	ldr	r3, [pc, #372]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a5c      	ldr	r2, [pc, #368]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7fe fe21 	bl	8000684 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a46:	f7fe fe1d 	bl	8000684 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e237      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a58:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d03c      	beq.n	8001aea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a78:	4b4b      	ldr	r3, [pc, #300]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7e:	4a4a      	ldr	r2, [pc, #296]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7fe fdfc 	bl	8000684 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a90:	f7fe fdf8 	bl	8000684 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e212      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa2:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ef      	beq.n	8001a90 <HAL_RCC_OscConfig+0x3ec>
 8001ab0:	e01b      	b.n	8001aea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab8:	4a3b      	ldr	r2, [pc, #236]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7fe fddf 	bl	8000684 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aca:	f7fe fddb 	bl	8000684 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e1f5      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001adc:	4b32      	ldr	r3, [pc, #200]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ef      	bne.n	8001aca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80a6 	beq.w	8001c44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001afc:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10d      	bne.n	8001b24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b12:	6593      	str	r3, [r2, #88]	; 0x58
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b20:	2301      	movs	r3, #1
 8001b22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_RCC_OscConfig+0x508>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d118      	bne.n	8001b62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_RCC_OscConfig+0x508>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_RCC_OscConfig+0x508>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3c:	f7fe fda2 	bl	8000684 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b44:	f7fe fd9e 	bl	8000684 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1b8      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_RCC_OscConfig+0x508>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d108      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4d8>
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b7a:	e029      	b.n	8001bd0 <HAL_RCC_OscConfig+0x52c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	d115      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x50c>
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9a:	4a03      	ldr	r2, [pc, #12]	; (8001ba8 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba4:	e014      	b.n	8001bd0 <HAL_RCC_OscConfig+0x52c>
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40007000 	.word	0x40007000
 8001bb0:	4b9d      	ldr	r3, [pc, #628]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb6:	4a9c      	ldr	r2, [pc, #624]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc0:	4b99      	ldr	r3, [pc, #612]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc6:	4a98      	ldr	r2, [pc, #608]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001bc8:	f023 0304 	bic.w	r3, r3, #4
 8001bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d016      	beq.n	8001c06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd8:	f7fe fd54 	bl	8000684 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7fe fd50 	bl	8000684 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e168      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf6:	4b8c      	ldr	r3, [pc, #560]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0ed      	beq.n	8001be0 <HAL_RCC_OscConfig+0x53c>
 8001c04:	e015      	b.n	8001c32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c06:	f7fe fd3d 	bl	8000684 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7fe fd39 	bl	8000684 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e151      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c24:	4b80      	ldr	r3, [pc, #512]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ed      	bne.n	8001c0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c32:	7ffb      	ldrb	r3, [r7, #31]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c38:	4b7b      	ldr	r3, [pc, #492]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	4a7a      	ldr	r2, [pc, #488]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d03c      	beq.n	8001cca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01c      	beq.n	8001c92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c58:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c5e:	4a72      	ldr	r2, [pc, #456]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c68:	f7fe fd0c 	bl	8000684 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c70:	f7fe fd08 	bl	8000684 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e122      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c82:	4b69      	ldr	r3, [pc, #420]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0ef      	beq.n	8001c70 <HAL_RCC_OscConfig+0x5cc>
 8001c90:	e01b      	b.n	8001cca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c92:	4b65      	ldr	r3, [pc, #404]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c98:	4a63      	ldr	r2, [pc, #396]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca2:	f7fe fcef 	bl	8000684 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001caa:	f7fe fceb 	bl	8000684 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e105      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cbc:	4b5a      	ldr	r3, [pc, #360]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1ef      	bne.n	8001caa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 80f9 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	f040 80cf 	bne.w	8001e7c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cde:	4b52      	ldr	r3, [pc, #328]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 0203 	and.w	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d12c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d123      	bne.n	8001d4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d11b      	bne.n	8001d4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d113      	bne.n	8001d4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2e:	085b      	lsrs	r3, r3, #1
 8001d30:	3b01      	subs	r3, #1
 8001d32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d109      	bne.n	8001d4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	3b01      	subs	r3, #1
 8001d46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d071      	beq.n	8001e30 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2b0c      	cmp	r3, #12
 8001d50:	d068      	beq.n	8001e24 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d52:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d105      	bne.n	8001d6a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d5e:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0ac      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2d      	ldr	r2, [pc, #180]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d7a:	f7fe fc83 	bl	8000684 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe fc7f 	bl	8000684 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e099      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_RCC_OscConfig+0x788>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001db0:	3a01      	subs	r2, #1
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	4311      	orrs	r1, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dba:	0212      	lsls	r2, r2, #8
 8001dbc:	4311      	orrs	r1, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dc2:	0852      	lsrs	r2, r2, #1
 8001dc4:	3a01      	subs	r2, #1
 8001dc6:	0552      	lsls	r2, r2, #21
 8001dc8:	4311      	orrs	r1, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dce:	0852      	lsrs	r2, r2, #1
 8001dd0:	3a01      	subs	r2, #1
 8001dd2:	0652      	lsls	r2, r2, #25
 8001dd4:	4311      	orrs	r1, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dda:	06d2      	lsls	r2, r2, #27
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	4912      	ldr	r1, [pc, #72]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df0:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dfc:	f7fe fc42 	bl	8000684 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e04:	f7fe fc3e 	bl	8000684 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e058      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_RCC_OscConfig+0x784>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e22:	e050      	b.n	8001ec6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e04f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_RCC_OscConfig+0x82c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d144      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_RCC_OscConfig+0x82c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <HAL_RCC_OscConfig+0x82c>)
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_RCC_OscConfig+0x82c>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <HAL_RCC_OscConfig+0x82c>)
 8001e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e54:	f7fe fc16 	bl	8000684 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7fe fc12 	bl	8000684 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e02c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_RCC_OscConfig+0x82c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x7b8>
 8001e7a:	e024      	b.n	8001ec6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d01f      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_RCC_OscConfig+0x82c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <HAL_RCC_OscConfig+0x82c>)
 8001e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fbf9 	bl	8000684 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e96:	f7fe fbf5 	bl	8000684 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e00f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_OscConfig+0x82c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_OscConfig+0x82c>)
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	4905      	ldr	r1, [pc, #20]	; (8001ed0 <HAL_RCC_OscConfig+0x82c>)
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_OscConfig+0x830>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60cb      	str	r3, [r1, #12]
 8001ec0:	e001      	b.n	8001ec6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	feeefffc 	.word	0xfeeefffc

08001ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e11d      	b.n	800212c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b90      	ldr	r3, [pc, #576]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d910      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b8d      	ldr	r3, [pc, #564]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 020f 	bic.w	r2, r3, #15
 8001f06:	498b      	ldr	r1, [pc, #556]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b89      	ldr	r3, [pc, #548]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e105      	b.n	800212c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d010      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	4b81      	ldr	r3, [pc, #516]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d908      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3c:	4b7e      	ldr	r3, [pc, #504]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	497b      	ldr	r1, [pc, #492]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d079      	beq.n	800204e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d11e      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	4b75      	ldr	r3, [pc, #468]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0dc      	b.n	800212c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001f72:	f000 fa09 	bl	8002388 <RCC_GetSysClockFreqFromPLLSource>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4a70      	ldr	r2, [pc, #448]	; (800213c <HAL_RCC_ClockConfig+0x264>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d946      	bls.n	800200c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f7e:	4b6e      	ldr	r3, [pc, #440]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d140      	bne.n	800200c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f8a:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f92:	4a69      	ldr	r2, [pc, #420]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e035      	b.n	800200c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa8:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d115      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0b9      	b.n	800212c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc0:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0ad      	b.n	800212c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0a5      	b.n	800212c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001fe0:	f000 f8b4 	bl	800214c <HAL_RCC_GetSysClockFreq>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4a55      	ldr	r2, [pc, #340]	; (800213c <HAL_RCC_ClockConfig+0x264>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d90f      	bls.n	800200c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001fec:	4b52      	ldr	r3, [pc, #328]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ff8:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002000:	4a4d      	ldr	r2, [pc, #308]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8002002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002006:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800200c:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 0203 	bic.w	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4947      	ldr	r1, [pc, #284]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800201e:	f7fe fb31 	bl	8000684 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002024:	e00a      	b.n	800203c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002026:	f7fe fb2d 	bl	8000684 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e077      	b.n	800212c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 020c 	and.w	r2, r3, #12
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	429a      	cmp	r2, r3
 800204c:	d1eb      	bne.n	8002026 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b80      	cmp	r3, #128	; 0x80
 8002052:	d105      	bne.n	8002060 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002054:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4a37      	ldr	r2, [pc, #220]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 800205a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800205e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002078:	429a      	cmp	r2, r3
 800207a:	d208      	bcs.n	800208e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800207c:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	492b      	ldr	r1, [pc, #172]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800208e:	4b29      	ldr	r3, [pc, #164]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d210      	bcs.n	80020be <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 020f 	bic.w	r2, r3, #15
 80020a4:	4923      	ldr	r1, [pc, #140]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d001      	beq.n	80020be <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e036      	b.n	800212c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d008      	beq.n	80020dc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	4918      	ldr	r1, [pc, #96]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d009      	beq.n	80020fc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4910      	ldr	r1, [pc, #64]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020fc:	f000 f826 	bl	800214c <HAL_RCC_GetSysClockFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	490c      	ldr	r1, [pc, #48]	; (8002140 <HAL_RCC_ClockConfig+0x268>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_RCC_ClockConfig+0x26c>)
 800211a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_RCC_ClockConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fa5f 	bl	80005e4 <HAL_InitTick>
 8002126:	4603      	mov	r3, r0
 8002128:	73fb      	strb	r3, [r7, #15]

  return status;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40022000 	.word	0x40022000
 8002138:	40021000 	.word	0x40021000
 800213c:	04c4b400 	.word	0x04c4b400
 8002140:	08007110 	.word	0x08007110
 8002144:	20000008 	.word	0x20000008
 8002148:	20000000 	.word	0x20000000

0800214c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215a:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002164:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x34>
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	2b0c      	cmp	r3, #12
 8002178:	d121      	bne.n	80021be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d11e      	bne.n	80021be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002180:	4b34      	ldr	r3, [pc, #208]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d107      	bne.n	800219c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800218c:	4b31      	ldr	r3, [pc, #196]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	e005      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800219c:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021a8:	4a2b      	ldr	r2, [pc, #172]	; (8002258 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10d      	bne.n	80021d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d102      	bne.n	80021ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021c4:	4b25      	ldr	r3, [pc, #148]	; (800225c <HAL_RCC_GetSysClockFreq+0x110>)
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	e004      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_RCC_GetSysClockFreq+0x114>)
 80021d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d134      	bne.n	8002244 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d003      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d003      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0xac>
 80021f0:	e005      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021f2:	4b1a      	ldr	r3, [pc, #104]	; (800225c <HAL_RCC_GetSysClockFreq+0x110>)
 80021f4:	617b      	str	r3, [r7, #20]
      break;
 80021f6:	e005      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_RCC_GetSysClockFreq+0x114>)
 80021fa:	617b      	str	r3, [r7, #20]
      break;
 80021fc:	e002      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	617b      	str	r3, [r7, #20]
      break;
 8002202:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	3301      	adds	r3, #1
 8002210:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	fb03 f202 	mul.w	r2, r3, r2
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	0e5b      	lsrs	r3, r3, #25
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	3301      	adds	r3, #1
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002244:	69bb      	ldr	r3, [r7, #24]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	08007128 	.word	0x08007128
 800225c:	00f42400 	.word	0x00f42400
 8002260:	007a1200 	.word	0x007a1200

08002264 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_RCC_GetHCLKFreq+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000008 	.word	0x20000008

0800227c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002280:	f7ff fff0 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	4904      	ldr	r1, [pc, #16]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	08007120 	.word	0x08007120

080022a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022ac:	f7ff ffda 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	0adb      	lsrs	r3, r3, #11
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	4904      	ldr	r1, [pc, #16]	; (80022d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08007120 	.word	0x08007120

080022d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022ec:	f7ff f916 	bl	800151c <HAL_PWREx_GetVoltageRange>
 80022f0:	6178      	str	r0, [r7, #20]
 80022f2:	e014      	b.n	800231e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022f4:	4b22      	ldr	r3, [pc, #136]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	4a21      	ldr	r2, [pc, #132]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800230c:	f7ff f906 	bl	800151c <HAL_PWREx_GetVoltageRange>
 8002310:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	4a1a      	ldr	r2, [pc, #104]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002324:	d10b      	bne.n	800233e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b80      	cmp	r3, #128	; 0x80
 800232a:	d913      	bls.n	8002354 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2ba0      	cmp	r3, #160	; 0xa0
 8002330:	d902      	bls.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002332:	2302      	movs	r3, #2
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	e00d      	b.n	8002354 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002338:	2301      	movs	r3, #1
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	e00a      	b.n	8002354 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b7f      	cmp	r3, #127	; 0x7f
 8002342:	d902      	bls.n	800234a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002344:	2302      	movs	r3, #2
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	e004      	b.n	8002354 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b70      	cmp	r3, #112	; 0x70
 800234e:	d101      	bne.n	8002354 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002350:	2301      	movs	r3, #1
 8002352:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 020f 	bic.w	r2, r3, #15
 800235c:	4909      	ldr	r1, [pc, #36]	; (8002384 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	429a      	cmp	r2, r3
 8002370:	d001      	beq.n	8002376 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	40022000 	.word	0x40022000

08002388 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800238e:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d00b      	beq.n	80023b6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d825      	bhi.n	80023f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d008      	beq.n	80023bc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d11f      	bne.n	80023f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023b2:	613b      	str	r3, [r7, #16]
    break;
 80023b4:	e01f      	b.n	80023f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80023b6:	4b25      	ldr	r3, [pc, #148]	; (800244c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80023b8:	613b      	str	r3, [r7, #16]
    break;
 80023ba:	e01c      	b.n	80023f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d107      	bne.n	80023d8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023c8:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	e005      	b.n	80023e4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80023e4:	4a1a      	ldr	r2, [pc, #104]	; (8002450 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ec:	613b      	str	r3, [r7, #16]
    break;
 80023ee:	e002      	b.n	80023f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	613b      	str	r3, [r7, #16]
    break;
 80023f4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	3301      	adds	r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	fb03 f202 	mul.w	r2, r3, r2
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
 800241a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	0e5b      	lsrs	r3, r3, #25
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	3301      	adds	r3, #1
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002436:	683b      	ldr	r3, [r7, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40021000 	.word	0x40021000
 8002448:	00f42400 	.word	0x00f42400
 800244c:	007a1200 	.word	0x007a1200
 8002450:	08007128 	.word	0x08007128

08002454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800245c:	2300      	movs	r3, #0
 800245e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002460:	2300      	movs	r3, #0
 8002462:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800246c:	2b00      	cmp	r3, #0
 800246e:	d040      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002474:	2b80      	cmp	r3, #128	; 0x80
 8002476:	d02a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d825      	bhi.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800247c:	2b60      	cmp	r3, #96	; 0x60
 800247e:	d026      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002480:	2b60      	cmp	r3, #96	; 0x60
 8002482:	d821      	bhi.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002484:	2b40      	cmp	r3, #64	; 0x40
 8002486:	d006      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002488:	2b40      	cmp	r3, #64	; 0x40
 800248a:	d81d      	bhi.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002490:	2b20      	cmp	r3, #32
 8002492:	d010      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002494:	e018      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002496:	4b89      	ldr	r3, [pc, #548]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4a88      	ldr	r2, [pc, #544]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024a2:	e015      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3304      	adds	r3, #4
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fb02 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b4:	e00c      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3320      	adds	r3, #32
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fbed 	bl	8002c9c <RCCEx_PLLSAI2_Config>
 80024c2:	4603      	mov	r3, r0
 80024c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024c6:	e003      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	74fb      	strb	r3, [r7, #19]
      break;
 80024cc:	e000      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80024ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10b      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024d6:	4b79      	ldr	r3, [pc, #484]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024dc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e4:	4975      	ldr	r1, [pc, #468]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80024ec:	e001      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d047      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002506:	d030      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250c:	d82a      	bhi.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800250e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002512:	d02a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002518:	d824      	bhi.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800251a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800251e:	d008      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002524:	d81e      	bhi.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800252a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252e:	d010      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002530:	e018      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002532:	4b62      	ldr	r3, [pc, #392]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4a61      	ldr	r2, [pc, #388]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800253e:	e015      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3304      	adds	r3, #4
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fab4 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002550:	e00c      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3320      	adds	r3, #32
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fb9f 	bl	8002c9c <RCCEx_PLLSAI2_Config>
 800255e:	4603      	mov	r3, r0
 8002560:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002562:	e003      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	74fb      	strb	r3, [r7, #19]
      break;
 8002568:	e000      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800256a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10b      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002572:	4b52      	ldr	r3, [pc, #328]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	494e      	ldr	r1, [pc, #312]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002588:	e001      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 809f 	beq.w	80026da <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259c:	2300      	movs	r3, #0
 800259e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025a0:	4b46      	ldr	r3, [pc, #280]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80025b0:	2300      	movs	r3, #0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	4a40      	ldr	r2, [pc, #256]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6593      	str	r3, [r2, #88]	; 0x58
 80025c2:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ce:	2301      	movs	r3, #1
 80025d0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a3a      	ldr	r2, [pc, #232]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025de:	f7fe f851 	bl	8000684 <HAL_GetTick>
 80025e2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025e4:	e009      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe f84d 	bl	8000684 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d902      	bls.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	74fb      	strb	r3, [r7, #19]
        break;
 80025f8:	e005      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025fa:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ef      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d15b      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800260c:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002616:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01f      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	429a      	cmp	r2, r3
 8002628:	d019      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002634:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263c:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800263e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002646:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800264e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002656:	4a19      	ldr	r2, [pc, #100]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d016      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe f80c 	bl	8000684 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266e:	e00b      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe f808 	bl	8000684 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d902      	bls.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	74fb      	strb	r3, [r7, #19]
            break;
 8002686:	e006      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ec      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10c      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800269c:	4b07      	ldr	r3, [pc, #28]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	4903      	ldr	r1, [pc, #12]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026b4:	e008      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	74bb      	strb	r3, [r7, #18]
 80026ba:	e005      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c8:	7c7b      	ldrb	r3, [r7, #17]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d105      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ce:	4ba0      	ldr	r3, [pc, #640]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	4a9f      	ldr	r2, [pc, #636]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e6:	4b9a      	ldr	r3, [pc, #616]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	f023 0203 	bic.w	r2, r3, #3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	4996      	ldr	r1, [pc, #600]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002708:	4b91      	ldr	r3, [pc, #580]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	f023 020c 	bic.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	498e      	ldr	r1, [pc, #568]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800272a:	4b89      	ldr	r3, [pc, #548]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	4985      	ldr	r1, [pc, #532]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800274c:	4b80      	ldr	r3, [pc, #512]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275a:	497d      	ldr	r1, [pc, #500]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800276e:	4b78      	ldr	r3, [pc, #480]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277c:	4974      	ldr	r1, [pc, #464]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002790:	4b6f      	ldr	r3, [pc, #444]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279e:	496c      	ldr	r1, [pc, #432]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027b2:	4b67      	ldr	r3, [pc, #412]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c0:	4963      	ldr	r1, [pc, #396]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027d4:	4b5e      	ldr	r3, [pc, #376]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e2:	495b      	ldr	r1, [pc, #364]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f6:	4b56      	ldr	r3, [pc, #344]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	4952      	ldr	r1, [pc, #328]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002818:	4b4d      	ldr	r3, [pc, #308]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	494a      	ldr	r1, [pc, #296]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800283a:	4b45      	ldr	r3, [pc, #276]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	4941      	ldr	r1, [pc, #260]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800285c:	4b3c      	ldr	r3, [pc, #240]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800285e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286a:	4939      	ldr	r1, [pc, #228]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d028      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800287e:	4b34      	ldr	r3, [pc, #208]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288c:	4930      	ldr	r1, [pc, #192]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800289c:	d106      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800289e:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4a2b      	ldr	r2, [pc, #172]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028a8:	60d3      	str	r3, [r2, #12]
 80028aa:	e011      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2101      	movs	r1, #1
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f8f9 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d04d      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028e4:	d108      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028ec:	4a18      	ldr	r2, [pc, #96]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80028f6:	e012      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80028f8:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028fe:	4a14      	ldr	r2, [pc, #80]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002904:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002916:	490e      	ldr	r1, [pc, #56]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002926:	d106      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800292e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002932:	60d3      	str	r3, [r2, #12]
 8002934:	e020      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800293a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800293e:	d109      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a02      	ldr	r2, [pc, #8]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	60d3      	str	r3, [r2, #12]
 800294c:	e014      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800295c:	d10c      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3304      	adds	r3, #4
 8002962:	2101      	movs	r1, #1
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f8a5 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d028      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002984:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002992:	4947      	ldr	r1, [pc, #284]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800299e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a2:	d106      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a4:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a41      	ldr	r2, [pc, #260]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ae:	60d3      	str	r3, [r2, #12]
 80029b0:	e011      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ba:	d10c      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	2101      	movs	r1, #1
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f876 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80029d2:	7cfb      	ldrb	r3, [r7, #19]
 80029d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01e      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029e2:	4b33      	ldr	r3, [pc, #204]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029f2:	492f      	ldr	r1, [pc, #188]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 f851 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 8002a12:	4603      	mov	r3, r0
 8002a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a16:	7cfb      	ldrb	r3, [r7, #19]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a2c:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a32:	f023 0204 	bic.w	r2, r3, #4
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3c:	491c      	ldr	r1, [pc, #112]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a50:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a56:	f023 0218 	bic.w	r2, r3, #24
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	4913      	ldr	r1, [pc, #76]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d017      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a84:	490a      	ldr	r1, [pc, #40]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002aa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ac2:	4b72      	ldr	r3, [pc, #456]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00e      	beq.n	8002aec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ace:	4b6f      	ldr	r3, [pc, #444]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0203 	and.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d103      	bne.n	8002ae6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d142      	bne.n	8002b6c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	e03f      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d018      	beq.n	8002b26 <RCCEx_PLLSAI1_Config+0x72>
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d825      	bhi.n	8002b44 <RCCEx_PLLSAI1_Config+0x90>
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d002      	beq.n	8002b02 <RCCEx_PLLSAI1_Config+0x4e>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d009      	beq.n	8002b14 <RCCEx_PLLSAI1_Config+0x60>
 8002b00:	e020      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b02:	4b62      	ldr	r3, [pc, #392]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d11d      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b12:	e01a      	b.n	8002b4a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b14:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d116      	bne.n	8002b4e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b24:	e013      	b.n	8002b4e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b26:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b32:	4b56      	ldr	r3, [pc, #344]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b42:	e006      	b.n	8002b52 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      break;
 8002b48:	e004      	b.n	8002b54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e002      	b.n	8002b54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002b52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d108      	bne.n	8002b6c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002b5a:	4b4c      	ldr	r3, [pc, #304]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4949      	ldr	r1, [pc, #292]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 8086 	bne.w	8002c80 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b74:	4b45      	ldr	r3, [pc, #276]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a44      	ldr	r2, [pc, #272]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b80:	f7fd fd80 	bl	8000684 <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b86:	e009      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b88:	f7fd fd7c 	bl	8000684 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d902      	bls.n	8002b9c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	73fb      	strb	r3, [r7, #15]
        break;
 8002b9a:	e005      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b9c:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ef      	bne.n	8002b88 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d168      	bne.n	8002c80 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d113      	bne.n	8002bdc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bb4:	4b35      	ldr	r3, [pc, #212]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6892      	ldr	r2, [r2, #8]
 8002bc0:	0211      	lsls	r1, r2, #8
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	06d2      	lsls	r2, r2, #27
 8002bc8:	4311      	orrs	r1, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6852      	ldr	r2, [r2, #4]
 8002bce:	3a01      	subs	r2, #1
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	492d      	ldr	r1, [pc, #180]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	610b      	str	r3, [r1, #16]
 8002bda:	e02d      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d115      	bne.n	8002c0e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002be2:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6892      	ldr	r2, [r2, #8]
 8002bee:	0211      	lsls	r1, r2, #8
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6912      	ldr	r2, [r2, #16]
 8002bf4:	0852      	lsrs	r2, r2, #1
 8002bf6:	3a01      	subs	r2, #1
 8002bf8:	0552      	lsls	r2, r2, #21
 8002bfa:	4311      	orrs	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6852      	ldr	r2, [r2, #4]
 8002c00:	3a01      	subs	r2, #1
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	430a      	orrs	r2, r1
 8002c06:	4921      	ldr	r1, [pc, #132]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	610b      	str	r3, [r1, #16]
 8002c0c:	e014      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6892      	ldr	r2, [r2, #8]
 8002c1a:	0211      	lsls	r1, r2, #8
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6952      	ldr	r2, [r2, #20]
 8002c20:	0852      	lsrs	r2, r2, #1
 8002c22:	3a01      	subs	r2, #1
 8002c24:	0652      	lsls	r2, r2, #25
 8002c26:	4311      	orrs	r1, r2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6852      	ldr	r2, [r2, #4]
 8002c2c:	3a01      	subs	r2, #1
 8002c2e:	0112      	lsls	r2, r2, #4
 8002c30:	430a      	orrs	r2, r1
 8002c32:	4916      	ldr	r1, [pc, #88]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c38:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a13      	ldr	r2, [pc, #76]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c44:	f7fd fd1e 	bl	8000684 <HAL_GetTick>
 8002c48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c4a:	e009      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c4c:	f7fd fd1a 	bl	8000684 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d902      	bls.n	8002c60 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c5e:	e005      	b.n	8002c6c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ef      	beq.n	8002c4c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	4904      	ldr	r1, [pc, #16]	; (8002c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	07ff800f 	.word	0x07ff800f
 8002c94:	ff9f800f 	.word	0xff9f800f
 8002c98:	f9ff800f 	.word	0xf9ff800f

08002c9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002caa:	4b72      	ldr	r3, [pc, #456]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00e      	beq.n	8002cd4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cb6:	4b6f      	ldr	r3, [pc, #444]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0203 	and.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d103      	bne.n	8002cce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d142      	bne.n	8002d54 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e03f      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d018      	beq.n	8002d0e <RCCEx_PLLSAI2_Config+0x72>
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d825      	bhi.n	8002d2c <RCCEx_PLLSAI2_Config+0x90>
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d002      	beq.n	8002cea <RCCEx_PLLSAI2_Config+0x4e>
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d009      	beq.n	8002cfc <RCCEx_PLLSAI2_Config+0x60>
 8002ce8:	e020      	b.n	8002d2c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cea:	4b62      	ldr	r3, [pc, #392]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11d      	bne.n	8002d32 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfa:	e01a      	b.n	8002d32 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cfc:	4b5d      	ldr	r3, [pc, #372]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d116      	bne.n	8002d36 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e013      	b.n	8002d36 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d0e:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d1a:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d2a:	e006      	b.n	8002d3a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e004      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002d3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d108      	bne.n	8002d54 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002d42:	4b4c      	ldr	r3, [pc, #304]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f023 0203 	bic.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4949      	ldr	r1, [pc, #292]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 8086 	bne.w	8002e68 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d5c:	4b45      	ldr	r3, [pc, #276]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a44      	ldr	r2, [pc, #272]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d68:	f7fd fc8c 	bl	8000684 <HAL_GetTick>
 8002d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d6e:	e009      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d70:	f7fd fc88 	bl	8000684 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d902      	bls.n	8002d84 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	73fb      	strb	r3, [r7, #15]
        break;
 8002d82:	e005      	b.n	8002d90 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ef      	bne.n	8002d70 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d168      	bne.n	8002e68 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d113      	bne.n	8002dc4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d9c:	4b35      	ldr	r3, [pc, #212]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6892      	ldr	r2, [r2, #8]
 8002da8:	0211      	lsls	r1, r2, #8
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68d2      	ldr	r2, [r2, #12]
 8002dae:	06d2      	lsls	r2, r2, #27
 8002db0:	4311      	orrs	r1, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6852      	ldr	r2, [r2, #4]
 8002db6:	3a01      	subs	r2, #1
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	492d      	ldr	r1, [pc, #180]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	614b      	str	r3, [r1, #20]
 8002dc2:	e02d      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d115      	bne.n	8002df6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dca:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <RCCEx_PLLSAI2_Config+0x1e0>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6892      	ldr	r2, [r2, #8]
 8002dd6:	0211      	lsls	r1, r2, #8
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6912      	ldr	r2, [r2, #16]
 8002ddc:	0852      	lsrs	r2, r2, #1
 8002dde:	3a01      	subs	r2, #1
 8002de0:	0552      	lsls	r2, r2, #21
 8002de2:	4311      	orrs	r1, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6852      	ldr	r2, [r2, #4]
 8002de8:	3a01      	subs	r2, #1
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	430a      	orrs	r2, r1
 8002dee:	4921      	ldr	r1, [pc, #132]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	614b      	str	r3, [r1, #20]
 8002df4:	e014      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002df6:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6892      	ldr	r2, [r2, #8]
 8002e02:	0211      	lsls	r1, r2, #8
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6952      	ldr	r2, [r2, #20]
 8002e08:	0852      	lsrs	r2, r2, #1
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	0652      	lsls	r2, r2, #25
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6852      	ldr	r2, [r2, #4]
 8002e14:	3a01      	subs	r2, #1
 8002e16:	0112      	lsls	r2, r2, #4
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	4916      	ldr	r1, [pc, #88]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2c:	f7fd fc2a 	bl	8000684 <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e32:	e009      	b.n	8002e48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e34:	f7fd fc26 	bl	8000684 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d902      	bls.n	8002e48 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	73fb      	strb	r3, [r7, #15]
          break;
 8002e46:	e005      	b.n	8002e54 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ef      	beq.n	8002e34 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	4904      	ldr	r1, [pc, #16]	; (8002e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	07ff800f 	.word	0x07ff800f
 8002e7c:	ff9f800f 	.word	0xff9f800f
 8002e80:	f9ff800f 	.word	0xf9ff800f

08002e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e049      	b.n	8002f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f003 faaa 	bl	8006404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	f000 fa50 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d122      	bne.n	8002f8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d11b      	bne.n	8002f8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f06f 0202 	mvn.w	r2, #2
 8002f5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f9d8 	bl	800332a <HAL_TIM_IC_CaptureCallback>
 8002f7a:	e005      	b.n	8002f88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f9ca 	bl	8003316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f9db 	bl	800333e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d122      	bne.n	8002fe2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d11b      	bne.n	8002fe2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f06f 0204 	mvn.w	r2, #4
 8002fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f9ae 	bl	800332a <HAL_TIM_IC_CaptureCallback>
 8002fce:	e005      	b.n	8002fdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f9a0 	bl	8003316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f9b1 	bl	800333e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d122      	bne.n	8003036 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d11b      	bne.n	8003036 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f06f 0208 	mvn.w	r2, #8
 8003006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2204      	movs	r2, #4
 800300c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f984 	bl	800332a <HAL_TIM_IC_CaptureCallback>
 8003022:	e005      	b.n	8003030 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f976 	bl	8003316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f987 	bl	800333e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b10      	cmp	r3, #16
 8003042:	d122      	bne.n	800308a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b10      	cmp	r3, #16
 8003050:	d11b      	bne.n	800308a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f06f 0210 	mvn.w	r2, #16
 800305a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2208      	movs	r2, #8
 8003060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f95a 	bl	800332a <HAL_TIM_IC_CaptureCallback>
 8003076:	e005      	b.n	8003084 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f94c 	bl	8003316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f95d 	bl	800333e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10e      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f06f 0201 	mvn.w	r2, #1
 80030ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f926 	bl	8003302 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b80      	cmp	r3, #128	; 0x80
 80030c2:	d10e      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b80      	cmp	r3, #128	; 0x80
 80030d0:	d107      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fb09 	bl	80036f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b80      	cmp	r3, #128	; 0x80
 80030fe:	d107      	bne.n	8003110 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fafc 	bl	8003708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d10e      	bne.n	800313c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d107      	bne.n	800313c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f90b 	bl	8003352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b20      	cmp	r3, #32
 8003148:	d10e      	bne.n	8003168 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b20      	cmp	r3, #32
 8003156:	d107      	bne.n	8003168 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0220 	mvn.w	r2, #32
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fabc 	bl	80036e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_TIM_ConfigClockSource+0x1c>
 8003188:	2302      	movs	r3, #2
 800318a:	e0b6      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x18a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c8:	d03e      	beq.n	8003248 <HAL_TIM_ConfigClockSource+0xd8>
 80031ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ce:	f200 8087 	bhi.w	80032e0 <HAL_TIM_ConfigClockSource+0x170>
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d6:	f000 8086 	beq.w	80032e6 <HAL_TIM_ConfigClockSource+0x176>
 80031da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031de:	d87f      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x170>
 80031e0:	2b70      	cmp	r3, #112	; 0x70
 80031e2:	d01a      	beq.n	800321a <HAL_TIM_ConfigClockSource+0xaa>
 80031e4:	2b70      	cmp	r3, #112	; 0x70
 80031e6:	d87b      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x170>
 80031e8:	2b60      	cmp	r3, #96	; 0x60
 80031ea:	d050      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x11e>
 80031ec:	2b60      	cmp	r3, #96	; 0x60
 80031ee:	d877      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x170>
 80031f0:	2b50      	cmp	r3, #80	; 0x50
 80031f2:	d03c      	beq.n	800326e <HAL_TIM_ConfigClockSource+0xfe>
 80031f4:	2b50      	cmp	r3, #80	; 0x50
 80031f6:	d873      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x170>
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	d058      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x13e>
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d86f      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x170>
 8003200:	2b30      	cmp	r3, #48	; 0x30
 8003202:	d064      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x15e>
 8003204:	2b30      	cmp	r3, #48	; 0x30
 8003206:	d86b      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x170>
 8003208:	2b20      	cmp	r3, #32
 800320a:	d060      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x15e>
 800320c:	2b20      	cmp	r3, #32
 800320e:	d867      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x170>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d05c      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x15e>
 8003214:	2b10      	cmp	r3, #16
 8003216:	d05a      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x15e>
 8003218:	e062      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6899      	ldr	r1, [r3, #8]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f000 f9b1 	bl	8003590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800323c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	609a      	str	r2, [r3, #8]
      break;
 8003246:	e04f      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6899      	ldr	r1, [r3, #8]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f000 f99a 	bl	8003590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800326a:	609a      	str	r2, [r3, #8]
      break;
 800326c:	e03c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	461a      	mov	r2, r3
 800327c:	f000 f90e 	bl	800349c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2150      	movs	r1, #80	; 0x50
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f967 	bl	800355a <TIM_ITRx_SetConfig>
      break;
 800328c:	e02c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6859      	ldr	r1, [r3, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	461a      	mov	r2, r3
 800329c:	f000 f92d 	bl	80034fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2160      	movs	r1, #96	; 0x60
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f957 	bl	800355a <TIM_ITRx_SetConfig>
      break;
 80032ac:	e01c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f000 f8ee 	bl	800349c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2140      	movs	r1, #64	; 0x40
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f947 	bl	800355a <TIM_ITRx_SetConfig>
      break;
 80032cc:	e00c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4619      	mov	r1, r3
 80032d8:	4610      	mov	r0, r2
 80032da:	f000 f93e 	bl	800355a <TIM_ITRx_SetConfig>
      break;
 80032de:	e003      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      break;
 80032e4:	e000      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80032e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a40      	ldr	r2, [pc, #256]	; (800347c <TIM_Base_SetConfig+0x114>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003386:	d00f      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a3d      	ldr	r2, [pc, #244]	; (8003480 <TIM_Base_SetConfig+0x118>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00b      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a3c      	ldr	r2, [pc, #240]	; (8003484 <TIM_Base_SetConfig+0x11c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d007      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a3b      	ldr	r2, [pc, #236]	; (8003488 <TIM_Base_SetConfig+0x120>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a3a      	ldr	r2, [pc, #232]	; (800348c <TIM_Base_SetConfig+0x124>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d108      	bne.n	80033ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a2f      	ldr	r2, [pc, #188]	; (800347c <TIM_Base_SetConfig+0x114>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01f      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d01b      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2c      	ldr	r2, [pc, #176]	; (8003480 <TIM_Base_SetConfig+0x118>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d017      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <TIM_Base_SetConfig+0x11c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2a      	ldr	r2, [pc, #168]	; (8003488 <TIM_Base_SetConfig+0x120>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00f      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a29      	ldr	r2, [pc, #164]	; (800348c <TIM_Base_SetConfig+0x124>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00b      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a28      	ldr	r2, [pc, #160]	; (8003490 <TIM_Base_SetConfig+0x128>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a27      	ldr	r2, [pc, #156]	; (8003494 <TIM_Base_SetConfig+0x12c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a26      	ldr	r2, [pc, #152]	; (8003498 <TIM_Base_SetConfig+0x130>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d108      	bne.n	8003414 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a10      	ldr	r2, [pc, #64]	; (800347c <TIM_Base_SetConfig+0x114>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00f      	beq.n	8003460 <TIM_Base_SetConfig+0xf8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a12      	ldr	r2, [pc, #72]	; (800348c <TIM_Base_SetConfig+0x124>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00b      	beq.n	8003460 <TIM_Base_SetConfig+0xf8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a11      	ldr	r2, [pc, #68]	; (8003490 <TIM_Base_SetConfig+0x128>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d007      	beq.n	8003460 <TIM_Base_SetConfig+0xf8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a10      	ldr	r2, [pc, #64]	; (8003494 <TIM_Base_SetConfig+0x12c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <TIM_Base_SetConfig+0xf8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a0f      	ldr	r2, [pc, #60]	; (8003498 <TIM_Base_SetConfig+0x130>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d103      	bne.n	8003468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	615a      	str	r2, [r3, #20]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800
 8003488:	40000c00 	.word	0x40000c00
 800348c:	40013400 	.word	0x40013400
 8003490:	40014000 	.word	0x40014000
 8003494:	40014400 	.word	0x40014400
 8003498:	40014800 	.word	0x40014800

0800349c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f023 0201 	bic.w	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f023 030a 	bic.w	r3, r3, #10
 80034d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	621a      	str	r2, [r3, #32]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b087      	sub	sp, #28
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f023 0210 	bic.w	r2, r3, #16
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	031b      	lsls	r3, r3, #12
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800355a:	b480      	push	{r7}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	f043 0307 	orr.w	r3, r3, #7
 800357c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	609a      	str	r2, [r3, #8]
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	021a      	lsls	r2, r3, #8
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e068      	b.n	80036ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2e      	ldr	r2, [pc, #184]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2d      	ldr	r2, [pc, #180]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d108      	bne.n	800362e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003622:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003634:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d01d      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d018      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1b      	ldr	r2, [pc, #108]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d013      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00e      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d009      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a13      	ldr	r2, [pc, #76]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d004      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a14      	ldr	r2, [pc, #80]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10c      	bne.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4313      	orrs	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40012c00 	.word	0x40012c00
 80036cc:	40013400 	.word	0x40013400
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40000c00 	.word	0x40000c00
 80036dc:	40014000 	.word	0x40014000

080036e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e042      	b.n	80037b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f002 fe83 	bl	800644c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2224      	movs	r2, #36	; 0x24
 800374a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fd44 	bl	80041ec <UART_SetConfig>
 8003764:	4603      	mov	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e022      	b.n	80037b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f001 f834 	bl	80047e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800378a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800379a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f001 f8bb 	bl	8004928 <UART_CheckIdleState>
 80037b2:	4603      	mov	r3, r0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	f040 8084 	bne.w	80038e0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_UART_Transmit+0x28>
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e07c      	b.n	80038e2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_UART_Transmit+0x3a>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e075      	b.n	80038e2 <HAL_UART_Transmit+0x126>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2221      	movs	r2, #33	; 0x21
 800380a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800380e:	f7fc ff39 	bl	8000684 <HAL_GetTick>
 8003812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	88fa      	ldrh	r2, [r7, #6]
 8003820:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382c:	d108      	bne.n	8003840 <HAL_UART_Transmit+0x84>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	e003      	b.n	8003848 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003850:	e02d      	b.n	80038ae <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	2180      	movs	r1, #128	; 0x80
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f001 f8ae 	bl	80049be <UART_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e03a      	b.n	80038e2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	881a      	ldrh	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800387e:	b292      	uxth	r2, r2
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	3302      	adds	r3, #2
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	e008      	b.n	800389c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	b292      	uxth	r2, r2
 8003894:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3301      	adds	r3, #1
 800389a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1cb      	bne.n	8003852 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	2140      	movs	r1, #64	; 0x40
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f001 f87a 	bl	80049be <UART_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e006      	b.n	80038e2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003900:	2b20      	cmp	r3, #32
 8003902:	d142      	bne.n	800398a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_UART_Receive_IT+0x24>
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e03b      	b.n	800398c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_UART_Receive_IT+0x36>
 800391e:	2302      	movs	r3, #2
 8003920:	e034      	b.n	800398c <HAL_UART_Receive_IT+0xa0>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a17      	ldr	r2, [pc, #92]	; (8003994 <HAL_UART_Receive_IT+0xa8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01f      	beq.n	800397a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d018      	beq.n	800397a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	613b      	str	r3, [r7, #16]
   return(result);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	69f9      	ldr	r1, [r7, #28]
 800396c:	6a3a      	ldr	r2, [r7, #32]
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	61bb      	str	r3, [r7, #24]
   return(result);
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e6      	bne.n	8003948 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	461a      	mov	r2, r3
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f001 f8e5 	bl	8004b50 <UART_Start_Receive_IT>
 8003986:	4603      	mov	r3, r0
 8003988:	e000      	b.n	800398c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800398a:	2302      	movs	r3, #2
  }
}
 800398c:	4618      	mov	r0, r3
 800398e:	3728      	adds	r7, #40	; 0x28
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40008000 	.word	0x40008000

08003998 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d17a      	bne.n	8003aa6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_UART_Transmit_DMA+0x24>
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e073      	b.n	8003aa8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Transmit_DMA+0x36>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e06c      	b.n	8003aa8 <HAL_UART_Transmit_DMA+0x110>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2221      	movs	r2, #33	; 0x21
 80039f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d02c      	beq.n	8003a5e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a08:	4a29      	ldr	r2, [pc, #164]	; (8003ab0 <HAL_UART_Transmit_DMA+0x118>)
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a10:	4a28      	ldr	r2, [pc, #160]	; (8003ab4 <HAL_UART_Transmit_DMA+0x11c>)
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a18:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <HAL_UART_Transmit_DMA+0x120>)
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a20:	2200      	movs	r2, #0
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3328      	adds	r3, #40	; 0x28
 8003a34:	461a      	mov	r2, r3
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	f7fc ffea 	bl	8000a10 <HAL_DMA_Start_IT>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2210      	movs	r2, #16
 8003a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e024      	b.n	8003aa8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3308      	adds	r3, #8
 8003a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8e:	623a      	str	r2, [r7, #32]
 8003a90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	69f9      	ldr	r1, [r7, #28]
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e5      	bne.n	8003a6e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e000      	b.n	8003aa8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
  }
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3728      	adds	r7, #40	; 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	08005043 	.word	0x08005043
 8003ab4:	080050dd 	.word	0x080050dd
 8003ab8:	08005257 	.word	0x08005257

08003abc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d142      	bne.n	8003b5a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_UART_Receive_DMA+0x24>
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e03b      	b.n	8003b5c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Receive_DMA+0x36>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e034      	b.n	8003b5c <HAL_UART_Receive_DMA+0xa0>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <HAL_UART_Receive_DMA+0xa8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01f      	beq.n	8003b4a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d018      	beq.n	8003b4a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	613b      	str	r3, [r7, #16]
   return(result);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	623b      	str	r3, [r7, #32]
 8003b38:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	69f9      	ldr	r1, [r7, #28]
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e6      	bne.n	8003b18 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f001 f927 	bl	8004da4 <UART_Start_Receive_DMA>
 8003b56:	4603      	mov	r3, r0
 8003b58:	e000      	b.n	8003b5c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
  }
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3728      	adds	r7, #40	; 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40008000 	.word	0x40008000

08003b68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b0ba      	sub	sp, #232	; 0xe8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b92:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b96:	4013      	ands	r3, r2
 8003b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d11b      	bne.n	8003bdc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d015      	beq.n	8003bdc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d105      	bne.n	8003bc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d009      	beq.n	8003bdc <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 82d6 	beq.w	800417e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	4798      	blx	r3
      }
      return;
 8003bda:	e2d0      	b.n	800417e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003bdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 811f 	beq.w	8003e24 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003be6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003bea:	4b8b      	ldr	r3, [pc, #556]	; (8003e18 <HAL_UART_IRQHandler+0x2b0>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003bf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003bf6:	4b89      	ldr	r3, [pc, #548]	; (8003e1c <HAL_UART_IRQHandler+0x2b4>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8112 	beq.w	8003e24 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d011      	beq.n	8003c30 <HAL_UART_IRQHandler+0xc8>
 8003c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00b      	beq.n	8003c30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c26:	f043 0201 	orr.w	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d011      	beq.n	8003c60 <HAL_UART_IRQHandler+0xf8>
 8003c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00b      	beq.n	8003c60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c56:	f043 0204 	orr.w	r2, r3, #4
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d011      	beq.n	8003c90 <HAL_UART_IRQHandler+0x128>
 8003c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c86:	f043 0202 	orr.w	r2, r3, #2
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d017      	beq.n	8003ccc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d105      	bne.n	8003cb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003ca8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003cac:	4b5a      	ldr	r3, [pc, #360]	; (8003e18 <HAL_UART_IRQHandler+0x2b0>)
 8003cae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2208      	movs	r2, #8
 8003cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc2:	f043 0208 	orr.w	r2, r3, #8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d012      	beq.n	8003cfe <HAL_UART_IRQHandler+0x196>
 8003cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00c      	beq.n	8003cfe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 823c 	beq.w	8004182 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b40      	cmp	r3, #64	; 0x40
 8003d54:	d005      	beq.n	8003d62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d04f      	beq.n	8003e02 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f001 f907 	bl	8004f76 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d141      	bne.n	8003dfa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003da2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1d9      	bne.n	8003d76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d013      	beq.n	8003df2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dce:	4a14      	ldr	r2, [pc, #80]	; (8003e20 <HAL_UART_IRQHandler+0x2b8>)
 8003dd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fc fef1 	bl	8000bbe <HAL_DMA_Abort_IT>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d017      	beq.n	8003e12 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003dec:	4610      	mov	r0, r2
 8003dee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	e00f      	b.n	8003e12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f9e4 	bl	80041c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df8:	e00b      	b.n	8003e12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f9e0 	bl	80041c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	e007      	b.n	8003e12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f9dc 	bl	80041c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003e10:	e1b7      	b.n	8004182 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e12:	bf00      	nop
    return;
 8003e14:	e1b5      	b.n	8004182 <HAL_UART_IRQHandler+0x61a>
 8003e16:	bf00      	nop
 8003e18:	10000001 	.word	0x10000001
 8003e1c:	04000120 	.word	0x04000120
 8003e20:	080052d7 	.word	0x080052d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	f040 814a 	bne.w	80040c2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8143 	beq.w	80040c2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 813c 	beq.w	80040c2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2210      	movs	r2, #16
 8003e50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	f040 80b5 	bne.w	8003fcc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8187 	beq.w	8004186 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e82:	429a      	cmp	r2, r3
 8003e84:	f080 817f 	bcs.w	8004186 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f040 8086 	bne.w	8003fb0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ed2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003eda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1da      	bne.n	8003ea4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e1      	bne.n	8003eee <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3308      	adds	r3, #8
 8003f4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e3      	bne.n	8003f2a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f80:	f023 0310 	bic.w	r3, r3, #16
 8003f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f92:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e4      	bne.n	8003f70 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fc fdab 	bl	8000b06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f905 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fca:	e0dc      	b.n	8004186 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80ce 	beq.w	800418a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003fee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80c9 	beq.w	800418a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800400c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800401a:	647b      	str	r3, [r7, #68]	; 0x44
 800401c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e4      	bne.n	8003ff8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3308      	adds	r3, #8
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	623b      	str	r3, [r7, #32]
   return(result);
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3308      	adds	r3, #8
 8004052:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004056:	633a      	str	r2, [r7, #48]	; 0x30
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800405c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e1      	bne.n	800402e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	60fb      	str	r3, [r7, #12]
   return(result);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0310 	bic.w	r3, r3, #16
 8004092:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	69b9      	ldr	r1, [r7, #24]
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	617b      	str	r3, [r7, #20]
   return(result);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e4      	bne.n	800407e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040b8:	4619      	mov	r1, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f88a 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040c0:	e063      	b.n	800418a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00e      	beq.n	80040ec <HAL_UART_IRQHandler+0x584>
 80040ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f001 fd9b 	bl	8005c20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040ea:	e051      	b.n	8004190 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d014      	beq.n	8004122 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004114:	2b00      	cmp	r3, #0
 8004116:	d03a      	beq.n	800418e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
    }
    return;
 8004120:	e035      	b.n	800418e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <HAL_UART_IRQHandler+0x5da>
 800412e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f001 f8e1 	bl	8005302 <UART_EndTransmit_IT>
    return;
 8004140:	e026      	b.n	8004190 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <HAL_UART_IRQHandler+0x5fa>
 800414e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004152:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f001 fd74 	bl	8005c48 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004160:	e016      	b.n	8004190 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d010      	beq.n	8004190 <HAL_UART_IRQHandler+0x628>
 800416e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004172:	2b00      	cmp	r3, #0
 8004174:	da0c      	bge.n	8004190 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f001 fd5c 	bl	8005c34 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800417c:	e008      	b.n	8004190 <HAL_UART_IRQHandler+0x628>
      return;
 800417e:	bf00      	nop
 8004180:	e006      	b.n	8004190 <HAL_UART_IRQHandler+0x628>
    return;
 8004182:	bf00      	nop
 8004184:	e004      	b.n	8004190 <HAL_UART_IRQHandler+0x628>
      return;
 8004186:	bf00      	nop
 8004188:	e002      	b.n	8004190 <HAL_UART_IRQHandler+0x628>
      return;
 800418a:	bf00      	nop
 800418c:	e000      	b.n	8004190 <HAL_UART_IRQHandler+0x628>
    return;
 800418e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8004190:	37e8      	adds	r7, #232	; 0xe8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop

08004198 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f0:	b08c      	sub	sp, #48	; 0x30
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	431a      	orrs	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	431a      	orrs	r2, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	4313      	orrs	r3, r2
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4baa      	ldr	r3, [pc, #680]	; (80044c4 <UART_SetConfig+0x2d8>)
 800421c:	4013      	ands	r3, r2
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004224:	430b      	orrs	r3, r1
 8004226:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a9f      	ldr	r2, [pc, #636]	; (80044c8 <UART_SetConfig+0x2dc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004254:	4313      	orrs	r3, r2
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004262:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800426c:	430b      	orrs	r3, r1
 800426e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	f023 010f 	bic.w	r1, r3, #15
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a90      	ldr	r2, [pc, #576]	; (80044cc <UART_SetConfig+0x2e0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d125      	bne.n	80042dc <UART_SetConfig+0xf0>
 8004290:	4b8f      	ldr	r3, [pc, #572]	; (80044d0 <UART_SetConfig+0x2e4>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b03      	cmp	r3, #3
 800429c:	d81a      	bhi.n	80042d4 <UART_SetConfig+0xe8>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <UART_SetConfig+0xb8>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042b5 	.word	0x080042b5
 80042a8:	080042c5 	.word	0x080042c5
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042cd 	.word	0x080042cd
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ba:	e116      	b.n	80044ea <UART_SetConfig+0x2fe>
 80042bc:	2302      	movs	r3, #2
 80042be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c2:	e112      	b.n	80044ea <UART_SetConfig+0x2fe>
 80042c4:	2304      	movs	r3, #4
 80042c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ca:	e10e      	b.n	80044ea <UART_SetConfig+0x2fe>
 80042cc:	2308      	movs	r3, #8
 80042ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d2:	e10a      	b.n	80044ea <UART_SetConfig+0x2fe>
 80042d4:	2310      	movs	r3, #16
 80042d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042da:	e106      	b.n	80044ea <UART_SetConfig+0x2fe>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a7c      	ldr	r2, [pc, #496]	; (80044d4 <UART_SetConfig+0x2e8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d138      	bne.n	8004358 <UART_SetConfig+0x16c>
 80042e6:	4b7a      	ldr	r3, [pc, #488]	; (80044d0 <UART_SetConfig+0x2e4>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f003 030c 	and.w	r3, r3, #12
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	d82d      	bhi.n	8004350 <UART_SetConfig+0x164>
 80042f4:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <UART_SetConfig+0x110>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	08004331 	.word	0x08004331
 8004300:	08004351 	.word	0x08004351
 8004304:	08004351 	.word	0x08004351
 8004308:	08004351 	.word	0x08004351
 800430c:	08004341 	.word	0x08004341
 8004310:	08004351 	.word	0x08004351
 8004314:	08004351 	.word	0x08004351
 8004318:	08004351 	.word	0x08004351
 800431c:	08004339 	.word	0x08004339
 8004320:	08004351 	.word	0x08004351
 8004324:	08004351 	.word	0x08004351
 8004328:	08004351 	.word	0x08004351
 800432c:	08004349 	.word	0x08004349
 8004330:	2300      	movs	r3, #0
 8004332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004336:	e0d8      	b.n	80044ea <UART_SetConfig+0x2fe>
 8004338:	2302      	movs	r3, #2
 800433a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800433e:	e0d4      	b.n	80044ea <UART_SetConfig+0x2fe>
 8004340:	2304      	movs	r3, #4
 8004342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004346:	e0d0      	b.n	80044ea <UART_SetConfig+0x2fe>
 8004348:	2308      	movs	r3, #8
 800434a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800434e:	e0cc      	b.n	80044ea <UART_SetConfig+0x2fe>
 8004350:	2310      	movs	r3, #16
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004356:	e0c8      	b.n	80044ea <UART_SetConfig+0x2fe>
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a5e      	ldr	r2, [pc, #376]	; (80044d8 <UART_SetConfig+0x2ec>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d125      	bne.n	80043ae <UART_SetConfig+0x1c2>
 8004362:	4b5b      	ldr	r3, [pc, #364]	; (80044d0 <UART_SetConfig+0x2e4>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800436c:	2b30      	cmp	r3, #48	; 0x30
 800436e:	d016      	beq.n	800439e <UART_SetConfig+0x1b2>
 8004370:	2b30      	cmp	r3, #48	; 0x30
 8004372:	d818      	bhi.n	80043a6 <UART_SetConfig+0x1ba>
 8004374:	2b20      	cmp	r3, #32
 8004376:	d00a      	beq.n	800438e <UART_SetConfig+0x1a2>
 8004378:	2b20      	cmp	r3, #32
 800437a:	d814      	bhi.n	80043a6 <UART_SetConfig+0x1ba>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <UART_SetConfig+0x19a>
 8004380:	2b10      	cmp	r3, #16
 8004382:	d008      	beq.n	8004396 <UART_SetConfig+0x1aa>
 8004384:	e00f      	b.n	80043a6 <UART_SetConfig+0x1ba>
 8004386:	2300      	movs	r3, #0
 8004388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800438c:	e0ad      	b.n	80044ea <UART_SetConfig+0x2fe>
 800438e:	2302      	movs	r3, #2
 8004390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004394:	e0a9      	b.n	80044ea <UART_SetConfig+0x2fe>
 8004396:	2304      	movs	r3, #4
 8004398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800439c:	e0a5      	b.n	80044ea <UART_SetConfig+0x2fe>
 800439e:	2308      	movs	r3, #8
 80043a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043a4:	e0a1      	b.n	80044ea <UART_SetConfig+0x2fe>
 80043a6:	2310      	movs	r3, #16
 80043a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ac:	e09d      	b.n	80044ea <UART_SetConfig+0x2fe>
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a4a      	ldr	r2, [pc, #296]	; (80044dc <UART_SetConfig+0x2f0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d125      	bne.n	8004404 <UART_SetConfig+0x218>
 80043b8:	4b45      	ldr	r3, [pc, #276]	; (80044d0 <UART_SetConfig+0x2e4>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043c2:	2bc0      	cmp	r3, #192	; 0xc0
 80043c4:	d016      	beq.n	80043f4 <UART_SetConfig+0x208>
 80043c6:	2bc0      	cmp	r3, #192	; 0xc0
 80043c8:	d818      	bhi.n	80043fc <UART_SetConfig+0x210>
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d00a      	beq.n	80043e4 <UART_SetConfig+0x1f8>
 80043ce:	2b80      	cmp	r3, #128	; 0x80
 80043d0:	d814      	bhi.n	80043fc <UART_SetConfig+0x210>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <UART_SetConfig+0x1f0>
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	d008      	beq.n	80043ec <UART_SetConfig+0x200>
 80043da:	e00f      	b.n	80043fc <UART_SetConfig+0x210>
 80043dc:	2300      	movs	r3, #0
 80043de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e2:	e082      	b.n	80044ea <UART_SetConfig+0x2fe>
 80043e4:	2302      	movs	r3, #2
 80043e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ea:	e07e      	b.n	80044ea <UART_SetConfig+0x2fe>
 80043ec:	2304      	movs	r3, #4
 80043ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043f2:	e07a      	b.n	80044ea <UART_SetConfig+0x2fe>
 80043f4:	2308      	movs	r3, #8
 80043f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043fa:	e076      	b.n	80044ea <UART_SetConfig+0x2fe>
 80043fc:	2310      	movs	r3, #16
 80043fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004402:	e072      	b.n	80044ea <UART_SetConfig+0x2fe>
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a35      	ldr	r2, [pc, #212]	; (80044e0 <UART_SetConfig+0x2f4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d12a      	bne.n	8004464 <UART_SetConfig+0x278>
 800440e:	4b30      	ldr	r3, [pc, #192]	; (80044d0 <UART_SetConfig+0x2e4>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441c:	d01a      	beq.n	8004454 <UART_SetConfig+0x268>
 800441e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004422:	d81b      	bhi.n	800445c <UART_SetConfig+0x270>
 8004424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004428:	d00c      	beq.n	8004444 <UART_SetConfig+0x258>
 800442a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442e:	d815      	bhi.n	800445c <UART_SetConfig+0x270>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <UART_SetConfig+0x250>
 8004434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004438:	d008      	beq.n	800444c <UART_SetConfig+0x260>
 800443a:	e00f      	b.n	800445c <UART_SetConfig+0x270>
 800443c:	2300      	movs	r3, #0
 800443e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004442:	e052      	b.n	80044ea <UART_SetConfig+0x2fe>
 8004444:	2302      	movs	r3, #2
 8004446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800444a:	e04e      	b.n	80044ea <UART_SetConfig+0x2fe>
 800444c:	2304      	movs	r3, #4
 800444e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004452:	e04a      	b.n	80044ea <UART_SetConfig+0x2fe>
 8004454:	2308      	movs	r3, #8
 8004456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445a:	e046      	b.n	80044ea <UART_SetConfig+0x2fe>
 800445c:	2310      	movs	r3, #16
 800445e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004462:	e042      	b.n	80044ea <UART_SetConfig+0x2fe>
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <UART_SetConfig+0x2dc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d13a      	bne.n	80044e4 <UART_SetConfig+0x2f8>
 800446e:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <UART_SetConfig+0x2e4>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004478:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800447c:	d01a      	beq.n	80044b4 <UART_SetConfig+0x2c8>
 800447e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004482:	d81b      	bhi.n	80044bc <UART_SetConfig+0x2d0>
 8004484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004488:	d00c      	beq.n	80044a4 <UART_SetConfig+0x2b8>
 800448a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448e:	d815      	bhi.n	80044bc <UART_SetConfig+0x2d0>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <UART_SetConfig+0x2b0>
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004498:	d008      	beq.n	80044ac <UART_SetConfig+0x2c0>
 800449a:	e00f      	b.n	80044bc <UART_SetConfig+0x2d0>
 800449c:	2300      	movs	r3, #0
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a2:	e022      	b.n	80044ea <UART_SetConfig+0x2fe>
 80044a4:	2302      	movs	r3, #2
 80044a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044aa:	e01e      	b.n	80044ea <UART_SetConfig+0x2fe>
 80044ac:	2304      	movs	r3, #4
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b2:	e01a      	b.n	80044ea <UART_SetConfig+0x2fe>
 80044b4:	2308      	movs	r3, #8
 80044b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ba:	e016      	b.n	80044ea <UART_SetConfig+0x2fe>
 80044bc:	2310      	movs	r3, #16
 80044be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044c2:	e012      	b.n	80044ea <UART_SetConfig+0x2fe>
 80044c4:	cfff69f3 	.word	0xcfff69f3
 80044c8:	40008000 	.word	0x40008000
 80044cc:	40013800 	.word	0x40013800
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40004400 	.word	0x40004400
 80044d8:	40004800 	.word	0x40004800
 80044dc:	40004c00 	.word	0x40004c00
 80044e0:	40005000 	.word	0x40005000
 80044e4:	2310      	movs	r3, #16
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4aae      	ldr	r2, [pc, #696]	; (80047a8 <UART_SetConfig+0x5bc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	f040 8097 	bne.w	8004624 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d823      	bhi.n	8004546 <UART_SetConfig+0x35a>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <UART_SetConfig+0x318>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	08004529 	.word	0x08004529
 8004508:	08004547 	.word	0x08004547
 800450c:	08004531 	.word	0x08004531
 8004510:	08004547 	.word	0x08004547
 8004514:	08004537 	.word	0x08004537
 8004518:	08004547 	.word	0x08004547
 800451c:	08004547 	.word	0x08004547
 8004520:	08004547 	.word	0x08004547
 8004524:	0800453f 	.word	0x0800453f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004528:	f7fd fea8 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 800452c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800452e:	e010      	b.n	8004552 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004530:	4b9e      	ldr	r3, [pc, #632]	; (80047ac <UART_SetConfig+0x5c0>)
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004534:	e00d      	b.n	8004552 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004536:	f7fd fe09 	bl	800214c <HAL_RCC_GetSysClockFreq>
 800453a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800453c:	e009      	b.n	8004552 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800453e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004544:	e005      	b.n	8004552 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004550:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8130 	beq.w	80047ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	4a94      	ldr	r2, [pc, #592]	; (80047b0 <UART_SetConfig+0x5c4>)
 8004560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004564:	461a      	mov	r2, r3
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	fbb3 f3f2 	udiv	r3, r3, r2
 800456c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	429a      	cmp	r2, r3
 800457c:	d305      	bcc.n	800458a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	429a      	cmp	r2, r3
 8004588:	d903      	bls.n	8004592 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004590:	e113      	b.n	80047ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	2200      	movs	r2, #0
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	60fa      	str	r2, [r7, #12]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	4a84      	ldr	r2, [pc, #528]	; (80047b0 <UART_SetConfig+0x5c4>)
 80045a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2200      	movs	r2, #0
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045b4:	f7fb fe7c 	bl	80002b0 <__aeabi_uldivmod>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	020b      	lsls	r3, r1, #8
 80045ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045ce:	0202      	lsls	r2, r0, #8
 80045d0:	6979      	ldr	r1, [r7, #20]
 80045d2:	6849      	ldr	r1, [r1, #4]
 80045d4:	0849      	lsrs	r1, r1, #1
 80045d6:	2000      	movs	r0, #0
 80045d8:	460c      	mov	r4, r1
 80045da:	4605      	mov	r5, r0
 80045dc:	eb12 0804 	adds.w	r8, r2, r4
 80045e0:	eb43 0905 	adc.w	r9, r3, r5
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	469a      	mov	sl, r3
 80045ec:	4693      	mov	fp, r2
 80045ee:	4652      	mov	r2, sl
 80045f0:	465b      	mov	r3, fp
 80045f2:	4640      	mov	r0, r8
 80045f4:	4649      	mov	r1, r9
 80045f6:	f7fb fe5b 	bl	80002b0 <__aeabi_uldivmod>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4613      	mov	r3, r2
 8004600:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004608:	d308      	bcc.n	800461c <UART_SetConfig+0x430>
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004610:	d204      	bcs.n	800461c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a3a      	ldr	r2, [r7, #32]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	e0ce      	b.n	80047ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004622:	e0ca      	b.n	80047ba <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462c:	d166      	bne.n	80046fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800462e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004632:	2b08      	cmp	r3, #8
 8004634:	d827      	bhi.n	8004686 <UART_SetConfig+0x49a>
 8004636:	a201      	add	r2, pc, #4	; (adr r2, 800463c <UART_SetConfig+0x450>)
 8004638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463c:	08004661 	.word	0x08004661
 8004640:	08004669 	.word	0x08004669
 8004644:	08004671 	.word	0x08004671
 8004648:	08004687 	.word	0x08004687
 800464c:	08004677 	.word	0x08004677
 8004650:	08004687 	.word	0x08004687
 8004654:	08004687 	.word	0x08004687
 8004658:	08004687 	.word	0x08004687
 800465c:	0800467f 	.word	0x0800467f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004660:	f7fd fe0c 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 8004664:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004666:	e014      	b.n	8004692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004668:	f7fd fe1e 	bl	80022a8 <HAL_RCC_GetPCLK2Freq>
 800466c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800466e:	e010      	b.n	8004692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004670:	4b4e      	ldr	r3, [pc, #312]	; (80047ac <UART_SetConfig+0x5c0>)
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004674:	e00d      	b.n	8004692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004676:	f7fd fd69 	bl	800214c <HAL_RCC_GetSysClockFreq>
 800467a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800467c:	e009      	b.n	8004692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800467e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004684:	e005      	b.n	8004692 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004690:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8090 	beq.w	80047ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	4a44      	ldr	r2, [pc, #272]	; (80047b0 <UART_SetConfig+0x5c4>)
 80046a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046a4:	461a      	mov	r2, r3
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80046ac:	005a      	lsls	r2, r3, #1
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	441a      	add	r2, r3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80046be:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	2b0f      	cmp	r3, #15
 80046c4:	d916      	bls.n	80046f4 <UART_SetConfig+0x508>
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046cc:	d212      	bcs.n	80046f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f023 030f 	bic.w	r3, r3, #15
 80046d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	b29b      	uxth	r3, r3
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	8bfb      	ldrh	r3, [r7, #30]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	8bfa      	ldrh	r2, [r7, #30]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	e062      	b.n	80047ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046fa:	e05e      	b.n	80047ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004700:	2b08      	cmp	r3, #8
 8004702:	d828      	bhi.n	8004756 <UART_SetConfig+0x56a>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0x520>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	08004731 	.word	0x08004731
 8004710:	08004739 	.word	0x08004739
 8004714:	08004741 	.word	0x08004741
 8004718:	08004757 	.word	0x08004757
 800471c:	08004747 	.word	0x08004747
 8004720:	08004757 	.word	0x08004757
 8004724:	08004757 	.word	0x08004757
 8004728:	08004757 	.word	0x08004757
 800472c:	0800474f 	.word	0x0800474f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004730:	f7fd fda4 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 8004734:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004736:	e014      	b.n	8004762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004738:	f7fd fdb6 	bl	80022a8 <HAL_RCC_GetPCLK2Freq>
 800473c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800473e:	e010      	b.n	8004762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004740:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <UART_SetConfig+0x5c0>)
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004744:	e00d      	b.n	8004762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004746:	f7fd fd01 	bl	800214c <HAL_RCC_GetSysClockFreq>
 800474a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800474c:	e009      	b.n	8004762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004754:	e005      	b.n	8004762 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004760:	bf00      	nop
    }

    if (pclk != 0U)
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	2b00      	cmp	r3, #0
 8004766:	d028      	beq.n	80047ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <UART_SetConfig+0x5c4>)
 800476e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004772:	461a      	mov	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	fbb3 f2f2 	udiv	r2, r3, r2
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	441a      	add	r2, r3
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	fbb2 f3f3 	udiv	r3, r2, r3
 800478a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	2b0f      	cmp	r3, #15
 8004790:	d910      	bls.n	80047b4 <UART_SetConfig+0x5c8>
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004798:	d20c      	bcs.n	80047b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	b29a      	uxth	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60da      	str	r2, [r3, #12]
 80047a4:	e009      	b.n	80047ba <UART_SetConfig+0x5ce>
 80047a6:	bf00      	nop
 80047a8:	40008000 	.word	0x40008000
 80047ac:	00f42400 	.word	0x00f42400
 80047b0:	080070e8 	.word	0x080070e8
      }
      else
      {
        ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2201      	movs	r2, #1
 80047be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2200      	movs	r2, #0
 80047ce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2200      	movs	r2, #0
 80047d4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80047d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3730      	adds	r7, #48	; 0x30
 80047de:	46bd      	mov	sp, r7
 80047e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080047e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00a      	beq.n	8004896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01a      	beq.n	80048fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048e2:	d10a      	bne.n	80048fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]
  }
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af02      	add	r7, sp, #8
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004938:	f7fb fea4 	bl	8000684 <HAL_GetTick>
 800493c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b08      	cmp	r3, #8
 800494a:	d10e      	bne.n	800496a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800494c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f82f 	bl	80049be <UART_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e025      	b.n	80049b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b04      	cmp	r3, #4
 8004976:	d10e      	bne.n	8004996 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f819 	bl	80049be <UART_WaitOnFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e00f      	b.n	80049b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b09c      	sub	sp, #112	; 0x70
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	4613      	mov	r3, r2
 80049cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ce:	e0a9      	b.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d6:	f000 80a5 	beq.w	8004b24 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049da:	f7fb fe53 	bl	8000684 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d302      	bcc.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80049ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d140      	bne.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a04:	667b      	str	r3, [r7, #100]	; 0x64
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a10:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e6      	bne.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3308      	adds	r3, #8
 8004a28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	663b      	str	r3, [r7, #96]	; 0x60
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a42:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e5      	bne.n	8004a22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e069      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d051      	beq.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a8e:	d149      	bne.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004aae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e6      	bne.n	8004a9a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	613b      	str	r3, [r7, #16]
   return(result);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f023 0301 	bic.w	r3, r3, #1
 8004ae2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004aec:	623a      	str	r2, [r7, #32]
 8004aee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	69f9      	ldr	r1, [r7, #28]
 8004af2:	6a3a      	ldr	r2, [r7, #32]
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e5      	bne.n	8004acc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e010      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69da      	ldr	r2, [r3, #28]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	f43f af46 	beq.w	80049d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3770      	adds	r7, #112	; 0x70
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b0a3      	sub	sp, #140	; 0x8c
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	88fa      	ldrh	r2, [r7, #6]
 8004b68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b82:	d10e      	bne.n	8004ba2 <UART_Start_Receive_IT+0x52>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <UART_Start_Receive_IT+0x48>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b96:	e02d      	b.n	8004bf4 <UART_Start_Receive_IT+0xa4>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	22ff      	movs	r2, #255	; 0xff
 8004b9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ba0:	e028      	b.n	8004bf4 <UART_Start_Receive_IT+0xa4>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10d      	bne.n	8004bc6 <UART_Start_Receive_IT+0x76>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d104      	bne.n	8004bbc <UART_Start_Receive_IT+0x6c>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	22ff      	movs	r2, #255	; 0xff
 8004bb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bba:	e01b      	b.n	8004bf4 <UART_Start_Receive_IT+0xa4>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	227f      	movs	r2, #127	; 0x7f
 8004bc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bc4:	e016      	b.n	8004bf4 <UART_Start_Receive_IT+0xa4>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bce:	d10d      	bne.n	8004bec <UART_Start_Receive_IT+0x9c>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d104      	bne.n	8004be2 <UART_Start_Receive_IT+0x92>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	227f      	movs	r2, #127	; 0x7f
 8004bdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004be0:	e008      	b.n	8004bf4 <UART_Start_Receive_IT+0xa4>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	223f      	movs	r2, #63	; 0x3f
 8004be6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bea:	e003      	b.n	8004bf4 <UART_Start_Receive_IT+0xa4>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2222      	movs	r2, #34	; 0x22
 8004c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3308      	adds	r3, #8
 8004c24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004c28:	673a      	str	r2, [r7, #112]	; 0x70
 8004c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004c2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e3      	bne.n	8004c04 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c44:	d153      	bne.n	8004cee <UART_Start_Receive_IT+0x19e>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c4c:	88fa      	ldrh	r2, [r7, #6]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d34d      	bcc.n	8004cee <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5a:	d107      	bne.n	8004c6c <UART_Start_Receive_IT+0x11c>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d103      	bne.n	8004c6c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a4b      	ldr	r2, [pc, #300]	; (8004d94 <UART_Start_Receive_IT+0x244>)
 8004c68:	671a      	str	r2, [r3, #112]	; 0x70
 8004c6a:	e002      	b.n	8004c72 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a4a      	ldr	r2, [pc, #296]	; (8004d98 <UART_Start_Receive_IT+0x248>)
 8004c70:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01a      	beq.n	8004cb8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004caa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e4      	bne.n	8004c82 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004cd8:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cda:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e5      	bne.n	8004cb8 <UART_Start_Receive_IT+0x168>
 8004cec:	e04a      	b.n	8004d84 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf6:	d107      	bne.n	8004d08 <UART_Start_Receive_IT+0x1b8>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d103      	bne.n	8004d08 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <UART_Start_Receive_IT+0x24c>)
 8004d04:	671a      	str	r2, [r3, #112]	; 0x70
 8004d06:	e002      	b.n	8004d0e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4a25      	ldr	r2, [pc, #148]	; (8004da0 <UART_Start_Receive_IT+0x250>)
 8004d0c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d019      	beq.n	8004d52 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004d32:	677b      	str	r3, [r7, #116]	; 0x74
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d44:	e841 2300 	strex	r3, r2, [r1]
 8004d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e6      	bne.n	8004d1e <UART_Start_Receive_IT+0x1ce>
 8004d50:	e018      	b.n	8004d84 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f043 0320 	orr.w	r3, r3, #32
 8004d66:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d70:	623b      	str	r3, [r7, #32]
 8004d72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	69f9      	ldr	r1, [r7, #28]
 8004d76:	6a3a      	ldr	r2, [r7, #32]
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e6      	bne.n	8004d52 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	378c      	adds	r7, #140	; 0x8c
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	0800591d 	.word	0x0800591d
 8004d98:	08005621 	.word	0x08005621
 8004d9c:	080054bd 	.word	0x080054bd
 8004da0:	08005359 	.word	0x08005359

08004da4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b096      	sub	sp, #88	; 0x58
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	88fa      	ldrh	r2, [r7, #6]
 8004dbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2222      	movs	r2, #34	; 0x22
 8004dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d02c      	beq.n	8004e32 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ddc:	4a42      	ldr	r2, [pc, #264]	; (8004ee8 <UART_Start_Receive_DMA+0x144>)
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de4:	4a41      	ldr	r2, [pc, #260]	; (8004eec <UART_Start_Receive_DMA+0x148>)
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dec:	4a40      	ldr	r2, [pc, #256]	; (8004ef0 <UART_Start_Receive_DMA+0x14c>)
 8004dee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df4:	2200      	movs	r2, #0
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3324      	adds	r3, #36	; 0x24
 8004e02:	4619      	mov	r1, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	461a      	mov	r2, r3
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	f7fb fe00 	bl	8000a10 <HAL_DMA_Start_IT>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00d      	beq.n	8004e32 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2210      	movs	r2, #16
 8004e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e055      	b.n	8004ede <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d018      	beq.n	8004e74 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e56:	657b      	str	r3, [r7, #84]	; 0x54
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e62:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e6      	bne.n	8004e42 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3308      	adds	r3, #8
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e94:	637a      	str	r2, [r7, #52]	; 0x34
 8004e96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e5      	bne.n	8004e74 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3308      	adds	r3, #8
 8004eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ec8:	623a      	str	r2, [r7, #32]
 8004eca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	69f9      	ldr	r1, [r7, #28]
 8004ece:	6a3a      	ldr	r2, [r7, #32]
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e5      	bne.n	8004ea8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3758      	adds	r7, #88	; 0x58
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	080050f9 	.word	0x080050f9
 8004eec:	0800521f 	.word	0x0800521f
 8004ef0:	08005257 	.word	0x08005257

08004ef4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b08f      	sub	sp, #60	; 0x3c
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e6      	bne.n	8004efc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3308      	adds	r3, #8
 8004f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f44:	633b      	str	r3, [r7, #48]	; 0x30
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4e:	61ba      	str	r2, [r7, #24]
 8004f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6979      	ldr	r1, [r7, #20]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e5      	bne.n	8004f2e <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8004f6a:	bf00      	nop
 8004f6c:	373c      	adds	r7, #60	; 0x3c
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b095      	sub	sp, #84	; 0x54
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e6      	bne.n	8004f7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	f023 0301 	bic.w	r3, r3, #1
 8004fca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e3      	bne.n	8004fb0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d118      	bne.n	8005022 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f023 0310 	bic.w	r3, r3, #16
 8005004:	647b      	str	r3, [r7, #68]	; 0x44
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	6979      	ldr	r1, [r7, #20]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	613b      	str	r3, [r7, #16]
   return(result);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e6      	bne.n	8004ff0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2220      	movs	r2, #32
 8005026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005036:	bf00      	nop
 8005038:	3754      	adds	r7, #84	; 0x54
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b090      	sub	sp, #64	; 0x40
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d137      	bne.n	80050ce <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800505e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005060:	2200      	movs	r2, #0
 8005062:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	623b      	str	r3, [r7, #32]
   return(result);
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507c:	63bb      	str	r3, [r7, #56]	; 0x38
 800507e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3308      	adds	r3, #8
 8005084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005086:	633a      	str	r2, [r7, #48]	; 0x30
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e5      	bne.n	8005066 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800509a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ae:	637b      	str	r3, [r7, #52]	; 0x34
 80050b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b8:	61fb      	str	r3, [r7, #28]
 80050ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	69b9      	ldr	r1, [r7, #24]
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	617b      	str	r3, [r7, #20]
   return(result);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e6      	bne.n	800509a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050cc:	e002      	b.n	80050d4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80050ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80050d0:	f001 f8fe 	bl	80062d0 <HAL_UART_TxCpltCallback>
}
 80050d4:	bf00      	nop
 80050d6:	3740      	adds	r7, #64	; 0x40
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff f854 	bl	8004198 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b09c      	sub	sp, #112	; 0x70
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d171      	bne.n	80051f8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005116:	2200      	movs	r2, #0
 8005118:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800511c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800512a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005130:	66bb      	str	r3, [r7, #104]	; 0x68
 8005132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800513a:	65bb      	str	r3, [r7, #88]	; 0x58
 800513c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005140:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e6      	bne.n	800511c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3308      	adds	r3, #8
 8005154:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800515e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005160:	f023 0301 	bic.w	r3, r3, #1
 8005164:	667b      	str	r3, [r7, #100]	; 0x64
 8005166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3308      	adds	r3, #8
 800516c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800516e:	647a      	str	r2, [r7, #68]	; 0x44
 8005170:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800517c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e5      	bne.n	800514e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3308      	adds	r3, #8
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	623b      	str	r3, [r7, #32]
   return(result);
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005198:	663b      	str	r3, [r7, #96]	; 0x60
 800519a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3308      	adds	r3, #8
 80051a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051a2:	633a      	str	r2, [r7, #48]	; 0x30
 80051a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b8:	2220      	movs	r2, #32
 80051ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d118      	bne.n	80051f8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0310 	bic.w	r3, r3, #16
 80051da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e4:	61fb      	str	r3, [r7, #28]
 80051e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	69b9      	ldr	r1, [r7, #24]
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	617b      	str	r3, [r7, #20]
   return(result);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e6      	bne.n	80051c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d107      	bne.n	8005210 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005202:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005206:	4619      	mov	r1, r3
 8005208:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800520a:	f7fe ffe3 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800520e:	e002      	b.n	8005216 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005210:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005212:	f001 f845 	bl	80062a0 <HAL_UART_RxCpltCallback>
}
 8005216:	bf00      	nop
 8005218:	3770      	adds	r7, #112	; 0x70
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005230:	2b01      	cmp	r3, #1
 8005232:	d109      	bne.n	8005248 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	b29b      	uxth	r3, r3
 800523e:	4619      	mov	r1, r3
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7fe ffc7 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005246:	e002      	b.n	800524e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7fe ffaf 	bl	80041ac <HAL_UART_RxHalfCpltCallback>
}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b086      	sub	sp, #24
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527e:	2b80      	cmp	r3, #128	; 0x80
 8005280:	d109      	bne.n	8005296 <UART_DMAError+0x40>
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b21      	cmp	r3, #33	; 0x21
 8005286:	d106      	bne.n	8005296 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2200      	movs	r2, #0
 800528c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005290:	6978      	ldr	r0, [r7, #20]
 8005292:	f7ff fe2f 	bl	8004ef4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a0:	2b40      	cmp	r3, #64	; 0x40
 80052a2:	d109      	bne.n	80052b8 <UART_DMAError+0x62>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b22      	cmp	r3, #34	; 0x22
 80052a8:	d106      	bne.n	80052b8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80052b2:	6978      	ldr	r0, [r7, #20]
 80052b4:	f7ff fe5f 	bl	8004f76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052be:	f043 0210 	orr.w	r2, r3, #16
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052c8:	6978      	ldr	r0, [r7, #20]
 80052ca:	f7fe ff79 	bl	80041c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ce:	bf00      	nop
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7fe ff63 	bl	80041c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b088      	sub	sp, #32
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	60bb      	str	r3, [r7, #8]
   return(result);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6979      	ldr	r1, [r7, #20]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	613b      	str	r3, [r7, #16]
   return(result);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e6      	bne.n	800530a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 ffc0 	bl	80062d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005350:	bf00      	nop
 8005352:	3720      	adds	r7, #32
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b096      	sub	sp, #88	; 0x58
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005366:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	2b22      	cmp	r3, #34	; 0x22
 8005372:	f040 8095 	bne.w	80054a0 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800537c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005380:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005384:	b2d9      	uxtb	r1, r3
 8005386:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800538a:	b2da      	uxtb	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005390:	400a      	ands	r2, r1
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d17a      	bne.n	80054b4 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053d2:	653b      	str	r3, [r7, #80]	; 0x50
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053dc:	647b      	str	r3, [r7, #68]	; 0x44
 80053de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e6      	bne.n	80053be <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	f023 0301 	bic.w	r3, r3, #1
 8005406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3308      	adds	r3, #8
 800540e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005410:	633a      	str	r2, [r7, #48]	; 0x30
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005418:	e841 2300 	strex	r3, r2, [r1]
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e5      	bne.n	80053f0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005436:	2b01      	cmp	r3, #1
 8005438:	d12e      	bne.n	8005498 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	60fb      	str	r3, [r7, #12]
   return(result);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f023 0310 	bic.w	r3, r3, #16
 8005454:	64bb      	str	r3, [r7, #72]	; 0x48
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	69b9      	ldr	r1, [r7, #24]
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	617b      	str	r3, [r7, #20]
   return(result);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e6      	bne.n	8005440 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b10      	cmp	r3, #16
 800547e:	d103      	bne.n	8005488 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2210      	movs	r2, #16
 8005486:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fe fe9f 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005496:	e00d      	b.n	80054b4 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 ff01 	bl	80062a0 <HAL_UART_RxCpltCallback>
}
 800549e:	e009      	b.n	80054b4 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	8b1b      	ldrh	r3, [r3, #24]
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0208 	orr.w	r2, r2, #8
 80054b0:	b292      	uxth	r2, r2
 80054b2:	831a      	strh	r2, [r3, #24]
}
 80054b4:	bf00      	nop
 80054b6:	3758      	adds	r7, #88	; 0x58
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b096      	sub	sp, #88	; 0x58
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80054ca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d4:	2b22      	cmp	r3, #34	; 0x22
 80054d6:	f040 8095 	bne.w	8005604 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80054e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80054ea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80054ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80054f2:	4013      	ands	r3, r2
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	1c9a      	adds	r2, r3, #2
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d17a      	bne.n	8005618 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005540:	643b      	str	r3, [r7, #64]	; 0x40
 8005542:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005546:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e6      	bne.n	8005522 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3308      	adds	r3, #8
 800555a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	61fb      	str	r3, [r7, #28]
   return(result);
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	64bb      	str	r3, [r7, #72]	; 0x48
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3308      	adds	r3, #8
 8005572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005574:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800557a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e5      	bne.n	8005554 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800559a:	2b01      	cmp	r3, #1
 800559c:	d12e      	bne.n	80055fc <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f023 0310 	bic.w	r3, r3, #16
 80055b8:	647b      	str	r3, [r7, #68]	; 0x44
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c2:	61bb      	str	r3, [r7, #24]
 80055c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	6979      	ldr	r1, [r7, #20]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	613b      	str	r3, [r7, #16]
   return(result);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e6      	bne.n	80055a4 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d103      	bne.n	80055ec <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2210      	movs	r2, #16
 80055ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7fe fded 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055fa:	e00d      	b.n	8005618 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fe4f 	bl	80062a0 <HAL_UART_RxCpltCallback>
}
 8005602:	e009      	b.n	8005618 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	8b1b      	ldrh	r3, [r3, #24]
 800560a:	b29a      	uxth	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0208 	orr.w	r2, r2, #8
 8005614:	b292      	uxth	r2, r2
 8005616:	831a      	strh	r2, [r3, #24]
}
 8005618:	bf00      	nop
 800561a:	3758      	adds	r7, #88	; 0x58
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b0a6      	sub	sp, #152	; 0x98
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800562e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	2b22      	cmp	r3, #34	; 0x22
 8005658:	f040 814f 	bne.w	80058fa <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005662:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005666:	e0f6      	b.n	8005856 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800566e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005672:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005676:	b2d9      	uxtb	r1, r3
 8005678:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800567c:	b2da      	uxtb	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005682:	400a      	ands	r2, r1
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d053      	beq.n	8005762 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d011      	beq.n	80056ea <UART_RxISR_8BIT_FIFOEN+0xca>
 80056c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00b      	beq.n	80056ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2201      	movs	r2, #1
 80056d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e0:	f043 0201 	orr.w	r2, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d011      	beq.n	800571a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80056f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2202      	movs	r2, #2
 8005708:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005710:	f043 0204 	orr.w	r2, r3, #4
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800571a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d011      	beq.n	800574a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005726:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2204      	movs	r2, #4
 8005738:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005740:	f043 0202 	orr.w	r2, r3, #2
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d006      	beq.n	8005762 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7fe fd33 	bl	80041c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d173      	bne.n	8005856 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800577c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800577e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005790:	66bb      	str	r3, [r7, #104]	; 0x68
 8005792:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005796:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800579e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e4      	bne.n	800576e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3308      	adds	r3, #8
 80057aa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80057b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80057c8:	657a      	str	r2, [r7, #84]	; 0x54
 80057ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e3      	bne.n	80057a4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d12e      	bne.n	8005850 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	f023 0310 	bic.w	r3, r3, #16
 800580c:	67bb      	str	r3, [r7, #120]	; 0x78
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005816:	643b      	str	r3, [r7, #64]	; 0x40
 8005818:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800581c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e6      	bne.n	80057f8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b10      	cmp	r3, #16
 8005836:	d103      	bne.n	8005840 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2210      	movs	r2, #16
 800583e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005846:	4619      	mov	r1, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7fe fcc3 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
 800584e:	e002      	b.n	8005856 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fd25 	bl	80062a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005856:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800585a:	2b00      	cmp	r3, #0
 800585c:	d006      	beq.n	800586c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800585e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b00      	cmp	r3, #0
 8005868:	f47f aefe 	bne.w	8005668 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005872:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005876:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800587a:	2b00      	cmp	r3, #0
 800587c:	d047      	beq.n	800590e <UART_RxISR_8BIT_FIFOEN+0x2ee>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005884:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005888:	429a      	cmp	r2, r3
 800588a:	d240      	bcs.n	800590e <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	61fb      	str	r3, [r7, #28]
   return(result);
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a2:	673b      	str	r3, [r7, #112]	; 0x70
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3308      	adds	r3, #8
 80058aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80058ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a15      	ldr	r2, [pc, #84]	; (8005918 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 80058c4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f043 0320 	orr.w	r3, r3, #32
 80058da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6979      	ldr	r1, [r7, #20]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	613b      	str	r3, [r7, #16]
   return(result);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e6      	bne.n	80058c6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058f8:	e009      	b.n	800590e <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	8b1b      	ldrh	r3, [r3, #24]
 8005900:	b29a      	uxth	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0208 	orr.w	r2, r2, #8
 800590a:	b292      	uxth	r2, r2
 800590c:	831a      	strh	r2, [r3, #24]
}
 800590e:	bf00      	nop
 8005910:	3798      	adds	r7, #152	; 0x98
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	08005359 	.word	0x08005359

0800591c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b0a8      	sub	sp, #160	; 0xa0
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800592a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	2b22      	cmp	r3, #34	; 0x22
 8005954:	f040 8153 	bne.w	8005bfe <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800595e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005962:	e0fa      	b.n	8005b5a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800596a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005972:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005976:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800597a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800597e:	4013      	ands	r3, r2
 8005980:	b29a      	uxth	r2, r3
 8005982:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005986:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598c:	1c9a      	adds	r2, r3, #2
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80059ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d053      	beq.n	8005a62 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d011      	beq.n	80059ea <UART_RxISR_16BIT_FIFOEN+0xce>
 80059c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2201      	movs	r2, #1
 80059d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e0:	f043 0201 	orr.w	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d011      	beq.n	8005a1a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80059f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2202      	movs	r2, #2
 8005a08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a10:	f043 0204 	orr.w	r2, r3, #4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d011      	beq.n	8005a4a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005a26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00b      	beq.n	8005a4a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2204      	movs	r2, #4
 8005a38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a40:	f043 0202 	orr.w	r2, r3, #2
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d006      	beq.n	8005a62 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7fe fbb3 	bl	80041c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d175      	bne.n	8005b5a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a92:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e4      	bne.n	8005a6e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005acc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ace:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e1      	bne.n	8005aa4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d12e      	bne.n	8005b54 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0c:	f023 0310 	bic.w	r3, r3, #16
 8005b10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e6      	bne.n	8005afc <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d103      	bne.n	8005b44 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2210      	movs	r2, #16
 8005b42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7fe fb41 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
 8005b52:	e002      	b.n	8005b5a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fba3 	bl	80062a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b5a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d006      	beq.n	8005b70 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005b62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f47f aefa 	bne.w	8005964 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b76:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005b7a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d047      	beq.n	8005c12 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b88:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d240      	bcs.n	8005c12 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3308      	adds	r3, #8
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	677b      	str	r3, [r7, #116]	; 0x74
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3308      	adds	r3, #8
 8005bae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005bb0:	633a      	str	r2, [r7, #48]	; 0x30
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e5      	bne.n	8005b90 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a15      	ldr	r2, [pc, #84]	; (8005c1c <UART_RxISR_16BIT_FIFOEN+0x300>)
 8005bc8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f043 0320 	orr.w	r3, r3, #32
 8005bde:	673b      	str	r3, [r7, #112]	; 0x70
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005be8:	61fb      	str	r3, [r7, #28]
 8005bea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	69b9      	ldr	r1, [r7, #24]
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e6      	bne.n	8005bca <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bfc:	e009      	b.n	8005c12 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	8b1b      	ldrh	r3, [r3, #24]
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0208 	orr.w	r2, r2, #8
 8005c0e:	b292      	uxth	r2, r2
 8005c10:	831a      	strh	r2, [r3, #24]
}
 8005c12:	bf00      	nop
 8005c14:	37a0      	adds	r7, #160	; 0xa0
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	080054bd 	.word	0x080054bd

08005c20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e027      	b.n	8005cc2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2224      	movs	r2, #36	; 0x24
 8005c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0201 	bic.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ca0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e02d      	b.n	8005d42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2224      	movs	r2, #36	; 0x24
 8005cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0201 	bic.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f850 	bl	8005dc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e02d      	b.n	8005dbe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2224      	movs	r2, #36	; 0x24
 8005d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f812 	bl	8005dc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d108      	bne.n	8005dea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005de8:	e031      	b.n	8005e4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dea:	2308      	movs	r3, #8
 8005dec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dee:	2308      	movs	r3, #8
 8005df0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	0e5b      	lsrs	r3, r3, #25
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	0f5b      	lsrs	r3, r3, #29
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e12:	7bbb      	ldrb	r3, [r7, #14]
 8005e14:	7b3a      	ldrb	r2, [r7, #12]
 8005e16:	4911      	ldr	r1, [pc, #68]	; (8005e5c <UARTEx_SetNbDataToProcess+0x94>)
 8005e18:	5c8a      	ldrb	r2, [r1, r2]
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e1e:	7b3a      	ldrb	r2, [r7, #12]
 8005e20:	490f      	ldr	r1, [pc, #60]	; (8005e60 <UARTEx_SetNbDataToProcess+0x98>)
 8005e22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e24:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	7b7a      	ldrb	r2, [r7, #13]
 8005e34:	4909      	ldr	r1, [pc, #36]	; (8005e5c <UARTEx_SetNbDataToProcess+0x94>)
 8005e36:	5c8a      	ldrb	r2, [r1, r2]
 8005e38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e3c:	7b7a      	ldrb	r2, [r7, #13]
 8005e3e:	4908      	ldr	r1, [pc, #32]	; (8005e60 <UARTEx_SetNbDataToProcess+0x98>)
 8005e40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e42:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e4e:	bf00      	nop
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	08007100 	.word	0x08007100
 8005e60:	08007108 	.word	0x08007108

08005e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e64:	b5b0      	push	{r4, r5, r7, lr}
 8005e66:	b08a      	sub	sp, #40	; 0x28
 8005e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char Message[] = "Write anything on Serial Terminal\r\n";
 8005e6a:	4b14      	ldr	r3, [pc, #80]	; (8005ebc <main+0x58>)
 8005e6c:	1d3c      	adds	r4, r7, #4
 8005e6e:	461d      	mov	r5, r3
 8005e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	6023      	str	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e7c:	f7fa fb9a 	bl	80005b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e80:	f000 f822 	bl	8005ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e84:	f000 f97e 	bl	8006184 <MX_GPIO_Init>
  MX_DMA_Init();
 8005e88:	f000 f94a 	bl	8006120 <MX_DMA_Init>
  MX_I2C2_Init();
 8005e8c:	f000 f86e 	bl	8005f6c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8005e90:	f000 f8fa 	bl	8006088 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8005e94:	f000 f8aa 	bl	8005fec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

//  HAL_UART_Receive_DMA (&huart1, rxData, 4);
//  flag = 1;

  HAL_UART_Transmit(&huart1, (uint8_t *)Message, strlen(Message), 10);
 8005e98:	1d3b      	adds	r3, r7, #4
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fa f9b0 	bl	8000200 <strlen>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	1d39      	adds	r1, r7, #4
 8005ea6:	230a      	movs	r3, #10
 8005ea8:	4805      	ldr	r0, [pc, #20]	; (8005ec0 <main+0x5c>)
 8005eaa:	f7fd fc87 	bl	80037bc <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, UART2_rxBuffer, 1);
 8005eae:	2201      	movs	r2, #1
 8005eb0:	4904      	ldr	r1, [pc, #16]	; (8005ec4 <main+0x60>)
 8005eb2:	4803      	ldr	r0, [pc, #12]	; (8005ec0 <main+0x5c>)
 8005eb4:	f7fd fd1a 	bl	80038ec <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005eb8:	e7fe      	b.n	8005eb8 <main+0x54>
 8005eba:	bf00      	nop
 8005ebc:	080070bc 	.word	0x080070bc
 8005ec0:	20000130 	.word	0x20000130
 8005ec4:	2000066c 	.word	0x2000066c

08005ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b096      	sub	sp, #88	; 0x58
 8005ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ece:	f107 0314 	add.w	r3, r7, #20
 8005ed2:	2244      	movs	r2, #68	; 0x44
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fc6e 	bl	80067b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005edc:	463b      	mov	r3, r7
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	605a      	str	r2, [r3, #4]
 8005ee4:	609a      	str	r2, [r3, #8]
 8005ee6:	60da      	str	r2, [r3, #12]
 8005ee8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005eea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005eee:	f7fb fb35 	bl	800155c <HAL_PWREx_ControlVoltageScaling>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005ef8:	f000 f9fc 	bl	80062f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005efc:	2310      	movs	r3, #16
 8005efe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005f00:	2301      	movs	r3, #1
 8005f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005f08:	2360      	movs	r3, #96	; 0x60
 8005f0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005f10:	2301      	movs	r3, #1
 8005f12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005f14:	2301      	movs	r3, #1
 8005f16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005f18:	2328      	movs	r3, #40	; 0x28
 8005f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005f20:	2302      	movs	r3, #2
 8005f22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005f24:	2302      	movs	r3, #2
 8005f26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f28:	f107 0314 	add.w	r3, r7, #20
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fb fbb9 	bl	80016a4 <HAL_RCC_OscConfig>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8005f38:	f000 f9dc 	bl	80062f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f3c:	230f      	movs	r3, #15
 8005f3e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f40:	2303      	movs	r3, #3
 8005f42:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005f50:	463b      	mov	r3, r7
 8005f52:	2103      	movs	r1, #3
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fb ffbf 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8005f60:	f000 f9c8 	bl	80062f4 <Error_Handler>
  }
}
 8005f64:	bf00      	nop
 8005f66:	3758      	adds	r7, #88	; 0x58
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005f70:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <MX_I2C2_Init+0x74>)
 8005f72:	4a1c      	ldr	r2, [pc, #112]	; (8005fe4 <MX_I2C2_Init+0x78>)
 8005f74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8005f76:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <MX_I2C2_Init+0x74>)
 8005f78:	4a1b      	ldr	r2, [pc, #108]	; (8005fe8 <MX_I2C2_Init+0x7c>)
 8005f7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005f7c:	4b18      	ldr	r3, [pc, #96]	; (8005fe0 <MX_I2C2_Init+0x74>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f82:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <MX_I2C2_Init+0x74>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f88:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <MX_I2C2_Init+0x74>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005f8e:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <MX_I2C2_Init+0x74>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005f94:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <MX_I2C2_Init+0x74>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <MX_I2C2_Init+0x74>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005fa0:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <MX_I2C2_Init+0x74>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005fa6:	480e      	ldr	r0, [pc, #56]	; (8005fe0 <MX_I2C2_Init+0x74>)
 8005fa8:	f7fb f992 	bl	80012d0 <HAL_I2C_Init>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005fb2:	f000 f99f 	bl	80062f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4809      	ldr	r0, [pc, #36]	; (8005fe0 <MX_I2C2_Init+0x74>)
 8005fba:	f7fb fa18 	bl	80013ee <HAL_I2CEx_ConfigAnalogFilter>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005fc4:	f000 f996 	bl	80062f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4805      	ldr	r0, [pc, #20]	; (8005fe0 <MX_I2C2_Init+0x74>)
 8005fcc:	f7fb fa5a 	bl	8001484 <HAL_I2CEx_ConfigDigitalFilter>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005fd6:	f000 f98d 	bl	80062f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005fda:	bf00      	nop
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000090 	.word	0x20000090
 8005fe4:	40005800 	.word	0x40005800
 8005fe8:	10909cec 	.word	0x10909cec

08005fec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ff2:	f107 0310 	add.w	r3, r7, #16
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	605a      	str	r2, [r3, #4]
 8005ffc:	609a      	str	r2, [r3, #8]
 8005ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006000:	1d3b      	adds	r3, r7, #4
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	605a      	str	r2, [r3, #4]
 8006008:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800600a:	4b1e      	ldr	r3, [pc, #120]	; (8006084 <MX_TIM2_Init+0x98>)
 800600c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006010:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006012:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <MX_TIM2_Init+0x98>)
 8006014:	2200      	movs	r2, #0
 8006016:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006018:	4b1a      	ldr	r3, [pc, #104]	; (8006084 <MX_TIM2_Init+0x98>)
 800601a:	2200      	movs	r2, #0
 800601c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800601e:	4b19      	ldr	r3, [pc, #100]	; (8006084 <MX_TIM2_Init+0x98>)
 8006020:	f04f 32ff 	mov.w	r2, #4294967295
 8006024:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006026:	4b17      	ldr	r3, [pc, #92]	; (8006084 <MX_TIM2_Init+0x98>)
 8006028:	2200      	movs	r2, #0
 800602a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800602c:	4b15      	ldr	r3, [pc, #84]	; (8006084 <MX_TIM2_Init+0x98>)
 800602e:	2200      	movs	r2, #0
 8006030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006032:	4814      	ldr	r0, [pc, #80]	; (8006084 <MX_TIM2_Init+0x98>)
 8006034:	f7fc ff26 	bl	8002e84 <HAL_TIM_Base_Init>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800603e:	f000 f959 	bl	80062f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006046:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006048:	f107 0310 	add.w	r3, r7, #16
 800604c:	4619      	mov	r1, r3
 800604e:	480d      	ldr	r0, [pc, #52]	; (8006084 <MX_TIM2_Init+0x98>)
 8006050:	f7fd f88e 	bl	8003170 <HAL_TIM_ConfigClockSource>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800605a:	f000 f94b 	bl	80062f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800605e:	2300      	movs	r3, #0
 8006060:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006066:	1d3b      	adds	r3, r7, #4
 8006068:	4619      	mov	r1, r3
 800606a:	4806      	ldr	r0, [pc, #24]	; (8006084 <MX_TIM2_Init+0x98>)
 800606c:	f7fd fab0 	bl	80035d0 <HAL_TIMEx_MasterConfigSynchronization>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006076:	f000 f93d 	bl	80062f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800607a:	bf00      	nop
 800607c:	3720      	adds	r7, #32
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	200000e4 	.word	0x200000e4

08006088 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800608c:	4b22      	ldr	r3, [pc, #136]	; (8006118 <MX_USART1_UART_Init+0x90>)
 800608e:	4a23      	ldr	r2, [pc, #140]	; (800611c <MX_USART1_UART_Init+0x94>)
 8006090:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006092:	4b21      	ldr	r3, [pc, #132]	; (8006118 <MX_USART1_UART_Init+0x90>)
 8006094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006098:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800609a:	4b1f      	ldr	r3, [pc, #124]	; (8006118 <MX_USART1_UART_Init+0x90>)
 800609c:	2200      	movs	r2, #0
 800609e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060a0:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <MX_USART1_UART_Init+0x90>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060a6:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <MX_USART1_UART_Init+0x90>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060ac:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <MX_USART1_UART_Init+0x90>)
 80060ae:	220c      	movs	r2, #12
 80060b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060b2:	4b19      	ldr	r3, [pc, #100]	; (8006118 <MX_USART1_UART_Init+0x90>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80060b8:	4b17      	ldr	r3, [pc, #92]	; (8006118 <MX_USART1_UART_Init+0x90>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80060be:	4b16      	ldr	r3, [pc, #88]	; (8006118 <MX_USART1_UART_Init+0x90>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80060c4:	4b14      	ldr	r3, [pc, #80]	; (8006118 <MX_USART1_UART_Init+0x90>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80060ca:	4b13      	ldr	r3, [pc, #76]	; (8006118 <MX_USART1_UART_Init+0x90>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80060d0:	4811      	ldr	r0, [pc, #68]	; (8006118 <MX_USART1_UART_Init+0x90>)
 80060d2:	f7fd fb23 	bl	800371c <HAL_UART_Init>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80060dc:	f000 f90a 	bl	80062f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060e0:	2100      	movs	r1, #0
 80060e2:	480d      	ldr	r0, [pc, #52]	; (8006118 <MX_USART1_UART_Init+0x90>)
 80060e4:	f7ff fdf3 	bl	8005cce <HAL_UARTEx_SetTxFifoThreshold>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80060ee:	f000 f901 	bl	80062f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060f2:	2100      	movs	r1, #0
 80060f4:	4808      	ldr	r0, [pc, #32]	; (8006118 <MX_USART1_UART_Init+0x90>)
 80060f6:	f7ff fe28 	bl	8005d4a <HAL_UARTEx_SetRxFifoThreshold>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006100:	f000 f8f8 	bl	80062f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006104:	4804      	ldr	r0, [pc, #16]	; (8006118 <MX_USART1_UART_Init+0x90>)
 8006106:	f7ff fda9 	bl	8005c5c <HAL_UARTEx_DisableFifoMode>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006110:	f000 f8f0 	bl	80062f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006114:	bf00      	nop
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20000130 	.word	0x20000130
 800611c:	40013800 	.word	0x40013800

08006120 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006126:	4b16      	ldr	r3, [pc, #88]	; (8006180 <MX_DMA_Init+0x60>)
 8006128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800612a:	4a15      	ldr	r2, [pc, #84]	; (8006180 <MX_DMA_Init+0x60>)
 800612c:	f043 0304 	orr.w	r3, r3, #4
 8006130:	6493      	str	r3, [r2, #72]	; 0x48
 8006132:	4b13      	ldr	r3, [pc, #76]	; (8006180 <MX_DMA_Init+0x60>)
 8006134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <MX_DMA_Init+0x60>)
 8006140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006142:	4a0f      	ldr	r2, [pc, #60]	; (8006180 <MX_DMA_Init+0x60>)
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	6493      	str	r3, [r2, #72]	; 0x48
 800614a:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <MX_DMA_Init+0x60>)
 800614c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006156:	2200      	movs	r2, #0
 8006158:	2100      	movs	r1, #0
 800615a:	200b      	movs	r0, #11
 800615c:	f7fa fb79 	bl	8000852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006160:	200b      	movs	r0, #11
 8006162:	f7fa fb92 	bl	800088a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006166:	2200      	movs	r2, #0
 8006168:	2100      	movs	r1, #0
 800616a:	200c      	movs	r0, #12
 800616c:	f7fa fb71 	bl	8000852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006170:	200c      	movs	r0, #12
 8006172:	f7fa fb8a 	bl	800088a <HAL_NVIC_EnableIRQ>

}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40021000 	.word	0x40021000

08006184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800618a:	f107 030c 	add.w	r3, r7, #12
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	605a      	str	r2, [r3, #4]
 8006194:	609a      	str	r2, [r3, #8]
 8006196:	60da      	str	r2, [r3, #12]
 8006198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800619a:	4b23      	ldr	r3, [pc, #140]	; (8006228 <MX_GPIO_Init+0xa4>)
 800619c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619e:	4a22      	ldr	r2, [pc, #136]	; (8006228 <MX_GPIO_Init+0xa4>)
 80061a0:	f043 0304 	orr.w	r3, r3, #4
 80061a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061a6:	4b20      	ldr	r3, [pc, #128]	; (8006228 <MX_GPIO_Init+0xa4>)
 80061a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061b2:	4b1d      	ldr	r3, [pc, #116]	; (8006228 <MX_GPIO_Init+0xa4>)
 80061b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b6:	4a1c      	ldr	r2, [pc, #112]	; (8006228 <MX_GPIO_Init+0xa4>)
 80061b8:	f043 0302 	orr.w	r3, r3, #2
 80061bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061be:	4b1a      	ldr	r3, [pc, #104]	; (8006228 <MX_GPIO_Init+0xa4>)
 80061c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	607b      	str	r3, [r7, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80061ca:	2200      	movs	r2, #0
 80061cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061d0:	4816      	ldr	r0, [pc, #88]	; (800622c <MX_GPIO_Init+0xa8>)
 80061d2:	f7fb f84d 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin;
 80061d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80061dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80061e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 80061e6:	f107 030c 	add.w	r3, r7, #12
 80061ea:	4619      	mov	r1, r3
 80061ec:	4810      	ldr	r0, [pc, #64]	; (8006230 <MX_GPIO_Init+0xac>)
 80061ee:	f7fa fe95 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80061f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061f8:	2301      	movs	r3, #1
 80061fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006200:	2300      	movs	r3, #0
 8006202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006204:	f107 030c 	add.w	r3, r7, #12
 8006208:	4619      	mov	r1, r3
 800620a:	4808      	ldr	r0, [pc, #32]	; (800622c <MX_GPIO_Init+0xa8>)
 800620c:	f7fa fe86 	bl	8000f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006210:	2200      	movs	r2, #0
 8006212:	2100      	movs	r1, #0
 8006214:	2028      	movs	r0, #40	; 0x28
 8006216:	f7fa fb1c 	bl	8000852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800621a:	2028      	movs	r0, #40	; 0x28
 800621c:	f7fa fb35 	bl	800088a <HAL_NVIC_EnableIRQ>

}
 8006220:	bf00      	nop
 8006222:	3720      	adds	r7, #32
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40021000 	.word	0x40021000
 800622c:	48000400 	.word	0x48000400
 8006230:	48000800 	.word	0x48000800

08006234 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	80fb      	strh	r3, [r7, #6]
    if(HAL_GPIO_ReadPin(GPIOB, LED_Pin) == GPIO_PIN_SET) {
 800623e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006242:	4813      	ldr	r0, [pc, #76]	; (8006290 <HAL_GPIO_EXTI_Callback+0x5c>)
 8006244:	f7fa fffc 	bl	8001240 <HAL_GPIO_ReadPin>
 8006248:	4603      	mov	r3, r0
 800624a:	2b01      	cmp	r3, #1
 800624c:	d106      	bne.n	800625c <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 800624e:	2200      	movs	r2, #0
 8006250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006254:	480e      	ldr	r0, [pc, #56]	; (8006290 <HAL_GPIO_EXTI_Callback+0x5c>)
 8006256:	f7fb f80b 	bl	8001270 <HAL_GPIO_WritePin>
 800625a:	e005      	b.n	8006268 <HAL_GPIO_EXTI_Callback+0x34>
    } else {
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 800625c:	2201      	movs	r2, #1
 800625e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006262:	480b      	ldr	r0, [pc, #44]	; (8006290 <HAL_GPIO_EXTI_Callback+0x5c>)
 8006264:	f7fb f804 	bl	8001270 <HAL_GPIO_WritePin>
	}
    sprintf(buff, "Board\n\r");
 8006268:	490a      	ldr	r1, [pc, #40]	; (8006294 <HAL_GPIO_EXTI_Callback+0x60>)
 800626a:	480b      	ldr	r0, [pc, #44]	; (8006298 <HAL_GPIO_EXTI_Callback+0x64>)
 800626c:	f000 faac 	bl	80067c8 <siprintf>
    HAL_UART_Transmit_DMA(&huart1, &buff, strlen(buff));
 8006270:	4809      	ldr	r0, [pc, #36]	; (8006298 <HAL_GPIO_EXTI_Callback+0x64>)
 8006272:	f7f9 ffc5 	bl	8000200 <strlen>
 8006276:	4603      	mov	r3, r0
 8006278:	b29b      	uxth	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	4906      	ldr	r1, [pc, #24]	; (8006298 <HAL_GPIO_EXTI_Callback+0x64>)
 800627e:	4807      	ldr	r0, [pc, #28]	; (800629c <HAL_GPIO_EXTI_Callback+0x68>)
 8006280:	f7fd fb8a 	bl	8003998 <HAL_UART_Transmit_DMA>
    //HAL_UART_DMAPause (&huart2);
    //HAL_UART_DMAResume (&huart2);


    //HAL_UART_Receive_IT (&huart1, rxData, 4);  // WAS THERE
    int j = 0;
 8006284:	2300      	movs	r3, #0
 8006286:	60fb      	str	r3, [r7, #12]

}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	48000400 	.word	0x48000400
 8006294:	080070e0 	.word	0x080070e0
 8006298:	20000280 	.word	0x20000280
 800629c:	20000130 	.word	0x20000130

080062a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
////	}
//
//	int i = 0;


	HAL_UART_Transmit(&huart1, UART2_rxBuffer, 1, 100);
 80062a8:	2364      	movs	r3, #100	; 0x64
 80062aa:	2201      	movs	r2, #1
 80062ac:	4906      	ldr	r1, [pc, #24]	; (80062c8 <HAL_UART_RxCpltCallback+0x28>)
 80062ae:	4807      	ldr	r0, [pc, #28]	; (80062cc <HAL_UART_RxCpltCallback+0x2c>)
 80062b0:	f7fd fa84 	bl	80037bc <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, UART2_rxBuffer, 1);
 80062b4:	2201      	movs	r2, #1
 80062b6:	4904      	ldr	r1, [pc, #16]	; (80062c8 <HAL_UART_RxCpltCallback+0x28>)
 80062b8:	4804      	ldr	r0, [pc, #16]	; (80062cc <HAL_UART_RxCpltCallback+0x2c>)
 80062ba:	f7fd fb17 	bl	80038ec <HAL_UART_Receive_IT>
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	2000066c 	.word	0x2000066c
 80062cc:	20000130 	.word	0x20000130

080062d0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (&huart1, rxData, 4);
 80062d8:	2204      	movs	r2, #4
 80062da:	4904      	ldr	r1, [pc, #16]	; (80062ec <HAL_UART_TxCpltCallback+0x1c>)
 80062dc:	4804      	ldr	r0, [pc, #16]	; (80062f0 <HAL_UART_TxCpltCallback+0x20>)
 80062de:	f7fd fbed 	bl	8003abc <HAL_UART_Receive_DMA>
}
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000668 	.word	0x20000668
 80062f0:	20000130 	.word	0x20000130

080062f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80062f8:	b672      	cpsid	i
}
 80062fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80062fc:	e7fe      	b.n	80062fc <Error_Handler+0x8>
	...

08006300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006306:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <HAL_MspInit+0x44>)
 8006308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630a:	4a0e      	ldr	r2, [pc, #56]	; (8006344 <HAL_MspInit+0x44>)
 800630c:	f043 0301 	orr.w	r3, r3, #1
 8006310:	6613      	str	r3, [r2, #96]	; 0x60
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <HAL_MspInit+0x44>)
 8006314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	607b      	str	r3, [r7, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800631e:	4b09      	ldr	r3, [pc, #36]	; (8006344 <HAL_MspInit+0x44>)
 8006320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006322:	4a08      	ldr	r2, [pc, #32]	; (8006344 <HAL_MspInit+0x44>)
 8006324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006328:	6593      	str	r3, [r2, #88]	; 0x58
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_MspInit+0x44>)
 800632c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40021000 	.word	0x40021000

08006348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b0ae      	sub	sp, #184	; 0xb8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006350:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	605a      	str	r2, [r3, #4]
 800635a:	609a      	str	r2, [r3, #8]
 800635c:	60da      	str	r2, [r3, #12]
 800635e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006360:	f107 0310 	add.w	r3, r7, #16
 8006364:	2294      	movs	r2, #148	; 0x94
 8006366:	2100      	movs	r1, #0
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fa25 	bl	80067b8 <memset>
  if(hi2c->Instance==I2C2)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a21      	ldr	r2, [pc, #132]	; (80063f8 <HAL_I2C_MspInit+0xb0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d13b      	bne.n	80063f0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006378:	2380      	movs	r3, #128	; 0x80
 800637a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800637c:	2300      	movs	r3, #0
 800637e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006380:	f107 0310 	add.w	r3, r7, #16
 8006384:	4618      	mov	r0, r3
 8006386:	f7fc f865 	bl	8002454 <HAL_RCCEx_PeriphCLKConfig>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006390:	f7ff ffb0 	bl	80062f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006394:	4b19      	ldr	r3, [pc, #100]	; (80063fc <HAL_I2C_MspInit+0xb4>)
 8006396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006398:	4a18      	ldr	r2, [pc, #96]	; (80063fc <HAL_I2C_MspInit+0xb4>)
 800639a:	f043 0302 	orr.w	r3, r3, #2
 800639e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063a0:	4b16      	ldr	r3, [pc, #88]	; (80063fc <HAL_I2C_MspInit+0xb4>)
 80063a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80063ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80063b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063b4:	2312      	movs	r3, #18
 80063b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c0:	2303      	movs	r3, #3
 80063c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80063c6:	2304      	movs	r3, #4
 80063c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80063d0:	4619      	mov	r1, r3
 80063d2:	480b      	ldr	r0, [pc, #44]	; (8006400 <HAL_I2C_MspInit+0xb8>)
 80063d4:	f7fa fda2 	bl	8000f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80063d8:	4b08      	ldr	r3, [pc, #32]	; (80063fc <HAL_I2C_MspInit+0xb4>)
 80063da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063dc:	4a07      	ldr	r2, [pc, #28]	; (80063fc <HAL_I2C_MspInit+0xb4>)
 80063de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063e2:	6593      	str	r3, [r2, #88]	; 0x58
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <HAL_I2C_MspInit+0xb4>)
 80063e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80063f0:	bf00      	nop
 80063f2:	37b8      	adds	r7, #184	; 0xb8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40005800 	.word	0x40005800
 80063fc:	40021000 	.word	0x40021000
 8006400:	48000400 	.word	0x48000400

08006404 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006414:	d113      	bne.n	800643e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006416:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <HAL_TIM_Base_MspInit+0x44>)
 8006418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641a:	4a0b      	ldr	r2, [pc, #44]	; (8006448 <HAL_TIM_Base_MspInit+0x44>)
 800641c:	f043 0301 	orr.w	r3, r3, #1
 8006420:	6593      	str	r3, [r2, #88]	; 0x58
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <HAL_TIM_Base_MspInit+0x44>)
 8006424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800642e:	2200      	movs	r2, #0
 8006430:	2100      	movs	r1, #0
 8006432:	201c      	movs	r0, #28
 8006434:	f7fa fa0d 	bl	8000852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006438:	201c      	movs	r0, #28
 800643a:	f7fa fa26 	bl	800088a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	40021000 	.word	0x40021000

0800644c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b0ae      	sub	sp, #184	; 0xb8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006454:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	605a      	str	r2, [r3, #4]
 800645e:	609a      	str	r2, [r3, #8]
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006464:	f107 0310 	add.w	r3, r7, #16
 8006468:	2294      	movs	r2, #148	; 0x94
 800646a:	2100      	movs	r1, #0
 800646c:	4618      	mov	r0, r3
 800646e:	f000 f9a3 	bl	80067b8 <memset>
  if(huart->Instance==USART1)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a4e      	ldr	r2, [pc, #312]	; (80065b0 <HAL_UART_MspInit+0x164>)
 8006478:	4293      	cmp	r3, r2
 800647a:	f040 8095 	bne.w	80065a8 <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800647e:	2301      	movs	r3, #1
 8006480:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006482:	2300      	movs	r3, #0
 8006484:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006486:	f107 0310 	add.w	r3, r7, #16
 800648a:	4618      	mov	r0, r3
 800648c:	f7fb ffe2 	bl	8002454 <HAL_RCCEx_PeriphCLKConfig>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006496:	f7ff ff2d 	bl	80062f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800649a:	4b46      	ldr	r3, [pc, #280]	; (80065b4 <HAL_UART_MspInit+0x168>)
 800649c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649e:	4a45      	ldr	r2, [pc, #276]	; (80065b4 <HAL_UART_MspInit+0x168>)
 80064a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064a4:	6613      	str	r3, [r2, #96]	; 0x60
 80064a6:	4b43      	ldr	r3, [pc, #268]	; (80065b4 <HAL_UART_MspInit+0x168>)
 80064a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064b2:	4b40      	ldr	r3, [pc, #256]	; (80065b4 <HAL_UART_MspInit+0x168>)
 80064b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b6:	4a3f      	ldr	r2, [pc, #252]	; (80065b4 <HAL_UART_MspInit+0x168>)
 80064b8:	f043 0302 	orr.w	r3, r3, #2
 80064bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064be:	4b3d      	ldr	r3, [pc, #244]	; (80065b4 <HAL_UART_MspInit+0x168>)
 80064c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	60bb      	str	r3, [r7, #8]
 80064c8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80064ca:	23c0      	movs	r3, #192	; 0xc0
 80064cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d0:	2302      	movs	r3, #2
 80064d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064dc:	2303      	movs	r3, #3
 80064de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80064e2:	2307      	movs	r3, #7
 80064e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80064ec:	4619      	mov	r1, r3
 80064ee:	4832      	ldr	r0, [pc, #200]	; (80065b8 <HAL_UART_MspInit+0x16c>)
 80064f0:	f7fa fd14 	bl	8000f1c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80064f4:	4b31      	ldr	r3, [pc, #196]	; (80065bc <HAL_UART_MspInit+0x170>)
 80064f6:	4a32      	ldr	r2, [pc, #200]	; (80065c0 <HAL_UART_MspInit+0x174>)
 80064f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80064fa:	4b30      	ldr	r3, [pc, #192]	; (80065bc <HAL_UART_MspInit+0x170>)
 80064fc:	2218      	movs	r2, #24
 80064fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006500:	4b2e      	ldr	r3, [pc, #184]	; (80065bc <HAL_UART_MspInit+0x170>)
 8006502:	2200      	movs	r2, #0
 8006504:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006506:	4b2d      	ldr	r3, [pc, #180]	; (80065bc <HAL_UART_MspInit+0x170>)
 8006508:	2200      	movs	r2, #0
 800650a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800650c:	4b2b      	ldr	r3, [pc, #172]	; (80065bc <HAL_UART_MspInit+0x170>)
 800650e:	2280      	movs	r2, #128	; 0x80
 8006510:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006512:	4b2a      	ldr	r3, [pc, #168]	; (80065bc <HAL_UART_MspInit+0x170>)
 8006514:	2200      	movs	r2, #0
 8006516:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006518:	4b28      	ldr	r3, [pc, #160]	; (80065bc <HAL_UART_MspInit+0x170>)
 800651a:	2200      	movs	r2, #0
 800651c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800651e:	4b27      	ldr	r3, [pc, #156]	; (80065bc <HAL_UART_MspInit+0x170>)
 8006520:	2200      	movs	r2, #0
 8006522:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006524:	4b25      	ldr	r3, [pc, #148]	; (80065bc <HAL_UART_MspInit+0x170>)
 8006526:	2200      	movs	r2, #0
 8006528:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800652a:	4824      	ldr	r0, [pc, #144]	; (80065bc <HAL_UART_MspInit+0x170>)
 800652c:	f7fa f9c8 	bl	80008c0 <HAL_DMA_Init>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8006536:	f7ff fedd 	bl	80062f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a1f      	ldr	r2, [pc, #124]	; (80065bc <HAL_UART_MspInit+0x170>)
 800653e:	67da      	str	r2, [r3, #124]	; 0x7c
 8006540:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <HAL_UART_MspInit+0x170>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8006546:	4b1f      	ldr	r3, [pc, #124]	; (80065c4 <HAL_UART_MspInit+0x178>)
 8006548:	4a1f      	ldr	r2, [pc, #124]	; (80065c8 <HAL_UART_MspInit+0x17c>)
 800654a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800654c:	4b1d      	ldr	r3, [pc, #116]	; (80065c4 <HAL_UART_MspInit+0x178>)
 800654e:	2219      	movs	r2, #25
 8006550:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006552:	4b1c      	ldr	r3, [pc, #112]	; (80065c4 <HAL_UART_MspInit+0x178>)
 8006554:	2210      	movs	r2, #16
 8006556:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006558:	4b1a      	ldr	r3, [pc, #104]	; (80065c4 <HAL_UART_MspInit+0x178>)
 800655a:	2200      	movs	r2, #0
 800655c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800655e:	4b19      	ldr	r3, [pc, #100]	; (80065c4 <HAL_UART_MspInit+0x178>)
 8006560:	2280      	movs	r2, #128	; 0x80
 8006562:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006564:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <HAL_UART_MspInit+0x178>)
 8006566:	2200      	movs	r2, #0
 8006568:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800656a:	4b16      	ldr	r3, [pc, #88]	; (80065c4 <HAL_UART_MspInit+0x178>)
 800656c:	2200      	movs	r2, #0
 800656e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006570:	4b14      	ldr	r3, [pc, #80]	; (80065c4 <HAL_UART_MspInit+0x178>)
 8006572:	2200      	movs	r2, #0
 8006574:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <HAL_UART_MspInit+0x178>)
 8006578:	2200      	movs	r2, #0
 800657a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800657c:	4811      	ldr	r0, [pc, #68]	; (80065c4 <HAL_UART_MspInit+0x178>)
 800657e:	f7fa f99f 	bl	80008c0 <HAL_DMA_Init>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8006588:	f7ff feb4 	bl	80062f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a0d      	ldr	r2, [pc, #52]	; (80065c4 <HAL_UART_MspInit+0x178>)
 8006590:	679a      	str	r2, [r3, #120]	; 0x78
 8006592:	4a0c      	ldr	r2, [pc, #48]	; (80065c4 <HAL_UART_MspInit+0x178>)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006598:	2200      	movs	r2, #0
 800659a:	2100      	movs	r1, #0
 800659c:	2025      	movs	r0, #37	; 0x25
 800659e:	f7fa f958 	bl	8000852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80065a2:	2025      	movs	r0, #37	; 0x25
 80065a4:	f7fa f971 	bl	800088a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80065a8:	bf00      	nop
 80065aa:	37b8      	adds	r7, #184	; 0xb8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40013800 	.word	0x40013800
 80065b4:	40021000 	.word	0x40021000
 80065b8:	48000400 	.word	0x48000400
 80065bc:	200001c0 	.word	0x200001c0
 80065c0:	40020008 	.word	0x40020008
 80065c4:	20000220 	.word	0x20000220
 80065c8:	4002001c 	.word	0x4002001c

080065cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80065d0:	e7fe      	b.n	80065d0 <NMI_Handler+0x4>

080065d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065d2:	b480      	push	{r7}
 80065d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065d6:	e7fe      	b.n	80065d6 <HardFault_Handler+0x4>

080065d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065dc:	e7fe      	b.n	80065dc <MemManage_Handler+0x4>

080065de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065de:	b480      	push	{r7}
 80065e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065e2:	e7fe      	b.n	80065e2 <BusFault_Handler+0x4>

080065e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065e8:	e7fe      	b.n	80065e8 <UsageFault_Handler+0x4>

080065ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80065ea:	b480      	push	{r7}
 80065ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065ee:	bf00      	nop
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065fc:	bf00      	nop
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006606:	b480      	push	{r7}
 8006608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800660a:	bf00      	nop
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006618:	f7fa f820 	bl	800065c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800661c:	bf00      	nop
 800661e:	bd80      	pop	{r7, pc}

08006620 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006624:	4802      	ldr	r0, [pc, #8]	; (8006630 <DMA1_Channel1_IRQHandler+0x10>)
 8006626:	f7fa fb29 	bl	8000c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800662a:	bf00      	nop
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	200001c0 	.word	0x200001c0

08006634 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006638:	4802      	ldr	r0, [pc, #8]	; (8006644 <DMA1_Channel2_IRQHandler+0x10>)
 800663a:	f7fa fb1f 	bl	8000c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800663e:	bf00      	nop
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20000220 	.word	0x20000220

08006648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800664c:	4802      	ldr	r0, [pc, #8]	; (8006658 <TIM2_IRQHandler+0x10>)
 800664e:	f7fc fc70 	bl	8002f32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006652:	bf00      	nop
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	200000e4 	.word	0x200000e4

0800665c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006660:	4802      	ldr	r0, [pc, #8]	; (800666c <USART1_IRQHandler+0x10>)
 8006662:	f7fd fa81 	bl	8003b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006666:	bf00      	nop
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000130 	.word	0x20000130

08006670 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_Pin);
 8006674:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006678:	f7fa fe12 	bl	80012a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800667c:	bf00      	nop
 800667e:	bd80      	pop	{r7, pc}

08006680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006688:	4a14      	ldr	r2, [pc, #80]	; (80066dc <_sbrk+0x5c>)
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <_sbrk+0x60>)
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006694:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <_sbrk+0x64>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d102      	bne.n	80066a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800669c:	4b11      	ldr	r3, [pc, #68]	; (80066e4 <_sbrk+0x64>)
 800669e:	4a12      	ldr	r2, [pc, #72]	; (80066e8 <_sbrk+0x68>)
 80066a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80066a2:	4b10      	ldr	r3, [pc, #64]	; (80066e4 <_sbrk+0x64>)
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4413      	add	r3, r2
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d207      	bcs.n	80066c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80066b0:	f000 f858 	bl	8006764 <__errno>
 80066b4:	4603      	mov	r3, r0
 80066b6:	220c      	movs	r2, #12
 80066b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80066ba:	f04f 33ff 	mov.w	r3, #4294967295
 80066be:	e009      	b.n	80066d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80066c0:	4b08      	ldr	r3, [pc, #32]	; (80066e4 <_sbrk+0x64>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80066c6:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <_sbrk+0x64>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4413      	add	r3, r2
 80066ce:	4a05      	ldr	r2, [pc, #20]	; (80066e4 <_sbrk+0x64>)
 80066d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80066d2:	68fb      	ldr	r3, [r7, #12]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	200a0000 	.word	0x200a0000
 80066e0:	00000400 	.word	0x00000400
 80066e4:	20000670 	.word	0x20000670
 80066e8:	20000688 	.word	0x20000688

080066ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <SystemInit+0x20>)
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f6:	4a05      	ldr	r2, [pc, #20]	; (800670c <SystemInit+0x20>)
 80066f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006700:	bf00      	nop
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	e000ed00 	.word	0xe000ed00

08006710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006748 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006714:	f7ff ffea 	bl	80066ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006718:	480c      	ldr	r0, [pc, #48]	; (800674c <LoopForever+0x6>)
  ldr r1, =_edata
 800671a:	490d      	ldr	r1, [pc, #52]	; (8006750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800671c:	4a0d      	ldr	r2, [pc, #52]	; (8006754 <LoopForever+0xe>)
  movs r3, #0
 800671e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006720:	e002      	b.n	8006728 <LoopCopyDataInit>

08006722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006726:	3304      	adds	r3, #4

08006728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800672a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800672c:	d3f9      	bcc.n	8006722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800672e:	4a0a      	ldr	r2, [pc, #40]	; (8006758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006730:	4c0a      	ldr	r4, [pc, #40]	; (800675c <LoopForever+0x16>)
  movs r3, #0
 8006732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006734:	e001      	b.n	800673a <LoopFillZerobss>

08006736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006738:	3204      	adds	r2, #4

0800673a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800673a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800673c:	d3fb      	bcc.n	8006736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800673e:	f000 f817 	bl	8006770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006742:	f7ff fb8f 	bl	8005e64 <main>

08006746 <LoopForever>:

LoopForever:
    b LoopForever
 8006746:	e7fe      	b.n	8006746 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006748:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800674c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006750:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8006754:	0800719c 	.word	0x0800719c
  ldr r2, =_sbss
 8006758:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800675c:	20000684 	.word	0x20000684

08006760 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006760:	e7fe      	b.n	8006760 <ADC1_IRQHandler>
	...

08006764 <__errno>:
 8006764:	4b01      	ldr	r3, [pc, #4]	; (800676c <__errno+0x8>)
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	2000000c 	.word	0x2000000c

08006770 <__libc_init_array>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	4d0d      	ldr	r5, [pc, #52]	; (80067a8 <__libc_init_array+0x38>)
 8006774:	4c0d      	ldr	r4, [pc, #52]	; (80067ac <__libc_init_array+0x3c>)
 8006776:	1b64      	subs	r4, r4, r5
 8006778:	10a4      	asrs	r4, r4, #2
 800677a:	2600      	movs	r6, #0
 800677c:	42a6      	cmp	r6, r4
 800677e:	d109      	bne.n	8006794 <__libc_init_array+0x24>
 8006780:	4d0b      	ldr	r5, [pc, #44]	; (80067b0 <__libc_init_array+0x40>)
 8006782:	4c0c      	ldr	r4, [pc, #48]	; (80067b4 <__libc_init_array+0x44>)
 8006784:	f000 fc8e 	bl	80070a4 <_init>
 8006788:	1b64      	subs	r4, r4, r5
 800678a:	10a4      	asrs	r4, r4, #2
 800678c:	2600      	movs	r6, #0
 800678e:	42a6      	cmp	r6, r4
 8006790:	d105      	bne.n	800679e <__libc_init_array+0x2e>
 8006792:	bd70      	pop	{r4, r5, r6, pc}
 8006794:	f855 3b04 	ldr.w	r3, [r5], #4
 8006798:	4798      	blx	r3
 800679a:	3601      	adds	r6, #1
 800679c:	e7ee      	b.n	800677c <__libc_init_array+0xc>
 800679e:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a2:	4798      	blx	r3
 80067a4:	3601      	adds	r6, #1
 80067a6:	e7f2      	b.n	800678e <__libc_init_array+0x1e>
 80067a8:	08007194 	.word	0x08007194
 80067ac:	08007194 	.word	0x08007194
 80067b0:	08007194 	.word	0x08007194
 80067b4:	08007198 	.word	0x08007198

080067b8 <memset>:
 80067b8:	4402      	add	r2, r0
 80067ba:	4603      	mov	r3, r0
 80067bc:	4293      	cmp	r3, r2
 80067be:	d100      	bne.n	80067c2 <memset+0xa>
 80067c0:	4770      	bx	lr
 80067c2:	f803 1b01 	strb.w	r1, [r3], #1
 80067c6:	e7f9      	b.n	80067bc <memset+0x4>

080067c8 <siprintf>:
 80067c8:	b40e      	push	{r1, r2, r3}
 80067ca:	b500      	push	{lr}
 80067cc:	b09c      	sub	sp, #112	; 0x70
 80067ce:	ab1d      	add	r3, sp, #116	; 0x74
 80067d0:	9002      	str	r0, [sp, #8]
 80067d2:	9006      	str	r0, [sp, #24]
 80067d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067d8:	4809      	ldr	r0, [pc, #36]	; (8006800 <siprintf+0x38>)
 80067da:	9107      	str	r1, [sp, #28]
 80067dc:	9104      	str	r1, [sp, #16]
 80067de:	4909      	ldr	r1, [pc, #36]	; (8006804 <siprintf+0x3c>)
 80067e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e4:	9105      	str	r1, [sp, #20]
 80067e6:	6800      	ldr	r0, [r0, #0]
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	a902      	add	r1, sp, #8
 80067ec:	f000 f868 	bl	80068c0 <_svfiprintf_r>
 80067f0:	9b02      	ldr	r3, [sp, #8]
 80067f2:	2200      	movs	r2, #0
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	b01c      	add	sp, #112	; 0x70
 80067f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067fc:	b003      	add	sp, #12
 80067fe:	4770      	bx	lr
 8006800:	2000000c 	.word	0x2000000c
 8006804:	ffff0208 	.word	0xffff0208

08006808 <__ssputs_r>:
 8006808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800680c:	688e      	ldr	r6, [r1, #8]
 800680e:	429e      	cmp	r6, r3
 8006810:	4682      	mov	sl, r0
 8006812:	460c      	mov	r4, r1
 8006814:	4690      	mov	r8, r2
 8006816:	461f      	mov	r7, r3
 8006818:	d838      	bhi.n	800688c <__ssputs_r+0x84>
 800681a:	898a      	ldrh	r2, [r1, #12]
 800681c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006820:	d032      	beq.n	8006888 <__ssputs_r+0x80>
 8006822:	6825      	ldr	r5, [r4, #0]
 8006824:	6909      	ldr	r1, [r1, #16]
 8006826:	eba5 0901 	sub.w	r9, r5, r1
 800682a:	6965      	ldr	r5, [r4, #20]
 800682c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006830:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006834:	3301      	adds	r3, #1
 8006836:	444b      	add	r3, r9
 8006838:	106d      	asrs	r5, r5, #1
 800683a:	429d      	cmp	r5, r3
 800683c:	bf38      	it	cc
 800683e:	461d      	movcc	r5, r3
 8006840:	0553      	lsls	r3, r2, #21
 8006842:	d531      	bpl.n	80068a8 <__ssputs_r+0xa0>
 8006844:	4629      	mov	r1, r5
 8006846:	f000 fb63 	bl	8006f10 <_malloc_r>
 800684a:	4606      	mov	r6, r0
 800684c:	b950      	cbnz	r0, 8006864 <__ssputs_r+0x5c>
 800684e:	230c      	movs	r3, #12
 8006850:	f8ca 3000 	str.w	r3, [sl]
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800685a:	81a3      	strh	r3, [r4, #12]
 800685c:	f04f 30ff 	mov.w	r0, #4294967295
 8006860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006864:	6921      	ldr	r1, [r4, #16]
 8006866:	464a      	mov	r2, r9
 8006868:	f000 fabe 	bl	8006de8 <memcpy>
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	6126      	str	r6, [r4, #16]
 800687a:	6165      	str	r5, [r4, #20]
 800687c:	444e      	add	r6, r9
 800687e:	eba5 0509 	sub.w	r5, r5, r9
 8006882:	6026      	str	r6, [r4, #0]
 8006884:	60a5      	str	r5, [r4, #8]
 8006886:	463e      	mov	r6, r7
 8006888:	42be      	cmp	r6, r7
 800688a:	d900      	bls.n	800688e <__ssputs_r+0x86>
 800688c:	463e      	mov	r6, r7
 800688e:	6820      	ldr	r0, [r4, #0]
 8006890:	4632      	mov	r2, r6
 8006892:	4641      	mov	r1, r8
 8006894:	f000 fab6 	bl	8006e04 <memmove>
 8006898:	68a3      	ldr	r3, [r4, #8]
 800689a:	1b9b      	subs	r3, r3, r6
 800689c:	60a3      	str	r3, [r4, #8]
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	4433      	add	r3, r6
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	2000      	movs	r0, #0
 80068a6:	e7db      	b.n	8006860 <__ssputs_r+0x58>
 80068a8:	462a      	mov	r2, r5
 80068aa:	f000 fba5 	bl	8006ff8 <_realloc_r>
 80068ae:	4606      	mov	r6, r0
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d1e1      	bne.n	8006878 <__ssputs_r+0x70>
 80068b4:	6921      	ldr	r1, [r4, #16]
 80068b6:	4650      	mov	r0, sl
 80068b8:	f000 fabe 	bl	8006e38 <_free_r>
 80068bc:	e7c7      	b.n	800684e <__ssputs_r+0x46>
	...

080068c0 <_svfiprintf_r>:
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	4698      	mov	r8, r3
 80068c6:	898b      	ldrh	r3, [r1, #12]
 80068c8:	061b      	lsls	r3, r3, #24
 80068ca:	b09d      	sub	sp, #116	; 0x74
 80068cc:	4607      	mov	r7, r0
 80068ce:	460d      	mov	r5, r1
 80068d0:	4614      	mov	r4, r2
 80068d2:	d50e      	bpl.n	80068f2 <_svfiprintf_r+0x32>
 80068d4:	690b      	ldr	r3, [r1, #16]
 80068d6:	b963      	cbnz	r3, 80068f2 <_svfiprintf_r+0x32>
 80068d8:	2140      	movs	r1, #64	; 0x40
 80068da:	f000 fb19 	bl	8006f10 <_malloc_r>
 80068de:	6028      	str	r0, [r5, #0]
 80068e0:	6128      	str	r0, [r5, #16]
 80068e2:	b920      	cbnz	r0, 80068ee <_svfiprintf_r+0x2e>
 80068e4:	230c      	movs	r3, #12
 80068e6:	603b      	str	r3, [r7, #0]
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	e0d1      	b.n	8006a92 <_svfiprintf_r+0x1d2>
 80068ee:	2340      	movs	r3, #64	; 0x40
 80068f0:	616b      	str	r3, [r5, #20]
 80068f2:	2300      	movs	r3, #0
 80068f4:	9309      	str	r3, [sp, #36]	; 0x24
 80068f6:	2320      	movs	r3, #32
 80068f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006900:	2330      	movs	r3, #48	; 0x30
 8006902:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006aac <_svfiprintf_r+0x1ec>
 8006906:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800690a:	f04f 0901 	mov.w	r9, #1
 800690e:	4623      	mov	r3, r4
 8006910:	469a      	mov	sl, r3
 8006912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006916:	b10a      	cbz	r2, 800691c <_svfiprintf_r+0x5c>
 8006918:	2a25      	cmp	r2, #37	; 0x25
 800691a:	d1f9      	bne.n	8006910 <_svfiprintf_r+0x50>
 800691c:	ebba 0b04 	subs.w	fp, sl, r4
 8006920:	d00b      	beq.n	800693a <_svfiprintf_r+0x7a>
 8006922:	465b      	mov	r3, fp
 8006924:	4622      	mov	r2, r4
 8006926:	4629      	mov	r1, r5
 8006928:	4638      	mov	r0, r7
 800692a:	f7ff ff6d 	bl	8006808 <__ssputs_r>
 800692e:	3001      	adds	r0, #1
 8006930:	f000 80aa 	beq.w	8006a88 <_svfiprintf_r+0x1c8>
 8006934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006936:	445a      	add	r2, fp
 8006938:	9209      	str	r2, [sp, #36]	; 0x24
 800693a:	f89a 3000 	ldrb.w	r3, [sl]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 80a2 	beq.w	8006a88 <_svfiprintf_r+0x1c8>
 8006944:	2300      	movs	r3, #0
 8006946:	f04f 32ff 	mov.w	r2, #4294967295
 800694a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800694e:	f10a 0a01 	add.w	sl, sl, #1
 8006952:	9304      	str	r3, [sp, #16]
 8006954:	9307      	str	r3, [sp, #28]
 8006956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800695a:	931a      	str	r3, [sp, #104]	; 0x68
 800695c:	4654      	mov	r4, sl
 800695e:	2205      	movs	r2, #5
 8006960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006964:	4851      	ldr	r0, [pc, #324]	; (8006aac <_svfiprintf_r+0x1ec>)
 8006966:	f7f9 fc53 	bl	8000210 <memchr>
 800696a:	9a04      	ldr	r2, [sp, #16]
 800696c:	b9d8      	cbnz	r0, 80069a6 <_svfiprintf_r+0xe6>
 800696e:	06d0      	lsls	r0, r2, #27
 8006970:	bf44      	itt	mi
 8006972:	2320      	movmi	r3, #32
 8006974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006978:	0711      	lsls	r1, r2, #28
 800697a:	bf44      	itt	mi
 800697c:	232b      	movmi	r3, #43	; 0x2b
 800697e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006982:	f89a 3000 	ldrb.w	r3, [sl]
 8006986:	2b2a      	cmp	r3, #42	; 0x2a
 8006988:	d015      	beq.n	80069b6 <_svfiprintf_r+0xf6>
 800698a:	9a07      	ldr	r2, [sp, #28]
 800698c:	4654      	mov	r4, sl
 800698e:	2000      	movs	r0, #0
 8006990:	f04f 0c0a 	mov.w	ip, #10
 8006994:	4621      	mov	r1, r4
 8006996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800699a:	3b30      	subs	r3, #48	; 0x30
 800699c:	2b09      	cmp	r3, #9
 800699e:	d94e      	bls.n	8006a3e <_svfiprintf_r+0x17e>
 80069a0:	b1b0      	cbz	r0, 80069d0 <_svfiprintf_r+0x110>
 80069a2:	9207      	str	r2, [sp, #28]
 80069a4:	e014      	b.n	80069d0 <_svfiprintf_r+0x110>
 80069a6:	eba0 0308 	sub.w	r3, r0, r8
 80069aa:	fa09 f303 	lsl.w	r3, r9, r3
 80069ae:	4313      	orrs	r3, r2
 80069b0:	9304      	str	r3, [sp, #16]
 80069b2:	46a2      	mov	sl, r4
 80069b4:	e7d2      	b.n	800695c <_svfiprintf_r+0x9c>
 80069b6:	9b03      	ldr	r3, [sp, #12]
 80069b8:	1d19      	adds	r1, r3, #4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	9103      	str	r1, [sp, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bfbb      	ittet	lt
 80069c2:	425b      	neglt	r3, r3
 80069c4:	f042 0202 	orrlt.w	r2, r2, #2
 80069c8:	9307      	strge	r3, [sp, #28]
 80069ca:	9307      	strlt	r3, [sp, #28]
 80069cc:	bfb8      	it	lt
 80069ce:	9204      	strlt	r2, [sp, #16]
 80069d0:	7823      	ldrb	r3, [r4, #0]
 80069d2:	2b2e      	cmp	r3, #46	; 0x2e
 80069d4:	d10c      	bne.n	80069f0 <_svfiprintf_r+0x130>
 80069d6:	7863      	ldrb	r3, [r4, #1]
 80069d8:	2b2a      	cmp	r3, #42	; 0x2a
 80069da:	d135      	bne.n	8006a48 <_svfiprintf_r+0x188>
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	1d1a      	adds	r2, r3, #4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	9203      	str	r2, [sp, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bfb8      	it	lt
 80069e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80069ec:	3402      	adds	r4, #2
 80069ee:	9305      	str	r3, [sp, #20]
 80069f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006abc <_svfiprintf_r+0x1fc>
 80069f4:	7821      	ldrb	r1, [r4, #0]
 80069f6:	2203      	movs	r2, #3
 80069f8:	4650      	mov	r0, sl
 80069fa:	f7f9 fc09 	bl	8000210 <memchr>
 80069fe:	b140      	cbz	r0, 8006a12 <_svfiprintf_r+0x152>
 8006a00:	2340      	movs	r3, #64	; 0x40
 8006a02:	eba0 000a 	sub.w	r0, r0, sl
 8006a06:	fa03 f000 	lsl.w	r0, r3, r0
 8006a0a:	9b04      	ldr	r3, [sp, #16]
 8006a0c:	4303      	orrs	r3, r0
 8006a0e:	3401      	adds	r4, #1
 8006a10:	9304      	str	r3, [sp, #16]
 8006a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a16:	4826      	ldr	r0, [pc, #152]	; (8006ab0 <_svfiprintf_r+0x1f0>)
 8006a18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a1c:	2206      	movs	r2, #6
 8006a1e:	f7f9 fbf7 	bl	8000210 <memchr>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d038      	beq.n	8006a98 <_svfiprintf_r+0x1d8>
 8006a26:	4b23      	ldr	r3, [pc, #140]	; (8006ab4 <_svfiprintf_r+0x1f4>)
 8006a28:	bb1b      	cbnz	r3, 8006a72 <_svfiprintf_r+0x1b2>
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	3307      	adds	r3, #7
 8006a2e:	f023 0307 	bic.w	r3, r3, #7
 8006a32:	3308      	adds	r3, #8
 8006a34:	9303      	str	r3, [sp, #12]
 8006a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a38:	4433      	add	r3, r6
 8006a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3c:	e767      	b.n	800690e <_svfiprintf_r+0x4e>
 8006a3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a42:	460c      	mov	r4, r1
 8006a44:	2001      	movs	r0, #1
 8006a46:	e7a5      	b.n	8006994 <_svfiprintf_r+0xd4>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	3401      	adds	r4, #1
 8006a4c:	9305      	str	r3, [sp, #20]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	f04f 0c0a 	mov.w	ip, #10
 8006a54:	4620      	mov	r0, r4
 8006a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a5a:	3a30      	subs	r2, #48	; 0x30
 8006a5c:	2a09      	cmp	r2, #9
 8006a5e:	d903      	bls.n	8006a68 <_svfiprintf_r+0x1a8>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0c5      	beq.n	80069f0 <_svfiprintf_r+0x130>
 8006a64:	9105      	str	r1, [sp, #20]
 8006a66:	e7c3      	b.n	80069f0 <_svfiprintf_r+0x130>
 8006a68:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e7f0      	b.n	8006a54 <_svfiprintf_r+0x194>
 8006a72:	ab03      	add	r3, sp, #12
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	462a      	mov	r2, r5
 8006a78:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <_svfiprintf_r+0x1f8>)
 8006a7a:	a904      	add	r1, sp, #16
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f3af 8000 	nop.w
 8006a82:	1c42      	adds	r2, r0, #1
 8006a84:	4606      	mov	r6, r0
 8006a86:	d1d6      	bne.n	8006a36 <_svfiprintf_r+0x176>
 8006a88:	89ab      	ldrh	r3, [r5, #12]
 8006a8a:	065b      	lsls	r3, r3, #25
 8006a8c:	f53f af2c 	bmi.w	80068e8 <_svfiprintf_r+0x28>
 8006a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a92:	b01d      	add	sp, #116	; 0x74
 8006a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a98:	ab03      	add	r3, sp, #12
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	462a      	mov	r2, r5
 8006a9e:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <_svfiprintf_r+0x1f8>)
 8006aa0:	a904      	add	r1, sp, #16
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	f000 f87a 	bl	8006b9c <_printf_i>
 8006aa8:	e7eb      	b.n	8006a82 <_svfiprintf_r+0x1c2>
 8006aaa:	bf00      	nop
 8006aac:	08007158 	.word	0x08007158
 8006ab0:	08007162 	.word	0x08007162
 8006ab4:	00000000 	.word	0x00000000
 8006ab8:	08006809 	.word	0x08006809
 8006abc:	0800715e 	.word	0x0800715e

08006ac0 <_printf_common>:
 8006ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac4:	4616      	mov	r6, r2
 8006ac6:	4699      	mov	r9, r3
 8006ac8:	688a      	ldr	r2, [r1, #8]
 8006aca:	690b      	ldr	r3, [r1, #16]
 8006acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	bfb8      	it	lt
 8006ad4:	4613      	movlt	r3, r2
 8006ad6:	6033      	str	r3, [r6, #0]
 8006ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006adc:	4607      	mov	r7, r0
 8006ade:	460c      	mov	r4, r1
 8006ae0:	b10a      	cbz	r2, 8006ae6 <_printf_common+0x26>
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	6033      	str	r3, [r6, #0]
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	0699      	lsls	r1, r3, #26
 8006aea:	bf42      	ittt	mi
 8006aec:	6833      	ldrmi	r3, [r6, #0]
 8006aee:	3302      	addmi	r3, #2
 8006af0:	6033      	strmi	r3, [r6, #0]
 8006af2:	6825      	ldr	r5, [r4, #0]
 8006af4:	f015 0506 	ands.w	r5, r5, #6
 8006af8:	d106      	bne.n	8006b08 <_printf_common+0x48>
 8006afa:	f104 0a19 	add.w	sl, r4, #25
 8006afe:	68e3      	ldr	r3, [r4, #12]
 8006b00:	6832      	ldr	r2, [r6, #0]
 8006b02:	1a9b      	subs	r3, r3, r2
 8006b04:	42ab      	cmp	r3, r5
 8006b06:	dc26      	bgt.n	8006b56 <_printf_common+0x96>
 8006b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b0c:	1e13      	subs	r3, r2, #0
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	bf18      	it	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	0692      	lsls	r2, r2, #26
 8006b16:	d42b      	bmi.n	8006b70 <_printf_common+0xb0>
 8006b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	4638      	mov	r0, r7
 8006b20:	47c0      	blx	r8
 8006b22:	3001      	adds	r0, #1
 8006b24:	d01e      	beq.n	8006b64 <_printf_common+0xa4>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	68e5      	ldr	r5, [r4, #12]
 8006b2a:	6832      	ldr	r2, [r6, #0]
 8006b2c:	f003 0306 	and.w	r3, r3, #6
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	bf08      	it	eq
 8006b34:	1aad      	subeq	r5, r5, r2
 8006b36:	68a3      	ldr	r3, [r4, #8]
 8006b38:	6922      	ldr	r2, [r4, #16]
 8006b3a:	bf0c      	ite	eq
 8006b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b40:	2500      	movne	r5, #0
 8006b42:	4293      	cmp	r3, r2
 8006b44:	bfc4      	itt	gt
 8006b46:	1a9b      	subgt	r3, r3, r2
 8006b48:	18ed      	addgt	r5, r5, r3
 8006b4a:	2600      	movs	r6, #0
 8006b4c:	341a      	adds	r4, #26
 8006b4e:	42b5      	cmp	r5, r6
 8006b50:	d11a      	bne.n	8006b88 <_printf_common+0xc8>
 8006b52:	2000      	movs	r0, #0
 8006b54:	e008      	b.n	8006b68 <_printf_common+0xa8>
 8006b56:	2301      	movs	r3, #1
 8006b58:	4652      	mov	r2, sl
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	47c0      	blx	r8
 8006b60:	3001      	adds	r0, #1
 8006b62:	d103      	bne.n	8006b6c <_printf_common+0xac>
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6c:	3501      	adds	r5, #1
 8006b6e:	e7c6      	b.n	8006afe <_printf_common+0x3e>
 8006b70:	18e1      	adds	r1, r4, r3
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	2030      	movs	r0, #48	; 0x30
 8006b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b7a:	4422      	add	r2, r4
 8006b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b84:	3302      	adds	r3, #2
 8006b86:	e7c7      	b.n	8006b18 <_printf_common+0x58>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	4649      	mov	r1, r9
 8006b8e:	4638      	mov	r0, r7
 8006b90:	47c0      	blx	r8
 8006b92:	3001      	adds	r0, #1
 8006b94:	d0e6      	beq.n	8006b64 <_printf_common+0xa4>
 8006b96:	3601      	adds	r6, #1
 8006b98:	e7d9      	b.n	8006b4e <_printf_common+0x8e>
	...

08006b9c <_printf_i>:
 8006b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	7e0f      	ldrb	r7, [r1, #24]
 8006ba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ba4:	2f78      	cmp	r7, #120	; 0x78
 8006ba6:	4691      	mov	r9, r2
 8006ba8:	4680      	mov	r8, r0
 8006baa:	460c      	mov	r4, r1
 8006bac:	469a      	mov	sl, r3
 8006bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bb2:	d807      	bhi.n	8006bc4 <_printf_i+0x28>
 8006bb4:	2f62      	cmp	r7, #98	; 0x62
 8006bb6:	d80a      	bhi.n	8006bce <_printf_i+0x32>
 8006bb8:	2f00      	cmp	r7, #0
 8006bba:	f000 80d8 	beq.w	8006d6e <_printf_i+0x1d2>
 8006bbe:	2f58      	cmp	r7, #88	; 0x58
 8006bc0:	f000 80a3 	beq.w	8006d0a <_printf_i+0x16e>
 8006bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bcc:	e03a      	b.n	8006c44 <_printf_i+0xa8>
 8006bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bd2:	2b15      	cmp	r3, #21
 8006bd4:	d8f6      	bhi.n	8006bc4 <_printf_i+0x28>
 8006bd6:	a101      	add	r1, pc, #4	; (adr r1, 8006bdc <_printf_i+0x40>)
 8006bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bdc:	08006c35 	.word	0x08006c35
 8006be0:	08006c49 	.word	0x08006c49
 8006be4:	08006bc5 	.word	0x08006bc5
 8006be8:	08006bc5 	.word	0x08006bc5
 8006bec:	08006bc5 	.word	0x08006bc5
 8006bf0:	08006bc5 	.word	0x08006bc5
 8006bf4:	08006c49 	.word	0x08006c49
 8006bf8:	08006bc5 	.word	0x08006bc5
 8006bfc:	08006bc5 	.word	0x08006bc5
 8006c00:	08006bc5 	.word	0x08006bc5
 8006c04:	08006bc5 	.word	0x08006bc5
 8006c08:	08006d55 	.word	0x08006d55
 8006c0c:	08006c79 	.word	0x08006c79
 8006c10:	08006d37 	.word	0x08006d37
 8006c14:	08006bc5 	.word	0x08006bc5
 8006c18:	08006bc5 	.word	0x08006bc5
 8006c1c:	08006d77 	.word	0x08006d77
 8006c20:	08006bc5 	.word	0x08006bc5
 8006c24:	08006c79 	.word	0x08006c79
 8006c28:	08006bc5 	.word	0x08006bc5
 8006c2c:	08006bc5 	.word	0x08006bc5
 8006c30:	08006d3f 	.word	0x08006d3f
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	1d1a      	adds	r2, r3, #4
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	602a      	str	r2, [r5, #0]
 8006c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c44:	2301      	movs	r3, #1
 8006c46:	e0a3      	b.n	8006d90 <_printf_i+0x1f4>
 8006c48:	6820      	ldr	r0, [r4, #0]
 8006c4a:	6829      	ldr	r1, [r5, #0]
 8006c4c:	0606      	lsls	r6, r0, #24
 8006c4e:	f101 0304 	add.w	r3, r1, #4
 8006c52:	d50a      	bpl.n	8006c6a <_printf_i+0xce>
 8006c54:	680e      	ldr	r6, [r1, #0]
 8006c56:	602b      	str	r3, [r5, #0]
 8006c58:	2e00      	cmp	r6, #0
 8006c5a:	da03      	bge.n	8006c64 <_printf_i+0xc8>
 8006c5c:	232d      	movs	r3, #45	; 0x2d
 8006c5e:	4276      	negs	r6, r6
 8006c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c64:	485e      	ldr	r0, [pc, #376]	; (8006de0 <_printf_i+0x244>)
 8006c66:	230a      	movs	r3, #10
 8006c68:	e019      	b.n	8006c9e <_printf_i+0x102>
 8006c6a:	680e      	ldr	r6, [r1, #0]
 8006c6c:	602b      	str	r3, [r5, #0]
 8006c6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c72:	bf18      	it	ne
 8006c74:	b236      	sxthne	r6, r6
 8006c76:	e7ef      	b.n	8006c58 <_printf_i+0xbc>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	6820      	ldr	r0, [r4, #0]
 8006c7c:	1d19      	adds	r1, r3, #4
 8006c7e:	6029      	str	r1, [r5, #0]
 8006c80:	0601      	lsls	r1, r0, #24
 8006c82:	d501      	bpl.n	8006c88 <_printf_i+0xec>
 8006c84:	681e      	ldr	r6, [r3, #0]
 8006c86:	e002      	b.n	8006c8e <_printf_i+0xf2>
 8006c88:	0646      	lsls	r6, r0, #25
 8006c8a:	d5fb      	bpl.n	8006c84 <_printf_i+0xe8>
 8006c8c:	881e      	ldrh	r6, [r3, #0]
 8006c8e:	4854      	ldr	r0, [pc, #336]	; (8006de0 <_printf_i+0x244>)
 8006c90:	2f6f      	cmp	r7, #111	; 0x6f
 8006c92:	bf0c      	ite	eq
 8006c94:	2308      	moveq	r3, #8
 8006c96:	230a      	movne	r3, #10
 8006c98:	2100      	movs	r1, #0
 8006c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c9e:	6865      	ldr	r5, [r4, #4]
 8006ca0:	60a5      	str	r5, [r4, #8]
 8006ca2:	2d00      	cmp	r5, #0
 8006ca4:	bfa2      	ittt	ge
 8006ca6:	6821      	ldrge	r1, [r4, #0]
 8006ca8:	f021 0104 	bicge.w	r1, r1, #4
 8006cac:	6021      	strge	r1, [r4, #0]
 8006cae:	b90e      	cbnz	r6, 8006cb4 <_printf_i+0x118>
 8006cb0:	2d00      	cmp	r5, #0
 8006cb2:	d04d      	beq.n	8006d50 <_printf_i+0x1b4>
 8006cb4:	4615      	mov	r5, r2
 8006cb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cba:	fb03 6711 	mls	r7, r3, r1, r6
 8006cbe:	5dc7      	ldrb	r7, [r0, r7]
 8006cc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cc4:	4637      	mov	r7, r6
 8006cc6:	42bb      	cmp	r3, r7
 8006cc8:	460e      	mov	r6, r1
 8006cca:	d9f4      	bls.n	8006cb6 <_printf_i+0x11a>
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d10b      	bne.n	8006ce8 <_printf_i+0x14c>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	07de      	lsls	r6, r3, #31
 8006cd4:	d508      	bpl.n	8006ce8 <_printf_i+0x14c>
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	6861      	ldr	r1, [r4, #4]
 8006cda:	4299      	cmp	r1, r3
 8006cdc:	bfde      	ittt	le
 8006cde:	2330      	movle	r3, #48	; 0x30
 8006ce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ce4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ce8:	1b52      	subs	r2, r2, r5
 8006cea:	6122      	str	r2, [r4, #16]
 8006cec:	f8cd a000 	str.w	sl, [sp]
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	aa03      	add	r2, sp, #12
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	f7ff fee2 	bl	8006ac0 <_printf_common>
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d14c      	bne.n	8006d9a <_printf_i+0x1fe>
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295
 8006d04:	b004      	add	sp, #16
 8006d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0a:	4835      	ldr	r0, [pc, #212]	; (8006de0 <_printf_i+0x244>)
 8006d0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d10:	6829      	ldr	r1, [r5, #0]
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d18:	6029      	str	r1, [r5, #0]
 8006d1a:	061d      	lsls	r5, r3, #24
 8006d1c:	d514      	bpl.n	8006d48 <_printf_i+0x1ac>
 8006d1e:	07df      	lsls	r7, r3, #31
 8006d20:	bf44      	itt	mi
 8006d22:	f043 0320 	orrmi.w	r3, r3, #32
 8006d26:	6023      	strmi	r3, [r4, #0]
 8006d28:	b91e      	cbnz	r6, 8006d32 <_printf_i+0x196>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	f023 0320 	bic.w	r3, r3, #32
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	2310      	movs	r3, #16
 8006d34:	e7b0      	b.n	8006c98 <_printf_i+0xfc>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	f043 0320 	orr.w	r3, r3, #32
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	2378      	movs	r3, #120	; 0x78
 8006d40:	4828      	ldr	r0, [pc, #160]	; (8006de4 <_printf_i+0x248>)
 8006d42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d46:	e7e3      	b.n	8006d10 <_printf_i+0x174>
 8006d48:	0659      	lsls	r1, r3, #25
 8006d4a:	bf48      	it	mi
 8006d4c:	b2b6      	uxthmi	r6, r6
 8006d4e:	e7e6      	b.n	8006d1e <_printf_i+0x182>
 8006d50:	4615      	mov	r5, r2
 8006d52:	e7bb      	b.n	8006ccc <_printf_i+0x130>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	6826      	ldr	r6, [r4, #0]
 8006d58:	6961      	ldr	r1, [r4, #20]
 8006d5a:	1d18      	adds	r0, r3, #4
 8006d5c:	6028      	str	r0, [r5, #0]
 8006d5e:	0635      	lsls	r5, r6, #24
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	d501      	bpl.n	8006d68 <_printf_i+0x1cc>
 8006d64:	6019      	str	r1, [r3, #0]
 8006d66:	e002      	b.n	8006d6e <_printf_i+0x1d2>
 8006d68:	0670      	lsls	r0, r6, #25
 8006d6a:	d5fb      	bpl.n	8006d64 <_printf_i+0x1c8>
 8006d6c:	8019      	strh	r1, [r3, #0]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6123      	str	r3, [r4, #16]
 8006d72:	4615      	mov	r5, r2
 8006d74:	e7ba      	b.n	8006cec <_printf_i+0x150>
 8006d76:	682b      	ldr	r3, [r5, #0]
 8006d78:	1d1a      	adds	r2, r3, #4
 8006d7a:	602a      	str	r2, [r5, #0]
 8006d7c:	681d      	ldr	r5, [r3, #0]
 8006d7e:	6862      	ldr	r2, [r4, #4]
 8006d80:	2100      	movs	r1, #0
 8006d82:	4628      	mov	r0, r5
 8006d84:	f7f9 fa44 	bl	8000210 <memchr>
 8006d88:	b108      	cbz	r0, 8006d8e <_printf_i+0x1f2>
 8006d8a:	1b40      	subs	r0, r0, r5
 8006d8c:	6060      	str	r0, [r4, #4]
 8006d8e:	6863      	ldr	r3, [r4, #4]
 8006d90:	6123      	str	r3, [r4, #16]
 8006d92:	2300      	movs	r3, #0
 8006d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d98:	e7a8      	b.n	8006cec <_printf_i+0x150>
 8006d9a:	6923      	ldr	r3, [r4, #16]
 8006d9c:	462a      	mov	r2, r5
 8006d9e:	4649      	mov	r1, r9
 8006da0:	4640      	mov	r0, r8
 8006da2:	47d0      	blx	sl
 8006da4:	3001      	adds	r0, #1
 8006da6:	d0ab      	beq.n	8006d00 <_printf_i+0x164>
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	079b      	lsls	r3, r3, #30
 8006dac:	d413      	bmi.n	8006dd6 <_printf_i+0x23a>
 8006dae:	68e0      	ldr	r0, [r4, #12]
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	4298      	cmp	r0, r3
 8006db4:	bfb8      	it	lt
 8006db6:	4618      	movlt	r0, r3
 8006db8:	e7a4      	b.n	8006d04 <_printf_i+0x168>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	4640      	mov	r0, r8
 8006dc2:	47d0      	blx	sl
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d09b      	beq.n	8006d00 <_printf_i+0x164>
 8006dc8:	3501      	adds	r5, #1
 8006dca:	68e3      	ldr	r3, [r4, #12]
 8006dcc:	9903      	ldr	r1, [sp, #12]
 8006dce:	1a5b      	subs	r3, r3, r1
 8006dd0:	42ab      	cmp	r3, r5
 8006dd2:	dcf2      	bgt.n	8006dba <_printf_i+0x21e>
 8006dd4:	e7eb      	b.n	8006dae <_printf_i+0x212>
 8006dd6:	2500      	movs	r5, #0
 8006dd8:	f104 0619 	add.w	r6, r4, #25
 8006ddc:	e7f5      	b.n	8006dca <_printf_i+0x22e>
 8006dde:	bf00      	nop
 8006de0:	08007169 	.word	0x08007169
 8006de4:	0800717a 	.word	0x0800717a

08006de8 <memcpy>:
 8006de8:	440a      	add	r2, r1
 8006dea:	4291      	cmp	r1, r2
 8006dec:	f100 33ff 	add.w	r3, r0, #4294967295
 8006df0:	d100      	bne.n	8006df4 <memcpy+0xc>
 8006df2:	4770      	bx	lr
 8006df4:	b510      	push	{r4, lr}
 8006df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dfe:	4291      	cmp	r1, r2
 8006e00:	d1f9      	bne.n	8006df6 <memcpy+0xe>
 8006e02:	bd10      	pop	{r4, pc}

08006e04 <memmove>:
 8006e04:	4288      	cmp	r0, r1
 8006e06:	b510      	push	{r4, lr}
 8006e08:	eb01 0402 	add.w	r4, r1, r2
 8006e0c:	d902      	bls.n	8006e14 <memmove+0x10>
 8006e0e:	4284      	cmp	r4, r0
 8006e10:	4623      	mov	r3, r4
 8006e12:	d807      	bhi.n	8006e24 <memmove+0x20>
 8006e14:	1e43      	subs	r3, r0, #1
 8006e16:	42a1      	cmp	r1, r4
 8006e18:	d008      	beq.n	8006e2c <memmove+0x28>
 8006e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e22:	e7f8      	b.n	8006e16 <memmove+0x12>
 8006e24:	4402      	add	r2, r0
 8006e26:	4601      	mov	r1, r0
 8006e28:	428a      	cmp	r2, r1
 8006e2a:	d100      	bne.n	8006e2e <memmove+0x2a>
 8006e2c:	bd10      	pop	{r4, pc}
 8006e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e36:	e7f7      	b.n	8006e28 <memmove+0x24>

08006e38 <_free_r>:
 8006e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e3a:	2900      	cmp	r1, #0
 8006e3c:	d044      	beq.n	8006ec8 <_free_r+0x90>
 8006e3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e42:	9001      	str	r0, [sp, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f1a1 0404 	sub.w	r4, r1, #4
 8006e4a:	bfb8      	it	lt
 8006e4c:	18e4      	addlt	r4, r4, r3
 8006e4e:	f000 f913 	bl	8007078 <__malloc_lock>
 8006e52:	4a1e      	ldr	r2, [pc, #120]	; (8006ecc <_free_r+0x94>)
 8006e54:	9801      	ldr	r0, [sp, #4]
 8006e56:	6813      	ldr	r3, [r2, #0]
 8006e58:	b933      	cbnz	r3, 8006e68 <_free_r+0x30>
 8006e5a:	6063      	str	r3, [r4, #4]
 8006e5c:	6014      	str	r4, [r2, #0]
 8006e5e:	b003      	add	sp, #12
 8006e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e64:	f000 b90e 	b.w	8007084 <__malloc_unlock>
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	d908      	bls.n	8006e7e <_free_r+0x46>
 8006e6c:	6825      	ldr	r5, [r4, #0]
 8006e6e:	1961      	adds	r1, r4, r5
 8006e70:	428b      	cmp	r3, r1
 8006e72:	bf01      	itttt	eq
 8006e74:	6819      	ldreq	r1, [r3, #0]
 8006e76:	685b      	ldreq	r3, [r3, #4]
 8006e78:	1949      	addeq	r1, r1, r5
 8006e7a:	6021      	streq	r1, [r4, #0]
 8006e7c:	e7ed      	b.n	8006e5a <_free_r+0x22>
 8006e7e:	461a      	mov	r2, r3
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	b10b      	cbz	r3, 8006e88 <_free_r+0x50>
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	d9fa      	bls.n	8006e7e <_free_r+0x46>
 8006e88:	6811      	ldr	r1, [r2, #0]
 8006e8a:	1855      	adds	r5, r2, r1
 8006e8c:	42a5      	cmp	r5, r4
 8006e8e:	d10b      	bne.n	8006ea8 <_free_r+0x70>
 8006e90:	6824      	ldr	r4, [r4, #0]
 8006e92:	4421      	add	r1, r4
 8006e94:	1854      	adds	r4, r2, r1
 8006e96:	42a3      	cmp	r3, r4
 8006e98:	6011      	str	r1, [r2, #0]
 8006e9a:	d1e0      	bne.n	8006e5e <_free_r+0x26>
 8006e9c:	681c      	ldr	r4, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	6053      	str	r3, [r2, #4]
 8006ea2:	4421      	add	r1, r4
 8006ea4:	6011      	str	r1, [r2, #0]
 8006ea6:	e7da      	b.n	8006e5e <_free_r+0x26>
 8006ea8:	d902      	bls.n	8006eb0 <_free_r+0x78>
 8006eaa:	230c      	movs	r3, #12
 8006eac:	6003      	str	r3, [r0, #0]
 8006eae:	e7d6      	b.n	8006e5e <_free_r+0x26>
 8006eb0:	6825      	ldr	r5, [r4, #0]
 8006eb2:	1961      	adds	r1, r4, r5
 8006eb4:	428b      	cmp	r3, r1
 8006eb6:	bf04      	itt	eq
 8006eb8:	6819      	ldreq	r1, [r3, #0]
 8006eba:	685b      	ldreq	r3, [r3, #4]
 8006ebc:	6063      	str	r3, [r4, #4]
 8006ebe:	bf04      	itt	eq
 8006ec0:	1949      	addeq	r1, r1, r5
 8006ec2:	6021      	streq	r1, [r4, #0]
 8006ec4:	6054      	str	r4, [r2, #4]
 8006ec6:	e7ca      	b.n	8006e5e <_free_r+0x26>
 8006ec8:	b003      	add	sp, #12
 8006eca:	bd30      	pop	{r4, r5, pc}
 8006ecc:	20000674 	.word	0x20000674

08006ed0 <sbrk_aligned>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	4e0e      	ldr	r6, [pc, #56]	; (8006f0c <sbrk_aligned+0x3c>)
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	6831      	ldr	r1, [r6, #0]
 8006ed8:	4605      	mov	r5, r0
 8006eda:	b911      	cbnz	r1, 8006ee2 <sbrk_aligned+0x12>
 8006edc:	f000 f8bc 	bl	8007058 <_sbrk_r>
 8006ee0:	6030      	str	r0, [r6, #0]
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f000 f8b7 	bl	8007058 <_sbrk_r>
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	d00a      	beq.n	8006f04 <sbrk_aligned+0x34>
 8006eee:	1cc4      	adds	r4, r0, #3
 8006ef0:	f024 0403 	bic.w	r4, r4, #3
 8006ef4:	42a0      	cmp	r0, r4
 8006ef6:	d007      	beq.n	8006f08 <sbrk_aligned+0x38>
 8006ef8:	1a21      	subs	r1, r4, r0
 8006efa:	4628      	mov	r0, r5
 8006efc:	f000 f8ac 	bl	8007058 <_sbrk_r>
 8006f00:	3001      	adds	r0, #1
 8006f02:	d101      	bne.n	8006f08 <sbrk_aligned+0x38>
 8006f04:	f04f 34ff 	mov.w	r4, #4294967295
 8006f08:	4620      	mov	r0, r4
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	20000678 	.word	0x20000678

08006f10 <_malloc_r>:
 8006f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f14:	1ccd      	adds	r5, r1, #3
 8006f16:	f025 0503 	bic.w	r5, r5, #3
 8006f1a:	3508      	adds	r5, #8
 8006f1c:	2d0c      	cmp	r5, #12
 8006f1e:	bf38      	it	cc
 8006f20:	250c      	movcc	r5, #12
 8006f22:	2d00      	cmp	r5, #0
 8006f24:	4607      	mov	r7, r0
 8006f26:	db01      	blt.n	8006f2c <_malloc_r+0x1c>
 8006f28:	42a9      	cmp	r1, r5
 8006f2a:	d905      	bls.n	8006f38 <_malloc_r+0x28>
 8006f2c:	230c      	movs	r3, #12
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	2600      	movs	r6, #0
 8006f32:	4630      	mov	r0, r6
 8006f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f38:	4e2e      	ldr	r6, [pc, #184]	; (8006ff4 <_malloc_r+0xe4>)
 8006f3a:	f000 f89d 	bl	8007078 <__malloc_lock>
 8006f3e:	6833      	ldr	r3, [r6, #0]
 8006f40:	461c      	mov	r4, r3
 8006f42:	bb34      	cbnz	r4, 8006f92 <_malloc_r+0x82>
 8006f44:	4629      	mov	r1, r5
 8006f46:	4638      	mov	r0, r7
 8006f48:	f7ff ffc2 	bl	8006ed0 <sbrk_aligned>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	4604      	mov	r4, r0
 8006f50:	d14d      	bne.n	8006fee <_malloc_r+0xde>
 8006f52:	6834      	ldr	r4, [r6, #0]
 8006f54:	4626      	mov	r6, r4
 8006f56:	2e00      	cmp	r6, #0
 8006f58:	d140      	bne.n	8006fdc <_malloc_r+0xcc>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4638      	mov	r0, r7
 8006f60:	eb04 0803 	add.w	r8, r4, r3
 8006f64:	f000 f878 	bl	8007058 <_sbrk_r>
 8006f68:	4580      	cmp	r8, r0
 8006f6a:	d13a      	bne.n	8006fe2 <_malloc_r+0xd2>
 8006f6c:	6821      	ldr	r1, [r4, #0]
 8006f6e:	3503      	adds	r5, #3
 8006f70:	1a6d      	subs	r5, r5, r1
 8006f72:	f025 0503 	bic.w	r5, r5, #3
 8006f76:	3508      	adds	r5, #8
 8006f78:	2d0c      	cmp	r5, #12
 8006f7a:	bf38      	it	cc
 8006f7c:	250c      	movcc	r5, #12
 8006f7e:	4629      	mov	r1, r5
 8006f80:	4638      	mov	r0, r7
 8006f82:	f7ff ffa5 	bl	8006ed0 <sbrk_aligned>
 8006f86:	3001      	adds	r0, #1
 8006f88:	d02b      	beq.n	8006fe2 <_malloc_r+0xd2>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	442b      	add	r3, r5
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	e00e      	b.n	8006fb0 <_malloc_r+0xa0>
 8006f92:	6822      	ldr	r2, [r4, #0]
 8006f94:	1b52      	subs	r2, r2, r5
 8006f96:	d41e      	bmi.n	8006fd6 <_malloc_r+0xc6>
 8006f98:	2a0b      	cmp	r2, #11
 8006f9a:	d916      	bls.n	8006fca <_malloc_r+0xba>
 8006f9c:	1961      	adds	r1, r4, r5
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	6025      	str	r5, [r4, #0]
 8006fa2:	bf18      	it	ne
 8006fa4:	6059      	strne	r1, [r3, #4]
 8006fa6:	6863      	ldr	r3, [r4, #4]
 8006fa8:	bf08      	it	eq
 8006faa:	6031      	streq	r1, [r6, #0]
 8006fac:	5162      	str	r2, [r4, r5]
 8006fae:	604b      	str	r3, [r1, #4]
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	f104 060b 	add.w	r6, r4, #11
 8006fb6:	f000 f865 	bl	8007084 <__malloc_unlock>
 8006fba:	f026 0607 	bic.w	r6, r6, #7
 8006fbe:	1d23      	adds	r3, r4, #4
 8006fc0:	1af2      	subs	r2, r6, r3
 8006fc2:	d0b6      	beq.n	8006f32 <_malloc_r+0x22>
 8006fc4:	1b9b      	subs	r3, r3, r6
 8006fc6:	50a3      	str	r3, [r4, r2]
 8006fc8:	e7b3      	b.n	8006f32 <_malloc_r+0x22>
 8006fca:	6862      	ldr	r2, [r4, #4]
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	bf0c      	ite	eq
 8006fd0:	6032      	streq	r2, [r6, #0]
 8006fd2:	605a      	strne	r2, [r3, #4]
 8006fd4:	e7ec      	b.n	8006fb0 <_malloc_r+0xa0>
 8006fd6:	4623      	mov	r3, r4
 8006fd8:	6864      	ldr	r4, [r4, #4]
 8006fda:	e7b2      	b.n	8006f42 <_malloc_r+0x32>
 8006fdc:	4634      	mov	r4, r6
 8006fde:	6876      	ldr	r6, [r6, #4]
 8006fe0:	e7b9      	b.n	8006f56 <_malloc_r+0x46>
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	603b      	str	r3, [r7, #0]
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	f000 f84c 	bl	8007084 <__malloc_unlock>
 8006fec:	e7a1      	b.n	8006f32 <_malloc_r+0x22>
 8006fee:	6025      	str	r5, [r4, #0]
 8006ff0:	e7de      	b.n	8006fb0 <_malloc_r+0xa0>
 8006ff2:	bf00      	nop
 8006ff4:	20000674 	.word	0x20000674

08006ff8 <_realloc_r>:
 8006ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffc:	4680      	mov	r8, r0
 8006ffe:	4614      	mov	r4, r2
 8007000:	460e      	mov	r6, r1
 8007002:	b921      	cbnz	r1, 800700e <_realloc_r+0x16>
 8007004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007008:	4611      	mov	r1, r2
 800700a:	f7ff bf81 	b.w	8006f10 <_malloc_r>
 800700e:	b92a      	cbnz	r2, 800701c <_realloc_r+0x24>
 8007010:	f7ff ff12 	bl	8006e38 <_free_r>
 8007014:	4625      	mov	r5, r4
 8007016:	4628      	mov	r0, r5
 8007018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800701c:	f000 f838 	bl	8007090 <_malloc_usable_size_r>
 8007020:	4284      	cmp	r4, r0
 8007022:	4607      	mov	r7, r0
 8007024:	d802      	bhi.n	800702c <_realloc_r+0x34>
 8007026:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800702a:	d812      	bhi.n	8007052 <_realloc_r+0x5a>
 800702c:	4621      	mov	r1, r4
 800702e:	4640      	mov	r0, r8
 8007030:	f7ff ff6e 	bl	8006f10 <_malloc_r>
 8007034:	4605      	mov	r5, r0
 8007036:	2800      	cmp	r0, #0
 8007038:	d0ed      	beq.n	8007016 <_realloc_r+0x1e>
 800703a:	42bc      	cmp	r4, r7
 800703c:	4622      	mov	r2, r4
 800703e:	4631      	mov	r1, r6
 8007040:	bf28      	it	cs
 8007042:	463a      	movcs	r2, r7
 8007044:	f7ff fed0 	bl	8006de8 <memcpy>
 8007048:	4631      	mov	r1, r6
 800704a:	4640      	mov	r0, r8
 800704c:	f7ff fef4 	bl	8006e38 <_free_r>
 8007050:	e7e1      	b.n	8007016 <_realloc_r+0x1e>
 8007052:	4635      	mov	r5, r6
 8007054:	e7df      	b.n	8007016 <_realloc_r+0x1e>
	...

08007058 <_sbrk_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4d06      	ldr	r5, [pc, #24]	; (8007074 <_sbrk_r+0x1c>)
 800705c:	2300      	movs	r3, #0
 800705e:	4604      	mov	r4, r0
 8007060:	4608      	mov	r0, r1
 8007062:	602b      	str	r3, [r5, #0]
 8007064:	f7ff fb0c 	bl	8006680 <_sbrk>
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d102      	bne.n	8007072 <_sbrk_r+0x1a>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	b103      	cbz	r3, 8007072 <_sbrk_r+0x1a>
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	bd38      	pop	{r3, r4, r5, pc}
 8007074:	2000067c 	.word	0x2000067c

08007078 <__malloc_lock>:
 8007078:	4801      	ldr	r0, [pc, #4]	; (8007080 <__malloc_lock+0x8>)
 800707a:	f000 b811 	b.w	80070a0 <__retarget_lock_acquire_recursive>
 800707e:	bf00      	nop
 8007080:	20000680 	.word	0x20000680

08007084 <__malloc_unlock>:
 8007084:	4801      	ldr	r0, [pc, #4]	; (800708c <__malloc_unlock+0x8>)
 8007086:	f000 b80c 	b.w	80070a2 <__retarget_lock_release_recursive>
 800708a:	bf00      	nop
 800708c:	20000680 	.word	0x20000680

08007090 <_malloc_usable_size_r>:
 8007090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007094:	1f18      	subs	r0, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	bfbc      	itt	lt
 800709a:	580b      	ldrlt	r3, [r1, r0]
 800709c:	18c0      	addlt	r0, r0, r3
 800709e:	4770      	bx	lr

080070a0 <__retarget_lock_acquire_recursive>:
 80070a0:	4770      	bx	lr

080070a2 <__retarget_lock_release_recursive>:
 80070a2:	4770      	bx	lr

080070a4 <_init>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	bf00      	nop
 80070a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070aa:	bc08      	pop	{r3}
 80070ac:	469e      	mov	lr, r3
 80070ae:	4770      	bx	lr

080070b0 <_fini>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr
