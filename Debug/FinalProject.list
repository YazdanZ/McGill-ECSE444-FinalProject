
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc54  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800de14  0800de14  0001de14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1ac  0800e1ac  000203cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1ac  0800e1ac  0001e1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1b4  0800e1b4  000203cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1b4  0800e1b4  0001e1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1b8  0800e1b8  0001e1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  0800e1bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000182c  200003cc  0800e588  000203cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bf8  0800e588  00021bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026932  00000000  00000000  000203fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000426f  00000000  00000000  00046d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db8  00000000  00000000  0004afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c00  00000000  00000000  0004cd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f2b4  00000000  00000000  0004e958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000227a1  00000000  00000000  0007dc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d1a4  00000000  00000000  000a03ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bd551  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083f8  00000000  00000000  001bd5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200003cc 	.word	0x200003cc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ddfc 	.word	0x0800ddfc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200003d0 	.word	0x200003d0
 80001fc:	0800ddfc 	.word	0x0800ddfc

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005da:	2300      	movs	r3, #0
 80005dc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005de:	2003      	movs	r0, #3
 80005e0:	f000 f901 	bl	80007e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e4:	200f      	movs	r0, #15
 80005e6:	f007 ffe7 	bl	80085b8 <HAL_InitTick>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d002      	beq.n	80005f6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	e001      	b.n	80005fa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005f6:	f007 fe75 	bl	80082e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_IncTick+0x20>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_IncTick+0x24>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <HAL_IncTick+0x24>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000004 	.word	0x20000004
 8000628:	200003e8 	.word	0x200003e8

0800062c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <HAL_GetTick+0x14>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200003e8 	.word	0x200003e8

08000644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800064c:	f7ff ffee 	bl	800062c <HAL_GetTick>
 8000650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065c:	d005      	beq.n	800066a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_Delay+0x44>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800066a:	bf00      	nop
 800066c:	f7ff ffde 	bl	800062c <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	429a      	cmp	r2, r3
 800067a:	d8f7      	bhi.n	800066c <HAL_Delay+0x28>
  {
  }
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000004 	.word	0x20000004

0800068c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <__NVIC_GetPriorityGrouping+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	f003 0307 	and.w	r3, r3, #7
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	db0b      	blt.n	800071a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f003 021f 	and.w	r2, r3, #31
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <__NVIC_EnableIRQ+0x38>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	095b      	lsrs	r3, r3, #5
 8000710:	2001      	movs	r0, #1
 8000712:	fa00 f202 	lsl.w	r2, r0, r2
 8000716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e100 	.word	0xe000e100

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	; (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	; 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff4c 	bl	800068c <__NVIC_SetPriorityGrouping>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800080e:	f7ff ff61 	bl	80006d4 <__NVIC_GetPriorityGrouping>
 8000812:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	6978      	ldr	r0, [r7, #20]
 800081a:	f7ff ffb1 	bl	8000780 <NVIC_EncodePriority>
 800081e:	4602      	mov	r2, r0
 8000820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff80 	bl	800072c <__NVIC_SetPriority>
}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff54 	bl	80006f0 <__NVIC_EnableIRQ>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d101      	bne.n	8000862 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e08d      	b.n	800097e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	4b47      	ldr	r3, [pc, #284]	; (8000988 <HAL_DMA_Init+0x138>)
 800086a:	429a      	cmp	r2, r3
 800086c:	d80f      	bhi.n	800088e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	4b45      	ldr	r3, [pc, #276]	; (800098c <HAL_DMA_Init+0x13c>)
 8000876:	4413      	add	r3, r2
 8000878:	4a45      	ldr	r2, [pc, #276]	; (8000990 <HAL_DMA_Init+0x140>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	091b      	lsrs	r3, r3, #4
 8000880:	009a      	lsls	r2, r3, #2
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a42      	ldr	r2, [pc, #264]	; (8000994 <HAL_DMA_Init+0x144>)
 800088a:	641a      	str	r2, [r3, #64]	; 0x40
 800088c:	e00e      	b.n	80008ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	4b40      	ldr	r3, [pc, #256]	; (8000998 <HAL_DMA_Init+0x148>)
 8000896:	4413      	add	r3, r2
 8000898:	4a3d      	ldr	r2, [pc, #244]	; (8000990 <HAL_DMA_Init+0x140>)
 800089a:	fba2 2303 	umull	r2, r3, r2, r3
 800089e:	091b      	lsrs	r3, r3, #4
 80008a0:	009a      	lsls	r2, r3, #2
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a3c      	ldr	r2, [pc, #240]	; (800099c <HAL_DMA_Init+0x14c>)
 80008aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2202      	movs	r2, #2
 80008b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80008c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80008d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6a1b      	ldr	r3, [r3, #32]
 80008ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f000 fa72 	bl	8000de8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800090c:	d102      	bne.n	8000914 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000928:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d010      	beq.n	8000954 <HAL_DMA_Init+0x104>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d80c      	bhi.n	8000954 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 fa92 	bl	8000e64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	e008      	b.n	8000966 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2201      	movs	r2, #1
 8000970:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40020407 	.word	0x40020407
 800098c:	bffdfff8 	.word	0xbffdfff8
 8000990:	cccccccd 	.word	0xcccccccd
 8000994:	40020000 	.word	0x40020000
 8000998:	bffdfbf8 	.word	0xbffdfbf8
 800099c:	40020400 	.word	0x40020400

080009a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d101      	bne.n	80009c0 <HAL_DMA_Start_IT+0x20>
 80009bc:	2302      	movs	r3, #2
 80009be:	e066      	b.n	8000a8e <HAL_DMA_Start_IT+0xee>
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2201      	movs	r2, #1
 80009c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d155      	bne.n	8000a80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2202      	movs	r2, #2
 80009d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2200      	movs	r2, #0
 80009e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f022 0201 	bic.w	r2, r2, #1
 80009f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	68b9      	ldr	r1, [r7, #8]
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f000 f9b6 	bl	8000d6a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d008      	beq.n	8000a18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f042 020e 	orr.w	r2, r2, #14
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	e00f      	b.n	8000a38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f022 0204 	bic.w	r2, r2, #4
 8000a26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f042 020a 	orr.w	r2, r2, #10
 8000a36:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d007      	beq.n	8000a56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a54:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d007      	beq.n	8000a6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a6c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f042 0201 	orr.w	r2, r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e005      	b.n	8000a8c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b085      	sub	sp, #20
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d008      	beq.n	8000ac0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e040      	b.n	8000b42 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f022 020e 	bic.w	r2, r2, #14
 8000ace:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ade:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f022 0201 	bic.w	r2, r2, #1
 8000aee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af4:	f003 021c 	and.w	r2, r3, #28
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	2101      	movs	r1, #1
 8000afe:	fa01 f202 	lsl.w	r2, r1, r2
 8000b02:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000b0c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00c      	beq.n	8000b30 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000b2e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2201      	movs	r2, #1
 8000b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d005      	beq.n	8000b72 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2204      	movs	r2, #4
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e047      	b.n	8000c02 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 020e 	bic.w	r2, r2, #14
 8000b80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f022 0201 	bic.w	r2, r2, #1
 8000b90:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ba0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f003 021c 	and.w	r2, r3, #28
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	2101      	movs	r1, #1
 8000bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000bbe:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00c      	beq.n	8000be2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bd6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000be0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	4798      	blx	r3
    }
  }
  return status;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	f003 031c 	and.w	r3, r3, #28
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4013      	ands	r3, r2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d026      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x7a>
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d021      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 0320 	and.w	r3, r3, #32
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d107      	bne.n	8000c60 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f022 0204 	bic.w	r2, r2, #4
 8000c5e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c64:	f003 021c 	and.w	r2, r3, #28
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c72:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d071      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000c84:	e06c      	b.n	8000d60 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f003 031c 	and.w	r3, r3, #28
 8000c8e:	2202      	movs	r2, #2
 8000c90:	409a      	lsls	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d02e      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0xec>
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d029      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0320 	and.w	r3, r3, #32
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10b      	bne.n	8000cca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 020a 	bic.w	r2, r2, #10
 8000cc0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f003 021c 	and.w	r2, r3, #28
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cdc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d038      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000cf6:	e033      	b.n	8000d60 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfc:	f003 031c 	and.w	r3, r3, #28
 8000d00:	2208      	movs	r2, #8
 8000d02:	409a      	lsls	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d02a      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x156>
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d025      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 020e 	bic.w	r2, r2, #14
 8000d24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f003 021c 	and.w	r2, r3, #28
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d004      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
}
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d80:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d004      	beq.n	8000d94 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d92:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d98:	f003 021c 	and.w	r2, r3, #28
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	2101      	movs	r1, #1
 8000da2:	fa01 f202 	lsl.w	r2, r1, r2
 8000da6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b10      	cmp	r3, #16
 8000db6:	d108      	bne.n	8000dca <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000dc8:	e007      	b.n	8000dda <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	60da      	str	r2, [r3, #12]
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d80a      	bhi.n	8000e12 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e08:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	6493      	str	r3, [r2, #72]	; 0x48
 8000e10:	e007      	b.n	8000e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	009a      	lsls	r2, r3, #2
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000e1c:	4413      	add	r3, r2
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	091b      	lsrs	r3, r3, #4
 8000e32:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8000e38:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f003 031f 	and.w	r3, r3, #31
 8000e40:	2201      	movs	r2, #1
 8000e42:	409a      	lsls	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40020407 	.word	0x40020407
 8000e58:	4002081c 	.word	0x4002081c
 8000e5c:	cccccccd 	.word	0xcccccccd
 8000e60:	40020880 	.word	0x40020880

08000e64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000e78:	4413      	add	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000e86:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2201      	movs	r2, #1
 8000e92:	409a      	lsls	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	1000823f 	.word	0x1000823f
 8000ea8:	40020940 	.word	0x40020940

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eba:	e166      	b.n	800118a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 8158 	beq.w	8001184 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d005      	beq.n	8000eec <HAL_GPIO_Init+0x40>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d130      	bne.n	8000f4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f22:	2201      	movs	r2, #1
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	091b      	lsrs	r3, r3, #4
 8000f38:	f003 0201 	and.w	r2, r3, #1
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d017      	beq.n	8000f8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d123      	bne.n	8000fde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	691a      	ldr	r2, [r3, #16]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	6939      	ldr	r1, [r7, #16]
 8000fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0203 	and.w	r2, r3, #3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 80b2 	beq.w	8001184 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001020:	4b61      	ldr	r3, [pc, #388]	; (80011a8 <HAL_GPIO_Init+0x2fc>)
 8001022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001024:	4a60      	ldr	r2, [pc, #384]	; (80011a8 <HAL_GPIO_Init+0x2fc>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6613      	str	r3, [r2, #96]	; 0x60
 800102c:	4b5e      	ldr	r3, [pc, #376]	; (80011a8 <HAL_GPIO_Init+0x2fc>)
 800102e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001038:	4a5c      	ldr	r2, [pc, #368]	; (80011ac <HAL_GPIO_Init+0x300>)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001062:	d02b      	beq.n	80010bc <HAL_GPIO_Init+0x210>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d025      	beq.n	80010b8 <HAL_GPIO_Init+0x20c>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a51      	ldr	r2, [pc, #324]	; (80011b4 <HAL_GPIO_Init+0x308>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d01f      	beq.n	80010b4 <HAL_GPIO_Init+0x208>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a50      	ldr	r2, [pc, #320]	; (80011b8 <HAL_GPIO_Init+0x30c>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d019      	beq.n	80010b0 <HAL_GPIO_Init+0x204>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <HAL_GPIO_Init+0x310>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d013      	beq.n	80010ac <HAL_GPIO_Init+0x200>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4e      	ldr	r2, [pc, #312]	; (80011c0 <HAL_GPIO_Init+0x314>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d00d      	beq.n	80010a8 <HAL_GPIO_Init+0x1fc>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4d      	ldr	r2, [pc, #308]	; (80011c4 <HAL_GPIO_Init+0x318>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d007      	beq.n	80010a4 <HAL_GPIO_Init+0x1f8>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <HAL_GPIO_Init+0x31c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d101      	bne.n	80010a0 <HAL_GPIO_Init+0x1f4>
 800109c:	2307      	movs	r3, #7
 800109e:	e00e      	b.n	80010be <HAL_GPIO_Init+0x212>
 80010a0:	2308      	movs	r3, #8
 80010a2:	e00c      	b.n	80010be <HAL_GPIO_Init+0x212>
 80010a4:	2306      	movs	r3, #6
 80010a6:	e00a      	b.n	80010be <HAL_GPIO_Init+0x212>
 80010a8:	2305      	movs	r3, #5
 80010aa:	e008      	b.n	80010be <HAL_GPIO_Init+0x212>
 80010ac:	2304      	movs	r3, #4
 80010ae:	e006      	b.n	80010be <HAL_GPIO_Init+0x212>
 80010b0:	2303      	movs	r3, #3
 80010b2:	e004      	b.n	80010be <HAL_GPIO_Init+0x212>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e002      	b.n	80010be <HAL_GPIO_Init+0x212>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <HAL_GPIO_Init+0x212>
 80010bc:	2300      	movs	r3, #0
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	f002 0203 	and.w	r2, r2, #3
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	4093      	lsls	r3, r2
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ce:	4937      	ldr	r1, [pc, #220]	; (80011ac <HAL_GPIO_Init+0x300>)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3302      	adds	r3, #2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010dc:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_GPIO_Init+0x320>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001100:	4a32      	ldr	r2, [pc, #200]	; (80011cc <HAL_GPIO_Init+0x320>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <HAL_GPIO_Init+0x320>)
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800112a:	4a28      	ldr	r2, [pc, #160]	; (80011cc <HAL_GPIO_Init+0x320>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_GPIO_Init+0x320>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001154:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <HAL_GPIO_Init+0x320>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_GPIO_Init+0x320>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <HAL_GPIO_Init+0x320>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	f47f ae91 	bne.w	8000ebc <HAL_GPIO_Init+0x10>
  }
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000800 	.word	0x48000800
 80011b8:	48000c00 	.word	0x48000c00
 80011bc:	48001000 	.word	0x48001000
 80011c0:	48001400 	.word	0x48001400
 80011c4:	48001800 	.word	0x48001800
 80011c8:	48001c00 	.word	0x48001c00
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
 800120c:	4613      	mov	r3, r2
 800120e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001210:	787b      	ldrb	r3, [r7, #1]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800121c:	e002      	b.n	8001224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	4013      	ands	r3, r2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	4618      	mov	r0, r3
 8001250:	f006 ff54 	bl	80080fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40010400 	.word	0x40010400

08001260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e081      	b.n	8001376 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d106      	bne.n	800128c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f007 f854 	bl	8008334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2224      	movs	r2, #36	; 0x24
 8001290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d107      	bne.n	80012da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	e006      	b.n	80012e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d104      	bne.n	80012fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800130c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800131c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69d9      	ldr	r1, [r3, #28]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1a      	ldr	r2, [r3, #32]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0201 	orr.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2220      	movs	r2, #32
 8001362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	461a      	mov	r2, r3
 800138c:	460b      	mov	r3, r1
 800138e:	817b      	strh	r3, [r7, #10]
 8001390:	4613      	mov	r3, r2
 8001392:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b20      	cmp	r3, #32
 800139e:	f040 80da 	bne.w	8001556 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <HAL_I2C_Master_Transmit+0x30>
 80013ac:	2302      	movs	r3, #2
 80013ae:	e0d3      	b.n	8001558 <HAL_I2C_Master_Transmit+0x1d8>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013b8:	f7ff f938 	bl	800062c <HAL_GetTick>
 80013bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2319      	movs	r3, #25
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f000 f9e6 	bl	800179c <I2C_WaitOnFlagUntilTimeout>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e0be      	b.n	8001558 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2221      	movs	r2, #33	; 0x21
 80013de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2210      	movs	r2, #16
 80013e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	893a      	ldrh	r2, [r7, #8]
 80013fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001406:	b29b      	uxth	r3, r3
 8001408:	2bff      	cmp	r3, #255	; 0xff
 800140a:	d90e      	bls.n	800142a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	22ff      	movs	r2, #255	; 0xff
 8001410:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001416:	b2da      	uxtb	r2, r3
 8001418:	8979      	ldrh	r1, [r7, #10]
 800141a:	4b51      	ldr	r3, [pc, #324]	; (8001560 <HAL_I2C_Master_Transmit+0x1e0>)
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 fbdc 	bl	8001be0 <I2C_TransferConfig>
 8001428:	e06c      	b.n	8001504 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142e:	b29a      	uxth	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001438:	b2da      	uxtb	r2, r3
 800143a:	8979      	ldrh	r1, [r7, #10]
 800143c:	4b48      	ldr	r3, [pc, #288]	; (8001560 <HAL_I2C_Master_Transmit+0x1e0>)
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 fbcb 	bl	8001be0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800144a:	e05b      	b.n	8001504 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	6a39      	ldr	r1, [r7, #32]
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 f9e3 	bl	800181c <I2C_WaitOnTXISFlagUntilTimeout>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e07b      	b.n	8001558 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147a:	b29b      	uxth	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001488:	3b01      	subs	r3, #1
 800148a:	b29a      	uxth	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001494:	b29b      	uxth	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d034      	beq.n	8001504 <HAL_I2C_Master_Transmit+0x184>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d130      	bne.n	8001504 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	2200      	movs	r2, #0
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f975 	bl	800179c <I2C_WaitOnFlagUntilTimeout>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e04d      	b.n	8001558 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	2bff      	cmp	r3, #255	; 0xff
 80014c4:	d90e      	bls.n	80014e4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	22ff      	movs	r2, #255	; 0xff
 80014ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	8979      	ldrh	r1, [r7, #10]
 80014d4:	2300      	movs	r3, #0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 fb7f 	bl	8001be0 <I2C_TransferConfig>
 80014e2:	e00f      	b.n	8001504 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	8979      	ldrh	r1, [r7, #10]
 80014f6:	2300      	movs	r3, #0
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 fb6e 	bl	8001be0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001508:	b29b      	uxth	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d19e      	bne.n	800144c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	6a39      	ldr	r1, [r7, #32]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f9c2 	bl	800189c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e01a      	b.n	8001558 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2220      	movs	r2, #32
 8001528:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_I2C_Master_Transmit+0x1e4>)
 8001536:	400b      	ands	r3, r1
 8001538:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2220      	movs	r2, #32
 800153e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001556:	2302      	movs	r3, #2
  }
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	80002000 	.word	0x80002000
 8001564:	fe00e800 	.word	0xfe00e800

08001568 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af02      	add	r7, sp, #8
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	461a      	mov	r2, r3
 8001574:	460b      	mov	r3, r1
 8001576:	817b      	strh	r3, [r7, #10]
 8001578:	4613      	mov	r3, r2
 800157a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b20      	cmp	r3, #32
 8001586:	f040 80db 	bne.w	8001740 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_I2C_Master_Receive+0x30>
 8001594:	2302      	movs	r3, #2
 8001596:	e0d4      	b.n	8001742 <HAL_I2C_Master_Receive+0x1da>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015a0:	f7ff f844 	bl	800062c <HAL_GetTick>
 80015a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2319      	movs	r3, #25
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 f8f2 	bl	800179c <I2C_WaitOnFlagUntilTimeout>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0bf      	b.n	8001742 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2222      	movs	r2, #34	; 0x22
 80015c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2210      	movs	r2, #16
 80015ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	893a      	ldrh	r2, [r7, #8]
 80015e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	2bff      	cmp	r3, #255	; 0xff
 80015f2:	d90e      	bls.n	8001612 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	22ff      	movs	r2, #255	; 0xff
 80015f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	8979      	ldrh	r1, [r7, #10]
 8001602:	4b52      	ldr	r3, [pc, #328]	; (800174c <HAL_I2C_Master_Receive+0x1e4>)
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 fae8 	bl	8001be0 <I2C_TransferConfig>
 8001610:	e06d      	b.n	80016ee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001616:	b29a      	uxth	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001620:	b2da      	uxtb	r2, r3
 8001622:	8979      	ldrh	r1, [r7, #10]
 8001624:	4b49      	ldr	r3, [pc, #292]	; (800174c <HAL_I2C_Master_Receive+0x1e4>)
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f000 fad7 	bl	8001be0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001632:	e05c      	b.n	80016ee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	6a39      	ldr	r1, [r7, #32]
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 f96b 	bl	8001914 <I2C_WaitOnRXNEFlagUntilTimeout>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e07c      	b.n	8001742 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001664:	3b01      	subs	r3, #1
 8001666:	b29a      	uxth	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001670:	b29b      	uxth	r3, r3
 8001672:	3b01      	subs	r3, #1
 8001674:	b29a      	uxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167e:	b29b      	uxth	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d034      	beq.n	80016ee <HAL_I2C_Master_Receive+0x186>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	2b00      	cmp	r3, #0
 800168a:	d130      	bne.n	80016ee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	2200      	movs	r2, #0
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f880 	bl	800179c <I2C_WaitOnFlagUntilTimeout>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e04d      	b.n	8001742 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	2bff      	cmp	r3, #255	; 0xff
 80016ae:	d90e      	bls.n	80016ce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	22ff      	movs	r2, #255	; 0xff
 80016b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	8979      	ldrh	r1, [r7, #10]
 80016be:	2300      	movs	r3, #0
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 fa8a 	bl	8001be0 <I2C_TransferConfig>
 80016cc:	e00f      	b.n	80016ee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	8979      	ldrh	r1, [r7, #10]
 80016e0:	2300      	movs	r3, #0
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 fa79 	bl	8001be0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d19d      	bne.n	8001634 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6a39      	ldr	r1, [r7, #32]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f8cd 	bl	800189c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e01a      	b.n	8001742 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2220      	movs	r2, #32
 8001712:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6859      	ldr	r1, [r3, #4]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_I2C_Master_Receive+0x1e8>)
 8001720:	400b      	ands	r3, r1
 8001722:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2220      	movs	r2, #32
 8001728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	e000      	b.n	8001742 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001740:	2302      	movs	r3, #2
  }
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	80002400 	.word	0x80002400
 8001750:	fe00e800 	.word	0xfe00e800

08001754 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b02      	cmp	r3, #2
 8001768:	d103      	bne.n	8001772 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d007      	beq.n	8001790 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	619a      	str	r2, [r3, #24]
  }
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	4613      	mov	r3, r2
 80017aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017ac:	e022      	b.n	80017f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d01e      	beq.n	80017f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017b6:	f7fe ff39 	bl	800062c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d302      	bcc.n	80017cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d113      	bne.n	80017f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d0:	f043 0220 	orr.w	r2, r3, #32
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2220      	movs	r2, #32
 80017dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e00f      	b.n	8001814 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699a      	ldr	r2, [r3, #24]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	4013      	ands	r3, r2
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	429a      	cmp	r2, r3
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	429a      	cmp	r2, r3
 8001810:	d0cd      	beq.n	80017ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001828:	e02c      	b.n	8001884 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f8ea 	bl	8001a08 <I2C_IsErrorOccurred>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e02a      	b.n	8001894 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d01e      	beq.n	8001884 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001846:	f7fe fef1 	bl	800062c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	429a      	cmp	r2, r3
 8001854:	d302      	bcc.n	800185c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d113      	bne.n	8001884 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	f043 0220 	orr.w	r2, r3, #32
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2220      	movs	r2, #32
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e007      	b.n	8001894 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b02      	cmp	r3, #2
 8001890:	d1cb      	bne.n	800182a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018a8:	e028      	b.n	80018fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f8aa 	bl	8001a08 <I2C_IsErrorOccurred>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e026      	b.n	800190c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018be:	f7fe feb5 	bl	800062c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d302      	bcc.n	80018d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d113      	bne.n	80018fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	f043 0220 	orr.w	r2, r3, #32
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e007      	b.n	800190c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b20      	cmp	r3, #32
 8001908:	d1cf      	bne.n	80018aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001920:	e064      	b.n	80019ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f86e 	bl	8001a08 <I2C_IsErrorOccurred>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e062      	b.n	80019fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b20      	cmp	r3, #32
 8001942:	d138      	bne.n	80019b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b04      	cmp	r3, #4
 8001950:	d105      	bne.n	800195e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e04e      	b.n	80019fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	2b10      	cmp	r3, #16
 800196a:	d107      	bne.n	800197c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2210      	movs	r2, #16
 8001972:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2204      	movs	r2, #4
 8001978:	645a      	str	r2, [r3, #68]	; 0x44
 800197a:	e002      	b.n	8001982 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2220      	movs	r2, #32
 8001988:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001996:	400b      	ands	r3, r1
 8001998:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2220      	movs	r2, #32
 800199e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e022      	b.n	80019fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b6:	f7fe fe39 	bl	800062c <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d302      	bcc.n	80019cc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10f      	bne.n	80019ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	f043 0220 	orr.w	r2, r3, #32
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2220      	movs	r2, #32
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e007      	b.n	80019fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d193      	bne.n	8001922 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	fe00e800 	.word	0xfe00e800

08001a08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d075      	beq.n	8001b20 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2210      	movs	r2, #16
 8001a3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a3c:	e056      	b.n	8001aec <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d052      	beq.n	8001aec <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a46:	f7fe fdf1 	bl	800062c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d302      	bcc.n	8001a5c <I2C_IsErrorOccurred+0x54>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d147      	bne.n	8001aec <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a7e:	d12e      	bne.n	8001ade <I2C_IsErrorOccurred+0xd6>
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a86:	d02a      	beq.n	8001ade <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001a88:	7cfb      	ldrb	r3, [r7, #19]
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d027      	beq.n	8001ade <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a9e:	f7fe fdc5 	bl	800062c <HAL_GetTick>
 8001aa2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aa4:	e01b      	b.n	8001ade <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001aa6:	f7fe fdc1 	bl	800062c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b19      	cmp	r3, #25
 8001ab2:	d914      	bls.n	8001ade <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	f043 0220 	orr.w	r2, r3, #32
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	2b20      	cmp	r3, #32
 8001aea:	d1dc      	bne.n	8001aa6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	d003      	beq.n	8001b02 <I2C_IsErrorOccurred+0xfa>
 8001afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d09d      	beq.n	8001a3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d103      	bne.n	8001b12 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00b      	beq.n	8001b6c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	f043 0308 	orr.w	r3, r3, #8
 8001b5a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01c      	beq.n	8001bd0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7ff fddc 	bl	8001754 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6859      	ldr	r1, [r3, #4]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <I2C_IsErrorOccurred+0x1d4>)
 8001ba8:	400b      	ands	r3, r1
 8001baa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3728      	adds	r7, #40	; 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	fe00e800 	.word	0xfe00e800

08001be0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	817b      	strh	r3, [r7, #10]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bf8:	7a7b      	ldrb	r3, [r7, #9]
 8001bfa:	041b      	lsls	r3, r3, #16
 8001bfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	0d5b      	lsrs	r3, r3, #21
 8001c1a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <I2C_TransferConfig+0x60>)
 8001c20:	430b      	orrs	r3, r1
 8001c22:	43db      	mvns	r3, r3
 8001c24:	ea02 0103 	and.w	r1, r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c32:	bf00      	nop
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	03ff63ff 	.word	0x03ff63ff

08001c44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	d138      	bne.n	8001ccc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e032      	b.n	8001cce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2224      	movs	r2, #36	; 0x24
 8001c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0201 	bic.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6819      	ldr	r1, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e000      	b.n	8001cce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ccc:	2302      	movs	r3, #2
  }
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b085      	sub	sp, #20
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d139      	bne.n	8001d64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e033      	b.n	8001d66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2224      	movs	r2, #36	; 0x24
 8001d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e000      	b.n	8001d66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d64:	2302      	movs	r3, #2
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d84:	d102      	bne.n	8001d8c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8a:	e00b      	b.n	8001da4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d9a:	d102      	bne.n	8001da2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da0:	e000      	b.n	8001da4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001da2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40007000 	.word	0x40007000

08001db4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d141      	bne.n	8001e46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dc2:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dce:	d131      	bne.n	8001e34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dd0:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dd6:	4a46      	ldr	r2, [pc, #280]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de0:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001de8:	4a41      	ldr	r2, [pc, #260]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001df0:	4b40      	ldr	r3, [pc, #256]	; (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2232      	movs	r2, #50	; 0x32
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	4a3f      	ldr	r2, [pc, #252]	; (8001ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	0c9b      	lsrs	r3, r3, #18
 8001e02:	3301      	adds	r3, #1
 8001e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e06:	e002      	b.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1a:	d102      	bne.n	8001e22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f2      	bne.n	8001e08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e22:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e2e:	d158      	bne.n	8001ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e057      	b.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e34:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e3a:	4a2d      	ldr	r2, [pc, #180]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e44:	e04d      	b.n	8001ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4c:	d141      	bne.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e4e:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5a:	d131      	bne.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e62:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e6c:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e74:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2232      	movs	r2, #50	; 0x32
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	0c9b      	lsrs	r3, r3, #18
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e92:	e002      	b.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea6:	d102      	bne.n	8001eae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f2      	bne.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eba:	d112      	bne.n	8001ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e011      	b.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ed0:	e007      	b.n	8001ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	200000a8 	.word	0x200000a8
 8001ef8:	431bde83 	.word	0x431bde83

08001efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f000 bc08 	b.w	8002720 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f10:	4b96      	ldr	r3, [pc, #600]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1a:	4b94      	ldr	r3, [pc, #592]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80e4 	beq.w	80020fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_RCC_OscConfig+0x4c>
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	f040 808b 	bne.w	8002056 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	f040 8087 	bne.w	8002056 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f48:	4b88      	ldr	r3, [pc, #544]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_OscConfig+0x64>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e3df      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	4b81      	ldr	r3, [pc, #516]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <HAL_RCC_OscConfig+0x7e>
 8001f70:	4b7e      	ldr	r3, [pc, #504]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f78:	e005      	b.n	8001f86 <HAL_RCC_OscConfig+0x8a>
 8001f7a:	4b7c      	ldr	r3, [pc, #496]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d223      	bcs.n	8001fd2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fdfe 	bl	8002b90 <RCC_SetFlashLatencyFromMSIRange>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e3c0      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f9e:	4b73      	ldr	r3, [pc, #460]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a72      	ldr	r2, [pc, #456]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b70      	ldr	r3, [pc, #448]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	496d      	ldr	r1, [pc, #436]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fbc:	4b6b      	ldr	r3, [pc, #428]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	4968      	ldr	r1, [pc, #416]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
 8001fd0:	e025      	b.n	800201e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd2:	4b66      	ldr	r3, [pc, #408]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a65      	ldr	r2, [pc, #404]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b63      	ldr	r3, [pc, #396]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4960      	ldr	r1, [pc, #384]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff0:	4b5e      	ldr	r3, [pc, #376]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	495b      	ldr	r1, [pc, #364]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fdbe 	bl	8002b90 <RCC_SetFlashLatencyFromMSIRange>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e380      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800201e:	f000 fcc1 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8002022:	4602      	mov	r2, r0
 8002024:	4b51      	ldr	r3, [pc, #324]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	4950      	ldr	r1, [pc, #320]	; (8002170 <HAL_RCC_OscConfig+0x274>)
 8002030:	5ccb      	ldrb	r3, [r1, r3]
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	fa22 f303 	lsr.w	r3, r2, r3
 800203a:	4a4e      	ldr	r2, [pc, #312]	; (8002174 <HAL_RCC_OscConfig+0x278>)
 800203c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800203e:	4b4e      	ldr	r3, [pc, #312]	; (8002178 <HAL_RCC_OscConfig+0x27c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f006 fab8 	bl	80085b8 <HAL_InitTick>
 8002048:	4603      	mov	r3, r0
 800204a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d052      	beq.n	80020f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	e364      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d032      	beq.n	80020c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800205e:	4b43      	ldr	r3, [pc, #268]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a42      	ldr	r2, [pc, #264]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800206a:	f7fe fadf 	bl	800062c <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002072:	f7fe fadb 	bl	800062c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e34d      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002090:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a35      	ldr	r2, [pc, #212]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8002096:	f043 0308 	orr.w	r3, r3, #8
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b33      	ldr	r3, [pc, #204]	; (800216c <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4930      	ldr	r1, [pc, #192]	; (800216c <HAL_RCC_OscConfig+0x270>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <HAL_RCC_OscConfig+0x270>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	492b      	ldr	r1, [pc, #172]	; (800216c <HAL_RCC_OscConfig+0x270>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
 80020c2:	e01a      	b.n	80020fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_RCC_OscConfig+0x270>)
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020d0:	f7fe faac 	bl	800062c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020d8:	f7fe faa8 	bl	800062c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e31a      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_RCC_OscConfig+0x270>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x1dc>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d073      	beq.n	80021ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	2b08      	cmp	r3, #8
 800210a:	d005      	beq.n	8002118 <HAL_RCC_OscConfig+0x21c>
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d10e      	bne.n	8002130 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d10b      	bne.n	8002130 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_RCC_OscConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d063      	beq.n	80021ec <HAL_RCC_OscConfig+0x2f0>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d15f      	bne.n	80021ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e2f7      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002138:	d106      	bne.n	8002148 <HAL_RCC_OscConfig+0x24c>
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_RCC_OscConfig+0x270>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e025      	b.n	8002194 <HAL_RCC_OscConfig+0x298>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002150:	d114      	bne.n	800217c <HAL_RCC_OscConfig+0x280>
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a02      	ldr	r2, [pc, #8]	; (800216c <HAL_RCC_OscConfig+0x270>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e013      	b.n	8002194 <HAL_RCC_OscConfig+0x298>
 800216c:	40021000 	.word	0x40021000
 8002170:	0800dfcc 	.word	0x0800dfcc
 8002174:	200000a8 	.word	0x200000a8
 8002178:	20000000 	.word	0x20000000
 800217c:	4ba0      	ldr	r3, [pc, #640]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a9f      	ldr	r2, [pc, #636]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b9d      	ldr	r3, [pc, #628]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a9c      	ldr	r2, [pc, #624]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe fa46 	bl	800062c <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7fe fa42 	bl	800062c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e2b4      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b6:	4b92      	ldr	r3, [pc, #584]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x2a8>
 80021c2:	e014      	b.n	80021ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe fa32 	bl	800062c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7fe fa2e 	bl	800062c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e2a0      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021de:	4b88      	ldr	r3, [pc, #544]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x2d0>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d060      	beq.n	80022bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d005      	beq.n	800220c <HAL_RCC_OscConfig+0x310>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d119      	bne.n	800223a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d116      	bne.n	800223a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800220c:	4b7c      	ldr	r3, [pc, #496]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_OscConfig+0x328>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e27d      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b76      	ldr	r3, [pc, #472]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	4973      	ldr	r1, [pc, #460]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002238:	e040      	b.n	80022bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d023      	beq.n	800228a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002242:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a6e      	ldr	r2, [pc, #440]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7fe f9ed 	bl	800062c <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002256:	f7fe f9e9 	bl	800062c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e25b      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002268:	4b65      	ldr	r3, [pc, #404]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002274:	4b62      	ldr	r3, [pc, #392]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	495f      	ldr	r1, [pc, #380]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
 8002288:	e018      	b.n	80022bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228a:	4b5d      	ldr	r3, [pc, #372]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a5c      	ldr	r2, [pc, #368]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7fe f9c9 	bl	800062c <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229e:	f7fe f9c5 	bl	800062c <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e237      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d03c      	beq.n	8002342 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01c      	beq.n	800230a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d0:	4b4b      	ldr	r3, [pc, #300]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 80022d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d6:	4a4a      	ldr	r2, [pc, #296]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7fe f9a4 	bl	800062c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e8:	f7fe f9a0 	bl	800062c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e212      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022fa:	4b41      	ldr	r3, [pc, #260]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 80022fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ef      	beq.n	80022e8 <HAL_RCC_OscConfig+0x3ec>
 8002308:	e01b      	b.n	8002342 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 800230c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002310:	4a3b      	ldr	r2, [pc, #236]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7fe f987 	bl	800062c <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002322:	f7fe f983 	bl	800062c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e1f5      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002334:	4b32      	ldr	r3, [pc, #200]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ef      	bne.n	8002322 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 80a6 	beq.w	800249c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002354:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10d      	bne.n	800237c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	4a26      	ldr	r2, [pc, #152]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236a:	6593      	str	r3, [r2, #88]	; 0x58
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002378:	2301      	movs	r3, #1
 800237a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <HAL_RCC_OscConfig+0x508>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d118      	bne.n	80023ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002388:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <HAL_RCC_OscConfig+0x508>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <HAL_RCC_OscConfig+0x508>)
 800238e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002392:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002394:	f7fe f94a 	bl	800062c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239c:	f7fe f946 	bl	800062c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e1b8      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_RCC_OscConfig+0x508>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_RCC_OscConfig+0x4d8>
 80023c2:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d2:	e029      	b.n	8002428 <HAL_RCC_OscConfig+0x52c>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d115      	bne.n	8002408 <HAL_RCC_OscConfig+0x50c>
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	4a03      	ldr	r2, [pc, #12]	; (8002400 <HAL_RCC_OscConfig+0x504>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fc:	e014      	b.n	8002428 <HAL_RCC_OscConfig+0x52c>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40007000 	.word	0x40007000
 8002408:	4b9d      	ldr	r3, [pc, #628]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	4a9c      	ldr	r2, [pc, #624]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002418:	4b99      	ldr	r3, [pc, #612]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	4a98      	ldr	r2, [pc, #608]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d016      	beq.n	800245e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7fe f8fc 	bl	800062c <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002436:	e00a      	b.n	800244e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002438:	f7fe f8f8 	bl	800062c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e168      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244e:	4b8c      	ldr	r3, [pc, #560]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ed      	beq.n	8002438 <HAL_RCC_OscConfig+0x53c>
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7fe f8e5 	bl	800062c <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7fe f8e1 	bl	800062c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e151      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800247c:	4b80      	ldr	r3, [pc, #512]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ed      	bne.n	8002466 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248a:	7ffb      	ldrb	r3, [r7, #31]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002490:	4b7b      	ldr	r3, [pc, #492]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	4a7a      	ldr	r2, [pc, #488]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 8002496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d03c      	beq.n	8002522 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01c      	beq.n	80024ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024b0:	4b73      	ldr	r3, [pc, #460]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 80024b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024b6:	4a72      	ldr	r2, [pc, #456]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7fe f8b4 	bl	800062c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c8:	f7fe f8b0 	bl	800062c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e122      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024da:	4b69      	ldr	r3, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 80024dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ef      	beq.n	80024c8 <HAL_RCC_OscConfig+0x5cc>
 80024e8:	e01b      	b.n	8002522 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ea:	4b65      	ldr	r3, [pc, #404]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 80024ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f0:	4a63      	ldr	r2, [pc, #396]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7fe f897 	bl	800062c <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002502:	f7fe f893 	bl	800062c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e105      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002514:	4b5a      	ldr	r3, [pc, #360]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 8002516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ef      	bne.n	8002502 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80f9 	beq.w	800271e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	2b02      	cmp	r3, #2
 8002532:	f040 80cf 	bne.w	80026d4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002536:	4b52      	ldr	r3, [pc, #328]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0203 	and.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	429a      	cmp	r2, r3
 8002548:	d12c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	3b01      	subs	r3, #1
 8002556:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d123      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002566:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d11b      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d113      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	3b01      	subs	r3, #1
 800258a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d109      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	3b01      	subs	r3, #1
 800259e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d071      	beq.n	8002688 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d068      	beq.n	800267c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025aa:	4b35      	ldr	r3, [pc, #212]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025b6:	4b32      	ldr	r3, [pc, #200]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0ac      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025c6:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a2d      	ldr	r2, [pc, #180]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 80025cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025d2:	f7fe f82b 	bl	800062c <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025da:	f7fe f827 	bl	800062c <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e099      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ec:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	4b21      	ldr	r3, [pc, #132]	; (8002684 <HAL_RCC_OscConfig+0x788>)
 80025fe:	4013      	ands	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002608:	3a01      	subs	r2, #1
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	4311      	orrs	r1, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002612:	0212      	lsls	r2, r2, #8
 8002614:	4311      	orrs	r1, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800261a:	0852      	lsrs	r2, r2, #1
 800261c:	3a01      	subs	r2, #1
 800261e:	0552      	lsls	r2, r2, #21
 8002620:	4311      	orrs	r1, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002626:	0852      	lsrs	r2, r2, #1
 8002628:	3a01      	subs	r2, #1
 800262a:	0652      	lsls	r2, r2, #25
 800262c:	4311      	orrs	r1, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002632:	06d2      	lsls	r2, r2, #27
 8002634:	430a      	orrs	r2, r1
 8002636:	4912      	ldr	r1, [pc, #72]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 8002638:	4313      	orrs	r3, r2
 800263a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 8002642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002646:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 800264e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002652:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002654:	f7fd ffea 	bl	800062c <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7fd ffe6 	bl	800062c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e058      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <HAL_RCC_OscConfig+0x784>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267a:	e050      	b.n	800271e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e04f      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
 8002680:	40021000 	.word	0x40021000
 8002684:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_RCC_OscConfig+0x82c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d144      	bne.n	800271e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_RCC_OscConfig+0x82c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a23      	ldr	r2, [pc, #140]	; (8002728 <HAL_RCC_OscConfig+0x82c>)
 800269a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800269e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <HAL_RCC_OscConfig+0x82c>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a20      	ldr	r2, [pc, #128]	; (8002728 <HAL_RCC_OscConfig+0x82c>)
 80026a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026ac:	f7fd ffbe 	bl	800062c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fd ffba 	bl	800062c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e02c      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_RCC_OscConfig+0x82c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x7b8>
 80026d2:	e024      	b.n	800271e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d01f      	beq.n	800271a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_RCC_OscConfig+0x82c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <HAL_RCC_OscConfig+0x82c>)
 80026e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fd ffa1 	bl	800062c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fd ff9d 	bl	800062c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e00f      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_OscConfig+0x82c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_RCC_OscConfig+0x82c>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4905      	ldr	r1, [pc, #20]	; (8002728 <HAL_RCC_OscConfig+0x82c>)
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_OscConfig+0x830>)
 8002714:	4013      	ands	r3, r2
 8002716:	60cb      	str	r3, [r1, #12]
 8002718:	e001      	b.n	800271e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	feeefffc 	.word	0xfeeefffc

08002730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e11d      	b.n	8002984 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b90      	ldr	r3, [pc, #576]	; (800298c <HAL_RCC_ClockConfig+0x25c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d910      	bls.n	8002778 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b8d      	ldr	r3, [pc, #564]	; (800298c <HAL_RCC_ClockConfig+0x25c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 020f 	bic.w	r2, r3, #15
 800275e:	498b      	ldr	r1, [pc, #556]	; (800298c <HAL_RCC_ClockConfig+0x25c>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b89      	ldr	r3, [pc, #548]	; (800298c <HAL_RCC_ClockConfig+0x25c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e105      	b.n	8002984 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d010      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	4b81      	ldr	r3, [pc, #516]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002790:	429a      	cmp	r2, r3
 8002792:	d908      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b7e      	ldr	r3, [pc, #504]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	497b      	ldr	r1, [pc, #492]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d079      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d11e      	bne.n	80027f8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ba:	4b75      	ldr	r3, [pc, #468]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0dc      	b.n	8002984 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80027ca:	f000 fa3b 	bl	8002c44 <RCC_GetSysClockFreqFromPLLSource>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4a70      	ldr	r2, [pc, #448]	; (8002994 <HAL_RCC_ClockConfig+0x264>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d946      	bls.n	8002864 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80027d6:	4b6e      	ldr	r3, [pc, #440]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d140      	bne.n	8002864 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027e2:	4b6b      	ldr	r3, [pc, #428]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ea:	4a69      	ldr	r2, [pc, #420]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 80027ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e035      	b.n	8002864 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002800:	4b63      	ldr	r3, [pc, #396]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d115      	bne.n	8002838 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0b9      	b.n	8002984 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d107      	bne.n	8002828 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002818:	4b5d      	ldr	r3, [pc, #372]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d109      	bne.n	8002838 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0ad      	b.n	8002984 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0a5      	b.n	8002984 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002838:	f000 f8b4 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 800283c:	4603      	mov	r3, r0
 800283e:	4a55      	ldr	r2, [pc, #340]	; (8002994 <HAL_RCC_ClockConfig+0x264>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d90f      	bls.n	8002864 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002844:	4b52      	ldr	r3, [pc, #328]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002850:	4b4f      	ldr	r3, [pc, #316]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002858:	4a4d      	ldr	r2, [pc, #308]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 800285a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002864:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 0203 	bic.w	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4947      	ldr	r1, [pc, #284]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002876:	f7fd fed9 	bl	800062c <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287c:	e00a      	b.n	8002894 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800287e:	f7fd fed5 	bl	800062c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e077      	b.n	8002984 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002894:	4b3e      	ldr	r3, [pc, #248]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 020c 	and.w	r2, r3, #12
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d1eb      	bne.n	800287e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b80      	cmp	r3, #128	; 0x80
 80028aa:	d105      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028ac:	4b38      	ldr	r3, [pc, #224]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a37      	ldr	r2, [pc, #220]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 80028b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028b6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d010      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	4b31      	ldr	r3, [pc, #196]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d208      	bcs.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d4:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	492b      	ldr	r1, [pc, #172]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e6:	4b29      	ldr	r3, [pc, #164]	; (800298c <HAL_RCC_ClockConfig+0x25c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d210      	bcs.n	8002916 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_RCC_ClockConfig+0x25c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 020f 	bic.w	r2, r3, #15
 80028fc:	4923      	ldr	r1, [pc, #140]	; (800298c <HAL_RCC_ClockConfig+0x25c>)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002904:	4b21      	ldr	r3, [pc, #132]	; (800298c <HAL_RCC_ClockConfig+0x25c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d001      	beq.n	8002916 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e036      	b.n	8002984 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	4918      	ldr	r1, [pc, #96]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d009      	beq.n	8002954 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4910      	ldr	r1, [pc, #64]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 8002950:	4313      	orrs	r3, r2
 8002952:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002954:	f000 f826 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <HAL_RCC_ClockConfig+0x260>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	490c      	ldr	r1, [pc, #48]	; (8002998 <HAL_RCC_ClockConfig+0x268>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <HAL_RCC_ClockConfig+0x26c>)
 8002972:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_RCC_ClockConfig+0x270>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f005 fe1d 	bl	80085b8 <HAL_InitTick>
 800297e:	4603      	mov	r3, r0
 8002980:	73fb      	strb	r3, [r7, #15]

  return status;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40022000 	.word	0x40022000
 8002990:	40021000 	.word	0x40021000
 8002994:	04c4b400 	.word	0x04c4b400
 8002998:	0800dfcc 	.word	0x0800dfcc
 800299c:	200000a8 	.word	0x200000a8
 80029a0:	20000000 	.word	0x20000000

080029a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x34>
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b0c      	cmp	r3, #12
 80029d0:	d121      	bne.n	8002a16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d11e      	bne.n	8002a16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029d8:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d107      	bne.n	80029f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029e4:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 80029e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	e005      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a00:	4a2b      	ldr	r2, [pc, #172]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10d      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d102      	bne.n	8002a22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a1c:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	e004      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a28:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d134      	bne.n	8002a9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d003      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0xac>
 8002a48:	e005      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a4c:	617b      	str	r3, [r7, #20]
      break;
 8002a4e:	e005      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a52:	617b      	str	r3, [r7, #20]
      break;
 8002a54:	e002      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	617b      	str	r3, [r7, #20]
      break;
 8002a5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	3301      	adds	r3, #1
 8002a68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	fb03 f202 	mul.w	r2, r3, r2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	0e5b      	lsrs	r3, r3, #25
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	0800dfe4 	.word	0x0800dfe4
 8002ab4:	00f42400 	.word	0x00f42400
 8002ab8:	007a1200 	.word	0x007a1200

08002abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	200000a8 	.word	0x200000a8

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ad8:	f7ff fff0 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4904      	ldr	r1, [pc, #16]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	0800dfdc 	.word	0x0800dfdc

08002b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b04:	f7ff ffda 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	0adb      	lsrs	r3, r3, #11
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	4904      	ldr	r1, [pc, #16]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b16:	5ccb      	ldrb	r3, [r1, r3]
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	0800dfdc 	.word	0x0800dfdc

08002b2c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	220f      	movs	r2, #15
 8002b3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_RCC_GetClockConfig+0x5c>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 0203 	and.w	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <HAL_RCC_GetClockConfig+0x5c>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <HAL_RCC_GetClockConfig+0x5c>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_GetClockConfig+0x5c>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	08db      	lsrs	r3, r3, #3
 8002b66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <HAL_RCC_GetClockConfig+0x60>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 020f 	and.w	r2, r3, #15
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	601a      	str	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40022000 	.word	0x40022000

08002b90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b98:	2300      	movs	r3, #0
 8002b9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b9c:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ba8:	f7ff f8e4 	bl	8001d74 <HAL_PWREx_GetVoltageRange>
 8002bac:	6178      	str	r0, [r7, #20]
 8002bae:	e014      	b.n	8002bda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	4a21      	ldr	r2, [pc, #132]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6593      	str	r3, [r2, #88]	; 0x58
 8002bbc:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bc8:	f7ff f8d4 	bl	8001d74 <HAL_PWREx_GetVoltageRange>
 8002bcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bce:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	4a1a      	ldr	r2, [pc, #104]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be0:	d10b      	bne.n	8002bfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b80      	cmp	r3, #128	; 0x80
 8002be6:	d913      	bls.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2ba0      	cmp	r3, #160	; 0xa0
 8002bec:	d902      	bls.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bee:	2302      	movs	r3, #2
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	e00d      	b.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	e00a      	b.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8002bfe:	d902      	bls.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c00:	2302      	movs	r3, #2
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	e004      	b.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b70      	cmp	r3, #112	; 0x70
 8002c0a:	d101      	bne.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 020f 	bic.w	r2, r3, #15
 8002c18:	4909      	ldr	r1, [pc, #36]	; (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c20:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40022000 	.word	0x40022000

08002c44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d00b      	beq.n	8002c72 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d825      	bhi.n	8002cac <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d008      	beq.n	8002c78 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d11f      	bne.n	8002cac <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c6e:	613b      	str	r3, [r7, #16]
    break;
 8002c70:	e01f      	b.n	8002cb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002c72:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002c74:	613b      	str	r3, [r7, #16]
    break;
 8002c76:	e01c      	b.n	8002cb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c78:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d107      	bne.n	8002c94 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e005      	b.n	8002ca0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002ca0:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca8:	613b      	str	r3, [r7, #16]
    break;
 8002caa:	e002      	b.n	8002cb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]
    break;
 8002cb0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	fb03 f202 	mul.w	r2, r3, r2
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	0e5b      	lsrs	r3, r3, #25
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002cf2:	683b      	ldr	r3, [r7, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40021000 	.word	0x40021000
 8002d04:	00f42400 	.word	0x00f42400
 8002d08:	007a1200 	.word	0x007a1200
 8002d0c:	0800dfe4 	.word	0x0800dfe4

08002d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d18:	2300      	movs	r3, #0
 8002d1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d040      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d30:	2b80      	cmp	r3, #128	; 0x80
 8002d32:	d02a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d825      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d38:	2b60      	cmp	r3, #96	; 0x60
 8002d3a:	d026      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d3c:	2b60      	cmp	r3, #96	; 0x60
 8002d3e:	d821      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	d006      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d81d      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d009      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d010      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002d50:	e018      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d52:	4b89      	ldr	r3, [pc, #548]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	4a88      	ldr	r2, [pc, #544]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d5e:	e015      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3304      	adds	r3, #4
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fb02 	bl	8003370 <RCCEx_PLLSAI1_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d70:	e00c      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3320      	adds	r3, #32
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fbed 	bl	8003558 <RCCEx_PLLSAI2_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d82:	e003      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	74fb      	strb	r3, [r7, #19]
      break;
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8c:	7cfb      	ldrb	r3, [r7, #19]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10b      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d92:	4b79      	ldr	r3, [pc, #484]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d98:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da0:	4975      	ldr	r1, [pc, #468]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002da8:	e001      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002daa:	7cfb      	ldrb	r3, [r7, #19]
 8002dac:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d047      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc2:	d030      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc8:	d82a      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dce:	d02a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dd4:	d824      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dda:	d008      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de0:	d81e      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dea:	d010      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002dec:	e018      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dee:	4b62      	ldr	r3, [pc, #392]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4a61      	ldr	r2, [pc, #388]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dfa:	e015      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fab4 	bl	8003370 <RCCEx_PLLSAI1_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e0c:	e00c      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3320      	adds	r3, #32
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fb9f 	bl	8003558 <RCCEx_PLLSAI2_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e1e:	e003      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	74fb      	strb	r3, [r7, #19]
      break;
 8002e24:	e000      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10b      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e2e:	4b52      	ldr	r3, [pc, #328]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	494e      	ldr	r1, [pc, #312]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e44:	e001      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e46:	7cfb      	ldrb	r3, [r7, #19]
 8002e48:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 809f 	beq.w	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e5c:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b41      	ldr	r3, [pc, #260]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	4a40      	ldr	r2, [pc, #256]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e7e:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e8e:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a3a      	ldr	r2, [pc, #232]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e9a:	f7fd fbc7 	bl	800062c <HAL_GetTick>
 8002e9e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ea0:	e009      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea2:	f7fd fbc3 	bl	800062c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d902      	bls.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	74fb      	strb	r3, [r7, #19]
        break;
 8002eb4:	e005      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eb6:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ef      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002ec2:	7cfb      	ldrb	r3, [r7, #19]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d15b      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01f      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d019      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ee6:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f02:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f12:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d016      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fd fb82 	bl	800062c <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2c:	f7fd fb7e 	bl	800062c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d902      	bls.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	74fb      	strb	r3, [r7, #19]
            break;
 8002f42:	e006      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0ec      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002f52:	7cfb      	ldrb	r3, [r7, #19]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	4903      	ldr	r1, [pc, #12]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f70:	e008      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
 8002f74:	74bb      	strb	r3, [r7, #18]
 8002f76:	e005      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f84:	7c7b      	ldrb	r3, [r7, #17]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8a:	4ba0      	ldr	r3, [pc, #640]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	4a9f      	ldr	r2, [pc, #636]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fa2:	4b9a      	ldr	r3, [pc, #616]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa8:	f023 0203 	bic.w	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	4996      	ldr	r1, [pc, #600]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fc4:	4b91      	ldr	r3, [pc, #580]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	f023 020c 	bic.w	r2, r3, #12
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	498e      	ldr	r1, [pc, #568]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fe6:	4b89      	ldr	r3, [pc, #548]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	4985      	ldr	r1, [pc, #532]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003008:	4b80      	ldr	r3, [pc, #512]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003016:	497d      	ldr	r1, [pc, #500]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800302a:	4b78      	ldr	r3, [pc, #480]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003038:	4974      	ldr	r1, [pc, #464]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800304c:	4b6f      	ldr	r3, [pc, #444]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305a:	496c      	ldr	r1, [pc, #432]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800306e:	4b67      	ldr	r3, [pc, #412]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800307c:	4963      	ldr	r1, [pc, #396]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003090:	4b5e      	ldr	r3, [pc, #376]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309e:	495b      	ldr	r1, [pc, #364]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030b2:	4b56      	ldr	r3, [pc, #344]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c0:	4952      	ldr	r1, [pc, #328]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030d4:	4b4d      	ldr	r3, [pc, #308]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e2:	494a      	ldr	r1, [pc, #296]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030f6:	4b45      	ldr	r3, [pc, #276]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	4941      	ldr	r1, [pc, #260]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003118:	4b3c      	ldr	r3, [pc, #240]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800311a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003126:	4939      	ldr	r1, [pc, #228]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d028      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800313a:	4b34      	ldr	r3, [pc, #208]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003148:	4930      	ldr	r1, [pc, #192]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003158:	d106      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800315a:	4b2c      	ldr	r3, [pc, #176]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	4a2b      	ldr	r2, [pc, #172]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003160:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003164:	60d3      	str	r3, [r2, #12]
 8003166:	e011      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003170:	d10c      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3304      	adds	r3, #4
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f8f9 	bl	8003370 <RCCEx_PLLSAI1_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d04d      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800319c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a0:	d108      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031a8:	4a18      	ldr	r2, [pc, #96]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80031b2:	e012      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80031b4:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ba:	4a14      	ldr	r2, [pc, #80]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031c0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80031c4:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d2:	490e      	ldr	r1, [pc, #56]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e2:	d106      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e4:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a08      	ldr	r2, [pc, #32]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ee:	60d3      	str	r3, [r2, #12]
 80031f0:	e020      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031fa:	d109      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a02      	ldr	r2, [pc, #8]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003206:	60d3      	str	r3, [r2, #12]
 8003208:	e014      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003214:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003218:	d10c      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3304      	adds	r3, #4
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f8a5 	bl	8003370 <RCCEx_PLLSAI1_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322a:	7cfb      	ldrb	r3, [r7, #19]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d028      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003240:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800324e:	4947      	ldr	r1, [pc, #284]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800325a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800325e:	d106      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003260:	4b42      	ldr	r3, [pc, #264]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4a41      	ldr	r2, [pc, #260]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800326a:	60d3      	str	r3, [r2, #12]
 800326c:	e011      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003272:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003276:	d10c      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f876 	bl	8003370 <RCCEx_PLLSAI1_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01e      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800329e:	4b33      	ldr	r3, [pc, #204]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ae:	492f      	ldr	r1, [pc, #188]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2102      	movs	r1, #2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f851 	bl	8003370 <RCCEx_PLLSAI1_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032e8:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032ee:	f023 0204 	bic.w	r2, r3, #4
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f8:	491c      	ldr	r1, [pc, #112]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00b      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800330e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003312:	f023 0218 	bic.w	r2, r3, #24
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	4913      	ldr	r1, [pc, #76]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d017      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003330:	4b0e      	ldr	r3, [pc, #56]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003336:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003340:	490a      	ldr	r1, [pc, #40]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800334e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003352:	d105      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800335e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003360:	7cbb      	ldrb	r3, [r7, #18]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000

08003370 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800337e:	4b72      	ldr	r3, [pc, #456]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00e      	beq.n	80033a8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800338a:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0203 	and.w	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d103      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
       ||
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d142      	bne.n	8003428 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	e03f      	b.n	8003428 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d018      	beq.n	80033e2 <RCCEx_PLLSAI1_Config+0x72>
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d825      	bhi.n	8003400 <RCCEx_PLLSAI1_Config+0x90>
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d002      	beq.n	80033be <RCCEx_PLLSAI1_Config+0x4e>
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d009      	beq.n	80033d0 <RCCEx_PLLSAI1_Config+0x60>
 80033bc:	e020      	b.n	8003400 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033be:	4b62      	ldr	r3, [pc, #392]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d11d      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ce:	e01a      	b.n	8003406 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033d0:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d116      	bne.n	800340a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e0:	e013      	b.n	800340a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033e2:	4b59      	ldr	r3, [pc, #356]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033ee:	4b56      	ldr	r3, [pc, #344]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033fe:	e006      	b.n	800340e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      break;
 8003404:	e004      	b.n	8003410 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003406:	bf00      	nop
 8003408:	e002      	b.n	8003410 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800340a:	bf00      	nop
 800340c:	e000      	b.n	8003410 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800340e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d108      	bne.n	8003428 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003416:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f023 0203 	bic.w	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4949      	ldr	r1, [pc, #292]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003424:	4313      	orrs	r3, r2
 8003426:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 8086 	bne.w	800353c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003430:	4b45      	ldr	r3, [pc, #276]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a44      	ldr	r2, [pc, #272]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003436:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800343a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800343c:	f7fd f8f6 	bl	800062c <HAL_GetTick>
 8003440:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003442:	e009      	b.n	8003458 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003444:	f7fd f8f2 	bl	800062c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d902      	bls.n	8003458 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	73fb      	strb	r3, [r7, #15]
        break;
 8003456:	e005      	b.n	8003464 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003458:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1ef      	bne.n	8003444 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d168      	bne.n	800353c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d113      	bne.n	8003498 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003470:	4b35      	ldr	r3, [pc, #212]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	4b35      	ldr	r3, [pc, #212]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003476:	4013      	ands	r3, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6892      	ldr	r2, [r2, #8]
 800347c:	0211      	lsls	r1, r2, #8
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68d2      	ldr	r2, [r2, #12]
 8003482:	06d2      	lsls	r2, r2, #27
 8003484:	4311      	orrs	r1, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6852      	ldr	r2, [r2, #4]
 800348a:	3a01      	subs	r2, #1
 800348c:	0112      	lsls	r2, r2, #4
 800348e:	430a      	orrs	r2, r1
 8003490:	492d      	ldr	r1, [pc, #180]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003492:	4313      	orrs	r3, r2
 8003494:	610b      	str	r3, [r1, #16]
 8003496:	e02d      	b.n	80034f4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d115      	bne.n	80034ca <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800349e:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6892      	ldr	r2, [r2, #8]
 80034aa:	0211      	lsls	r1, r2, #8
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6912      	ldr	r2, [r2, #16]
 80034b0:	0852      	lsrs	r2, r2, #1
 80034b2:	3a01      	subs	r2, #1
 80034b4:	0552      	lsls	r2, r2, #21
 80034b6:	4311      	orrs	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6852      	ldr	r2, [r2, #4]
 80034bc:	3a01      	subs	r2, #1
 80034be:	0112      	lsls	r2, r2, #4
 80034c0:	430a      	orrs	r2, r1
 80034c2:	4921      	ldr	r1, [pc, #132]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	610b      	str	r3, [r1, #16]
 80034c8:	e014      	b.n	80034f4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	4b21      	ldr	r3, [pc, #132]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6892      	ldr	r2, [r2, #8]
 80034d6:	0211      	lsls	r1, r2, #8
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6952      	ldr	r2, [r2, #20]
 80034dc:	0852      	lsrs	r2, r2, #1
 80034de:	3a01      	subs	r2, #1
 80034e0:	0652      	lsls	r2, r2, #25
 80034e2:	4311      	orrs	r1, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6852      	ldr	r2, [r2, #4]
 80034e8:	3a01      	subs	r2, #1
 80034ea:	0112      	lsls	r2, r2, #4
 80034ec:	430a      	orrs	r2, r1
 80034ee:	4916      	ldr	r1, [pc, #88]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034f4:	4b14      	ldr	r3, [pc, #80]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a13      	ldr	r2, [pc, #76]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fd f894 	bl	800062c <HAL_GetTick>
 8003504:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003506:	e009      	b.n	800351c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003508:	f7fd f890 	bl	800062c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d902      	bls.n	800351c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	73fb      	strb	r3, [r7, #15]
          break;
 800351a:	e005      	b.n	8003528 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ef      	beq.n	8003508 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	4904      	ldr	r1, [pc, #16]	; (8003548 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003538:	4313      	orrs	r3, r2
 800353a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800353c:	7bfb      	ldrb	r3, [r7, #15]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	07ff800f 	.word	0x07ff800f
 8003550:	ff9f800f 	.word	0xff9f800f
 8003554:	f9ff800f 	.word	0xf9ff800f

08003558 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003566:	4b72      	ldr	r3, [pc, #456]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00e      	beq.n	8003590 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003572:	4b6f      	ldr	r3, [pc, #444]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0203 	and.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d103      	bne.n	800358a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
       ||
 8003586:	2b00      	cmp	r3, #0
 8003588:	d142      	bne.n	8003610 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	e03f      	b.n	8003610 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b03      	cmp	r3, #3
 8003596:	d018      	beq.n	80035ca <RCCEx_PLLSAI2_Config+0x72>
 8003598:	2b03      	cmp	r3, #3
 800359a:	d825      	bhi.n	80035e8 <RCCEx_PLLSAI2_Config+0x90>
 800359c:	2b01      	cmp	r3, #1
 800359e:	d002      	beq.n	80035a6 <RCCEx_PLLSAI2_Config+0x4e>
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d009      	beq.n	80035b8 <RCCEx_PLLSAI2_Config+0x60>
 80035a4:	e020      	b.n	80035e8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035a6:	4b62      	ldr	r3, [pc, #392]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11d      	bne.n	80035ee <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b6:	e01a      	b.n	80035ee <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035b8:	4b5d      	ldr	r3, [pc, #372]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d116      	bne.n	80035f2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c8:	e013      	b.n	80035f2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035ca:	4b59      	ldr	r3, [pc, #356]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035d6:	4b56      	ldr	r3, [pc, #344]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035e6:	e006      	b.n	80035f6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
      break;
 80035ec:	e004      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80035f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d108      	bne.n	8003610 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80035fe:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f023 0203 	bic.w	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4949      	ldr	r1, [pc, #292]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 800360c:	4313      	orrs	r3, r2
 800360e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f040 8086 	bne.w	8003724 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003618:	4b45      	ldr	r3, [pc, #276]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a44      	ldr	r2, [pc, #272]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 800361e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003624:	f7fd f802 	bl	800062c <HAL_GetTick>
 8003628:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800362a:	e009      	b.n	8003640 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800362c:	f7fc fffe 	bl	800062c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d902      	bls.n	8003640 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	73fb      	strb	r3, [r7, #15]
        break;
 800363e:	e005      	b.n	800364c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003640:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ef      	bne.n	800362c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d168      	bne.n	8003724 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d113      	bne.n	8003680 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003658:	4b35      	ldr	r3, [pc, #212]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	4b35      	ldr	r3, [pc, #212]	; (8003734 <RCCEx_PLLSAI2_Config+0x1dc>)
 800365e:	4013      	ands	r3, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6892      	ldr	r2, [r2, #8]
 8003664:	0211      	lsls	r1, r2, #8
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68d2      	ldr	r2, [r2, #12]
 800366a:	06d2      	lsls	r2, r2, #27
 800366c:	4311      	orrs	r1, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6852      	ldr	r2, [r2, #4]
 8003672:	3a01      	subs	r2, #1
 8003674:	0112      	lsls	r2, r2, #4
 8003676:	430a      	orrs	r2, r1
 8003678:	492d      	ldr	r1, [pc, #180]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 800367a:	4313      	orrs	r3, r2
 800367c:	614b      	str	r3, [r1, #20]
 800367e:	e02d      	b.n	80036dc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d115      	bne.n	80036b2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003686:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <RCCEx_PLLSAI2_Config+0x1e0>)
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6892      	ldr	r2, [r2, #8]
 8003692:	0211      	lsls	r1, r2, #8
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6912      	ldr	r2, [r2, #16]
 8003698:	0852      	lsrs	r2, r2, #1
 800369a:	3a01      	subs	r2, #1
 800369c:	0552      	lsls	r2, r2, #21
 800369e:	4311      	orrs	r1, r2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6852      	ldr	r2, [r2, #4]
 80036a4:	3a01      	subs	r2, #1
 80036a6:	0112      	lsls	r2, r2, #4
 80036a8:	430a      	orrs	r2, r1
 80036aa:	4921      	ldr	r1, [pc, #132]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	614b      	str	r3, [r1, #20]
 80036b0:	e014      	b.n	80036dc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	4b21      	ldr	r3, [pc, #132]	; (800373c <RCCEx_PLLSAI2_Config+0x1e4>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6892      	ldr	r2, [r2, #8]
 80036be:	0211      	lsls	r1, r2, #8
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6952      	ldr	r2, [r2, #20]
 80036c4:	0852      	lsrs	r2, r2, #1
 80036c6:	3a01      	subs	r2, #1
 80036c8:	0652      	lsls	r2, r2, #25
 80036ca:	4311      	orrs	r1, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6852      	ldr	r2, [r2, #4]
 80036d0:	3a01      	subs	r2, #1
 80036d2:	0112      	lsls	r2, r2, #4
 80036d4:	430a      	orrs	r2, r1
 80036d6:	4916      	ldr	r1, [pc, #88]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036dc:	4b14      	ldr	r3, [pc, #80]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a13      	ldr	r2, [pc, #76]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fc ffa0 	bl	800062c <HAL_GetTick>
 80036ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036ee:	e009      	b.n	8003704 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036f0:	f7fc ff9c 	bl	800062c <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d902      	bls.n	8003704 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	73fb      	strb	r3, [r7, #15]
          break;
 8003702:	e005      	b.n	8003710 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ef      	beq.n	80036f0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	4904      	ldr	r1, [pc, #16]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003720:	4313      	orrs	r3, r2
 8003722:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
 8003734:	07ff800f 	.word	0x07ff800f
 8003738:	ff9f800f 	.word	0xff9f800f
 800373c:	f9ff800f 	.word	0xf9ff800f

08003740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e049      	b.n	80037e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f004 fe42 	bl	80083f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3304      	adds	r3, #4
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f000 fab6 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d001      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e04f      	b.n	80038a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a23      	ldr	r2, [pc, #140]	; (80038b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01d      	beq.n	8003866 <HAL_TIM_Base_Start_IT+0x76>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003832:	d018      	beq.n	8003866 <HAL_TIM_Base_Start_IT+0x76>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_TIM_Base_Start_IT+0x76>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_TIM_Base_Start_IT+0x76>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_TIM_Base_Start_IT+0x76>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_TIM_Base_Start_IT+0x76>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d115      	bne.n	8003892 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	4b17      	ldr	r3, [pc, #92]	; (80038cc <HAL_TIM_Base_Start_IT+0xdc>)
 800386e:	4013      	ands	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b06      	cmp	r3, #6
 8003876:	d015      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0xb4>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387e:	d011      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	e008      	b.n	80038a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e000      	b.n	80038a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40012c00 	.word	0x40012c00
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40000800 	.word	0x40000800
 80038c0:	40000c00 	.word	0x40000c00
 80038c4:	40013400 	.word	0x40013400
 80038c8:	40014000 	.word	0x40014000
 80038cc:	00010007 	.word	0x00010007

080038d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d122      	bne.n	800392c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d11b      	bne.n	800392c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0202 	mvn.w	r2, #2
 80038fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f9ce 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f9c0 	bl	8003ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f9d1 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b04      	cmp	r3, #4
 8003938:	d122      	bne.n	8003980 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b04      	cmp	r3, #4
 8003946:	d11b      	bne.n	8003980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0204 	mvn.w	r2, #4
 8003950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f9a4 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 800396c:	e005      	b.n	800397a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f996 	bl	8003ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f9a7 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b08      	cmp	r3, #8
 800398c:	d122      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b08      	cmp	r3, #8
 800399a:	d11b      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0208 	mvn.w	r2, #8
 80039a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2204      	movs	r2, #4
 80039aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f97a 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f96c 	bl	8003ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f97d 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b10      	cmp	r3, #16
 80039e0:	d122      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d11b      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0210 	mvn.w	r2, #16
 80039f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2208      	movs	r2, #8
 80039fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f950 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 8003a14:	e005      	b.n	8003a22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f942 	bl	8003ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f953 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d10e      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d107      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0201 	mvn.w	r2, #1
 8003a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f004 fc30 	bl	80082b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5e:	2b80      	cmp	r3, #128	; 0x80
 8003a60:	d10e      	bne.n	8003a80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b80      	cmp	r3, #128	; 0x80
 8003a6e:	d107      	bne.n	8003a80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fafe 	bl	800407c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8e:	d10e      	bne.n	8003aae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b80      	cmp	r3, #128	; 0x80
 8003a9c:	d107      	bne.n	8003aae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 faf1 	bl	8004090 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d10e      	bne.n	8003ada <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d107      	bne.n	8003ada <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f901 	bl	8003cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d10e      	bne.n	8003b06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d107      	bne.n	8003b06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f06f 0220 	mvn.w	r2, #32
 8003afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fab1 	bl	8004068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_TIM_ConfigClockSource+0x1c>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e0b6      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x18a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2202      	movs	r2, #2
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b48:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b54:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b66:	d03e      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0xd8>
 8003b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6c:	f200 8087 	bhi.w	8003c7e <HAL_TIM_ConfigClockSource+0x170>
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	f000 8086 	beq.w	8003c84 <HAL_TIM_ConfigClockSource+0x176>
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7c:	d87f      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x170>
 8003b7e:	2b70      	cmp	r3, #112	; 0x70
 8003b80:	d01a      	beq.n	8003bb8 <HAL_TIM_ConfigClockSource+0xaa>
 8003b82:	2b70      	cmp	r3, #112	; 0x70
 8003b84:	d87b      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x170>
 8003b86:	2b60      	cmp	r3, #96	; 0x60
 8003b88:	d050      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x11e>
 8003b8a:	2b60      	cmp	r3, #96	; 0x60
 8003b8c:	d877      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x170>
 8003b8e:	2b50      	cmp	r3, #80	; 0x50
 8003b90:	d03c      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0xfe>
 8003b92:	2b50      	cmp	r3, #80	; 0x50
 8003b94:	d873      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x170>
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d058      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x13e>
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d86f      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x170>
 8003b9e:	2b30      	cmp	r3, #48	; 0x30
 8003ba0:	d064      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x15e>
 8003ba2:	2b30      	cmp	r3, #48	; 0x30
 8003ba4:	d86b      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x170>
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d060      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x15e>
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d867      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x170>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d05c      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x15e>
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d05a      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x15e>
 8003bb6:	e062      	b.n	8003c7e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f000 f9a6 	bl	8003f18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]
      break;
 8003be4:	e04f      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6899      	ldr	r1, [r3, #8]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f000 f98f 	bl	8003f18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c08:	609a      	str	r2, [r3, #8]
      break;
 8003c0a:	e03c      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f000 f903 	bl	8003e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2150      	movs	r1, #80	; 0x50
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f95c 	bl	8003ee2 <TIM_ITRx_SetConfig>
      break;
 8003c2a:	e02c      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f000 f922 	bl	8003e82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2160      	movs	r1, #96	; 0x60
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 f94c 	bl	8003ee2 <TIM_ITRx_SetConfig>
      break;
 8003c4a:	e01c      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f000 f8e3 	bl	8003e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2140      	movs	r1, #64	; 0x40
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 f93c 	bl	8003ee2 <TIM_ITRx_SetConfig>
      break;
 8003c6a:	e00c      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f000 f933 	bl	8003ee2 <TIM_ITRx_SetConfig>
      break;
 8003c7c:	e003      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
      break;
 8003c82:	e000      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a40      	ldr	r2, [pc, #256]	; (8003e04 <TIM_Base_SetConfig+0x114>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d00f      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a3d      	ldr	r2, [pc, #244]	; (8003e08 <TIM_Base_SetConfig+0x118>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3c      	ldr	r2, [pc, #240]	; (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3a      	ldr	r2, [pc, #232]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d108      	bne.n	8003d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2f      	ldr	r2, [pc, #188]	; (8003e04 <TIM_Base_SetConfig+0x114>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01f      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d50:	d01b      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <TIM_Base_SetConfig+0x118>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d017      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00f      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a28      	ldr	r2, [pc, #160]	; (8003e18 <TIM_Base_SetConfig+0x128>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d003      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a26      	ldr	r2, [pc, #152]	; (8003e20 <TIM_Base_SetConfig+0x130>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d108      	bne.n	8003d9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a10      	ldr	r2, [pc, #64]	; (8003e04 <TIM_Base_SetConfig+0x114>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00f      	beq.n	8003de8 <TIM_Base_SetConfig+0xf8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00b      	beq.n	8003de8 <TIM_Base_SetConfig+0xf8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a11      	ldr	r2, [pc, #68]	; (8003e18 <TIM_Base_SetConfig+0x128>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d007      	beq.n	8003de8 <TIM_Base_SetConfig+0xf8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a10      	ldr	r2, [pc, #64]	; (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_Base_SetConfig+0xf8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a0f      	ldr	r2, [pc, #60]	; (8003e20 <TIM_Base_SetConfig+0x130>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d103      	bne.n	8003df0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	615a      	str	r2, [r3, #20]
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40000c00 	.word	0x40000c00
 8003e14:	40013400 	.word	0x40013400
 8003e18:	40014000 	.word	0x40014000
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	40014800 	.word	0x40014800

08003e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f023 0201 	bic.w	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f023 030a 	bic.w	r3, r3, #10
 8003e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	621a      	str	r2, [r3, #32]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b087      	sub	sp, #28
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f023 0210 	bic.w	r2, r3, #16
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	031b      	lsls	r3, r3, #12
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ebe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	621a      	str	r2, [r3, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b085      	sub	sp, #20
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f043 0307 	orr.w	r3, r3, #7
 8003f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	609a      	str	r2, [r3, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	021a      	lsls	r2, r3, #8
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	609a      	str	r2, [r3, #8]
}
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e068      	b.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a2e      	ldr	r2, [pc, #184]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d004      	beq.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a2d      	ldr	r2, [pc, #180]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d108      	bne.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003faa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d01d      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d018      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1a      	ldr	r2, [pc, #104]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00e      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a18      	ldr	r2, [pc, #96]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d009      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a13      	ldr	r2, [pc, #76]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d004      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a14      	ldr	r2, [pc, #80]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d10c      	bne.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800401c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	4313      	orrs	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40013400 	.word	0x40013400
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40014000 	.word	0x40014000

08004068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e042      	b.n	800413c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f004 f9b5 	bl	8008438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2224      	movs	r2, #36	; 0x24
 80040d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fcee 	bl	8004ac8 <UART_SetConfig>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e022      	b.n	800413c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 ffde 	bl	80050c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f001 f865 	bl	8005204 <UART_CheckIdleState>
 800413a:	4603      	mov	r3, r0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	; 0x28
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415a:	2b20      	cmp	r3, #32
 800415c:	f040 8084 	bne.w	8004268 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_UART_Transmit+0x28>
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e07c      	b.n	800426a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_UART_Transmit+0x3a>
 800417a:	2302      	movs	r3, #2
 800417c:	e075      	b.n	800426a <HAL_UART_Transmit+0x126>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2221      	movs	r2, #33	; 0x21
 8004192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004196:	f7fc fa49 	bl	800062c <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	88fa      	ldrh	r2, [r7, #6]
 80041a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b4:	d108      	bne.n	80041c8 <HAL_UART_Transmit+0x84>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	61bb      	str	r3, [r7, #24]
 80041c6:	e003      	b.n	80041d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80041d8:	e02d      	b.n	8004236 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	2180      	movs	r1, #128	; 0x80
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f001 f858 	bl	800529a <UART_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e03a      	b.n	800426a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	881a      	ldrh	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004206:	b292      	uxth	r2, r2
 8004208:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	3302      	adds	r3, #2
 800420e:	61bb      	str	r3, [r7, #24]
 8004210:	e008      	b.n	8004224 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	781a      	ldrb	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	b292      	uxth	r2, r2
 800421c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3301      	adds	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1cb      	bne.n	80041da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2200      	movs	r2, #0
 800424a:	2140      	movs	r1, #64	; 0x40
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f001 f824 	bl	800529a <UART_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e006      	b.n	800426a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	e000      	b.n	800426a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004268:	2302      	movs	r3, #2
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	2b20      	cmp	r3, #32
 800428a:	d142      	bne.n	8004312 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_UART_Receive_IT+0x24>
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e03b      	b.n	8004314 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Receive_IT+0x36>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e034      	b.n	8004314 <HAL_UART_Receive_IT+0xa0>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a17      	ldr	r2, [pc, #92]	; (800431c <HAL_UART_Receive_IT+0xa8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01f      	beq.n	8004302 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d018      	beq.n	8004302 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	613b      	str	r3, [r7, #16]
   return(result);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	623b      	str	r3, [r7, #32]
 80042f0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	69f9      	ldr	r1, [r7, #28]
 80042f4:	6a3a      	ldr	r2, [r7, #32]
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e6      	bne.n	80042d0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	461a      	mov	r2, r3
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f001 f88f 	bl	800542c <UART_Start_Receive_IT>
 800430e:	4603      	mov	r3, r0
 8004310:	e000      	b.n	8004314 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004312:	2302      	movs	r3, #2
  }
}
 8004314:	4618      	mov	r0, r3
 8004316:	3728      	adds	r7, #40	; 0x28
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40008000 	.word	0x40008000

08004320 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	4613      	mov	r3, r2
 800432c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004334:	2b20      	cmp	r3, #32
 8004336:	d17a      	bne.n	800442e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_UART_Transmit_DMA+0x24>
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e073      	b.n	8004430 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_UART_Transmit_DMA+0x36>
 8004352:	2302      	movs	r3, #2
 8004354:	e06c      	b.n	8004430 <HAL_UART_Transmit_DMA+0x110>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	88fa      	ldrh	r2, [r7, #6]
 8004368:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	88fa      	ldrh	r2, [r7, #6]
 8004370:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2221      	movs	r2, #33	; 0x21
 8004380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02c      	beq.n	80043e6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004390:	4a29      	ldr	r2, [pc, #164]	; (8004438 <HAL_UART_Transmit_DMA+0x118>)
 8004392:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004398:	4a28      	ldr	r2, [pc, #160]	; (800443c <HAL_UART_Transmit_DMA+0x11c>)
 800439a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a0:	4a27      	ldr	r2, [pc, #156]	; (8004440 <HAL_UART_Transmit_DMA+0x120>)
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a8:	2200      	movs	r2, #0
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b4:	4619      	mov	r1, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3328      	adds	r3, #40	; 0x28
 80043bc:	461a      	mov	r2, r3
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	f7fc faee 	bl	80009a0 <HAL_DMA_Start_IT>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00d      	beq.n	80043e6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2210      	movs	r2, #16
 80043ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e024      	b.n	8004430 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2240      	movs	r2, #64	; 0x40
 80043ec:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3308      	adds	r3, #8
 80043fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	613b      	str	r3, [r7, #16]
   return(result);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3308      	adds	r3, #8
 8004414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004416:	623a      	str	r2, [r7, #32]
 8004418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	69f9      	ldr	r1, [r7, #28]
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	61bb      	str	r3, [r7, #24]
   return(result);
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e000      	b.n	8004430 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800442e:	2302      	movs	r3, #2
  }
}
 8004430:	4618      	mov	r0, r3
 8004432:	3728      	adds	r7, #40	; 0x28
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	080057cf 	.word	0x080057cf
 800443c:	08005869 	.word	0x08005869
 8004440:	08005885 	.word	0x08005885

08004444 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b0ba      	sub	sp, #232	; 0xe8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800446a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800446e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004472:	4013      	ands	r3, r2
 8004474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004478:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d11b      	bne.n	80044b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b00      	cmp	r3, #0
 800448a:	d015      	beq.n	80044b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800448c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800449c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 82d6 	beq.w	8004a5a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
      }
      return;
 80044b6:	e2d0      	b.n	8004a5a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80044b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 811f 	beq.w	8004700 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80044c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80044c6:	4b8b      	ldr	r3, [pc, #556]	; (80046f4 <HAL_UART_IRQHandler+0x2b0>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80044ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044d2:	4b89      	ldr	r3, [pc, #548]	; (80046f8 <HAL_UART_IRQHandler+0x2b4>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8112 	beq.w	8004700 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d011      	beq.n	800450c <HAL_UART_IRQHandler+0xc8>
 80044e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00b      	beq.n	800450c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2201      	movs	r2, #1
 80044fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004502:	f043 0201 	orr.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800450c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d011      	beq.n	800453c <HAL_UART_IRQHandler+0xf8>
 8004518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00b      	beq.n	800453c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2202      	movs	r2, #2
 800452a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004532:	f043 0204 	orr.w	r2, r3, #4
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800453c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d011      	beq.n	800456c <HAL_UART_IRQHandler+0x128>
 8004548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00b      	beq.n	800456c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2204      	movs	r2, #4
 800455a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004562:	f043 0202 	orr.w	r2, r3, #2
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800456c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d017      	beq.n	80045a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004584:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004588:	4b5a      	ldr	r3, [pc, #360]	; (80046f4 <HAL_UART_IRQHandler+0x2b0>)
 800458a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2208      	movs	r2, #8
 8004596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800459e:	f043 0208 	orr.w	r2, r3, #8
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d012      	beq.n	80045da <HAL_UART_IRQHandler+0x196>
 80045b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00c      	beq.n	80045da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 823c 	beq.w	8004a5e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80045e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d013      	beq.n	800461a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80045f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d105      	bne.n	800460a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d005      	beq.n	800463e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004636:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800463a:	2b00      	cmp	r3, #0
 800463c:	d04f      	beq.n	80046de <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f001 f85f 	bl	8005702 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d141      	bne.n	80046d6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800466c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3308      	adds	r3, #8
 800467a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800467e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800468a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1d9      	bne.n	8004652 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d013      	beq.n	80046ce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046aa:	4a14      	ldr	r2, [pc, #80]	; (80046fc <HAL_UART_IRQHandler+0x2b8>)
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fc fa4b 	bl	8000b4e <HAL_DMA_Abort_IT>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d017      	beq.n	80046ee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80046c8:	4610      	mov	r0, r2
 80046ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	e00f      	b.n	80046ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9e4 	bl	8004a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d4:	e00b      	b.n	80046ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f9e0 	bl	8004a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	e007      	b.n	80046ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f9dc 	bl	8004a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80046ec:	e1b7      	b.n	8004a5e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ee:	bf00      	nop
    return;
 80046f0:	e1b5      	b.n	8004a5e <HAL_UART_IRQHandler+0x61a>
 80046f2:	bf00      	nop
 80046f4:	10000001 	.word	0x10000001
 80046f8:	04000120 	.word	0x04000120
 80046fc:	08005905 	.word	0x08005905

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004704:	2b01      	cmp	r3, #1
 8004706:	f040 814a 	bne.w	800499e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800470a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 8143 	beq.w	800499e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 813c 	beq.w	800499e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2210      	movs	r2, #16
 800472c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	f040 80b5 	bne.w	80048a8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800474a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8187 	beq.w	8004a62 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800475a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800475e:	429a      	cmp	r2, r3
 8004760:	f080 817f 	bcs.w	8004a62 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800476a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 8086 	bne.w	800488c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800479c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1da      	bne.n	8004780 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3308      	adds	r3, #8
 80047d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3308      	adds	r3, #8
 80047ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e1      	bne.n	80047ca <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3308      	adds	r3, #8
 800480c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3308      	adds	r3, #8
 8004826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800482a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800482c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004830:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e3      	bne.n	8004806 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800485a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485c:	f023 0310 	bic.w	r3, r3, #16
 8004860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800486e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004870:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800487c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e4      	bne.n	800484c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004886:	4618      	mov	r0, r3
 8004888:	f7fc f905 	bl	8000a96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004898:	b29b      	uxth	r3, r3
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	b29b      	uxth	r3, r3
 800489e:	4619      	mov	r1, r3
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f905 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048a6:	e0dc      	b.n	8004a62 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80ce 	beq.w	8004a66 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80048ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80c9 	beq.w	8004a66 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048f6:	647b      	str	r3, [r7, #68]	; 0x44
 80048f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e4      	bne.n	80048d4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3308      	adds	r3, #8
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	623b      	str	r3, [r7, #32]
   return(result);
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004932:	633a      	str	r2, [r7, #48]	; 0x30
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e1      	bne.n	800490a <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	60fb      	str	r3, [r7, #12]
   return(result);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0310 	bic.w	r3, r3, #16
 800496e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	69b9      	ldr	r1, [r7, #24]
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	617b      	str	r3, [r7, #20]
   return(result);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e4      	bne.n	800495a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004994:	4619      	mov	r1, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f88a 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800499c:	e063      	b.n	8004a66 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800499e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00e      	beq.n	80049c8 <HAL_UART_IRQHandler+0x584>
 80049aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80049be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f001 fc45 	bl	8006250 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049c6:	e051      	b.n	8004a6c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80049c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d014      	beq.n	80049fe <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80049e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d03a      	beq.n	8004a6a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
    }
    return;
 80049fc:	e035      	b.n	8004a6a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <HAL_UART_IRQHandler+0x5da>
 8004a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 ff8a 	bl	8005930 <UART_EndTransmit_IT>
    return;
 8004a1c:	e026      	b.n	8004a6c <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <HAL_UART_IRQHandler+0x5fa>
 8004a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f001 fc1e 	bl	8006278 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a3c:	e016      	b.n	8004a6c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d010      	beq.n	8004a6c <HAL_UART_IRQHandler+0x628>
 8004a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	da0c      	bge.n	8004a6c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f001 fc06 	bl	8006264 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a58:	e008      	b.n	8004a6c <HAL_UART_IRQHandler+0x628>
      return;
 8004a5a:	bf00      	nop
 8004a5c:	e006      	b.n	8004a6c <HAL_UART_IRQHandler+0x628>
    return;
 8004a5e:	bf00      	nop
 8004a60:	e004      	b.n	8004a6c <HAL_UART_IRQHandler+0x628>
      return;
 8004a62:	bf00      	nop
 8004a64:	e002      	b.n	8004a6c <HAL_UART_IRQHandler+0x628>
      return;
 8004a66:	bf00      	nop
 8004a68:	e000      	b.n	8004a6c <HAL_UART_IRQHandler+0x628>
    return;
 8004a6a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a6c:	37e8      	adds	r7, #232	; 0xe8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop

08004a74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004acc:	b08c      	sub	sp, #48	; 0x30
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4baa      	ldr	r3, [pc, #680]	; (8004da0 <UART_SetConfig+0x2d8>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b00:	430b      	orrs	r3, r1
 8004b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a9f      	ldr	r2, [pc, #636]	; (8004da4 <UART_SetConfig+0x2dc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d004      	beq.n	8004b34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b30:	4313      	orrs	r3, r2
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	f023 010f 	bic.w	r1, r3, #15
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a90      	ldr	r2, [pc, #576]	; (8004da8 <UART_SetConfig+0x2e0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d125      	bne.n	8004bb8 <UART_SetConfig+0xf0>
 8004b6c:	4b8f      	ldr	r3, [pc, #572]	; (8004dac <UART_SetConfig+0x2e4>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d81a      	bhi.n	8004bb0 <UART_SetConfig+0xe8>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <UART_SetConfig+0xb8>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004ba1 	.word	0x08004ba1
 8004b88:	08004b99 	.word	0x08004b99
 8004b8c:	08004ba9 	.word	0x08004ba9
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b96:	e116      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9e:	e112      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba6:	e10e      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004ba8:	2308      	movs	r3, #8
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bae:	e10a      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb6:	e106      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a7c      	ldr	r2, [pc, #496]	; (8004db0 <UART_SetConfig+0x2e8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d138      	bne.n	8004c34 <UART_SetConfig+0x16c>
 8004bc2:	4b7a      	ldr	r3, [pc, #488]	; (8004dac <UART_SetConfig+0x2e4>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f003 030c 	and.w	r3, r3, #12
 8004bcc:	2b0c      	cmp	r3, #12
 8004bce:	d82d      	bhi.n	8004c2c <UART_SetConfig+0x164>
 8004bd0:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <UART_SetConfig+0x110>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004c0d 	.word	0x08004c0d
 8004bdc:	08004c2d 	.word	0x08004c2d
 8004be0:	08004c2d 	.word	0x08004c2d
 8004be4:	08004c2d 	.word	0x08004c2d
 8004be8:	08004c1d 	.word	0x08004c1d
 8004bec:	08004c2d 	.word	0x08004c2d
 8004bf0:	08004c2d 	.word	0x08004c2d
 8004bf4:	08004c2d 	.word	0x08004c2d
 8004bf8:	08004c15 	.word	0x08004c15
 8004bfc:	08004c2d 	.word	0x08004c2d
 8004c00:	08004c2d 	.word	0x08004c2d
 8004c04:	08004c2d 	.word	0x08004c2d
 8004c08:	08004c25 	.word	0x08004c25
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c12:	e0d8      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004c14:	2302      	movs	r3, #2
 8004c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c1a:	e0d4      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c22:	e0d0      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004c24:	2308      	movs	r3, #8
 8004c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c2a:	e0cc      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c32:	e0c8      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a5e      	ldr	r2, [pc, #376]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d125      	bne.n	8004c8a <UART_SetConfig+0x1c2>
 8004c3e:	4b5b      	ldr	r3, [pc, #364]	; (8004dac <UART_SetConfig+0x2e4>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c48:	2b30      	cmp	r3, #48	; 0x30
 8004c4a:	d016      	beq.n	8004c7a <UART_SetConfig+0x1b2>
 8004c4c:	2b30      	cmp	r3, #48	; 0x30
 8004c4e:	d818      	bhi.n	8004c82 <UART_SetConfig+0x1ba>
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d00a      	beq.n	8004c6a <UART_SetConfig+0x1a2>
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d814      	bhi.n	8004c82 <UART_SetConfig+0x1ba>
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <UART_SetConfig+0x19a>
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d008      	beq.n	8004c72 <UART_SetConfig+0x1aa>
 8004c60:	e00f      	b.n	8004c82 <UART_SetConfig+0x1ba>
 8004c62:	2300      	movs	r3, #0
 8004c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c68:	e0ad      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c70:	e0a9      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004c72:	2304      	movs	r3, #4
 8004c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c78:	e0a5      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004c7a:	2308      	movs	r3, #8
 8004c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c80:	e0a1      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004c82:	2310      	movs	r3, #16
 8004c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c88:	e09d      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a4a      	ldr	r2, [pc, #296]	; (8004db8 <UART_SetConfig+0x2f0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d125      	bne.n	8004ce0 <UART_SetConfig+0x218>
 8004c94:	4b45      	ldr	r3, [pc, #276]	; (8004dac <UART_SetConfig+0x2e4>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004ca0:	d016      	beq.n	8004cd0 <UART_SetConfig+0x208>
 8004ca2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ca4:	d818      	bhi.n	8004cd8 <UART_SetConfig+0x210>
 8004ca6:	2b80      	cmp	r3, #128	; 0x80
 8004ca8:	d00a      	beq.n	8004cc0 <UART_SetConfig+0x1f8>
 8004caa:	2b80      	cmp	r3, #128	; 0x80
 8004cac:	d814      	bhi.n	8004cd8 <UART_SetConfig+0x210>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <UART_SetConfig+0x1f0>
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d008      	beq.n	8004cc8 <UART_SetConfig+0x200>
 8004cb6:	e00f      	b.n	8004cd8 <UART_SetConfig+0x210>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cbe:	e082      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc6:	e07e      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cce:	e07a      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd6:	e076      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004cd8:	2310      	movs	r3, #16
 8004cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cde:	e072      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a35      	ldr	r2, [pc, #212]	; (8004dbc <UART_SetConfig+0x2f4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d12a      	bne.n	8004d40 <UART_SetConfig+0x278>
 8004cea:	4b30      	ldr	r3, [pc, #192]	; (8004dac <UART_SetConfig+0x2e4>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf8:	d01a      	beq.n	8004d30 <UART_SetConfig+0x268>
 8004cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cfe:	d81b      	bhi.n	8004d38 <UART_SetConfig+0x270>
 8004d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d04:	d00c      	beq.n	8004d20 <UART_SetConfig+0x258>
 8004d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d0a:	d815      	bhi.n	8004d38 <UART_SetConfig+0x270>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <UART_SetConfig+0x250>
 8004d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d14:	d008      	beq.n	8004d28 <UART_SetConfig+0x260>
 8004d16:	e00f      	b.n	8004d38 <UART_SetConfig+0x270>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1e:	e052      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004d20:	2302      	movs	r3, #2
 8004d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d26:	e04e      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2e:	e04a      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004d30:	2308      	movs	r3, #8
 8004d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d36:	e046      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004d38:	2310      	movs	r3, #16
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d3e:	e042      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a17      	ldr	r2, [pc, #92]	; (8004da4 <UART_SetConfig+0x2dc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d13a      	bne.n	8004dc0 <UART_SetConfig+0x2f8>
 8004d4a:	4b18      	ldr	r3, [pc, #96]	; (8004dac <UART_SetConfig+0x2e4>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d58:	d01a      	beq.n	8004d90 <UART_SetConfig+0x2c8>
 8004d5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d5e:	d81b      	bhi.n	8004d98 <UART_SetConfig+0x2d0>
 8004d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d64:	d00c      	beq.n	8004d80 <UART_SetConfig+0x2b8>
 8004d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d6a:	d815      	bhi.n	8004d98 <UART_SetConfig+0x2d0>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <UART_SetConfig+0x2b0>
 8004d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d74:	d008      	beq.n	8004d88 <UART_SetConfig+0x2c0>
 8004d76:	e00f      	b.n	8004d98 <UART_SetConfig+0x2d0>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d7e:	e022      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004d80:	2302      	movs	r3, #2
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d86:	e01e      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8e:	e01a      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004d90:	2308      	movs	r3, #8
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d96:	e016      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004d98:	2310      	movs	r3, #16
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9e:	e012      	b.n	8004dc6 <UART_SetConfig+0x2fe>
 8004da0:	cfff69f3 	.word	0xcfff69f3
 8004da4:	40008000 	.word	0x40008000
 8004da8:	40013800 	.word	0x40013800
 8004dac:	40021000 	.word	0x40021000
 8004db0:	40004400 	.word	0x40004400
 8004db4:	40004800 	.word	0x40004800
 8004db8:	40004c00 	.word	0x40004c00
 8004dbc:	40005000 	.word	0x40005000
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4aae      	ldr	r2, [pc, #696]	; (8005084 <UART_SetConfig+0x5bc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	f040 8097 	bne.w	8004f00 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d823      	bhi.n	8004e22 <UART_SetConfig+0x35a>
 8004dda:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <UART_SetConfig+0x318>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004e23 	.word	0x08004e23
 8004de8:	08004e0d 	.word	0x08004e0d
 8004dec:	08004e23 	.word	0x08004e23
 8004df0:	08004e13 	.word	0x08004e13
 8004df4:	08004e23 	.word	0x08004e23
 8004df8:	08004e23 	.word	0x08004e23
 8004dfc:	08004e23 	.word	0x08004e23
 8004e00:	08004e1b 	.word	0x08004e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e04:	f7fd fe66 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8004e08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e0a:	e010      	b.n	8004e2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e0c:	4b9e      	ldr	r3, [pc, #632]	; (8005088 <UART_SetConfig+0x5c0>)
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e10:	e00d      	b.n	8004e2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e12:	f7fd fdc7 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e18:	e009      	b.n	8004e2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e20:	e005      	b.n	8004e2e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8130 	beq.w	8005096 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	4a94      	ldr	r2, [pc, #592]	; (800508c <UART_SetConfig+0x5c4>)
 8004e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e40:	461a      	mov	r2, r3
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4413      	add	r3, r2
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d305      	bcc.n	8004e66 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d903      	bls.n	8004e6e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e6c:	e113      	b.n	8005096 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	2200      	movs	r2, #0
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	60fa      	str	r2, [r7, #12]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	4a84      	ldr	r2, [pc, #528]	; (800508c <UART_SetConfig+0x5c4>)
 8004e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2200      	movs	r2, #0
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e90:	f7fb fa1e 	bl	80002d0 <__aeabi_uldivmod>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	020b      	lsls	r3, r1, #8
 8004ea6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004eaa:	0202      	lsls	r2, r0, #8
 8004eac:	6979      	ldr	r1, [r7, #20]
 8004eae:	6849      	ldr	r1, [r1, #4]
 8004eb0:	0849      	lsrs	r1, r1, #1
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	eb12 0804 	adds.w	r8, r2, r4
 8004ebc:	eb43 0905 	adc.w	r9, r3, r5
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	469a      	mov	sl, r3
 8004ec8:	4693      	mov	fp, r2
 8004eca:	4652      	mov	r2, sl
 8004ecc:	465b      	mov	r3, fp
 8004ece:	4640      	mov	r0, r8
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	f7fb f9fd 	bl	80002d0 <__aeabi_uldivmod>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4613      	mov	r3, r2
 8004edc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ee4:	d308      	bcc.n	8004ef8 <UART_SetConfig+0x430>
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eec:	d204      	bcs.n	8004ef8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6a3a      	ldr	r2, [r7, #32]
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	e0ce      	b.n	8005096 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004efe:	e0ca      	b.n	8005096 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	d166      	bne.n	8004fd8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d827      	bhi.n	8004f62 <UART_SetConfig+0x49a>
 8004f12:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <UART_SetConfig+0x450>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f3d 	.word	0x08004f3d
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f4d 	.word	0x08004f4d
 8004f24:	08004f63 	.word	0x08004f63
 8004f28:	08004f53 	.word	0x08004f53
 8004f2c:	08004f63 	.word	0x08004f63
 8004f30:	08004f63 	.word	0x08004f63
 8004f34:	08004f63 	.word	0x08004f63
 8004f38:	08004f5b 	.word	0x08004f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3c:	f7fd fdca 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8004f40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f42:	e014      	b.n	8004f6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f44:	f7fd fddc 	bl	8002b00 <HAL_RCC_GetPCLK2Freq>
 8004f48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f4a:	e010      	b.n	8004f6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4c:	4b4e      	ldr	r3, [pc, #312]	; (8005088 <UART_SetConfig+0x5c0>)
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f50:	e00d      	b.n	8004f6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f52:	f7fd fd27 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8004f56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f58:	e009      	b.n	8004f6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f60:	e005      	b.n	8004f6e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8090 	beq.w	8005096 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	4a44      	ldr	r2, [pc, #272]	; (800508c <UART_SetConfig+0x5c4>)
 8004f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f88:	005a      	lsls	r2, r3, #1
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	441a      	add	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	d916      	bls.n	8004fd0 <UART_SetConfig+0x508>
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa8:	d212      	bcs.n	8004fd0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f023 030f 	bic.w	r3, r3, #15
 8004fb2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	8bfb      	ldrh	r3, [r7, #30]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	8bfa      	ldrh	r2, [r7, #30]
 8004fcc:	60da      	str	r2, [r3, #12]
 8004fce:	e062      	b.n	8005096 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fd6:	e05e      	b.n	8005096 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d828      	bhi.n	8005032 <UART_SetConfig+0x56a>
 8004fe0:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <UART_SetConfig+0x520>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	0800500d 	.word	0x0800500d
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	08005033 	.word	0x08005033
 8004ff8:	08005023 	.word	0x08005023
 8004ffc:	08005033 	.word	0x08005033
 8005000:	08005033 	.word	0x08005033
 8005004:	08005033 	.word	0x08005033
 8005008:	0800502b 	.word	0x0800502b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800500c:	f7fd fd62 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8005010:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005012:	e014      	b.n	800503e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005014:	f7fd fd74 	bl	8002b00 <HAL_RCC_GetPCLK2Freq>
 8005018:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800501a:	e010      	b.n	800503e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800501c:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <UART_SetConfig+0x5c0>)
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005020:	e00d      	b.n	800503e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005022:	f7fd fcbf 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8005026:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005028:	e009      	b.n	800503e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800502a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005030:	e005      	b.n	800503e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800503c:	bf00      	nop
    }

    if (pclk != 0U)
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d028      	beq.n	8005096 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	4a10      	ldr	r2, [pc, #64]	; (800508c <UART_SetConfig+0x5c4>)
 800504a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800504e:	461a      	mov	r2, r3
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	fbb3 f2f2 	udiv	r2, r3, r2
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	441a      	add	r2, r3
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	2b0f      	cmp	r3, #15
 800506c:	d910      	bls.n	8005090 <UART_SetConfig+0x5c8>
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005074:	d20c      	bcs.n	8005090 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	b29a      	uxth	r2, r3
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60da      	str	r2, [r3, #12]
 8005080:	e009      	b.n	8005096 <UART_SetConfig+0x5ce>
 8005082:	bf00      	nop
 8005084:	40008000 	.word	0x40008000
 8005088:	00f42400 	.word	0x00f42400
 800508c:	0800dfa4 	.word	0x0800dfa4
      }
      else
      {
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2201      	movs	r2, #1
 800509a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2200      	movs	r2, #0
 80050b0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80050b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3730      	adds	r7, #48	; 0x30
 80050ba:	46bd      	mov	sp, r7
 80050bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01a      	beq.n	80051d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051be:	d10a      	bne.n	80051d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	605a      	str	r2, [r3, #4]
  }
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af02      	add	r7, sp, #8
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005214:	f7fb fa0a 	bl	800062c <HAL_GetTick>
 8005218:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b08      	cmp	r3, #8
 8005226:	d10e      	bne.n	8005246 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f82f 	bl	800529a <UART_WaitOnFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e025      	b.n	8005292 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b04      	cmp	r3, #4
 8005252:	d10e      	bne.n	8005272 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005254:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f819 	bl	800529a <UART_WaitOnFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e00f      	b.n	8005292 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b09c      	sub	sp, #112	; 0x70
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	4613      	mov	r3, r2
 80052a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052aa:	e0a9      	b.n	8005400 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	f000 80a5 	beq.w	8005400 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b6:	f7fb f9b9 	bl	800062c <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d302      	bcc.n	80052cc <UART_WaitOnFlagUntilTimeout+0x32>
 80052c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d140      	bne.n	800534e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052e0:	667b      	str	r3, [r7, #100]	; 0x64
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e6      	bne.n	80052cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3308      	adds	r3, #8
 8005304:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	663b      	str	r3, [r7, #96]	; 0x60
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3308      	adds	r3, #8
 800531c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800531e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005320:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800532c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e5      	bne.n	80052fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e069      	b.n	8005422 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d051      	beq.n	8005400 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800536a:	d149      	bne.n	8005400 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005374:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800538a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
 8005396:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800539a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e6      	bne.n	8005376 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	613b      	str	r3, [r7, #16]
   return(result);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f023 0301 	bic.w	r3, r3, #1
 80053be:	66bb      	str	r3, [r7, #104]	; 0x68
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3308      	adds	r3, #8
 80053c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053c8:	623a      	str	r2, [r7, #32]
 80053ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	69f9      	ldr	r1, [r7, #28]
 80053ce:	6a3a      	ldr	r2, [r7, #32]
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e5      	bne.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e010      	b.n	8005422 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4013      	ands	r3, r2
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	429a      	cmp	r2, r3
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	429a      	cmp	r2, r3
 800541c:	f43f af46 	beq.w	80052ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3770      	adds	r7, #112	; 0x70
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800542c:	b480      	push	{r7}
 800542e:	b0a3      	sub	sp, #140	; 0x8c
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	88fa      	ldrh	r2, [r7, #6]
 8005444:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	88fa      	ldrh	r2, [r7, #6]
 800544c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545e:	d10e      	bne.n	800547e <UART_Start_Receive_IT+0x52>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d105      	bne.n	8005474 <UART_Start_Receive_IT+0x48>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800546e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005472:	e02d      	b.n	80054d0 <UART_Start_Receive_IT+0xa4>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	22ff      	movs	r2, #255	; 0xff
 8005478:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800547c:	e028      	b.n	80054d0 <UART_Start_Receive_IT+0xa4>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10d      	bne.n	80054a2 <UART_Start_Receive_IT+0x76>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d104      	bne.n	8005498 <UART_Start_Receive_IT+0x6c>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	22ff      	movs	r2, #255	; 0xff
 8005492:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005496:	e01b      	b.n	80054d0 <UART_Start_Receive_IT+0xa4>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	227f      	movs	r2, #127	; 0x7f
 800549c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054a0:	e016      	b.n	80054d0 <UART_Start_Receive_IT+0xa4>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054aa:	d10d      	bne.n	80054c8 <UART_Start_Receive_IT+0x9c>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d104      	bne.n	80054be <UART_Start_Receive_IT+0x92>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	227f      	movs	r2, #127	; 0x7f
 80054b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054bc:	e008      	b.n	80054d0 <UART_Start_Receive_IT+0xa4>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	223f      	movs	r2, #63	; 0x3f
 80054c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054c6:	e003      	b.n	80054d0 <UART_Start_Receive_IT+0xa4>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2222      	movs	r2, #34	; 0x22
 80054dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3308      	adds	r3, #8
 80054e6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80054f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3308      	adds	r3, #8
 8005500:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005504:	673a      	str	r2, [r7, #112]	; 0x70
 8005506:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800550a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005512:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e3      	bne.n	80054e0 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800551c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005520:	d153      	bne.n	80055ca <UART_Start_Receive_IT+0x19e>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	429a      	cmp	r2, r3
 800552c:	d34d      	bcc.n	80055ca <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005536:	d107      	bne.n	8005548 <UART_Start_Receive_IT+0x11c>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d103      	bne.n	8005548 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4a4b      	ldr	r2, [pc, #300]	; (8005670 <UART_Start_Receive_IT+0x244>)
 8005544:	671a      	str	r2, [r3, #112]	; 0x70
 8005546:	e002      	b.n	800554e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4a4a      	ldr	r2, [pc, #296]	; (8005674 <UART_Start_Receive_IT+0x248>)
 800554c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01a      	beq.n	8005594 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800556c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005572:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005580:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005582:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005586:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800558e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e4      	bne.n	800555e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3308      	adds	r3, #8
 80055b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80055b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80055b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e5      	bne.n	8005594 <UART_Start_Receive_IT+0x168>
 80055c8:	e04a      	b.n	8005660 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	d107      	bne.n	80055e4 <UART_Start_Receive_IT+0x1b8>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d103      	bne.n	80055e4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4a26      	ldr	r2, [pc, #152]	; (8005678 <UART_Start_Receive_IT+0x24c>)
 80055e0:	671a      	str	r2, [r3, #112]	; 0x70
 80055e2:	e002      	b.n	80055ea <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a25      	ldr	r2, [pc, #148]	; (800567c <UART_Start_Receive_IT+0x250>)
 80055e8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d019      	beq.n	800562e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800560e:	677b      	str	r3, [r7, #116]	; 0x74
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005618:	637b      	str	r3, [r7, #52]	; 0x34
 800561a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800561e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e6      	bne.n	80055fa <UART_Start_Receive_IT+0x1ce>
 800562c:	e018      	b.n	8005660 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	613b      	str	r3, [r7, #16]
   return(result);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f043 0320 	orr.w	r3, r3, #32
 8005642:	67bb      	str	r3, [r7, #120]	; 0x78
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800564c:	623b      	str	r3, [r7, #32]
 800564e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	69f9      	ldr	r1, [r7, #28]
 8005652:	6a3a      	ldr	r2, [r7, #32]
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	61bb      	str	r3, [r7, #24]
   return(result);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e6      	bne.n	800562e <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	378c      	adds	r7, #140	; 0x8c
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	08005f4d 	.word	0x08005f4d
 8005674:	08005c51 	.word	0x08005c51
 8005678:	08005aeb 	.word	0x08005aeb
 800567c:	08005987 	.word	0x08005987

08005680 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b08f      	sub	sp, #60	; 0x3c
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	61fb      	str	r3, [r7, #28]
   return(result);
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e6      	bne.n	8005688 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80056d0:	633b      	str	r3, [r7, #48]	; 0x30
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3308      	adds	r3, #8
 80056d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056da:	61ba      	str	r2, [r7, #24]
 80056dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6979      	ldr	r1, [r7, #20]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	613b      	str	r3, [r7, #16]
   return(result);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80056f6:	bf00      	nop
 80056f8:	373c      	adds	r7, #60	; 0x3c
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005702:	b480      	push	{r7}
 8005704:	b095      	sub	sp, #84	; 0x54
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800571e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005728:	643b      	str	r3, [r7, #64]	; 0x40
 800572a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800572e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e6      	bne.n	800570a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3308      	adds	r3, #8
 8005742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	61fb      	str	r3, [r7, #28]
   return(result);
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	64bb      	str	r3, [r7, #72]	; 0x48
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3308      	adds	r3, #8
 800575e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005760:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e3      	bne.n	800573c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d118      	bne.n	80057ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	60bb      	str	r3, [r7, #8]
   return(result);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f023 0310 	bic.w	r3, r3, #16
 8005790:	647b      	str	r3, [r7, #68]	; 0x44
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6979      	ldr	r1, [r7, #20]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	613b      	str	r3, [r7, #16]
   return(result);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e6      	bne.n	800577c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	671a      	str	r2, [r3, #112]	; 0x70
}
 80057c2:	bf00      	nop
 80057c4:	3754      	adds	r7, #84	; 0x54
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b090      	sub	sp, #64	; 0x40
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d137      	bne.n	800585a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80057ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	623b      	str	r3, [r7, #32]
   return(result);
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005808:	63bb      	str	r3, [r7, #56]	; 0x38
 800580a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3308      	adds	r3, #8
 8005810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005812:	633a      	str	r2, [r7, #48]	; 0x30
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e5      	bne.n	80057f2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	60fb      	str	r3, [r7, #12]
   return(result);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800583a:	637b      	str	r3, [r7, #52]	; 0x34
 800583c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	69b9      	ldr	r1, [r7, #24]
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	617b      	str	r3, [r7, #20]
   return(result);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e6      	bne.n	8005826 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005858:	e002      	b.n	8005860 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800585a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800585c:	f7ff f90a 	bl	8004a74 <HAL_UART_TxCpltCallback>
}
 8005860:	bf00      	nop
 8005862:	3740      	adds	r7, #64	; 0x40
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff f906 	bl	8004a88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005898:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ac:	2b80      	cmp	r3, #128	; 0x80
 80058ae:	d109      	bne.n	80058c4 <UART_DMAError+0x40>
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b21      	cmp	r3, #33	; 0x21
 80058b4:	d106      	bne.n	80058c4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80058be:	6978      	ldr	r0, [r7, #20]
 80058c0:	f7ff fede 	bl	8005680 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d109      	bne.n	80058e6 <UART_DMAError+0x62>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b22      	cmp	r3, #34	; 0x22
 80058d6:	d106      	bne.n	80058e6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80058e0:	6978      	ldr	r0, [r7, #20]
 80058e2:	f7ff ff0e 	bl	8005702 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ec:	f043 0210 	orr.w	r2, r3, #16
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058f6:	6978      	ldr	r0, [r7, #20]
 80058f8:	f7ff f8d0 	bl	8004a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058fc:	bf00      	nop
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff f8ba 	bl	8004a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005928:	bf00      	nop
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	60bb      	str	r3, [r7, #8]
   return(result);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	61bb      	str	r3, [r7, #24]
 8005958:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6979      	ldr	r1, [r7, #20]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	613b      	str	r3, [r7, #16]
   return(result);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e6      	bne.n	8005938 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff f87b 	bl	8004a74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800597e:	bf00      	nop
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b096      	sub	sp, #88	; 0x58
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005994:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599e:	2b22      	cmp	r3, #34	; 0x22
 80059a0:	f040 8095 	bne.w	8005ace <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059ae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80059b2:	b2d9      	uxtb	r1, r3
 80059b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059be:	400a      	ands	r2, r1
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d17a      	bne.n	8005ae2 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a00:	653b      	str	r3, [r7, #80]	; 0x50
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e6      	bne.n	80059ec <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3308      	adds	r3, #8
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a3e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e5      	bne.n	8005a1e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d12e      	bne.n	8005ac6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0310 	bic.w	r3, r3, #16
 8005a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	69b9      	ldr	r1, [r7, #24]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	617b      	str	r3, [r7, #20]
   return(result);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e6      	bne.n	8005a6e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	2b10      	cmp	r3, #16
 8005aac:	d103      	bne.n	8005ab6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2210      	movs	r2, #16
 8005ab4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fe fff6 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ac4:	e00d      	b.n	8005ae2 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f002 fb4c 	bl	8008164 <HAL_UART_RxCpltCallback>
}
 8005acc:	e009      	b.n	8005ae2 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	8b1b      	ldrh	r3, [r3, #24]
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0208 	orr.w	r2, r2, #8
 8005ade:	b292      	uxth	r2, r2
 8005ae0:	831a      	strh	r2, [r3, #24]
}
 8005ae2:	bf00      	nop
 8005ae4:	3758      	adds	r7, #88	; 0x58
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b096      	sub	sp, #88	; 0x58
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005af8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b02:	2b22      	cmp	r3, #34	; 0x22
 8005b04:	f040 8095 	bne.w	8005c32 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b0e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b16:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b18:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005b1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b20:	4013      	ands	r3, r2
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b26:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2c:	1c9a      	adds	r2, r3, #2
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d17a      	bne.n	8005c46 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e6      	bne.n	8005b50 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e5      	bne.n	8005b82 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d12e      	bne.n	8005c2a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f023 0310 	bic.w	r3, r3, #16
 8005be6:	647b      	str	r3, [r7, #68]	; 0x44
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	461a      	mov	r2, r3
 8005bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	6979      	ldr	r1, [r7, #20]
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	e841 2300 	strex	r3, r2, [r1]
 8005bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e6      	bne.n	8005bd2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	d103      	bne.n	8005c1a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2210      	movs	r2, #16
 8005c18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fe ff44 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c28:	e00d      	b.n	8005c46 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f002 fa9a 	bl	8008164 <HAL_UART_RxCpltCallback>
}
 8005c30:	e009      	b.n	8005c46 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	8b1b      	ldrh	r3, [r3, #24]
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0208 	orr.w	r2, r2, #8
 8005c42:	b292      	uxth	r2, r2
 8005c44:	831a      	strh	r2, [r3, #24]
}
 8005c46:	bf00      	nop
 8005c48:	3758      	adds	r7, #88	; 0x58
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b0a6      	sub	sp, #152	; 0x98
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c5e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c86:	2b22      	cmp	r3, #34	; 0x22
 8005c88:	f040 814f 	bne.w	8005f2a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c92:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c96:	e0f6      	b.n	8005e86 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c9e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ca2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005ca6:	b2d9      	uxtb	r1, r3
 8005ca8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	400a      	ands	r2, r1
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d053      	beq.n	8005d92 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d011      	beq.n	8005d1a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2201      	movs	r2, #1
 8005d08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d10:	f043 0201 	orr.w	r2, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d011      	beq.n	8005d4a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005d26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2202      	movs	r2, #2
 8005d38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d40:	f043 0204 	orr.w	r2, r3, #4
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d011      	beq.n	8005d7a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2204      	movs	r2, #4
 8005d68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d70:	f043 0202 	orr.w	r2, r3, #2
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d006      	beq.n	8005d92 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fe fe89 	bl	8004a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d173      	bne.n	8005e86 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005db2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dc2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005dc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e4      	bne.n	8005d9e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3308      	adds	r3, #8
 8005df6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005df8:	657a      	str	r2, [r7, #84]	; 0x54
 8005dfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e3      	bne.n	8005dd4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d12e      	bne.n	8005e80 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	f023 0310 	bic.w	r3, r3, #16
 8005e3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e46:	643b      	str	r3, [r7, #64]	; 0x40
 8005e48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e6      	bne.n	8005e28 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d103      	bne.n	8005e70 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2210      	movs	r2, #16
 8005e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7fe fe19 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
 8005e7e:	e002      	b.n	8005e86 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f002 f96f 	bl	8008164 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d006      	beq.n	8005e9c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005e8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f47f aefe 	bne.w	8005c98 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ea2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005ea6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d047      	beq.n	8005f3e <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005eb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d240      	bcs.n	8005f3e <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005edc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e5      	bne.n	8005ebc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8005ef4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f043 0320 	orr.w	r3, r3, #32
 8005f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	461a      	mov	r2, r3
 8005f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	6979      	ldr	r1, [r7, #20]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	613b      	str	r3, [r7, #16]
   return(result);
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e6      	bne.n	8005ef6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f28:	e009      	b.n	8005f3e <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	8b1b      	ldrh	r3, [r3, #24]
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0208 	orr.w	r2, r2, #8
 8005f3a:	b292      	uxth	r2, r2
 8005f3c:	831a      	strh	r2, [r3, #24]
}
 8005f3e:	bf00      	nop
 8005f40:	3798      	adds	r7, #152	; 0x98
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	08005987 	.word	0x08005987

08005f4c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b0a8      	sub	sp, #160	; 0xa0
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005f5a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f82:	2b22      	cmp	r3, #34	; 0x22
 8005f84:	f040 8153 	bne.w	800622e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f8e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f92:	e0fa      	b.n	800618a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f9a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005fa6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005faa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005fae:	4013      	ands	r3, r2
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fbc:	1c9a      	adds	r2, r3, #2
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005fde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fe2:	f003 0307 	and.w	r3, r3, #7
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d053      	beq.n	8006092 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d011      	beq.n	800601a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005ff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2201      	movs	r2, #1
 8006008:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006010:	f043 0201 	orr.w	r2, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800601a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d011      	beq.n	800604a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00b      	beq.n	800604a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2202      	movs	r2, #2
 8006038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006040:	f043 0204 	orr.w	r2, r3, #4
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800604a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	d011      	beq.n	800607a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006056:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2204      	movs	r2, #4
 8006068:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006070:	f043 0202 	orr.w	r2, r3, #2
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006080:	2b00      	cmp	r3, #0
 8006082:	d006      	beq.n	8006092 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7fe fd09 	bl	8004a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d175      	bne.n	800618a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060a6:	e853 3f00 	ldrex	r3, [r3]
 80060aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060c2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e4      	bne.n	800609e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3308      	adds	r3, #8
 80060da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3308      	adds	r3, #8
 80060f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80060fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006102:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800610a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e1      	bne.n	80060d4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006122:	2b01      	cmp	r3, #1
 8006124:	d12e      	bne.n	8006184 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800613a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613c:	f023 0310 	bic.w	r3, r3, #16
 8006140:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800614a:	647b      	str	r3, [r7, #68]	; 0x44
 800614c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e6      	bne.n	800612c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b10      	cmp	r3, #16
 800616a:	d103      	bne.n	8006174 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2210      	movs	r2, #16
 8006172:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7fe fc97 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
 8006182:	e002      	b.n	800618a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f001 ffed 	bl	8008164 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800618a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800618e:	2b00      	cmp	r3, #0
 8006190:	d006      	beq.n	80061a0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8006192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	f47f aefa 	bne.w	8005f94 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061a6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80061aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d047      	beq.n	8006242 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80061b8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80061bc:	429a      	cmp	r2, r3
 80061be:	d240      	bcs.n	8006242 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3308      	adds	r3, #8
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	623b      	str	r3, [r7, #32]
   return(result);
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061d6:	677b      	str	r3, [r7, #116]	; 0x74
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3308      	adds	r3, #8
 80061de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80061e0:	633a      	str	r2, [r7, #48]	; 0x30
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e5      	bne.n	80061c0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a15      	ldr	r2, [pc, #84]	; (800624c <UART_RxISR_16BIT_FIFOEN+0x300>)
 80061f8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	60fb      	str	r3, [r7, #12]
   return(result);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f043 0320 	orr.w	r3, r3, #32
 800620e:	673b      	str	r3, [r7, #112]	; 0x70
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006218:	61fb      	str	r3, [r7, #28]
 800621a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	69b9      	ldr	r1, [r7, #24]
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	617b      	str	r3, [r7, #20]
   return(result);
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e6      	bne.n	80061fa <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800622c:	e009      	b.n	8006242 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	8b1b      	ldrh	r3, [r3, #24]
 8006234:	b29a      	uxth	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0208 	orr.w	r2, r2, #8
 800623e:	b292      	uxth	r2, r2
 8006240:	831a      	strh	r2, [r3, #24]
}
 8006242:	bf00      	nop
 8006244:	37a0      	adds	r7, #160	; 0xa0
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	08005aeb 	.word	0x08005aeb

08006250 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800629e:	2302      	movs	r3, #2
 80062a0:	e027      	b.n	80062f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2224      	movs	r2, #36	; 0x24
 80062ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0201 	bic.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006312:	2302      	movs	r3, #2
 8006314:	e02d      	b.n	8006372 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2224      	movs	r2, #36	; 0x24
 8006322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0201 	bic.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f850 	bl	80063f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2220      	movs	r2, #32
 8006364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800638a:	2b01      	cmp	r3, #1
 800638c:	d101      	bne.n	8006392 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800638e:	2302      	movs	r3, #2
 8006390:	e02d      	b.n	80063ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2224      	movs	r2, #36	; 0x24
 800639e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0201 	bic.w	r2, r2, #1
 80063b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f812 	bl	80063f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006404:	2b00      	cmp	r3, #0
 8006406:	d108      	bne.n	800641a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006418:	e031      	b.n	800647e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800641a:	2308      	movs	r3, #8
 800641c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800641e:	2308      	movs	r3, #8
 8006420:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	0e5b      	lsrs	r3, r3, #25
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	0f5b      	lsrs	r3, r3, #29
 800643a:	b2db      	uxtb	r3, r3
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	7b3a      	ldrb	r2, [r7, #12]
 8006446:	4911      	ldr	r1, [pc, #68]	; (800648c <UARTEx_SetNbDataToProcess+0x94>)
 8006448:	5c8a      	ldrb	r2, [r1, r2]
 800644a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800644e:	7b3a      	ldrb	r2, [r7, #12]
 8006450:	490f      	ldr	r1, [pc, #60]	; (8006490 <UARTEx_SetNbDataToProcess+0x98>)
 8006452:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006454:	fb93 f3f2 	sdiv	r3, r3, r2
 8006458:	b29a      	uxth	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	7b7a      	ldrb	r2, [r7, #13]
 8006464:	4909      	ldr	r1, [pc, #36]	; (800648c <UARTEx_SetNbDataToProcess+0x94>)
 8006466:	5c8a      	ldrb	r2, [r1, r2]
 8006468:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800646c:	7b7a      	ldrb	r2, [r7, #13]
 800646e:	4908      	ldr	r1, [pc, #32]	; (8006490 <UARTEx_SetNbDataToProcess+0x98>)
 8006470:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006472:	fb93 f3f2 	sdiv	r3, r3, r2
 8006476:	b29a      	uxth	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800647e:	bf00      	nop
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	0800dfbc 	.word	0x0800dfbc
 8006490:	0800dfc4 	.word	0x0800dfc4

08006494 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80064a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064a6:	2b84      	cmp	r3, #132	; 0x84
 80064a8:	d005      	beq.n	80064b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80064aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	3303      	adds	r3, #3
 80064b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80064b6:	68fb      	ldr	r3, [r7, #12]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80064c8:	f000 fade 	bl	8006a88 <vTaskStartScheduler>
  
  return osOK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80064d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064d4:	b089      	sub	sp, #36	; 0x24
 80064d6:	af04      	add	r7, sp, #16
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d020      	beq.n	8006526 <osThreadCreate+0x54>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01c      	beq.n	8006526 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685c      	ldr	r4, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681d      	ldr	r5, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691e      	ldr	r6, [r3, #16]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff ffc8 	bl	8006494 <makeFreeRtosPriority>
 8006504:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800650e:	9202      	str	r2, [sp, #8]
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	9100      	str	r1, [sp, #0]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	4632      	mov	r2, r6
 8006518:	4629      	mov	r1, r5
 800651a:	4620      	mov	r0, r4
 800651c:	f000 f8ed 	bl	80066fa <xTaskCreateStatic>
 8006520:	4603      	mov	r3, r0
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	e01c      	b.n	8006560 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685c      	ldr	r4, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006532:	b29e      	uxth	r6, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff ffaa 	bl	8006494 <makeFreeRtosPriority>
 8006540:	4602      	mov	r2, r0
 8006542:	f107 030c 	add.w	r3, r7, #12
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	9200      	str	r2, [sp, #0]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	4632      	mov	r2, r6
 800654e:	4629      	mov	r1, r5
 8006550:	4620      	mov	r0, r4
 8006552:	f000 f92f 	bl	80067b4 <xTaskCreate>
 8006556:	4603      	mov	r3, r0
 8006558:	2b01      	cmp	r3, #1
 800655a:	d001      	beq.n	8006560 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800655c:	2300      	movs	r3, #0
 800655e:	e000      	b.n	8006562 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006560:	68fb      	ldr	r3, [r7, #12]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800656a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b084      	sub	sp, #16
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <osDelay+0x16>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	e000      	b.n	8006582 <osDelay+0x18>
 8006580:	2301      	movs	r3, #1
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fa4c 	bl	8006a20 <vTaskDelay>
  
  return osOK;
 8006588:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f103 0208 	add.w	r2, r3, #8
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295
 80065aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f103 0208 	add.w	r2, r3, #8
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f103 0208 	add.w	r2, r3, #8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	601a      	str	r2, [r3, #0]
}
 8006628:	bf00      	nop
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d103      	bne.n	8006654 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e00c      	b.n	800666e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3308      	adds	r3, #8
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	e002      	b.n	8006662 <vListInsert+0x2e>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	429a      	cmp	r2, r3
 800666c:	d2f6      	bcs.n	800665c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	601a      	str	r2, [r3, #0]
}
 800669a:	bf00      	nop
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066a6:	b480      	push	{r7}
 80066a8:	b085      	sub	sp, #20
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6892      	ldr	r2, [r2, #8]
 80066bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6852      	ldr	r2, [r2, #4]
 80066c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d103      	bne.n	80066da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	1e5a      	subs	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b08e      	sub	sp, #56	; 0x38
 80066fe:	af04      	add	r7, sp, #16
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <xTaskCreateStatic+0x46>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	61fb      	str	r3, [r7, #28]
}
 800673c:	bf00      	nop
 800673e:	e7fe      	b.n	800673e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006740:	2354      	movs	r3, #84	; 0x54
 8006742:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b54      	cmp	r3, #84	; 0x54
 8006748:	d00a      	beq.n	8006760 <xTaskCreateStatic+0x66>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	61bb      	str	r3, [r7, #24]
}
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006760:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01e      	beq.n	80067a6 <xTaskCreateStatic+0xac>
 8006768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01b      	beq.n	80067a6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006776:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	2202      	movs	r2, #2
 800677c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006780:	2300      	movs	r3, #0
 8006782:	9303      	str	r3, [sp, #12]
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	9302      	str	r3, [sp, #8]
 8006788:	f107 0314 	add.w	r3, r7, #20
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 f850 	bl	800683e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800679e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067a0:	f000 f8d4 	bl	800694c <prvAddNewTaskToReadyList>
 80067a4:	e001      	b.n	80067aa <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067aa:	697b      	ldr	r3, [r7, #20]
	}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3728      	adds	r7, #40	; 0x28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08c      	sub	sp, #48	; 0x30
 80067b8:	af04      	add	r7, sp, #16
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	4613      	mov	r3, r2
 80067c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fec5 	bl	8007558 <pvPortMalloc>
 80067ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00e      	beq.n	80067f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067d6:	2054      	movs	r0, #84	; 0x54
 80067d8:	f000 febe 	bl	8007558 <pvPortMalloc>
 80067dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	631a      	str	r2, [r3, #48]	; 0x30
 80067ea:	e005      	b.n	80067f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067ec:	6978      	ldr	r0, [r7, #20]
 80067ee:	f000 ff7f 	bl	80076f0 <vPortFree>
 80067f2:	e001      	b.n	80067f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d017      	beq.n	800682e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006806:	88fa      	ldrh	r2, [r7, #6]
 8006808:	2300      	movs	r3, #0
 800680a:	9303      	str	r3, [sp, #12]
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	9302      	str	r3, [sp, #8]
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f80e 	bl	800683e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006822:	69f8      	ldr	r0, [r7, #28]
 8006824:	f000 f892 	bl	800694c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006828:	2301      	movs	r3, #1
 800682a:	61bb      	str	r3, [r7, #24]
 800682c:	e002      	b.n	8006834 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800682e:	f04f 33ff 	mov.w	r3, #4294967295
 8006832:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006834:	69bb      	ldr	r3, [r7, #24]
	}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b088      	sub	sp, #32
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
 800684a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006856:	3b01      	subs	r3, #1
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	f023 0307 	bic.w	r3, r3, #7
 8006864:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	617b      	str	r3, [r7, #20]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01f      	beq.n	80068cc <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800688c:	2300      	movs	r3, #0
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	e012      	b.n	80068b8 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	4413      	add	r3, r2
 8006898:	7819      	ldrb	r1, [r3, #0]
 800689a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	3334      	adds	r3, #52	; 0x34
 80068a2:	460a      	mov	r2, r1
 80068a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	4413      	add	r3, r2
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d006      	beq.n	80068c0 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	3301      	adds	r3, #1
 80068b6:	61fb      	str	r3, [r7, #28]
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	2b0f      	cmp	r3, #15
 80068bc:	d9e9      	bls.n	8006892 <prvInitialiseNewTask+0x54>
 80068be:	e000      	b.n	80068c2 <prvInitialiseNewTask+0x84>
			{
				break;
 80068c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068ca:	e003      	b.n	80068d4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	2b06      	cmp	r3, #6
 80068d8:	d901      	bls.n	80068de <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068da:	2306      	movs	r3, #6
 80068dc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	2200      	movs	r2, #0
 80068ee:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	3304      	adds	r3, #4
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fe6c 	bl	80065d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	3318      	adds	r3, #24
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff fe67 	bl	80065d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006908:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	f1c3 0207 	rsb	r2, r3, #7
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006918:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	2200      	movs	r2, #0
 800691e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	69b8      	ldr	r0, [r7, #24]
 800692e:	f000 fc05 	bl	800713c <pxPortInitialiseStack>
 8006932:	4602      	mov	r2, r0
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006942:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006944:	bf00      	nop
 8006946:	3720      	adds	r7, #32
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006954:	f000 fd1e 	bl	8007394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006958:	4b2a      	ldr	r3, [pc, #168]	; (8006a04 <prvAddNewTaskToReadyList+0xb8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	4a29      	ldr	r2, [pc, #164]	; (8006a04 <prvAddNewTaskToReadyList+0xb8>)
 8006960:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006962:	4b29      	ldr	r3, [pc, #164]	; (8006a08 <prvAddNewTaskToReadyList+0xbc>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d109      	bne.n	800697e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800696a:	4a27      	ldr	r2, [pc, #156]	; (8006a08 <prvAddNewTaskToReadyList+0xbc>)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006970:	4b24      	ldr	r3, [pc, #144]	; (8006a04 <prvAddNewTaskToReadyList+0xb8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d110      	bne.n	800699a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006978:	f000 fabc 	bl	8006ef4 <prvInitialiseTaskLists>
 800697c:	e00d      	b.n	800699a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800697e:	4b23      	ldr	r3, [pc, #140]	; (8006a0c <prvAddNewTaskToReadyList+0xc0>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006986:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <prvAddNewTaskToReadyList+0xbc>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	429a      	cmp	r2, r3
 8006992:	d802      	bhi.n	800699a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006994:	4a1c      	ldr	r2, [pc, #112]	; (8006a08 <prvAddNewTaskToReadyList+0xbc>)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800699a:	4b1d      	ldr	r3, [pc, #116]	; (8006a10 <prvAddNewTaskToReadyList+0xc4>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3301      	adds	r3, #1
 80069a0:	4a1b      	ldr	r2, [pc, #108]	; (8006a10 <prvAddNewTaskToReadyList+0xc4>)
 80069a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	2201      	movs	r2, #1
 80069aa:	409a      	lsls	r2, r3
 80069ac:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <prvAddNewTaskToReadyList+0xc8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <prvAddNewTaskToReadyList+0xc8>)
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ba:	4613      	mov	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4a15      	ldr	r2, [pc, #84]	; (8006a18 <prvAddNewTaskToReadyList+0xcc>)
 80069c4:	441a      	add	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3304      	adds	r3, #4
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f7ff fe0d 	bl	80065ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069d2:	f000 fd0f 	bl	80073f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069d6:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <prvAddNewTaskToReadyList+0xc0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00e      	beq.n	80069fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069de:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <prvAddNewTaskToReadyList+0xbc>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d207      	bcs.n	80069fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069ec:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <prvAddNewTaskToReadyList+0xd0>)
 80069ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	200004ec 	.word	0x200004ec
 8006a08:	200003ec 	.word	0x200003ec
 8006a0c:	200004f8 	.word	0x200004f8
 8006a10:	20000508 	.word	0x20000508
 8006a14:	200004f4 	.word	0x200004f4
 8006a18:	200003f0 	.word	0x200003f0
 8006a1c:	e000ed04 	.word	0xe000ed04

08006a20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d017      	beq.n	8006a62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a32:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <vTaskDelay+0x60>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <vTaskDelay+0x30>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	60bb      	str	r3, [r7, #8]
}
 8006a4c:	bf00      	nop
 8006a4e:	e7fe      	b.n	8006a4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a50:	f000 f87a 	bl	8006b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a54:	2100      	movs	r1, #0
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fb0a 	bl	8007070 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a5c:	f000 f882 	bl	8006b64 <xTaskResumeAll>
 8006a60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d107      	bne.n	8006a78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <vTaskDelay+0x64>)
 8006a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	20000514 	.word	0x20000514
 8006a84:	e000ed04 	.word	0xe000ed04

08006a88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08a      	sub	sp, #40	; 0x28
 8006a8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a96:	463a      	mov	r2, r7
 8006a98:	1d39      	adds	r1, r7, #4
 8006a9a:	f107 0308 	add.w	r3, r7, #8
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f001 f816 	bl	8007ad0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	9202      	str	r2, [sp, #8]
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	460a      	mov	r2, r1
 8006ab6:	491e      	ldr	r1, [pc, #120]	; (8006b30 <vTaskStartScheduler+0xa8>)
 8006ab8:	481e      	ldr	r0, [pc, #120]	; (8006b34 <vTaskStartScheduler+0xac>)
 8006aba:	f7ff fe1e 	bl	80066fa <xTaskCreateStatic>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	4a1d      	ldr	r2, [pc, #116]	; (8006b38 <vTaskStartScheduler+0xb0>)
 8006ac2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ac4:	4b1c      	ldr	r3, [pc, #112]	; (8006b38 <vTaskStartScheduler+0xb0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006acc:	2301      	movs	r3, #1
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	e001      	b.n	8006ad6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d116      	bne.n	8006b0a <vTaskStartScheduler+0x82>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	613b      	str	r3, [r7, #16]
}
 8006aee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006af0:	4b12      	ldr	r3, [pc, #72]	; (8006b3c <vTaskStartScheduler+0xb4>)
 8006af2:	f04f 32ff 	mov.w	r2, #4294967295
 8006af6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006af8:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <vTaskStartScheduler+0xb8>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006afe:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <vTaskStartScheduler+0xbc>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b04:	f000 fba4 	bl	8007250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b08:	e00e      	b.n	8006b28 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b10:	d10a      	bne.n	8006b28 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	60fb      	str	r3, [r7, #12]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <vTaskStartScheduler+0x9e>
}
 8006b28:	bf00      	nop
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	0800de14 	.word	0x0800de14
 8006b34:	08006ec5 	.word	0x08006ec5
 8006b38:	20000510 	.word	0x20000510
 8006b3c:	2000050c 	.word	0x2000050c
 8006b40:	200004f8 	.word	0x200004f8
 8006b44:	200004f0 	.word	0x200004f0

08006b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b4c:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <vTaskSuspendAll+0x18>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3301      	adds	r3, #1
 8006b52:	4a03      	ldr	r2, [pc, #12]	; (8006b60 <vTaskSuspendAll+0x18>)
 8006b54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b56:	bf00      	nop
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	20000514 	.word	0x20000514

08006b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b72:	4b41      	ldr	r3, [pc, #260]	; (8006c78 <xTaskResumeAll+0x114>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	603b      	str	r3, [r7, #0]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b90:	f000 fc00 	bl	8007394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b94:	4b38      	ldr	r3, [pc, #224]	; (8006c78 <xTaskResumeAll+0x114>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	4a37      	ldr	r2, [pc, #220]	; (8006c78 <xTaskResumeAll+0x114>)
 8006b9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b9e:	4b36      	ldr	r3, [pc, #216]	; (8006c78 <xTaskResumeAll+0x114>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d161      	bne.n	8006c6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ba6:	4b35      	ldr	r3, [pc, #212]	; (8006c7c <xTaskResumeAll+0x118>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d05d      	beq.n	8006c6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bae:	e02e      	b.n	8006c0e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bb0:	4b33      	ldr	r3, [pc, #204]	; (8006c80 <xTaskResumeAll+0x11c>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3318      	adds	r3, #24
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff fd72 	bl	80066a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fd6d 	bl	80066a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	4b2b      	ldr	r3, [pc, #172]	; (8006c84 <xTaskResumeAll+0x120>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <xTaskResumeAll+0x120>)
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4a27      	ldr	r2, [pc, #156]	; (8006c88 <xTaskResumeAll+0x124>)
 8006bec:	441a      	add	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f7ff fcf9 	bl	80065ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfe:	4b23      	ldr	r3, [pc, #140]	; (8006c8c <xTaskResumeAll+0x128>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d302      	bcc.n	8006c0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006c08:	4b21      	ldr	r3, [pc, #132]	; (8006c90 <xTaskResumeAll+0x12c>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c0e:	4b1c      	ldr	r3, [pc, #112]	; (8006c80 <xTaskResumeAll+0x11c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1cc      	bne.n	8006bb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c1c:	f000 fa08 	bl	8007030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c20:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <xTaskResumeAll+0x130>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d010      	beq.n	8006c4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c2c:	f000 f836 	bl	8006c9c <xTaskIncrementTick>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006c36:	4b16      	ldr	r3, [pc, #88]	; (8006c90 <xTaskResumeAll+0x12c>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1f1      	bne.n	8006c2c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006c48:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <xTaskResumeAll+0x130>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c4e:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <xTaskResumeAll+0x12c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d009      	beq.n	8006c6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c56:	2301      	movs	r3, #1
 8006c58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c5a:	4b0f      	ldr	r3, [pc, #60]	; (8006c98 <xTaskResumeAll+0x134>)
 8006c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c60:	601a      	str	r2, [r3, #0]
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c6a:	f000 fbc3 	bl	80073f4 <vPortExitCritical>

	return xAlreadyYielded;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20000514 	.word	0x20000514
 8006c7c:	200004ec 	.word	0x200004ec
 8006c80:	200004ac 	.word	0x200004ac
 8006c84:	200004f4 	.word	0x200004f4
 8006c88:	200003f0 	.word	0x200003f0
 8006c8c:	200003ec 	.word	0x200003ec
 8006c90:	20000500 	.word	0x20000500
 8006c94:	200004fc 	.word	0x200004fc
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ca6:	4b4e      	ldr	r3, [pc, #312]	; (8006de0 <xTaskIncrementTick+0x144>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f040 808e 	bne.w	8006dcc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cb0:	4b4c      	ldr	r3, [pc, #304]	; (8006de4 <xTaskIncrementTick+0x148>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006cb8:	4a4a      	ldr	r2, [pc, #296]	; (8006de4 <xTaskIncrementTick+0x148>)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d120      	bne.n	8006d06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cc4:	4b48      	ldr	r3, [pc, #288]	; (8006de8 <xTaskIncrementTick+0x14c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	603b      	str	r3, [r7, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <xTaskIncrementTick+0x46>
 8006ce4:	4b40      	ldr	r3, [pc, #256]	; (8006de8 <xTaskIncrementTick+0x14c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	4b40      	ldr	r3, [pc, #256]	; (8006dec <xTaskIncrementTick+0x150>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a3e      	ldr	r2, [pc, #248]	; (8006de8 <xTaskIncrementTick+0x14c>)
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	4a3e      	ldr	r2, [pc, #248]	; (8006dec <xTaskIncrementTick+0x150>)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	4b3d      	ldr	r3, [pc, #244]	; (8006df0 <xTaskIncrementTick+0x154>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	4a3c      	ldr	r2, [pc, #240]	; (8006df0 <xTaskIncrementTick+0x154>)
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	f000 f995 	bl	8007030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d06:	4b3b      	ldr	r3, [pc, #236]	; (8006df4 <xTaskIncrementTick+0x158>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d348      	bcc.n	8006da2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d10:	4b35      	ldr	r3, [pc, #212]	; (8006de8 <xTaskIncrementTick+0x14c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d104      	bne.n	8006d24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d1a:	4b36      	ldr	r3, [pc, #216]	; (8006df4 <xTaskIncrementTick+0x158>)
 8006d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d20:	601a      	str	r2, [r3, #0]
					break;
 8006d22:	e03e      	b.n	8006da2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d24:	4b30      	ldr	r3, [pc, #192]	; (8006de8 <xTaskIncrementTick+0x14c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d203      	bcs.n	8006d44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d3c:	4a2d      	ldr	r2, [pc, #180]	; (8006df4 <xTaskIncrementTick+0x158>)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d42:	e02e      	b.n	8006da2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	3304      	adds	r3, #4
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff fcac 	bl	80066a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d004      	beq.n	8006d60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	3318      	adds	r3, #24
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff fca3 	bl	80066a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	2201      	movs	r2, #1
 8006d66:	409a      	lsls	r2, r3
 8006d68:	4b23      	ldr	r3, [pc, #140]	; (8006df8 <xTaskIncrementTick+0x15c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	4a22      	ldr	r2, [pc, #136]	; (8006df8 <xTaskIncrementTick+0x15c>)
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4a1f      	ldr	r2, [pc, #124]	; (8006dfc <xTaskIncrementTick+0x160>)
 8006d80:	441a      	add	r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	3304      	adds	r3, #4
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f7ff fc2f 	bl	80065ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d92:	4b1b      	ldr	r3, [pc, #108]	; (8006e00 <xTaskIncrementTick+0x164>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d3b9      	bcc.n	8006d10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da0:	e7b6      	b.n	8006d10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006da2:	4b17      	ldr	r3, [pc, #92]	; (8006e00 <xTaskIncrementTick+0x164>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da8:	4914      	ldr	r1, [pc, #80]	; (8006dfc <xTaskIncrementTick+0x160>)
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	440b      	add	r3, r1
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d901      	bls.n	8006dbe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006dbe:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <xTaskIncrementTick+0x168>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d007      	beq.n	8006dd6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	e004      	b.n	8006dd6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <xTaskIncrementTick+0x16c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	4a0d      	ldr	r2, [pc, #52]	; (8006e08 <xTaskIncrementTick+0x16c>)
 8006dd4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dd6:	697b      	ldr	r3, [r7, #20]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20000514 	.word	0x20000514
 8006de4:	200004f0 	.word	0x200004f0
 8006de8:	200004a4 	.word	0x200004a4
 8006dec:	200004a8 	.word	0x200004a8
 8006df0:	20000504 	.word	0x20000504
 8006df4:	2000050c 	.word	0x2000050c
 8006df8:	200004f4 	.word	0x200004f4
 8006dfc:	200003f0 	.word	0x200003f0
 8006e00:	200003ec 	.word	0x200003ec
 8006e04:	20000500 	.word	0x20000500
 8006e08:	200004fc 	.word	0x200004fc

08006e0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e12:	4b27      	ldr	r3, [pc, #156]	; (8006eb0 <vTaskSwitchContext+0xa4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e1a:	4b26      	ldr	r3, [pc, #152]	; (8006eb4 <vTaskSwitchContext+0xa8>)
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e20:	e03f      	b.n	8006ea2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006e22:	4b24      	ldr	r3, [pc, #144]	; (8006eb4 <vTaskSwitchContext+0xa8>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e28:	4b23      	ldr	r3, [pc, #140]	; (8006eb8 <vTaskSwitchContext+0xac>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	fab3 f383 	clz	r3, r3
 8006e34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e36:	7afb      	ldrb	r3, [r7, #11]
 8006e38:	f1c3 031f 	rsb	r3, r3, #31
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	491f      	ldr	r1, [pc, #124]	; (8006ebc <vTaskSwitchContext+0xb0>)
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	440b      	add	r3, r1
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	607b      	str	r3, [r7, #4]
}
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <vTaskSwitchContext+0x5a>
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4a12      	ldr	r2, [pc, #72]	; (8006ebc <vTaskSwitchContext+0xb0>)
 8006e74:	4413      	add	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	605a      	str	r2, [r3, #4]
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	3308      	adds	r3, #8
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d104      	bne.n	8006e98 <vTaskSwitchContext+0x8c>
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	605a      	str	r2, [r3, #4]
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	4a08      	ldr	r2, [pc, #32]	; (8006ec0 <vTaskSwitchContext+0xb4>)
 8006ea0:	6013      	str	r3, [r2, #0]
}
 8006ea2:	bf00      	nop
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20000514 	.word	0x20000514
 8006eb4:	20000500 	.word	0x20000500
 8006eb8:	200004f4 	.word	0x200004f4
 8006ebc:	200003f0 	.word	0x200003f0
 8006ec0:	200003ec 	.word	0x200003ec

08006ec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ecc:	f000 f852 	bl	8006f74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <prvIdleTask+0x28>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d9f9      	bls.n	8006ecc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ed8:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <prvIdleTask+0x2c>)
 8006eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ee8:	e7f0      	b.n	8006ecc <prvIdleTask+0x8>
 8006eea:	bf00      	nop
 8006eec:	200003f0 	.word	0x200003f0
 8006ef0:	e000ed04 	.word	0xe000ed04

08006ef4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006efa:	2300      	movs	r3, #0
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	e00c      	b.n	8006f1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4a12      	ldr	r2, [pc, #72]	; (8006f54 <prvInitialiseTaskLists+0x60>)
 8006f0c:	4413      	add	r3, r2
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7ff fb3f 	bl	8006592 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3301      	adds	r3, #1
 8006f18:	607b      	str	r3, [r7, #4]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b06      	cmp	r3, #6
 8006f1e:	d9ef      	bls.n	8006f00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f20:	480d      	ldr	r0, [pc, #52]	; (8006f58 <prvInitialiseTaskLists+0x64>)
 8006f22:	f7ff fb36 	bl	8006592 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f26:	480d      	ldr	r0, [pc, #52]	; (8006f5c <prvInitialiseTaskLists+0x68>)
 8006f28:	f7ff fb33 	bl	8006592 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f2c:	480c      	ldr	r0, [pc, #48]	; (8006f60 <prvInitialiseTaskLists+0x6c>)
 8006f2e:	f7ff fb30 	bl	8006592 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f32:	480c      	ldr	r0, [pc, #48]	; (8006f64 <prvInitialiseTaskLists+0x70>)
 8006f34:	f7ff fb2d 	bl	8006592 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f38:	480b      	ldr	r0, [pc, #44]	; (8006f68 <prvInitialiseTaskLists+0x74>)
 8006f3a:	f7ff fb2a 	bl	8006592 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f3e:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <prvInitialiseTaskLists+0x78>)
 8006f40:	4a05      	ldr	r2, [pc, #20]	; (8006f58 <prvInitialiseTaskLists+0x64>)
 8006f42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f44:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <prvInitialiseTaskLists+0x7c>)
 8006f46:	4a05      	ldr	r2, [pc, #20]	; (8006f5c <prvInitialiseTaskLists+0x68>)
 8006f48:	601a      	str	r2, [r3, #0]
}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	200003f0 	.word	0x200003f0
 8006f58:	2000047c 	.word	0x2000047c
 8006f5c:	20000490 	.word	0x20000490
 8006f60:	200004ac 	.word	0x200004ac
 8006f64:	200004c0 	.word	0x200004c0
 8006f68:	200004d8 	.word	0x200004d8
 8006f6c:	200004a4 	.word	0x200004a4
 8006f70:	200004a8 	.word	0x200004a8

08006f74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f7a:	e019      	b.n	8006fb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f7c:	f000 fa0a 	bl	8007394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f80:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <prvCheckTasksWaitingTermination+0x50>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff fb8a 	bl	80066a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <prvCheckTasksWaitingTermination+0x54>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	4a0b      	ldr	r2, [pc, #44]	; (8006fc8 <prvCheckTasksWaitingTermination+0x54>)
 8006f9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <prvCheckTasksWaitingTermination+0x58>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <prvCheckTasksWaitingTermination+0x58>)
 8006fa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fa6:	f000 fa25 	bl	80073f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f810 	bl	8006fd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fb0:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <prvCheckTasksWaitingTermination+0x58>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e1      	bne.n	8006f7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	200004c0 	.word	0x200004c0
 8006fc8:	200004ec 	.word	0x200004ec
 8006fcc:	200004d4 	.word	0x200004d4

08006fd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d108      	bne.n	8006ff4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 fb82 	bl	80076f0 <vPortFree>
				vPortFree( pxTCB );
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fb7f 	bl	80076f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ff2:	e018      	b.n	8007026 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d103      	bne.n	8007006 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fb76 	bl	80076f0 <vPortFree>
	}
 8007004:	e00f      	b.n	8007026 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800700c:	2b02      	cmp	r3, #2
 800700e:	d00a      	beq.n	8007026 <prvDeleteTCB+0x56>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60fb      	str	r3, [r7, #12]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <prvDeleteTCB+0x54>
	}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007036:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <prvResetNextTaskUnblockTime+0x38>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007040:	4b0a      	ldr	r3, [pc, #40]	; (800706c <prvResetNextTaskUnblockTime+0x3c>)
 8007042:	f04f 32ff 	mov.w	r2, #4294967295
 8007046:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007048:	e008      	b.n	800705c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800704a:	4b07      	ldr	r3, [pc, #28]	; (8007068 <prvResetNextTaskUnblockTime+0x38>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	4a04      	ldr	r2, [pc, #16]	; (800706c <prvResetNextTaskUnblockTime+0x3c>)
 800705a:	6013      	str	r3, [r2, #0]
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	200004a4 	.word	0x200004a4
 800706c:	2000050c 	.word	0x2000050c

08007070 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800707a:	4b29      	ldr	r3, [pc, #164]	; (8007120 <prvAddCurrentTaskToDelayedList+0xb0>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007080:	4b28      	ldr	r3, [pc, #160]	; (8007124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3304      	adds	r3, #4
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff fb0d 	bl	80066a6 <uxListRemove>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007092:	4b24      	ldr	r3, [pc, #144]	; (8007124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	2201      	movs	r2, #1
 800709a:	fa02 f303 	lsl.w	r3, r2, r3
 800709e:	43da      	mvns	r2, r3
 80070a0:	4b21      	ldr	r3, [pc, #132]	; (8007128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4013      	ands	r3, r2
 80070a6:	4a20      	ldr	r2, [pc, #128]	; (8007128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d10a      	bne.n	80070c8 <prvAddCurrentTaskToDelayedList+0x58>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d007      	beq.n	80070c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070b8:	4b1a      	ldr	r3, [pc, #104]	; (8007124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3304      	adds	r3, #4
 80070be:	4619      	mov	r1, r3
 80070c0:	481a      	ldr	r0, [pc, #104]	; (800712c <prvAddCurrentTaskToDelayedList+0xbc>)
 80070c2:	f7ff fa93 	bl	80065ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070c6:	e026      	b.n	8007116 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070d0:	4b14      	ldr	r3, [pc, #80]	; (8007124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d209      	bcs.n	80070f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070e0:	4b13      	ldr	r3, [pc, #76]	; (8007130 <prvAddCurrentTaskToDelayedList+0xc0>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	4b0f      	ldr	r3, [pc, #60]	; (8007124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3304      	adds	r3, #4
 80070ea:	4619      	mov	r1, r3
 80070ec:	4610      	mov	r0, r2
 80070ee:	f7ff faa1 	bl	8006634 <vListInsert>
}
 80070f2:	e010      	b.n	8007116 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070f4:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <prvAddCurrentTaskToDelayedList+0xc4>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3304      	adds	r3, #4
 80070fe:	4619      	mov	r1, r3
 8007100:	4610      	mov	r0, r2
 8007102:	f7ff fa97 	bl	8006634 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007106:	4b0c      	ldr	r3, [pc, #48]	; (8007138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	429a      	cmp	r2, r3
 800710e:	d202      	bcs.n	8007116 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007110:	4a09      	ldr	r2, [pc, #36]	; (8007138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	6013      	str	r3, [r2, #0]
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	200004f0 	.word	0x200004f0
 8007124:	200003ec 	.word	0x200003ec
 8007128:	200004f4 	.word	0x200004f4
 800712c:	200004d8 	.word	0x200004d8
 8007130:	200004a8 	.word	0x200004a8
 8007134:	200004a4 	.word	0x200004a4
 8007138:	2000050c 	.word	0x2000050c

0800713c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3b04      	subs	r3, #4
 800714c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3b04      	subs	r3, #4
 800715a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f023 0201 	bic.w	r2, r3, #1
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3b04      	subs	r3, #4
 800716a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800716c:	4a0c      	ldr	r2, [pc, #48]	; (80071a0 <pxPortInitialiseStack+0x64>)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3b14      	subs	r3, #20
 8007176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3b04      	subs	r3, #4
 8007182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f06f 0202 	mvn.w	r2, #2
 800718a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3b20      	subs	r3, #32
 8007190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007192:	68fb      	ldr	r3, [r7, #12]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	080071a5 	.word	0x080071a5

080071a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071ae:	4b12      	ldr	r3, [pc, #72]	; (80071f8 <prvTaskExitError+0x54>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b6:	d00a      	beq.n	80071ce <prvTaskExitError+0x2a>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	60fb      	str	r3, [r7, #12]
}
 80071ca:	bf00      	nop
 80071cc:	e7fe      	b.n	80071cc <prvTaskExitError+0x28>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	60bb      	str	r3, [r7, #8]
}
 80071e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071e2:	bf00      	nop
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0fc      	beq.n	80071e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	20000008 	.word	0x20000008
 80071fc:	00000000 	.word	0x00000000

08007200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007200:	4b07      	ldr	r3, [pc, #28]	; (8007220 <pxCurrentTCBConst2>)
 8007202:	6819      	ldr	r1, [r3, #0]
 8007204:	6808      	ldr	r0, [r1, #0]
 8007206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720a:	f380 8809 	msr	PSP, r0
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f04f 0000 	mov.w	r0, #0
 8007216:	f380 8811 	msr	BASEPRI, r0
 800721a:	4770      	bx	lr
 800721c:	f3af 8000 	nop.w

08007220 <pxCurrentTCBConst2>:
 8007220:	200003ec 	.word	0x200003ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop

08007228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007228:	4808      	ldr	r0, [pc, #32]	; (800724c <prvPortStartFirstTask+0x24>)
 800722a:	6800      	ldr	r0, [r0, #0]
 800722c:	6800      	ldr	r0, [r0, #0]
 800722e:	f380 8808 	msr	MSP, r0
 8007232:	f04f 0000 	mov.w	r0, #0
 8007236:	f380 8814 	msr	CONTROL, r0
 800723a:	b662      	cpsie	i
 800723c:	b661      	cpsie	f
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	df00      	svc	0
 8007248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800724a:	bf00      	nop
 800724c:	e000ed08 	.word	0xe000ed08

08007250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007256:	4b46      	ldr	r3, [pc, #280]	; (8007370 <xPortStartScheduler+0x120>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a46      	ldr	r2, [pc, #280]	; (8007374 <xPortStartScheduler+0x124>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d10a      	bne.n	8007276 <xPortStartScheduler+0x26>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	613b      	str	r3, [r7, #16]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007276:	4b3e      	ldr	r3, [pc, #248]	; (8007370 <xPortStartScheduler+0x120>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a3f      	ldr	r2, [pc, #252]	; (8007378 <xPortStartScheduler+0x128>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d10a      	bne.n	8007296 <xPortStartScheduler+0x46>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	60fb      	str	r3, [r7, #12]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007296:	4b39      	ldr	r3, [pc, #228]	; (800737c <xPortStartScheduler+0x12c>)
 8007298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	22ff      	movs	r2, #255	; 0xff
 80072a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	4b31      	ldr	r3, [pc, #196]	; (8007380 <xPortStartScheduler+0x130>)
 80072bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072be:	4b31      	ldr	r3, [pc, #196]	; (8007384 <xPortStartScheduler+0x134>)
 80072c0:	2207      	movs	r2, #7
 80072c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072c4:	e009      	b.n	80072da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80072c6:	4b2f      	ldr	r3, [pc, #188]	; (8007384 <xPortStartScheduler+0x134>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	4a2d      	ldr	r2, [pc, #180]	; (8007384 <xPortStartScheduler+0x134>)
 80072ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e2:	2b80      	cmp	r3, #128	; 0x80
 80072e4:	d0ef      	beq.n	80072c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072e6:	4b27      	ldr	r3, [pc, #156]	; (8007384 <xPortStartScheduler+0x134>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f1c3 0307 	rsb	r3, r3, #7
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d00a      	beq.n	8007308 <xPortStartScheduler+0xb8>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	60bb      	str	r3, [r7, #8]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007308:	4b1e      	ldr	r3, [pc, #120]	; (8007384 <xPortStartScheduler+0x134>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	4a1d      	ldr	r2, [pc, #116]	; (8007384 <xPortStartScheduler+0x134>)
 8007310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007312:	4b1c      	ldr	r3, [pc, #112]	; (8007384 <xPortStartScheduler+0x134>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800731a:	4a1a      	ldr	r2, [pc, #104]	; (8007384 <xPortStartScheduler+0x134>)
 800731c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	b2da      	uxtb	r2, r3
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007326:	4b18      	ldr	r3, [pc, #96]	; (8007388 <xPortStartScheduler+0x138>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a17      	ldr	r2, [pc, #92]	; (8007388 <xPortStartScheduler+0x138>)
 800732c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <xPortStartScheduler+0x138>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a14      	ldr	r2, [pc, #80]	; (8007388 <xPortStartScheduler+0x138>)
 8007338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800733c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800733e:	f000 f8dd 	bl	80074fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007342:	4b12      	ldr	r3, [pc, #72]	; (800738c <xPortStartScheduler+0x13c>)
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007348:	f000 f8fc 	bl	8007544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800734c:	4b10      	ldr	r3, [pc, #64]	; (8007390 <xPortStartScheduler+0x140>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0f      	ldr	r2, [pc, #60]	; (8007390 <xPortStartScheduler+0x140>)
 8007352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007358:	f7ff ff66 	bl	8007228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800735c:	f7ff fd56 	bl	8006e0c <vTaskSwitchContext>
	prvTaskExitError();
 8007360:	f7ff ff20 	bl	80071a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	e000ed00 	.word	0xe000ed00
 8007374:	410fc271 	.word	0x410fc271
 8007378:	410fc270 	.word	0x410fc270
 800737c:	e000e400 	.word	0xe000e400
 8007380:	20000518 	.word	0x20000518
 8007384:	2000051c 	.word	0x2000051c
 8007388:	e000ed20 	.word	0xe000ed20
 800738c:	20000008 	.word	0x20000008
 8007390:	e000ef34 	.word	0xe000ef34

08007394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	607b      	str	r3, [r7, #4]
}
 80073ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073ae:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <vPortEnterCritical+0x58>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	4a0d      	ldr	r2, [pc, #52]	; (80073ec <vPortEnterCritical+0x58>)
 80073b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <vPortEnterCritical+0x58>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d10f      	bne.n	80073e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <vPortEnterCritical+0x5c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	603b      	str	r3, [r7, #0]
}
 80073dc:	bf00      	nop
 80073de:	e7fe      	b.n	80073de <vPortEnterCritical+0x4a>
	}
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	20000008 	.word	0x20000008
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073fa:	4b12      	ldr	r3, [pc, #72]	; (8007444 <vPortExitCritical+0x50>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <vPortExitCritical+0x24>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	607b      	str	r3, [r7, #4]
}
 8007414:	bf00      	nop
 8007416:	e7fe      	b.n	8007416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007418:	4b0a      	ldr	r3, [pc, #40]	; (8007444 <vPortExitCritical+0x50>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3b01      	subs	r3, #1
 800741e:	4a09      	ldr	r2, [pc, #36]	; (8007444 <vPortExitCritical+0x50>)
 8007420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007422:	4b08      	ldr	r3, [pc, #32]	; (8007444 <vPortExitCritical+0x50>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d105      	bne.n	8007436 <vPortExitCritical+0x42>
 800742a:	2300      	movs	r3, #0
 800742c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000008 	.word	0x20000008
	...

08007450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007450:	f3ef 8009 	mrs	r0, PSP
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	4b15      	ldr	r3, [pc, #84]	; (80074b0 <pxCurrentTCBConst>)
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	f01e 0f10 	tst.w	lr, #16
 8007460:	bf08      	it	eq
 8007462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746a:	6010      	str	r0, [r2, #0]
 800746c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007474:	f380 8811 	msr	BASEPRI, r0
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f7ff fcc4 	bl	8006e0c <vTaskSwitchContext>
 8007484:	f04f 0000 	mov.w	r0, #0
 8007488:	f380 8811 	msr	BASEPRI, r0
 800748c:	bc09      	pop	{r0, r3}
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	6808      	ldr	r0, [r1, #0]
 8007492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007496:	f01e 0f10 	tst.w	lr, #16
 800749a:	bf08      	it	eq
 800749c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074a0:	f380 8809 	msr	PSP, r0
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	f3af 8000 	nop.w

080074b0 <pxCurrentTCBConst>:
 80074b0:	200003ec 	.word	0x200003ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop

080074b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	607b      	str	r3, [r7, #4]
}
 80074d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074d2:	f7ff fbe3 	bl	8006c9c <xTaskIncrementTick>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074dc:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <SysTick_Handler+0x40>)
 80074de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f383 8811 	msr	BASEPRI, r3
}
 80074ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007500:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <vPortSetupTimerInterrupt+0x34>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007506:	4b0b      	ldr	r3, [pc, #44]	; (8007534 <vPortSetupTimerInterrupt+0x38>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <vPortSetupTimerInterrupt+0x3c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a0a      	ldr	r2, [pc, #40]	; (800753c <vPortSetupTimerInterrupt+0x40>)
 8007512:	fba2 2303 	umull	r2, r3, r2, r3
 8007516:	099b      	lsrs	r3, r3, #6
 8007518:	4a09      	ldr	r2, [pc, #36]	; (8007540 <vPortSetupTimerInterrupt+0x44>)
 800751a:	3b01      	subs	r3, #1
 800751c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800751e:	4b04      	ldr	r3, [pc, #16]	; (8007530 <vPortSetupTimerInterrupt+0x34>)
 8007520:	2207      	movs	r2, #7
 8007522:	601a      	str	r2, [r3, #0]
}
 8007524:	bf00      	nop
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	e000e010 	.word	0xe000e010
 8007534:	e000e018 	.word	0xe000e018
 8007538:	200000a8 	.word	0x200000a8
 800753c:	10624dd3 	.word	0x10624dd3
 8007540:	e000e014 	.word	0xe000e014

08007544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007554 <vPortEnableVFP+0x10>
 8007548:	6801      	ldr	r1, [r0, #0]
 800754a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800754e:	6001      	str	r1, [r0, #0]
 8007550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007552:	bf00      	nop
 8007554:	e000ed88 	.word	0xe000ed88

08007558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	; 0x28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007560:	2300      	movs	r3, #0
 8007562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007564:	f7ff faf0 	bl	8006b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007568:	4b5b      	ldr	r3, [pc, #364]	; (80076d8 <pvPortMalloc+0x180>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007570:	f000 f920 	bl	80077b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007574:	4b59      	ldr	r3, [pc, #356]	; (80076dc <pvPortMalloc+0x184>)
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4013      	ands	r3, r2
 800757c:	2b00      	cmp	r3, #0
 800757e:	f040 8093 	bne.w	80076a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d01d      	beq.n	80075c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007588:	2208      	movs	r2, #8
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4413      	add	r3, r2
 800758e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	2b00      	cmp	r3, #0
 8007598:	d014      	beq.n	80075c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f023 0307 	bic.w	r3, r3, #7
 80075a0:	3308      	adds	r3, #8
 80075a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <pvPortMalloc+0x6c>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	617b      	str	r3, [r7, #20]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d06e      	beq.n	80076a8 <pvPortMalloc+0x150>
 80075ca:	4b45      	ldr	r3, [pc, #276]	; (80076e0 <pvPortMalloc+0x188>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d869      	bhi.n	80076a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075d4:	4b43      	ldr	r3, [pc, #268]	; (80076e4 <pvPortMalloc+0x18c>)
 80075d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075d8:	4b42      	ldr	r3, [pc, #264]	; (80076e4 <pvPortMalloc+0x18c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075de:	e004      	b.n	80075ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d903      	bls.n	80075fc <pvPortMalloc+0xa4>
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1f1      	bne.n	80075e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075fc:	4b36      	ldr	r3, [pc, #216]	; (80076d8 <pvPortMalloc+0x180>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007602:	429a      	cmp	r2, r3
 8007604:	d050      	beq.n	80076a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2208      	movs	r2, #8
 800760c:	4413      	add	r3, r2
 800760e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	1ad2      	subs	r2, r2, r3
 8007620:	2308      	movs	r3, #8
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	429a      	cmp	r2, r3
 8007626:	d91f      	bls.n	8007668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <pvPortMalloc+0xf8>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	613b      	str	r3, [r7, #16]
}
 800764c:	bf00      	nop
 800764e:	e7fe      	b.n	800764e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	1ad2      	subs	r2, r2, r3
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007662:	69b8      	ldr	r0, [r7, #24]
 8007664:	f000 f908 	bl	8007878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007668:	4b1d      	ldr	r3, [pc, #116]	; (80076e0 <pvPortMalloc+0x188>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	4a1b      	ldr	r2, [pc, #108]	; (80076e0 <pvPortMalloc+0x188>)
 8007674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007676:	4b1a      	ldr	r3, [pc, #104]	; (80076e0 <pvPortMalloc+0x188>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4b1b      	ldr	r3, [pc, #108]	; (80076e8 <pvPortMalloc+0x190>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d203      	bcs.n	800768a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007682:	4b17      	ldr	r3, [pc, #92]	; (80076e0 <pvPortMalloc+0x188>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a18      	ldr	r2, [pc, #96]	; (80076e8 <pvPortMalloc+0x190>)
 8007688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <pvPortMalloc+0x184>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	431a      	orrs	r2, r3
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800769e:	4b13      	ldr	r3, [pc, #76]	; (80076ec <pvPortMalloc+0x194>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3301      	adds	r3, #1
 80076a4:	4a11      	ldr	r2, [pc, #68]	; (80076ec <pvPortMalloc+0x194>)
 80076a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076a8:	f7ff fa5c 	bl	8006b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f003 0307 	and.w	r3, r3, #7
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00a      	beq.n	80076cc <pvPortMalloc+0x174>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	60fb      	str	r3, [r7, #12]
}
 80076c8:	bf00      	nop
 80076ca:	e7fe      	b.n	80076ca <pvPortMalloc+0x172>
	return pvReturn;
 80076cc:	69fb      	ldr	r3, [r7, #28]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3728      	adds	r7, #40	; 0x28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	200010e0 	.word	0x200010e0
 80076dc:	200010f4 	.word	0x200010f4
 80076e0:	200010e4 	.word	0x200010e4
 80076e4:	200010d8 	.word	0x200010d8
 80076e8:	200010e8 	.word	0x200010e8
 80076ec:	200010ec 	.word	0x200010ec

080076f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d04d      	beq.n	800779e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007702:	2308      	movs	r3, #8
 8007704:	425b      	negs	r3, r3
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4413      	add	r3, r2
 800770a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	4b24      	ldr	r3, [pc, #144]	; (80077a8 <vPortFree+0xb8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4013      	ands	r3, r2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10a      	bne.n	8007734 <vPortFree+0x44>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	60fb      	str	r3, [r7, #12]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <vPortFree+0x62>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	60bb      	str	r3, [r7, #8]
}
 800774e:	bf00      	nop
 8007750:	e7fe      	b.n	8007750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	4b14      	ldr	r3, [pc, #80]	; (80077a8 <vPortFree+0xb8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4013      	ands	r3, r2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01e      	beq.n	800779e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d11a      	bne.n	800779e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	4b0e      	ldr	r3, [pc, #56]	; (80077a8 <vPortFree+0xb8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	43db      	mvns	r3, r3
 8007772:	401a      	ands	r2, r3
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007778:	f7ff f9e6 	bl	8006b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <vPortFree+0xbc>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4413      	add	r3, r2
 8007786:	4a09      	ldr	r2, [pc, #36]	; (80077ac <vPortFree+0xbc>)
 8007788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800778a:	6938      	ldr	r0, [r7, #16]
 800778c:	f000 f874 	bl	8007878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007790:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <vPortFree+0xc0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3301      	adds	r3, #1
 8007796:	4a06      	ldr	r2, [pc, #24]	; (80077b0 <vPortFree+0xc0>)
 8007798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800779a:	f7ff f9e3 	bl	8006b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800779e:	bf00      	nop
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	200010f4 	.word	0x200010f4
 80077ac:	200010e4 	.word	0x200010e4
 80077b0:	200010f0 	.word	0x200010f0

080077b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80077be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077c0:	4b27      	ldr	r3, [pc, #156]	; (8007860 <prvHeapInit+0xac>)
 80077c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00c      	beq.n	80077e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3307      	adds	r3, #7
 80077d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0307 	bic.w	r3, r3, #7
 80077da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	4a1f      	ldr	r2, [pc, #124]	; (8007860 <prvHeapInit+0xac>)
 80077e4:	4413      	add	r3, r2
 80077e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077ec:	4a1d      	ldr	r2, [pc, #116]	; (8007864 <prvHeapInit+0xb0>)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077f2:	4b1c      	ldr	r3, [pc, #112]	; (8007864 <prvHeapInit+0xb0>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	4413      	add	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007800:	2208      	movs	r2, #8
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0307 	bic.w	r3, r3, #7
 800780e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4a15      	ldr	r2, [pc, #84]	; (8007868 <prvHeapInit+0xb4>)
 8007814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007816:	4b14      	ldr	r3, [pc, #80]	; (8007868 <prvHeapInit+0xb4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2200      	movs	r2, #0
 800781c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800781e:	4b12      	ldr	r3, [pc, #72]	; (8007868 <prvHeapInit+0xb4>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007834:	4b0c      	ldr	r3, [pc, #48]	; (8007868 <prvHeapInit+0xb4>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	4a0a      	ldr	r2, [pc, #40]	; (800786c <prvHeapInit+0xb8>)
 8007842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	4a09      	ldr	r2, [pc, #36]	; (8007870 <prvHeapInit+0xbc>)
 800784a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800784c:	4b09      	ldr	r3, [pc, #36]	; (8007874 <prvHeapInit+0xc0>)
 800784e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007852:	601a      	str	r2, [r3, #0]
}
 8007854:	bf00      	nop
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	20000520 	.word	0x20000520
 8007864:	200010d8 	.word	0x200010d8
 8007868:	200010e0 	.word	0x200010e0
 800786c:	200010e8 	.word	0x200010e8
 8007870:	200010e4 	.word	0x200010e4
 8007874:	200010f4 	.word	0x200010f4

08007878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007880:	4b28      	ldr	r3, [pc, #160]	; (8007924 <prvInsertBlockIntoFreeList+0xac>)
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	e002      	b.n	800788c <prvInsertBlockIntoFreeList+0x14>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	429a      	cmp	r2, r3
 8007894:	d8f7      	bhi.n	8007886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	4413      	add	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d108      	bne.n	80078ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	441a      	add	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	441a      	add	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d118      	bne.n	8007900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	4b15      	ldr	r3, [pc, #84]	; (8007928 <prvInsertBlockIntoFreeList+0xb0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d00d      	beq.n	80078f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	441a      	add	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	e008      	b.n	8007908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078f6:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <prvInsertBlockIntoFreeList+0xb0>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	e003      	b.n	8007908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	429a      	cmp	r2, r3
 800790e:	d002      	beq.n	8007916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007916:	bf00      	nop
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	200010d8 	.word	0x200010d8
 8007928:	200010e0 	.word	0x200010e0

0800792c <findIndexByElement>:

/*
Find the index of an array in an array of char array 
*/
int findIndexByElement(char **arr, int size, char *elem)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
    // for debugging purposes
    char *b = elem;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < size; i++)
 800793c:	2300      	movs	r3, #0
 800793e:	61fb      	str	r3, [r7, #28]
 8007940:	e011      	b.n	8007966 <findIndexByElement+0x3a>
    {
        char *a = arr[i];
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	617b      	str	r3, [r7, #20]
        if (strcmp(a, b) == 0)
 800794e:	69b9      	ldr	r1, [r7, #24]
 8007950:	6978      	ldr	r0, [r7, #20]
 8007952:	f7f8 fc55 	bl	8000200 <strcmp>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <findIndexByElement+0x34>
        {
            return i;
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	e008      	b.n	8007972 <findIndexByElement+0x46>
    for (int i = 0; i < size; i++)
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	3301      	adds	r3, #1
 8007964:	61fb      	str	r3, [r7, #28]
 8007966:	69fa      	ldr	r2, [r7, #28]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	429a      	cmp	r2, r3
 800796c:	dbe9      	blt.n	8007942 <findIndexByElement+0x16>
        }
    }
    return -1; // element does not exist
 800796e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007972:	4618      	mov	r0, r3
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <convertMorseToText>:
int size: size of the morse code array (mArr)

Note: Ideally, buff and mArr have the same size.
*/
void convertMorseToText(char **mArr, char *buff, int size)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b088      	sub	sp, #32
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 8007988:	2300      	movs	r3, #0
 800798a:	61fb      	str	r3, [r7, #28]
 800798c:	e02d      	b.n	80079ea <convertMorseToText+0x6e>
    {
        int idx = findIndexByElement(alphabeticalMorse, 26, mArr[i]);
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4413      	add	r3, r2
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	211a      	movs	r1, #26
 800799c:	4817      	ldr	r0, [pc, #92]	; (80079fc <convertMorseToText+0x80>)
 800799e:	f7ff ffc5 	bl	800792c <findIndexByElement>
 80079a2:	61b8      	str	r0, [r7, #24]
        if (idx == -1) {
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079aa:	d113      	bne.n	80079d4 <convertMorseToText+0x58>
            int idx = findIndexByElement(numericalMorse, 10, mArr[i]);
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	210a      	movs	r1, #10
 80079ba:	4811      	ldr	r0, [pc, #68]	; (8007a00 <convertMorseToText+0x84>)
 80079bc:	f7ff ffb6 	bl	800792c <findIndexByElement>
 80079c0:	6178      	str	r0, [r7, #20]
            buff[i] = '0' + idx;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	68b9      	ldr	r1, [r7, #8]
 80079ca:	440b      	add	r3, r1
 80079cc:	3230      	adds	r2, #48	; 0x30
 80079ce:	b2d2      	uxtb	r2, r2
 80079d0:	701a      	strb	r2, [r3, #0]
 80079d2:	e007      	b.n	80079e4 <convertMorseToText+0x68>
        } else{
            buff[i] = 'a' + idx;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	440b      	add	r3, r1
 80079de:	3261      	adds	r2, #97	; 0x61
 80079e0:	b2d2      	uxtb	r2, r2
 80079e2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	3301      	adds	r3, #1
 80079e8:	61fb      	str	r3, [r7, #28]
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	dbcd      	blt.n	800798e <convertMorseToText+0x12>
        }
    }
}
 80079f2:	bf00      	nop
 80079f4:	bf00      	nop
 80079f6:	3720      	adds	r7, #32
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	2000000c 	.word	0x2000000c
 8007a00:	20000074 	.word	0x20000074

08007a04 <convertTextToMorse>:
int size: size of text to concer (mArr)

Note: Ideally, buff and mArr have the same size.
*/
void convertTextToMorse(char *cArr, char **buff, int size)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b089      	sub	sp, #36	; 0x24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]

    for (int i = 0; i < size; i++)
 8007a10:	2300      	movs	r3, #0
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	e04b      	b.n	8007aae <convertTextToMorse+0xaa>
    {
        char c = cArr[i];
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	75fb      	strb	r3, [r7, #23]
        char *morse;
        c = tolower(c);
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	75bb      	strb	r3, [r7, #22]
 8007a24:	7dbb      	ldrb	r3, [r7, #22]
 8007a26:	3301      	adds	r3, #1
 8007a28:	4a26      	ldr	r2, [pc, #152]	; (8007ac4 <convertTextToMorse+0xc0>)
 8007a2a:	4413      	add	r3, r2
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d102      	bne.n	8007a3c <convertTextToMorse+0x38>
 8007a36:	7dbb      	ldrb	r3, [r7, #22]
 8007a38:	3320      	adds	r3, #32
 8007a3a:	e000      	b.n	8007a3e <convertTextToMorse+0x3a>
 8007a3c:	7dbb      	ldrb	r3, [r7, #22]
 8007a3e:	75fb      	strb	r3, [r7, #23]
        if (islower(c))
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	3301      	adds	r3, #1
 8007a44:	4a1f      	ldr	r2, [pc, #124]	; (8007ac4 <convertTextToMorse+0xc0>)
 8007a46:	4413      	add	r3, r2
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d106      	bne.n	8007a60 <convertTextToMorse+0x5c>
        {
            morse = alphabeticalMorse[c - 'a'];
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	3b61      	subs	r3, #97	; 0x61
 8007a56:	4a1c      	ldr	r2, [pc, #112]	; (8007ac8 <convertTextToMorse+0xc4>)
 8007a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	e01d      	b.n	8007a9c <convertTextToMorse+0x98>
        }
        else if (isdigit(c))
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
 8007a62:	3301      	adds	r3, #1
 8007a64:	4a17      	ldr	r2, [pc, #92]	; (8007ac4 <convertTextToMorse+0xc0>)
 8007a66:	4413      	add	r3, r2
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d006      	beq.n	8007a80 <convertTextToMorse+0x7c>
        {
            morse = numericalMorse[c - '0'];
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	3b30      	subs	r3, #48	; 0x30
 8007a76:	4a15      	ldr	r2, [pc, #84]	; (8007acc <convertTextToMorse+0xc8>)
 8007a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	e00d      	b.n	8007a9c <convertTextToMorse+0x98>
        }
        else if (isspace(c))
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	3301      	adds	r3, #1
 8007a84:	4a0f      	ldr	r2, [pc, #60]	; (8007ac4 <convertTextToMorse+0xc0>)
 8007a86:	4413      	add	r3, r2
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	f003 0308 	and.w	r3, r3, #8
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <convertTextToMorse+0x94>
        {
            morse = ' ';
 8007a92:	2320      	movs	r3, #32
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	e001      	b.n	8007a9c <convertTextToMorse+0x98>
        }
        else
        {
            morse = ' ';
 8007a98:	2320      	movs	r3, #32
 8007a9a:	61bb      	str	r3, [r7, #24]
        }

        buff[i] = morse;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	61fb      	str	r3, [r7, #28]
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	dbaf      	blt.n	8007a16 <convertTextToMorse+0x12>
    }
}
 8007ab6:	bf00      	nop
 8007ab8:	bf00      	nop
 8007aba:	3724      	adds	r7, #36	; 0x24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	0800e014 	.word	0x0800e014
 8007ac8:	2000000c 	.word	0x2000000c
 8007acc:	20000074 	.word	0x20000074

08007ad0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4a07      	ldr	r2, [pc, #28]	; (8007afc <vApplicationGetIdleTaskMemory+0x2c>)
 8007ae0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	4a06      	ldr	r2, [pc, #24]	; (8007b00 <vApplicationGetIdleTaskMemory+0x30>)
 8007ae6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2280      	movs	r2, #128	; 0x80
 8007aec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	200010f8 	.word	0x200010f8
 8007b00:	2000114c 	.word	0x2000114c

08007b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b04:	b5b0      	push	{r4, r5, r7, lr}
 8007b06:	b090      	sub	sp, #64	; 0x40
 8007b08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b0a:	f7f8 fd63 	bl	80005d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b0e:	f000 f8cf 	bl	8007cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b12:	f000 fa2b 	bl	8007f6c <MX_GPIO_Init>
  MX_DMA_Init();
 8007b16:	f000 f9f7 	bl	8007f08 <MX_DMA_Init>
  MX_I2C2_Init();
 8007b1a:	f000 f91b 	bl	8007d54 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8007b1e:	f000 f9a7 	bl	8007e70 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8007b22:	f000 f957 	bl	8007dd4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  pMyDevice->I2cHandle = &hi2c2;
 8007b26:	4b51      	ldr	r3, [pc, #324]	; (8007c6c <main+0x168>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a51      	ldr	r2, [pc, #324]	; (8007c70 <main+0x16c>)
 8007b2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  pMyDevice->I2cDevAddr      = 0x52;
 8007b30:	4b4e      	ldr	r3, [pc, #312]	; (8007c6c <main+0x168>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2252      	movs	r2, #82	; 0x52
 8007b36:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
  pMyDevice->comms_type      =  1;
 8007b3a:	4b4c      	ldr	r3, [pc, #304]	; (8007c6c <main+0x168>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
  pMyDevice->comms_speed_khz =  400;
 8007b44:	4b49      	ldr	r3, [pc, #292]	; (8007c6c <main+0x168>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007b4c:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
  VL53L0X_ResetDevice(&MyDevice);
 8007b50:	4848      	ldr	r0, [pc, #288]	; (8007c74 <main+0x170>)
 8007b52:	f001 f961 	bl	8008e18 <VL53L0X_ResetDevice>
  status = VL53L0X_DataInit(&MyDevice);
 8007b56:	4847      	ldr	r0, [pc, #284]	; (8007c74 <main+0x170>)
 8007b58:	f000 fe54 	bl	8008804 <VL53L0X_DataInit>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	461a      	mov	r2, r3
 8007b60:	4b45      	ldr	r3, [pc, #276]	; (8007c78 <main+0x174>)
 8007b62:	701a      	strb	r2, [r3, #0]
  status = VL53L0X_StaticInit(pMyDevice);
 8007b64:	4b41      	ldr	r3, [pc, #260]	; (8007c6c <main+0x168>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 ffd1 	bl	8008b10 <VL53L0X_StaticInit>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	461a      	mov	r2, r3
 8007b72:	4b41      	ldr	r3, [pc, #260]	; (8007c78 <main+0x174>)
 8007b74:	701a      	strb	r2, [r3, #0]
  status = VL53L0X_PerformRefCalibration(pMyDevice,
 8007b76:	4b3d      	ldr	r3, [pc, #244]	; (8007c6c <main+0x168>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a40      	ldr	r2, [pc, #256]	; (8007c7c <main+0x178>)
 8007b7c:	4940      	ldr	r1, [pc, #256]	; (8007c80 <main+0x17c>)
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f001 feb2 	bl	80098e8 <VL53L0X_PerformRefCalibration>
 8007b84:	4603      	mov	r3, r0
 8007b86:	461a      	mov	r2, r3
 8007b88:	4b3b      	ldr	r3, [pc, #236]	; (8007c78 <main+0x174>)
 8007b8a:	701a      	strb	r2, [r3, #0]
          		&VhvSettings, &PhaseCal);
  status = VL53L0X_PerformRefSpadManagement(pMyDevice,
 8007b8c:	4b37      	ldr	r3, [pc, #220]	; (8007c6c <main+0x168>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a3c      	ldr	r2, [pc, #240]	; (8007c84 <main+0x180>)
 8007b92:	493d      	ldr	r1, [pc, #244]	; (8007c88 <main+0x184>)
 8007b94:	4618      	mov	r0, r3
 8007b96:	f002 fbc1 	bl	800a31c <VL53L0X_PerformRefSpadManagement>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	4b36      	ldr	r3, [pc, #216]	; (8007c78 <main+0x174>)
 8007ba0:	701a      	strb	r2, [r3, #0]
          		&refSpadCount, &isApertureSpads);
  status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8007ba2:	4b32      	ldr	r3, [pc, #200]	; (8007c6c <main+0x168>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 fa33 	bl	8009014 <VL53L0X_SetDeviceMode>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4b31      	ldr	r3, [pc, #196]	; (8007c78 <main+0x174>)
 8007bb4:	701a      	strb	r2, [r3, #0]
  char ascii_char[2]; // null-terminated string of length 1.

  HAL_UART_Receive_IT(&huart1, UART2_rxBuffer, 1);
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	4934      	ldr	r1, [pc, #208]	; (8007c8c <main+0x188>)
 8007bba:	4835      	ldr	r0, [pc, #212]	; (8007c90 <main+0x18c>)
 8007bbc:	f7fc fb5a 	bl	8004274 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of receiveTerminal */
  osThreadDef(receiveTerminal, StartReceivingTerminal, osPriorityNormal, 0, 128);
 8007bc0:	4b34      	ldr	r3, [pc, #208]	; (8007c94 <main+0x190>)
 8007bc2:	f107 0420 	add.w	r4, r7, #32
 8007bc6:	461d      	mov	r5, r3
 8007bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007bd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTerminalHandle = osThreadCreate(osThread(receiveTerminal), NULL);
 8007bd4:	f107 0320 	add.w	r3, r7, #32
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe fc79 	bl	80064d2 <osThreadCreate>
 8007be0:	4603      	mov	r3, r0
 8007be2:	4a2d      	ldr	r2, [pc, #180]	; (8007c98 <main+0x194>)
 8007be4:	6013      	str	r3, [r2, #0]

  /* definition and creation of sideTask */
  osThreadDef(sideTask, StartSideTask, osPriorityNormal, 0, 128);
 8007be6:	4b2d      	ldr	r3, [pc, #180]	; (8007c9c <main+0x198>)
 8007be8:	1d3c      	adds	r4, r7, #4
 8007bea:	461d      	mov	r5, r3
 8007bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007bf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sideTaskHandle = osThreadCreate(osThread(sideTask), NULL);
 8007bf8:	1d3b      	adds	r3, r7, #4
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe fc68 	bl	80064d2 <osThreadCreate>
 8007c02:	4603      	mov	r3, r0
 8007c04:	4a26      	ldr	r2, [pc, #152]	; (8007ca0 <main+0x19c>)
 8007c06:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8007c08:	f7fe fc5c 	bl	80064c4 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	char* array[1];
	read_char_morse();
 8007c0c:	f000 fa06 	bl	800801c <read_char_morse>
	array[0] = morse;
 8007c10:	4b24      	ldr	r3, [pc, #144]	; (8007ca4 <main+0x1a0>)
 8007c12:	603b      	str	r3, [r7, #0]
	convertMorseToText(array, ascii_char, 1);
 8007c14:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8007c18:	463b      	mov	r3, r7
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7ff fead 	bl	800797c <convertMorseToText>
	ascii_char[1]='\0';
 8007c22:	2300      	movs	r3, #0
 8007c24:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	snprintf(output, sizeof(output), "%s\n\r", ascii_char);
 8007c28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c2c:	4a1e      	ldr	r2, [pc, #120]	; (8007ca8 <main+0x1a4>)
 8007c2e:	2132      	movs	r1, #50	; 0x32
 8007c30:	481e      	ldr	r0, [pc, #120]	; (8007cac <main+0x1a8>)
 8007c32:	f005 fc47 	bl	800d4c4 <sniprintf>
	HAL_UART_Transmit(&huart1, output, strlen(output), 100);
 8007c36:	481d      	ldr	r0, [pc, #116]	; (8007cac <main+0x1a8>)
 8007c38:	f7f8 faec 	bl	8000214 <strlen>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	2364      	movs	r3, #100	; 0x64
 8007c42:	491a      	ldr	r1, [pc, #104]	; (8007cac <main+0x1a8>)
 8007c44:	4812      	ldr	r0, [pc, #72]	; (8007c90 <main+0x18c>)
 8007c46:	f7fc fa7d 	bl	8004144 <HAL_UART_Transmit>
	snprintf(output, sizeof(output), "%s\n\r", morse);
 8007c4a:	4b16      	ldr	r3, [pc, #88]	; (8007ca4 <main+0x1a0>)
 8007c4c:	4a16      	ldr	r2, [pc, #88]	; (8007ca8 <main+0x1a4>)
 8007c4e:	2132      	movs	r1, #50	; 0x32
 8007c50:	4816      	ldr	r0, [pc, #88]	; (8007cac <main+0x1a8>)
 8007c52:	f005 fc37 	bl	800d4c4 <sniprintf>
	HAL_UART_Transmit(&huart1, output, strlen(output), 100);
 8007c56:	4815      	ldr	r0, [pc, #84]	; (8007cac <main+0x1a8>)
 8007c58:	f7f8 fadc 	bl	8000214 <strlen>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	2364      	movs	r3, #100	; 0x64
 8007c62:	4912      	ldr	r1, [pc, #72]	; (8007cac <main+0x1a8>)
 8007c64:	480a      	ldr	r0, [pc, #40]	; (8007c90 <main+0x18c>)
 8007c66:	f7fc fa6d 	bl	8004144 <HAL_UART_Transmit>
  {
 8007c6a:	e7cf      	b.n	8007c0c <main+0x108>
 8007c6c:	2000009c 	.word	0x2000009c
 8007c70:	2000134c 	.word	0x2000134c
 8007c74:	20001578 	.word	0x20001578
 8007c78:	2000172c 	.word	0x2000172c
 8007c7c:	2000172e 	.word	0x2000172e
 8007c80:	2000172d 	.word	0x2000172d
 8007c84:	20001734 	.word	0x20001734
 8007c88:	20001730 	.word	0x20001730
 8007c8c:	20001b54 	.word	0x20001b54
 8007c90:	200013ec 	.word	0x200013ec
 8007c94:	0800df28 	.word	0x0800df28
 8007c98:	2000153c 	.word	0x2000153c
 8007c9c:	0800df44 	.word	0x0800df44
 8007ca0:	20001540 	.word	0x20001540
 8007ca4:	20001754 	.word	0x20001754
 8007ca8:	0800df20 	.word	0x0800df20
 8007cac:	20001544 	.word	0x20001544

08007cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b096      	sub	sp, #88	; 0x58
 8007cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007cb6:	f107 0314 	add.w	r3, r7, #20
 8007cba:	2244      	movs	r2, #68	; 0x44
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f005 fbf8 	bl	800d4b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	605a      	str	r2, [r3, #4]
 8007ccc:	609a      	str	r2, [r3, #8]
 8007cce:	60da      	str	r2, [r3, #12]
 8007cd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007cd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007cd6:	f7fa f86d 	bl	8001db4 <HAL_PWREx_ControlVoltageScaling>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8007ce0:	f000 fafa 	bl	80082d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007cf0:	2360      	movs	r3, #96	; 0x60
 8007cf2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8007d00:	2328      	movs	r3, #40	; 0x28
 8007d02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007d04:	2302      	movs	r3, #2
 8007d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d10:	f107 0314 	add.w	r3, r7, #20
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fa f8f1 	bl	8001efc <HAL_RCC_OscConfig>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8007d20:	f000 fada 	bl	80082d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d24:	230f      	movs	r3, #15
 8007d26:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007d34:	2300      	movs	r3, #0
 8007d36:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007d38:	463b      	mov	r3, r7
 8007d3a:	2103      	movs	r1, #3
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fa fcf7 	bl	8002730 <HAL_RCC_ClockConfig>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8007d48:	f000 fac6 	bl	80082d8 <Error_Handler>
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	3758      	adds	r7, #88	; 0x58
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007d58:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <MX_I2C2_Init+0x74>)
 8007d5a:	4a1c      	ldr	r2, [pc, #112]	; (8007dcc <MX_I2C2_Init+0x78>)
 8007d5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8007d5e:	4b1a      	ldr	r3, [pc, #104]	; (8007dc8 <MX_I2C2_Init+0x74>)
 8007d60:	4a1b      	ldr	r2, [pc, #108]	; (8007dd0 <MX_I2C2_Init+0x7c>)
 8007d62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007d64:	4b18      	ldr	r3, [pc, #96]	; (8007dc8 <MX_I2C2_Init+0x74>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007d6a:	4b17      	ldr	r3, [pc, #92]	; (8007dc8 <MX_I2C2_Init+0x74>)
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007d70:	4b15      	ldr	r3, [pc, #84]	; (8007dc8 <MX_I2C2_Init+0x74>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <MX_I2C2_Init+0x74>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007d7c:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <MX_I2C2_Init+0x74>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007d82:	4b11      	ldr	r3, [pc, #68]	; (8007dc8 <MX_I2C2_Init+0x74>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007d88:	4b0f      	ldr	r3, [pc, #60]	; (8007dc8 <MX_I2C2_Init+0x74>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007d8e:	480e      	ldr	r0, [pc, #56]	; (8007dc8 <MX_I2C2_Init+0x74>)
 8007d90:	f7f9 fa66 	bl	8001260 <HAL_I2C_Init>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007d9a:	f000 fa9d 	bl	80082d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4809      	ldr	r0, [pc, #36]	; (8007dc8 <MX_I2C2_Init+0x74>)
 8007da2:	f7f9 ff4f 	bl	8001c44 <HAL_I2CEx_ConfigAnalogFilter>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007dac:	f000 fa94 	bl	80082d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007db0:	2100      	movs	r1, #0
 8007db2:	4805      	ldr	r0, [pc, #20]	; (8007dc8 <MX_I2C2_Init+0x74>)
 8007db4:	f7f9 ff91 	bl	8001cda <HAL_I2CEx_ConfigDigitalFilter>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007dbe:	f000 fa8b 	bl	80082d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007dc2:	bf00      	nop
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	2000134c 	.word	0x2000134c
 8007dcc:	40005800 	.word	0x40005800
 8007dd0:	10909cec 	.word	0x10909cec

08007dd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007dda:	f107 0310 	add.w	r3, r7, #16
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	605a      	str	r2, [r3, #4]
 8007de4:	609a      	str	r2, [r3, #8]
 8007de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007de8:	1d3b      	adds	r3, r7, #4
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	605a      	str	r2, [r3, #4]
 8007df0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007df2:	4b1e      	ldr	r3, [pc, #120]	; (8007e6c <MX_TIM2_Init+0x98>)
 8007df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007df8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007dfa:	4b1c      	ldr	r3, [pc, #112]	; (8007e6c <MX_TIM2_Init+0x98>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e00:	4b1a      	ldr	r3, [pc, #104]	; (8007e6c <MX_TIM2_Init+0x98>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8007e06:	4b19      	ldr	r3, [pc, #100]	; (8007e6c <MX_TIM2_Init+0x98>)
 8007e08:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e0e:	4b17      	ldr	r3, [pc, #92]	; (8007e6c <MX_TIM2_Init+0x98>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e14:	4b15      	ldr	r3, [pc, #84]	; (8007e6c <MX_TIM2_Init+0x98>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007e1a:	4814      	ldr	r0, [pc, #80]	; (8007e6c <MX_TIM2_Init+0x98>)
 8007e1c:	f7fb fc90 	bl	8003740 <HAL_TIM_Base_Init>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007e26:	f000 fa57 	bl	80082d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007e30:	f107 0310 	add.w	r3, r7, #16
 8007e34:	4619      	mov	r1, r3
 8007e36:	480d      	ldr	r0, [pc, #52]	; (8007e6c <MX_TIM2_Init+0x98>)
 8007e38:	f7fb fe69 	bl	8003b0e <HAL_TIM_ConfigClockSource>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007e42:	f000 fa49 	bl	80082d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e46:	2300      	movs	r3, #0
 8007e48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007e4e:	1d3b      	adds	r3, r7, #4
 8007e50:	4619      	mov	r1, r3
 8007e52:	4806      	ldr	r0, [pc, #24]	; (8007e6c <MX_TIM2_Init+0x98>)
 8007e54:	f7fc f880 	bl	8003f58 <HAL_TIMEx_MasterConfigSynchronization>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007e5e:	f000 fa3b 	bl	80082d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007e62:	bf00      	nop
 8007e64:	3720      	adds	r7, #32
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	200013a0 	.word	0x200013a0

08007e70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007e74:	4b22      	ldr	r3, [pc, #136]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007e76:	4a23      	ldr	r2, [pc, #140]	; (8007f04 <MX_USART1_UART_Init+0x94>)
 8007e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007e7a:	4b21      	ldr	r3, [pc, #132]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007e82:	4b1f      	ldr	r3, [pc, #124]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007e88:	4b1d      	ldr	r3, [pc, #116]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007e8e:	4b1c      	ldr	r3, [pc, #112]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007e94:	4b1a      	ldr	r3, [pc, #104]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007e96:	220c      	movs	r2, #12
 8007e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e9a:	4b19      	ldr	r3, [pc, #100]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007ea0:	4b17      	ldr	r3, [pc, #92]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007ea6:	4b16      	ldr	r3, [pc, #88]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007eac:	4b14      	ldr	r3, [pc, #80]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007eb2:	4b13      	ldr	r3, [pc, #76]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007eb8:	4811      	ldr	r0, [pc, #68]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007eba:	f7fc f8f3 	bl	80040a4 <HAL_UART_Init>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007ec4:	f000 fa08 	bl	80082d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ec8:	2100      	movs	r1, #0
 8007eca:	480d      	ldr	r0, [pc, #52]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007ecc:	f7fe fa17 	bl	80062fe <HAL_UARTEx_SetTxFifoThreshold>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007ed6:	f000 f9ff 	bl	80082d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007eda:	2100      	movs	r1, #0
 8007edc:	4808      	ldr	r0, [pc, #32]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007ede:	f7fe fa4c 	bl	800637a <HAL_UARTEx_SetRxFifoThreshold>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007ee8:	f000 f9f6 	bl	80082d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007eec:	4804      	ldr	r0, [pc, #16]	; (8007f00 <MX_USART1_UART_Init+0x90>)
 8007eee:	f7fe f9cd 	bl	800628c <HAL_UARTEx_DisableFifoMode>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007ef8:	f000 f9ee 	bl	80082d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007efc:	bf00      	nop
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	200013ec 	.word	0x200013ec
 8007f04:	40013800 	.word	0x40013800

08007f08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007f0e:	4b16      	ldr	r3, [pc, #88]	; (8007f68 <MX_DMA_Init+0x60>)
 8007f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f12:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <MX_DMA_Init+0x60>)
 8007f14:	f043 0304 	orr.w	r3, r3, #4
 8007f18:	6493      	str	r3, [r2, #72]	; 0x48
 8007f1a:	4b13      	ldr	r3, [pc, #76]	; (8007f68 <MX_DMA_Init+0x60>)
 8007f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	607b      	str	r3, [r7, #4]
 8007f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f26:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <MX_DMA_Init+0x60>)
 8007f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f2a:	4a0f      	ldr	r2, [pc, #60]	; (8007f68 <MX_DMA_Init+0x60>)
 8007f2c:	f043 0301 	orr.w	r3, r3, #1
 8007f30:	6493      	str	r3, [r2, #72]	; 0x48
 8007f32:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <MX_DMA_Init+0x60>)
 8007f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2105      	movs	r1, #5
 8007f42:	200b      	movs	r0, #11
 8007f44:	f7f8 fc5a 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007f48:	200b      	movs	r0, #11
 8007f4a:	f7f8 fc73 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2105      	movs	r1, #5
 8007f52:	200c      	movs	r0, #12
 8007f54:	f7f8 fc52 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007f58:	200c      	movs	r0, #12
 8007f5a:	f7f8 fc6b 	bl	8000834 <HAL_NVIC_EnableIRQ>

}
 8007f5e:	bf00      	nop
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	40021000 	.word	0x40021000

08007f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b088      	sub	sp, #32
 8007f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f72:	f107 030c 	add.w	r3, r7, #12
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	605a      	str	r2, [r3, #4]
 8007f7c:	609a      	str	r2, [r3, #8]
 8007f7e:	60da      	str	r2, [r3, #12]
 8007f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f82:	4b23      	ldr	r3, [pc, #140]	; (8008010 <MX_GPIO_Init+0xa4>)
 8007f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f86:	4a22      	ldr	r2, [pc, #136]	; (8008010 <MX_GPIO_Init+0xa4>)
 8007f88:	f043 0304 	orr.w	r3, r3, #4
 8007f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f8e:	4b20      	ldr	r3, [pc, #128]	; (8008010 <MX_GPIO_Init+0xa4>)
 8007f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f92:	f003 0304 	and.w	r3, r3, #4
 8007f96:	60bb      	str	r3, [r7, #8]
 8007f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f9a:	4b1d      	ldr	r3, [pc, #116]	; (8008010 <MX_GPIO_Init+0xa4>)
 8007f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f9e:	4a1c      	ldr	r2, [pc, #112]	; (8008010 <MX_GPIO_Init+0xa4>)
 8007fa0:	f043 0302 	orr.w	r3, r3, #2
 8007fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007fa6:	4b1a      	ldr	r3, [pc, #104]	; (8008010 <MX_GPIO_Init+0xa4>)
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	607b      	str	r3, [r7, #4]
 8007fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007fb8:	4816      	ldr	r0, [pc, #88]	; (8008014 <MX_GPIO_Init+0xa8>)
 8007fba:	f7f9 f921 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUEBUTTON_Pin */
  GPIO_InitStruct.Pin = BLUEBUTTON_Pin;
 8007fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007fc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUEBUTTON_GPIO_Port, &GPIO_InitStruct);
 8007fce:	f107 030c 	add.w	r3, r7, #12
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4810      	ldr	r0, [pc, #64]	; (8008018 <MX_GPIO_Init+0xac>)
 8007fd6:	f7f8 ff69 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8007fda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8007fec:	f107 030c 	add.w	r3, r7, #12
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4808      	ldr	r0, [pc, #32]	; (8008014 <MX_GPIO_Init+0xa8>)
 8007ff4:	f7f8 ff5a 	bl	8000eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2105      	movs	r1, #5
 8007ffc:	2028      	movs	r0, #40	; 0x28
 8007ffe:	f7f8 fbfd 	bl	80007fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008002:	2028      	movs	r0, #40	; 0x28
 8008004:	f7f8 fc16 	bl	8000834 <HAL_NVIC_EnableIRQ>

}
 8008008:	bf00      	nop
 800800a:	3720      	adds	r7, #32
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	40021000 	.word	0x40021000
 8008014:	48000400 	.word	0x48000400
 8008018:	48000800 	.word	0x48000800

0800801c <read_char_morse>:
    VL53L0X_GetPalErrorString(status, buffer);
    printf("API Status: %i : %s\n", status, buffer);
}

void read_char_morse() // reads a single ascii character (multiple morse codes)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
	int mode = 0; // 0=not started reading. 1=reading(waiting for hand to leave sensor). 2=waiting for additional morse code
 8008022:	2300      	movs	r3, #0
 8008024:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	60bb      	str	r3, [r7, #8]
	int counter = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	607b      	str	r3, [r7, #4]
	while(1)
	{
		  status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice, &rangeData);
 800802e:	4b2d      	ldr	r3, [pc, #180]	; (80080e4 <read_char_morse+0xc8>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	492d      	ldr	r1, [pc, #180]	; (80080e8 <read_char_morse+0xcc>)
 8008034:	4618      	mov	r0, r3
 8008036:	f001 ff85 	bl	8009f44 <VL53L0X_PerformSingleRangingMeasurement>
 800803a:	4603      	mov	r3, r0
 800803c:	461a      	mov	r2, r3
 800803e:	4b2b      	ldr	r3, [pc, #172]	; (80080ec <read_char_morse+0xd0>)
 8008040:	701a      	strb	r2, [r3, #0]
		  distance_output = pRangeData->RangeMilliMeter;
 8008042:	4b2b      	ldr	r3, [pc, #172]	; (80080f0 <read_char_morse+0xd4>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	891a      	ldrh	r2, [r3, #8]
 8008048:	4b2a      	ldr	r3, [pc, #168]	; (80080f4 <read_char_morse+0xd8>)
 800804a:	801a      	strh	r2, [r3, #0]
		  if (distance_output>THRES_DISTANCE)
 800804c:	4b29      	ldr	r3, [pc, #164]	; (80080f4 <read_char_morse+0xd8>)
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	2b64      	cmp	r3, #100	; 0x64
 8008052:	d924      	bls.n	800809e <read_char_morse+0x82>
		  {
			  if (mode==1){
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d112      	bne.n	8008080 <read_char_morse+0x64>
				  mode = 2;
 800805a:	2302      	movs	r3, #2
 800805c:	60fb      	str	r3, [r7, #12]
				  morse[i] = (counter>=DURATION_THRES) ? '-' : '.';
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b07      	cmp	r3, #7
 8008062:	dd01      	ble.n	8008068 <read_char_morse+0x4c>
 8008064:	212d      	movs	r1, #45	; 0x2d
 8008066:	e000      	b.n	800806a <read_char_morse+0x4e>
 8008068:	212e      	movs	r1, #46	; 0x2e
 800806a:	4a23      	ldr	r2, [pc, #140]	; (80080f8 <read_char_morse+0xdc>)
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4413      	add	r3, r2
 8008070:	460a      	mov	r2, r1
 8008072:	701a      	strb	r2, [r3, #0]
				  i++;
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	3301      	adds	r3, #1
 8008078:	60bb      	str	r3, [r7, #8]
				  counter = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	607b      	str	r3, [r7, #4]
 800807e:	e028      	b.n	80080d2 <read_char_morse+0xb6>
			  } else if (mode==2){
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b02      	cmp	r3, #2
 8008084:	d125      	bne.n	80080d2 <read_char_morse+0xb6>
				  counter++;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3301      	adds	r3, #1
 800808a:	607b      	str	r3, [r7, #4]
				  if (counter>14){
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b0e      	cmp	r3, #14
 8008090:	dd1f      	ble.n	80080d2 <read_char_morse+0xb6>
					  morse[i]='\0';
 8008092:	4a19      	ldr	r2, [pc, #100]	; (80080f8 <read_char_morse+0xdc>)
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4413      	add	r3, r2
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
					  break;
 800809c:	e01d      	b.n	80080da <read_char_morse+0xbe>
				  }
			  }


		  } else  if (distance_output<THRES_DISTANCE && (mode==0||mode==2)) {
 800809e:	4b15      	ldr	r3, [pc, #84]	; (80080f4 <read_char_morse+0xd8>)
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	2b63      	cmp	r3, #99	; 0x63
 80080a4:	d80b      	bhi.n	80080be <read_char_morse+0xa2>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <read_char_morse+0x96>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d105      	bne.n	80080be <read_char_morse+0xa2>
			  counter++;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3301      	adds	r3, #1
 80080b6:	607b      	str	r3, [r7, #4]
			  mode = 1;
 80080b8:	2301      	movs	r3, #1
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	e009      	b.n	80080d2 <read_char_morse+0xb6>
		  } else if (distance_output<THRES_DISTANCE && mode==1) {
 80080be:	4b0d      	ldr	r3, [pc, #52]	; (80080f4 <read_char_morse+0xd8>)
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	2b63      	cmp	r3, #99	; 0x63
 80080c4:	d805      	bhi.n	80080d2 <read_char_morse+0xb6>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d102      	bne.n	80080d2 <read_char_morse+0xb6>
			  counter++;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3301      	adds	r3, #1
 80080d0:	607b      	str	r3, [r7, #4]
		  }
		  HAL_Delay(WAITTIME);
 80080d2:	2001      	movs	r0, #1
 80080d4:	f7f8 fab6 	bl	8000644 <HAL_Delay>
		  status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice, &rangeData);
 80080d8:	e7a9      	b.n	800802e <read_char_morse+0x12>
	}



}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	2000009c 	.word	0x2000009c
 80080e8:	20001738 	.word	0x20001738
 80080ec:	2000172c 	.word	0x2000172c
 80080f0:	200000a0 	.word	0x200000a0
 80080f4:	200000a4 	.word	0x200000a4
 80080f8:	20001754 	.word	0x20001754

080080fc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	80fb      	strh	r3, [r7, #6]
    if(HAL_GPIO_ReadPin(GPIOB, LED_Pin) == GPIO_PIN_SET) {
 8008106:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800810a:	4812      	ldr	r0, [pc, #72]	; (8008154 <HAL_GPIO_EXTI_Callback+0x58>)
 800810c:	f7f9 f860 	bl	80011d0 <HAL_GPIO_ReadPin>
 8008110:	4603      	mov	r3, r0
 8008112:	2b01      	cmp	r3, #1
 8008114:	d106      	bne.n	8008124 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 8008116:	2200      	movs	r2, #0
 8008118:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800811c:	480d      	ldr	r0, [pc, #52]	; (8008154 <HAL_GPIO_EXTI_Callback+0x58>)
 800811e:	f7f9 f86f 	bl	8001200 <HAL_GPIO_WritePin>
 8008122:	e005      	b.n	8008130 <HAL_GPIO_EXTI_Callback+0x34>
    } else {
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 8008124:	2201      	movs	r2, #1
 8008126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800812a:	480a      	ldr	r0, [pc, #40]	; (8008154 <HAL_GPIO_EXTI_Callback+0x58>)
 800812c:	f7f9 f868 	bl	8001200 <HAL_GPIO_WritePin>
	}
    sprintf(buff, "Board\n\r");
 8008130:	4909      	ldr	r1, [pc, #36]	; (8008158 <HAL_GPIO_EXTI_Callback+0x5c>)
 8008132:	480a      	ldr	r0, [pc, #40]	; (800815c <HAL_GPIO_EXTI_Callback+0x60>)
 8008134:	f005 f9fa 	bl	800d52c <siprintf>
    HAL_UART_Transmit_DMA(&huart1, &buff, strlen(buff));
 8008138:	4808      	ldr	r0, [pc, #32]	; (800815c <HAL_GPIO_EXTI_Callback+0x60>)
 800813a:	f7f8 f86b 	bl	8000214 <strlen>
 800813e:	4603      	mov	r3, r0
 8008140:	b29b      	uxth	r3, r3
 8008142:	461a      	mov	r2, r3
 8008144:	4905      	ldr	r1, [pc, #20]	; (800815c <HAL_GPIO_EXTI_Callback+0x60>)
 8008146:	4806      	ldr	r0, [pc, #24]	; (8008160 <HAL_GPIO_EXTI_Callback+0x64>)
 8008148:	f7fc f8ea 	bl	8004320 <HAL_UART_Transmit_DMA>
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	48000400 	.word	0x48000400
 8008158:	0800df78 	.word	0x0800df78
 800815c:	2000176c 	.word	0x2000176c
 8008160:	200013ec 	.word	0x200013ec

08008164 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
	interruptFlag = 1;
 800816c:	4b05      	ldr	r3, [pc, #20]	; (8008184 <HAL_UART_RxCpltCallback+0x20>)
 800816e:	2201      	movs	r2, #1
 8008170:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, UART2_rxBuffer, 1);
 8008172:	2201      	movs	r2, #1
 8008174:	4904      	ldr	r1, [pc, #16]	; (8008188 <HAL_UART_RxCpltCallback+0x24>)
 8008176:	4805      	ldr	r0, [pc, #20]	; (800818c <HAL_UART_RxCpltCallback+0x28>)
 8008178:	f7fc f87c 	bl	8004274 <HAL_UART_Receive_IT>

}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20001768 	.word	0x20001768
 8008188:	20001b54 	.word	0x20001b54
 800818c:	200013ec 	.word	0x200013ec

08008190 <StartReceivingTerminal>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceivingTerminal */
void StartReceivingTerminal(void const * argument)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008198:	2001      	movs	r0, #1
 800819a:	f7fe f9e6 	bl	800656a <osDelay>
    if (interruptFlag == 1) {
 800819e:	4b2d      	ldr	r3, [pc, #180]	; (8008254 <StartReceivingTerminal+0xc4>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d1f8      	bne.n	8008198 <StartReceivingTerminal+0x8>
    	HAL_UART_Transmit(&huart1, UART2_rxBuffer, 1, 100);
 80081a6:	2364      	movs	r3, #100	; 0x64
 80081a8:	2201      	movs	r2, #1
 80081aa:	492b      	ldr	r1, [pc, #172]	; (8008258 <StartReceivingTerminal+0xc8>)
 80081ac:	482b      	ldr	r0, [pc, #172]	; (800825c <StartReceivingTerminal+0xcc>)
 80081ae:	f7fb ffc9 	bl	8004144 <HAL_UART_Transmit>
    	char* morse[1];
    	morse[0] = morseBuffer;
 80081b2:	4b2b      	ldr	r3, [pc, #172]	; (8008260 <StartReceivingTerminal+0xd0>)
 80081b4:	60fb      	str	r3, [r7, #12]
    	//convertMorseToText(array, ascii_char, 1);
    	convertTextToMorse(UART2_rxBuffer, morse, 1);
 80081b6:	f107 030c 	add.w	r3, r7, #12
 80081ba:	2201      	movs	r2, #1
 80081bc:	4619      	mov	r1, r3
 80081be:	4826      	ldr	r0, [pc, #152]	; (8008258 <StartReceivingTerminal+0xc8>)
 80081c0:	f7ff fc20 	bl	8007a04 <convertTextToMorse>
    	i = morse[0];
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4a27      	ldr	r2, [pc, #156]	; (8008264 <StartReceivingTerminal+0xd4>)
 80081c8:	6013      	str	r3, [r2, #0]
    	//HAL_UART_Transmit(&huart1, morse, strlen(morse), 100);

    	for(int x = 0; x < strlen(*(morse)); x++) {
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	e035      	b.n	800823c <StartReceivingTerminal+0xac>
    		char m = (*(morse))[x];
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	4413      	add	r3, r2
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	74fb      	strb	r3, [r7, #19]

    		if(strcmp(m, '-') == 0) {
 80081da:	7cfb      	ldrb	r3, [r7, #19]
 80081dc:	212d      	movs	r1, #45	; 0x2d
 80081de:	4618      	mov	r0, r3
 80081e0:	f7f8 f80e 	bl	8000200 <strcmp>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <StartReceivingTerminal+0x70>
    			HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 80081ea:	2201      	movs	r2, #1
 80081ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80081f0:	481d      	ldr	r0, [pc, #116]	; (8008268 <StartReceivingTerminal+0xd8>)
 80081f2:	f7f9 f805 	bl	8001200 <HAL_GPIO_WritePin>
    			osDelay(1500);
 80081f6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80081fa:	f7fe f9b6 	bl	800656a <osDelay>
 80081fe:	e011      	b.n	8008224 <StartReceivingTerminal+0x94>
    		} else if(strcmp(m, '.') == 0) {
 8008200:	7cfb      	ldrb	r3, [r7, #19]
 8008202:	212e      	movs	r1, #46	; 0x2e
 8008204:	4618      	mov	r0, r3
 8008206:	f7f7 fffb 	bl	8000200 <strcmp>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d109      	bne.n	8008224 <StartReceivingTerminal+0x94>
    			HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 8008210:	2201      	movs	r2, #1
 8008212:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008216:	4814      	ldr	r0, [pc, #80]	; (8008268 <StartReceivingTerminal+0xd8>)
 8008218:	f7f8 fff2 	bl	8001200 <HAL_GPIO_WritePin>
    			osDelay(700);
 800821c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8008220:	f7fe f9a3 	bl	800656a <osDelay>
    		}
    		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 8008224:	2200      	movs	r2, #0
 8008226:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800822a:	480f      	ldr	r0, [pc, #60]	; (8008268 <StartReceivingTerminal+0xd8>)
 800822c:	f7f8 ffe8 	bl	8001200 <HAL_GPIO_WritePin>
    		osDelay(200);
 8008230:	20c8      	movs	r0, #200	; 0xc8
 8008232:	f7fe f99a 	bl	800656a <osDelay>
    	for(int x = 0; x < strlen(*(morse)); x++) {
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	3301      	adds	r3, #1
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4618      	mov	r0, r3
 8008240:	f7f7 ffe8 	bl	8000214 <strlen>
 8008244:	4602      	mov	r2, r0
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	429a      	cmp	r2, r3
 800824a:	d8c1      	bhi.n	80081d0 <StartReceivingTerminal+0x40>
    	}
    	interruptFlag = 0;
 800824c:	4b01      	ldr	r3, [pc, #4]	; (8008254 <StartReceivingTerminal+0xc4>)
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
    osDelay(1);
 8008252:	e7a1      	b.n	8008198 <StartReceivingTerminal+0x8>
 8008254:	20001768 	.word	0x20001768
 8008258:	20001b54 	.word	0x20001b54
 800825c:	200013ec 	.word	0x200013ec
 8008260:	2000175c 	.word	0x2000175c
 8008264:	20001764 	.word	0x20001764
 8008268:	48000400 	.word	0x48000400

0800826c <StartSideTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSideTask */
void StartSideTask(void const * argument)
{
 800826c:	b5b0      	push	{r4, r5, r7, lr}
 800826e:	b08c      	sub	sp, #48	; 0x30
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSideTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8008274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008278:	f7fe f977 	bl	800656a <osDelay>
    char Message[] = "Write anything on Serial Terminal\r\n";
 800827c:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <StartSideTask+0x40>)
 800827e:	f107 040c 	add.w	r4, r7, #12
 8008282:	461d      	mov	r5, r3
 8008284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800828a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	6023      	str	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)Message, strlen(Message), 10);
 8008290:	f107 030c 	add.w	r3, r7, #12
 8008294:	4618      	mov	r0, r3
 8008296:	f7f7 ffbd 	bl	8000214 <strlen>
 800829a:	4603      	mov	r3, r0
 800829c:	b29a      	uxth	r2, r3
 800829e:	f107 010c 	add.w	r1, r7, #12
 80082a2:	230a      	movs	r3, #10
 80082a4:	4802      	ldr	r0, [pc, #8]	; (80082b0 <StartSideTask+0x44>)
 80082a6:	f7fb ff4d 	bl	8004144 <HAL_UART_Transmit>
  {
 80082aa:	e7e3      	b.n	8008274 <StartSideTask+0x8>
 80082ac:	0800df80 	.word	0x0800df80
 80082b0:	200013ec 	.word	0x200013ec

080082b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a04      	ldr	r2, [pc, #16]	; (80082d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d101      	bne.n	80082ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80082c6:	f7f8 f99d 	bl	8000604 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	40001000 	.word	0x40001000

080082d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80082dc:	b672      	cpsid	i
}
 80082de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80082e0:	e7fe      	b.n	80082e0 <Error_Handler+0x8>
	...

080082e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082ea:	4b11      	ldr	r3, [pc, #68]	; (8008330 <HAL_MspInit+0x4c>)
 80082ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082ee:	4a10      	ldr	r2, [pc, #64]	; (8008330 <HAL_MspInit+0x4c>)
 80082f0:	f043 0301 	orr.w	r3, r3, #1
 80082f4:	6613      	str	r3, [r2, #96]	; 0x60
 80082f6:	4b0e      	ldr	r3, [pc, #56]	; (8008330 <HAL_MspInit+0x4c>)
 80082f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	607b      	str	r3, [r7, #4]
 8008300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008302:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <HAL_MspInit+0x4c>)
 8008304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008306:	4a0a      	ldr	r2, [pc, #40]	; (8008330 <HAL_MspInit+0x4c>)
 8008308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800830c:	6593      	str	r3, [r2, #88]	; 0x58
 800830e:	4b08      	ldr	r3, [pc, #32]	; (8008330 <HAL_MspInit+0x4c>)
 8008310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008316:	603b      	str	r3, [r7, #0]
 8008318:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800831a:	2200      	movs	r2, #0
 800831c:	210f      	movs	r1, #15
 800831e:	f06f 0001 	mvn.w	r0, #1
 8008322:	f7f8 fa6b 	bl	80007fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	40021000 	.word	0x40021000

08008334 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b0ae      	sub	sp, #184	; 0xb8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800833c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	605a      	str	r2, [r3, #4]
 8008346:	609a      	str	r2, [r3, #8]
 8008348:	60da      	str	r2, [r3, #12]
 800834a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800834c:	f107 0310 	add.w	r3, r7, #16
 8008350:	2294      	movs	r2, #148	; 0x94
 8008352:	2100      	movs	r1, #0
 8008354:	4618      	mov	r0, r3
 8008356:	f005 f8ad 	bl	800d4b4 <memset>
  if(hi2c->Instance==I2C2)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a21      	ldr	r2, [pc, #132]	; (80083e4 <HAL_I2C_MspInit+0xb0>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d13b      	bne.n	80083dc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8008364:	2380      	movs	r3, #128	; 0x80
 8008366:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8008368:	2300      	movs	r3, #0
 800836a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800836c:	f107 0310 	add.w	r3, r7, #16
 8008370:	4618      	mov	r0, r3
 8008372:	f7fa fccd 	bl	8002d10 <HAL_RCCEx_PeriphCLKConfig>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800837c:	f7ff ffac 	bl	80082d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008380:	4b19      	ldr	r3, [pc, #100]	; (80083e8 <HAL_I2C_MspInit+0xb4>)
 8008382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008384:	4a18      	ldr	r2, [pc, #96]	; (80083e8 <HAL_I2C_MspInit+0xb4>)
 8008386:	f043 0302 	orr.w	r3, r3, #2
 800838a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800838c:	4b16      	ldr	r3, [pc, #88]	; (80083e8 <HAL_I2C_MspInit+0xb4>)
 800838e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008398:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800839c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083a0:	2312      	movs	r3, #18
 80083a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083ac:	2303      	movs	r3, #3
 80083ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80083b2:	2304      	movs	r3, #4
 80083b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80083bc:	4619      	mov	r1, r3
 80083be:	480b      	ldr	r0, [pc, #44]	; (80083ec <HAL_I2C_MspInit+0xb8>)
 80083c0:	f7f8 fd74 	bl	8000eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80083c4:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <HAL_I2C_MspInit+0xb4>)
 80083c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c8:	4a07      	ldr	r2, [pc, #28]	; (80083e8 <HAL_I2C_MspInit+0xb4>)
 80083ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083ce:	6593      	str	r3, [r2, #88]	; 0x58
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <HAL_I2C_MspInit+0xb4>)
 80083d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083d8:	60bb      	str	r3, [r7, #8]
 80083da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80083dc:	bf00      	nop
 80083de:	37b8      	adds	r7, #184	; 0xb8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	40005800 	.word	0x40005800
 80083e8:	40021000 	.word	0x40021000
 80083ec:	48000400 	.word	0x48000400

080083f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008400:	d113      	bne.n	800842a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008402:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <HAL_TIM_Base_MspInit+0x44>)
 8008404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008406:	4a0b      	ldr	r2, [pc, #44]	; (8008434 <HAL_TIM_Base_MspInit+0x44>)
 8008408:	f043 0301 	orr.w	r3, r3, #1
 800840c:	6593      	str	r3, [r2, #88]	; 0x58
 800840e:	4b09      	ldr	r3, [pc, #36]	; (8008434 <HAL_TIM_Base_MspInit+0x44>)
 8008410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800841a:	2200      	movs	r2, #0
 800841c:	2105      	movs	r1, #5
 800841e:	201c      	movs	r0, #28
 8008420:	f7f8 f9ec 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008424:	201c      	movs	r0, #28
 8008426:	f7f8 fa05 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800842a:	bf00      	nop
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	40021000 	.word	0x40021000

08008438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b0ae      	sub	sp, #184	; 0xb8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008440:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	605a      	str	r2, [r3, #4]
 800844a:	609a      	str	r2, [r3, #8]
 800844c:	60da      	str	r2, [r3, #12]
 800844e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008450:	f107 0310 	add.w	r3, r7, #16
 8008454:	2294      	movs	r2, #148	; 0x94
 8008456:	2100      	movs	r1, #0
 8008458:	4618      	mov	r0, r3
 800845a:	f005 f82b 	bl	800d4b4 <memset>
  if(huart->Instance==USART1)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a4e      	ldr	r2, [pc, #312]	; (800859c <HAL_UART_MspInit+0x164>)
 8008464:	4293      	cmp	r3, r2
 8008466:	f040 8095 	bne.w	8008594 <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800846a:	2301      	movs	r3, #1
 800846c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800846e:	2300      	movs	r3, #0
 8008470:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008472:	f107 0310 	add.w	r3, r7, #16
 8008476:	4618      	mov	r0, r3
 8008478:	f7fa fc4a 	bl	8002d10 <HAL_RCCEx_PeriphCLKConfig>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008482:	f7ff ff29 	bl	80082d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008486:	4b46      	ldr	r3, [pc, #280]	; (80085a0 <HAL_UART_MspInit+0x168>)
 8008488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800848a:	4a45      	ldr	r2, [pc, #276]	; (80085a0 <HAL_UART_MspInit+0x168>)
 800848c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008490:	6613      	str	r3, [r2, #96]	; 0x60
 8008492:	4b43      	ldr	r3, [pc, #268]	; (80085a0 <HAL_UART_MspInit+0x168>)
 8008494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800849e:	4b40      	ldr	r3, [pc, #256]	; (80085a0 <HAL_UART_MspInit+0x168>)
 80084a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a2:	4a3f      	ldr	r2, [pc, #252]	; (80085a0 <HAL_UART_MspInit+0x168>)
 80084a4:	f043 0302 	orr.w	r3, r3, #2
 80084a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084aa:	4b3d      	ldr	r3, [pc, #244]	; (80085a0 <HAL_UART_MspInit+0x168>)
 80084ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	60bb      	str	r3, [r7, #8]
 80084b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80084b6:	23c0      	movs	r3, #192	; 0xc0
 80084b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084bc:	2302      	movs	r3, #2
 80084be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084c8:	2303      	movs	r3, #3
 80084ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80084ce:	2307      	movs	r3, #7
 80084d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80084d8:	4619      	mov	r1, r3
 80084da:	4832      	ldr	r0, [pc, #200]	; (80085a4 <HAL_UART_MspInit+0x16c>)
 80084dc:	f7f8 fce6 	bl	8000eac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80084e0:	4b31      	ldr	r3, [pc, #196]	; (80085a8 <HAL_UART_MspInit+0x170>)
 80084e2:	4a32      	ldr	r2, [pc, #200]	; (80085ac <HAL_UART_MspInit+0x174>)
 80084e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80084e6:	4b30      	ldr	r3, [pc, #192]	; (80085a8 <HAL_UART_MspInit+0x170>)
 80084e8:	2218      	movs	r2, #24
 80084ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80084ec:	4b2e      	ldr	r3, [pc, #184]	; (80085a8 <HAL_UART_MspInit+0x170>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80084f2:	4b2d      	ldr	r3, [pc, #180]	; (80085a8 <HAL_UART_MspInit+0x170>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80084f8:	4b2b      	ldr	r3, [pc, #172]	; (80085a8 <HAL_UART_MspInit+0x170>)
 80084fa:	2280      	movs	r2, #128	; 0x80
 80084fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80084fe:	4b2a      	ldr	r3, [pc, #168]	; (80085a8 <HAL_UART_MspInit+0x170>)
 8008500:	2200      	movs	r2, #0
 8008502:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008504:	4b28      	ldr	r3, [pc, #160]	; (80085a8 <HAL_UART_MspInit+0x170>)
 8008506:	2200      	movs	r2, #0
 8008508:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800850a:	4b27      	ldr	r3, [pc, #156]	; (80085a8 <HAL_UART_MspInit+0x170>)
 800850c:	2200      	movs	r2, #0
 800850e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008510:	4b25      	ldr	r3, [pc, #148]	; (80085a8 <HAL_UART_MspInit+0x170>)
 8008512:	2200      	movs	r2, #0
 8008514:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008516:	4824      	ldr	r0, [pc, #144]	; (80085a8 <HAL_UART_MspInit+0x170>)
 8008518:	f7f8 f99a 	bl	8000850 <HAL_DMA_Init>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8008522:	f7ff fed9 	bl	80082d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a1f      	ldr	r2, [pc, #124]	; (80085a8 <HAL_UART_MspInit+0x170>)
 800852a:	67da      	str	r2, [r3, #124]	; 0x7c
 800852c:	4a1e      	ldr	r2, [pc, #120]	; (80085a8 <HAL_UART_MspInit+0x170>)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8008532:	4b1f      	ldr	r3, [pc, #124]	; (80085b0 <HAL_UART_MspInit+0x178>)
 8008534:	4a1f      	ldr	r2, [pc, #124]	; (80085b4 <HAL_UART_MspInit+0x17c>)
 8008536:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8008538:	4b1d      	ldr	r3, [pc, #116]	; (80085b0 <HAL_UART_MspInit+0x178>)
 800853a:	2219      	movs	r2, #25
 800853c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800853e:	4b1c      	ldr	r3, [pc, #112]	; (80085b0 <HAL_UART_MspInit+0x178>)
 8008540:	2210      	movs	r2, #16
 8008542:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008544:	4b1a      	ldr	r3, [pc, #104]	; (80085b0 <HAL_UART_MspInit+0x178>)
 8008546:	2200      	movs	r2, #0
 8008548:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800854a:	4b19      	ldr	r3, [pc, #100]	; (80085b0 <HAL_UART_MspInit+0x178>)
 800854c:	2280      	movs	r2, #128	; 0x80
 800854e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008550:	4b17      	ldr	r3, [pc, #92]	; (80085b0 <HAL_UART_MspInit+0x178>)
 8008552:	2200      	movs	r2, #0
 8008554:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008556:	4b16      	ldr	r3, [pc, #88]	; (80085b0 <HAL_UART_MspInit+0x178>)
 8008558:	2200      	movs	r2, #0
 800855a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800855c:	4b14      	ldr	r3, [pc, #80]	; (80085b0 <HAL_UART_MspInit+0x178>)
 800855e:	2200      	movs	r2, #0
 8008560:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008562:	4b13      	ldr	r3, [pc, #76]	; (80085b0 <HAL_UART_MspInit+0x178>)
 8008564:	2200      	movs	r2, #0
 8008566:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008568:	4811      	ldr	r0, [pc, #68]	; (80085b0 <HAL_UART_MspInit+0x178>)
 800856a:	f7f8 f971 	bl	8000850 <HAL_DMA_Init>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8008574:	f7ff feb0 	bl	80082d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a0d      	ldr	r2, [pc, #52]	; (80085b0 <HAL_UART_MspInit+0x178>)
 800857c:	679a      	str	r2, [r3, #120]	; 0x78
 800857e:	4a0c      	ldr	r2, [pc, #48]	; (80085b0 <HAL_UART_MspInit+0x178>)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8008584:	2200      	movs	r2, #0
 8008586:	2105      	movs	r1, #5
 8008588:	2025      	movs	r0, #37	; 0x25
 800858a:	f7f8 f937 	bl	80007fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800858e:	2025      	movs	r0, #37	; 0x25
 8008590:	f7f8 f950 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008594:	bf00      	nop
 8008596:	37b8      	adds	r7, #184	; 0xb8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40013800 	.word	0x40013800
 80085a0:	40021000 	.word	0x40021000
 80085a4:	48000400 	.word	0x48000400
 80085a8:	2000147c 	.word	0x2000147c
 80085ac:	40020008 	.word	0x40020008
 80085b0:	200014dc 	.word	0x200014dc
 80085b4:	4002001c 	.word	0x4002001c

080085b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08e      	sub	sp, #56	; 0x38
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80085c6:	4b34      	ldr	r3, [pc, #208]	; (8008698 <HAL_InitTick+0xe0>)
 80085c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ca:	4a33      	ldr	r2, [pc, #204]	; (8008698 <HAL_InitTick+0xe0>)
 80085cc:	f043 0310 	orr.w	r3, r3, #16
 80085d0:	6593      	str	r3, [r2, #88]	; 0x58
 80085d2:	4b31      	ldr	r3, [pc, #196]	; (8008698 <HAL_InitTick+0xe0>)
 80085d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d6:	f003 0310 	and.w	r3, r3, #16
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80085de:	f107 0210 	add.w	r2, r7, #16
 80085e2:	f107 0314 	add.w	r3, r7, #20
 80085e6:	4611      	mov	r1, r2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fa fa9f 	bl	8002b2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80085f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d103      	bne.n	8008600 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80085f8:	f7fa fa6c 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 80085fc:	6378      	str	r0, [r7, #52]	; 0x34
 80085fe:	e004      	b.n	800860a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008600:	f7fa fa68 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8008604:	4603      	mov	r3, r0
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800860a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860c:	4a23      	ldr	r2, [pc, #140]	; (800869c <HAL_InitTick+0xe4>)
 800860e:	fba2 2303 	umull	r2, r3, r2, r3
 8008612:	0c9b      	lsrs	r3, r3, #18
 8008614:	3b01      	subs	r3, #1
 8008616:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008618:	4b21      	ldr	r3, [pc, #132]	; (80086a0 <HAL_InitTick+0xe8>)
 800861a:	4a22      	ldr	r2, [pc, #136]	; (80086a4 <HAL_InitTick+0xec>)
 800861c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800861e:	4b20      	ldr	r3, [pc, #128]	; (80086a0 <HAL_InitTick+0xe8>)
 8008620:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008624:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008626:	4a1e      	ldr	r2, [pc, #120]	; (80086a0 <HAL_InitTick+0xe8>)
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800862c:	4b1c      	ldr	r3, [pc, #112]	; (80086a0 <HAL_InitTick+0xe8>)
 800862e:	2200      	movs	r2, #0
 8008630:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008632:	4b1b      	ldr	r3, [pc, #108]	; (80086a0 <HAL_InitTick+0xe8>)
 8008634:	2200      	movs	r2, #0
 8008636:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008638:	4b19      	ldr	r3, [pc, #100]	; (80086a0 <HAL_InitTick+0xe8>)
 800863a:	2200      	movs	r2, #0
 800863c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800863e:	4818      	ldr	r0, [pc, #96]	; (80086a0 <HAL_InitTick+0xe8>)
 8008640:	f7fb f87e 	bl	8003740 <HAL_TIM_Base_Init>
 8008644:	4603      	mov	r3, r0
 8008646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800864a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800864e:	2b00      	cmp	r3, #0
 8008650:	d11b      	bne.n	800868a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8008652:	4813      	ldr	r0, [pc, #76]	; (80086a0 <HAL_InitTick+0xe8>)
 8008654:	f7fb f8cc 	bl	80037f0 <HAL_TIM_Base_Start_IT>
 8008658:	4603      	mov	r3, r0
 800865a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800865e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008662:	2b00      	cmp	r3, #0
 8008664:	d111      	bne.n	800868a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008666:	2036      	movs	r0, #54	; 0x36
 8008668:	f7f8 f8e4 	bl	8000834 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b0f      	cmp	r3, #15
 8008670:	d808      	bhi.n	8008684 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8008672:	2200      	movs	r2, #0
 8008674:	6879      	ldr	r1, [r7, #4]
 8008676:	2036      	movs	r0, #54	; 0x36
 8008678:	f7f8 f8c0 	bl	80007fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800867c:	4a0a      	ldr	r2, [pc, #40]	; (80086a8 <HAL_InitTick+0xf0>)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	e002      	b.n	800868a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800868a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800868e:	4618      	mov	r0, r3
 8008690:	3738      	adds	r7, #56	; 0x38
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40021000 	.word	0x40021000
 800869c:	431bde83 	.word	0x431bde83
 80086a0:	20001b58 	.word	0x20001b58
 80086a4:	40001000 	.word	0x40001000
 80086a8:	20000000 	.word	0x20000000

080086ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80086ac:	b480      	push	{r7}
 80086ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80086b0:	e7fe      	b.n	80086b0 <NMI_Handler+0x4>

080086b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086b2:	b480      	push	{r7}
 80086b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80086b6:	e7fe      	b.n	80086b6 <HardFault_Handler+0x4>

080086b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086bc:	e7fe      	b.n	80086bc <MemManage_Handler+0x4>

080086be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086be:	b480      	push	{r7}
 80086c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086c2:	e7fe      	b.n	80086c2 <BusFault_Handler+0x4>

080086c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80086c8:	e7fe      	b.n	80086c8 <UsageFault_Handler+0x4>

080086ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80086ca:	b480      	push	{r7}
 80086cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80086ce:	bf00      	nop
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80086dc:	4802      	ldr	r0, [pc, #8]	; (80086e8 <DMA1_Channel1_IRQHandler+0x10>)
 80086de:	f7f8 fa95 	bl	8000c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80086e2:	bf00      	nop
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	2000147c 	.word	0x2000147c

080086ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80086f0:	4802      	ldr	r0, [pc, #8]	; (80086fc <DMA1_Channel2_IRQHandler+0x10>)
 80086f2:	f7f8 fa8b 	bl	8000c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80086f6:	bf00      	nop
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	200014dc 	.word	0x200014dc

08008700 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008704:	4802      	ldr	r0, [pc, #8]	; (8008710 <TIM2_IRQHandler+0x10>)
 8008706:	f7fb f8e3 	bl	80038d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800870a:	bf00      	nop
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200013a0 	.word	0x200013a0

08008714 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008718:	4802      	ldr	r0, [pc, #8]	; (8008724 <USART1_IRQHandler+0x10>)
 800871a:	f7fb fe93 	bl	8004444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800871e:	bf00      	nop
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	200013ec 	.word	0x200013ec

08008728 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUEBUTTON_Pin);
 800872c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008730:	f7f8 fd7e 	bl	8001230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008734:	bf00      	nop
 8008736:	bd80      	pop	{r7, pc}

08008738 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800873c:	4802      	ldr	r0, [pc, #8]	; (8008748 <TIM6_DAC_IRQHandler+0x10>)
 800873e:	f7fb f8c7 	bl	80038d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008742:	bf00      	nop
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20001b58 	.word	0x20001b58

0800874c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008754:	4a14      	ldr	r2, [pc, #80]	; (80087a8 <_sbrk+0x5c>)
 8008756:	4b15      	ldr	r3, [pc, #84]	; (80087ac <_sbrk+0x60>)
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008760:	4b13      	ldr	r3, [pc, #76]	; (80087b0 <_sbrk+0x64>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d102      	bne.n	800876e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008768:	4b11      	ldr	r3, [pc, #68]	; (80087b0 <_sbrk+0x64>)
 800876a:	4a12      	ldr	r2, [pc, #72]	; (80087b4 <_sbrk+0x68>)
 800876c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800876e:	4b10      	ldr	r3, [pc, #64]	; (80087b0 <_sbrk+0x64>)
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4413      	add	r3, r2
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	429a      	cmp	r2, r3
 800877a:	d207      	bcs.n	800878c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800877c:	f004 fe62 	bl	800d444 <__errno>
 8008780:	4603      	mov	r3, r0
 8008782:	220c      	movs	r2, #12
 8008784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008786:	f04f 33ff 	mov.w	r3, #4294967295
 800878a:	e009      	b.n	80087a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800878c:	4b08      	ldr	r3, [pc, #32]	; (80087b0 <_sbrk+0x64>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008792:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <_sbrk+0x64>)
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4413      	add	r3, r2
 800879a:	4a05      	ldr	r2, [pc, #20]	; (80087b0 <_sbrk+0x64>)
 800879c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800879e:	68fb      	ldr	r3, [r7, #12]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	200a0000 	.word	0x200a0000
 80087ac:	00000400 	.word	0x00000400
 80087b0:	20001ba4 	.word	0x20001ba4
 80087b4:	20001bf8 	.word	0x20001bf8

080087b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80087b8:	b480      	push	{r7}
 80087ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <SystemInit+0x20>)
 80087be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c2:	4a05      	ldr	r2, [pc, #20]	; (80087d8 <SystemInit+0x20>)
 80087c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80087cc:	bf00      	nop
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	e000ed00 	.word	0xe000ed00

080087dc <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f001 fdaa 	bl	800a346 <VL53L0X_get_offset_calibration_data_micro_meter>
 80087f2:	4603      	mov	r3, r0
 80087f4:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80087f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b0a4      	sub	sp, #144	; 0x90
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800880c:	2300      	movs	r3, #0
 800880e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8008812:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008816:	2b00      	cmp	r3, #0
 8008818:	d107      	bne.n	800882a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800881a:	2200      	movs	r2, #0
 800881c:	2188      	movs	r1, #136	; 0x88
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f004 fcb6 	bl	800d190 <VL53L0X_WrByte>
 8008824:	4603      	mov	r3, r0
 8008826:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008838:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4aae      	ldr	r2, [pc, #696]	; (8008af8 <VL53L0X_DataInit+0x2f4>)
 8008840:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800884a:	f107 0310 	add.w	r3, r7, #16
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fb29 	bl	8008ea8 <VL53L0X_GetDeviceParameters>
 8008856:	4603      	mov	r3, r0
 8008858:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 800885c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008860:	2b00      	cmp	r3, #0
 8008862:	d130      	bne.n	80088c6 <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 8008864:	2300      	movs	r3, #0
 8008866:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 8008868:	2300      	movs	r3, #0
 800886a:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 800886c:	2300      	movs	r3, #0
 800886e:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 8008870:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 8008874:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 8008876:	f24b 3333 	movw	r3, #45875	; 0xb333
 800887a:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 800887c:	4b9f      	ldr	r3, [pc, #636]	; (8008afc <VL53L0X_DataInit+0x2f8>)
 800887e:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 8008880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008884:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 8008886:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 800888a:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 800888c:	4b9c      	ldr	r3, [pc, #624]	; (8008b00 <VL53L0X_DataInit+0x2fc>)
 800888e:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 8008890:	4b9c      	ldr	r3, [pc, #624]	; (8008b04 <VL53L0X_DataInit+0x300>)
 8008892:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 8008894:	4b9c      	ldr	r3, [pc, #624]	; (8008b08 <VL53L0X_DataInit+0x304>)
 8008896:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 8008898:	4b9c      	ldr	r3, [pc, #624]	; (8008b0c <VL53L0X_DataInit+0x308>)
 800889a:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 800889c:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 80088a0:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 80088a2:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 80088a6:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 80088a8:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80088ac:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 80088ae:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 80088b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3308      	adds	r3, #8
 80088ba:	f107 0110 	add.w	r1, r7, #16
 80088be:	2278      	movs	r2, #120	; 0x78
 80088c0:	4618      	mov	r0, r3
 80088c2:	f004 fde9 	bl	800d498 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2264      	movs	r2, #100	; 0x64
 80088ca:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80088d4:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80088de:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80088e8:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80088f4:	2201      	movs	r2, #1
 80088f6:	2180      	movs	r1, #128	; 0x80
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f004 fc49 	bl	800d190 <VL53L0X_WrByte>
 80088fe:	4603      	mov	r3, r0
 8008900:	461a      	mov	r2, r3
 8008902:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008906:	4313      	orrs	r3, r2
 8008908:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800890c:	2201      	movs	r2, #1
 800890e:	21ff      	movs	r1, #255	; 0xff
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f004 fc3d 	bl	800d190 <VL53L0X_WrByte>
 8008916:	4603      	mov	r3, r0
 8008918:	461a      	mov	r2, r3
 800891a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800891e:	4313      	orrs	r3, r2
 8008920:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008924:	2200      	movs	r2, #0
 8008926:	2100      	movs	r1, #0
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f004 fc31 	bl	800d190 <VL53L0X_WrByte>
 800892e:	4603      	mov	r3, r0
 8008930:	461a      	mov	r2, r3
 8008932:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008936:	4313      	orrs	r3, r2
 8008938:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800893c:	f107 030f 	add.w	r3, r7, #15
 8008940:	461a      	mov	r2, r3
 8008942:	2191      	movs	r1, #145	; 0x91
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f004 fca5 	bl	800d294 <VL53L0X_RdByte>
 800894a:	4603      	mov	r3, r0
 800894c:	461a      	mov	r2, r3
 800894e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008952:	4313      	orrs	r3, r2
 8008954:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8008958:	7bfa      	ldrb	r2, [r7, #15]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008960:	2201      	movs	r2, #1
 8008962:	2100      	movs	r1, #0
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f004 fc13 	bl	800d190 <VL53L0X_WrByte>
 800896a:	4603      	mov	r3, r0
 800896c:	461a      	mov	r2, r3
 800896e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008972:	4313      	orrs	r3, r2
 8008974:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008978:	2200      	movs	r2, #0
 800897a:	21ff      	movs	r1, #255	; 0xff
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f004 fc07 	bl	800d190 <VL53L0X_WrByte>
 8008982:	4603      	mov	r3, r0
 8008984:	461a      	mov	r2, r3
 8008986:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800898a:	4313      	orrs	r3, r2
 800898c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008990:	2200      	movs	r2, #0
 8008992:	2180      	movs	r1, #128	; 0x80
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f004 fbfb 	bl	800d190 <VL53L0X_WrByte>
 800899a:	4603      	mov	r3, r0
 800899c:	461a      	mov	r2, r3
 800899e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80089a2:	4313      	orrs	r3, r2
 80089a4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80089a8:	2300      	movs	r3, #0
 80089aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80089ae:	e017      	b.n	80089e0 <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 80089b0:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d118      	bne.n	80089ea <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80089b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089bc:	b29b      	uxth	r3, r3
 80089be:	2201      	movs	r2, #1
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fd8a 	bl	80094dc <VL53L0X_SetLimitCheckEnable>
 80089c8:	4603      	mov	r3, r0
 80089ca:	461a      	mov	r2, r3
 80089cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80089d0:	4313      	orrs	r3, r2
 80089d2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80089d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089da:	3301      	adds	r3, #1
 80089dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80089e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089e4:	2b05      	cmp	r3, #5
 80089e6:	dde3      	ble.n	80089b0 <VL53L0X_DataInit+0x1ac>
 80089e8:	e000      	b.n	80089ec <VL53L0X_DataInit+0x1e8>
		else
			break;
 80089ea:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80089ec:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d107      	bne.n	8008a04 <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80089f4:	2200      	movs	r2, #0
 80089f6:	2102      	movs	r1, #2
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fd6f 	bl	80094dc <VL53L0X_SetLimitCheckEnable>
 80089fe:	4603      	mov	r3, r0
 8008a00:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008a04:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d107      	bne.n	8008a1c <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2103      	movs	r1, #3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fd63 	bl	80094dc <VL53L0X_SetLimitCheckEnable>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008a1c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d107      	bne.n	8008a34 <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008a24:	2200      	movs	r2, #0
 8008a26:	2104      	movs	r1, #4
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fd57 	bl	80094dc <VL53L0X_SetLimitCheckEnable>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008a34:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d107      	bne.n	8008a4c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2105      	movs	r1, #5
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fd4b 	bl	80094dc <VL53L0X_SetLimitCheckEnable>
 8008a46:	4603      	mov	r3, r0
 8008a48:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8008a4c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d108      	bne.n	8008a66 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008a54:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8008a58:	2100      	movs	r1, #0
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fdee 	bl	800963c <VL53L0X_SetLimitCheckValue>
 8008a60:	4603      	mov	r3, r0
 8008a62:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008a66:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d108      	bne.n	8008a80 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008a6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a72:	2101      	movs	r1, #1
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fde1 	bl	800963c <VL53L0X_SetLimitCheckValue>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008a80:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d108      	bne.n	8008a9a <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008a88:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8008a8c:	2102      	movs	r1, #2
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fdd4 	bl	800963c <VL53L0X_SetLimitCheckValue>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008a9a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d107      	bne.n	8008ab2 <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2103      	movs	r1, #3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fdc8 	bl	800963c <VL53L0X_SetLimitCheckValue>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008ab2:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10f      	bne.n	8008ada <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	22ff      	movs	r2, #255	; 0xff
 8008abe:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008ac2:	22ff      	movs	r2, #255	; 0xff
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f004 fb62 	bl	800d190 <VL53L0X_WrByte>
 8008acc:	4603      	mov	r3, r0
 8008ace:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008ada:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d103      	bne.n	8008aea <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 8008aea:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3790      	adds	r7, #144	; 0x90
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	000970a4 	.word	0x000970a4
 8008afc:	044c0000 	.word	0x044c0000
 8008b00:	0003cccc 	.word	0x0003cccc
 8008b04:	02ee0000 	.word	0x02ee0000
 8008b08:	00074ccc 	.word	0x00074ccc
 8008b0c:	02260000 	.word	0x02260000

08008b10 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b0ac      	sub	sp, #176	; 0xb0
 8008b14:	af02      	add	r7, sp, #8
 8008b16:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8008b1e:	f107 031c 	add.w	r3, r7, #28
 8008b22:	2278      	movs	r2, #120	; 0x78
 8008b24:	2100      	movs	r1, #0
 8008b26:	4618      	mov	r0, r3
 8008b28:	f004 fcc4 	bl	800d4b4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 8008b40:	2300      	movs	r3, #0
 8008b42:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8008b4e:	2101      	movs	r1, #1
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f002 fb3b 	bl	800b1cc <VL53L0X_get_info_from_device>
 8008b56:	4603      	mov	r3, r0
 8008b58:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8008b62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8008b6c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8008b70:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d80f      	bhi.n	8008b98 <VL53L0X_StaticInit+0x88>
 8008b78:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d103      	bne.n	8008b88 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 8008b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	d807      	bhi.n	8008b98 <VL53L0X_StaticInit+0x88>
 8008b88:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10f      	bne.n	8008bb0 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 8008b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b94:	2b0c      	cmp	r3, #12
 8008b96:	d90b      	bls.n	8008bb0 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8008b98:	f107 0218 	add.w	r2, r7, #24
 8008b9c:	f107 0314 	add.w	r3, r7, #20
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 fdca 	bl	800a73c <VL53L0X_perform_ref_spad_management>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8008bae:	e00a      	b.n	8008bc6 <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8008bb0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 ffca 	bl	800ab54 <VL53L0X_set_reference_spads>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8008bc6:	4b93      	ldr	r3, [pc, #588]	; (8008e14 <VL53L0X_StaticInit+0x304>)
 8008bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008bcc:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d111      	bne.n	8008bf8 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8008bda:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8008bde:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d105      	bne.n	8008bf2 <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8008bec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008bf0:	e002      	b.n	8008bf8 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8008bf2:	4b88      	ldr	r3, [pc, #544]	; (8008e14 <VL53L0X_StaticInit+0x304>)
 8008bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 8008bf8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d107      	bne.n	8008c10 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 8008c00:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f003 fbf1 	bl	800c3ec <VL53L0X_load_tuning_settings>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8008c10:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2100      	movs	r1, #0
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 f9be 	bl	8009fa4 <VL53L0X_SetGpioConfig>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c2e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d121      	bne.n	8008c7a <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008c36:	2201      	movs	r2, #1
 8008c38:	21ff      	movs	r1, #255	; 0xff
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f004 faa8 	bl	800d190 <VL53L0X_WrByte>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8008c46:	f107 031a 	add.w	r3, r7, #26
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	2184      	movs	r1, #132	; 0x84
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f004 fb4a 	bl	800d2e8 <VL53L0X_RdWord>
 8008c54:	4603      	mov	r3, r0
 8008c56:	461a      	mov	r2, r3
 8008c58:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008c62:	2200      	movs	r2, #0
 8008c64:	21ff      	movs	r1, #255	; 0xff
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f004 fa92 	bl	800d190 <VL53L0X_WrByte>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008c74:	4313      	orrs	r3, r2
 8008c76:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c7a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d105      	bne.n	8008c8e <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8008c82:	8b7b      	ldrh	r3, [r7, #26]
 8008c84:	011b      	lsls	r3, r3, #4
 8008c86:	461a      	mov	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008c8e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d108      	bne.n	8008ca8 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008c96:	f107 031c 	add.w	r3, r7, #28
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f903 	bl	8008ea8 <VL53L0X_GetDeviceParameters>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 8008ca8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d110      	bne.n	8008cd2 <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8008cb0:	f107 0319 	add.w	r3, r7, #25
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f9eb 	bl	8009092 <VL53L0X_GetFractionEnable>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 8008cc2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d103      	bne.n	8008cd2 <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8008cca:	7e7a      	ldrb	r2, [r7, #25]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 8008cd2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d107      	bne.n	8008cea <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3308      	adds	r3, #8
 8008cde:	f107 011c 	add.w	r1, r7, #28
 8008ce2:	2278      	movs	r2, #120	; 0x78
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f004 fbd7 	bl	800d498 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8008cea:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d111      	bne.n	8008d16 <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 8008cf2:	f107 0319 	add.w	r3, r7, #25
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f004 faca 	bl	800d294 <VL53L0X_RdByte>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8008d06:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d103      	bne.n	8008d16 <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8008d0e:	7e7a      	ldrb	r2, [r7, #25]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8008d16:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d107      	bne.n	8008d2e <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2100      	movs	r1, #0
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa12 	bl	800914c <VL53L0X_SetSequenceStepEnable>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008d2e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d107      	bne.n	8008d46 <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8008d36:	2200      	movs	r2, #0
 8008d38:	2102      	movs	r1, #2
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa06 	bl	800914c <VL53L0X_SetSequenceStepEnable>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8008d46:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d103      	bne.n	8008d56 <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2203      	movs	r2, #3
 8008d52:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8008d56:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d109      	bne.n	8008d72 <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 8008d5e:	f107 0313 	add.w	r3, r7, #19
 8008d62:	461a      	mov	r2, r3
 8008d64:	2100      	movs	r1, #0
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f9d8 	bl	800911c <VL53L0X_GetVcselPulsePeriod>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008d72:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d103      	bne.n	8008d82 <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008d7a:	7cfa      	ldrb	r2, [r7, #19]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8008d82:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d109      	bne.n	8008d9e <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8008d8a:	f107 0313 	add.w	r3, r7, #19
 8008d8e:	461a      	mov	r2, r3
 8008d90:	2101      	movs	r1, #1
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f9c2 	bl	800911c <VL53L0X_GetVcselPulsePeriod>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008d9e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d103      	bne.n	8008dae <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008da6:	7cfa      	ldrb	r2, [r7, #19]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8008dae:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d109      	bne.n	8008dca <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 8008db6:	f107 030c 	add.w	r3, r7, #12
 8008dba:	461a      	mov	r2, r3
 8008dbc:	2103      	movs	r1, #3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f002 ff86 	bl	800bcd0 <get_sequence_step_timeout>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008dca:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d103      	bne.n	8008dda <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8008dda:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d109      	bne.n	8008df6 <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 8008de2:	f107 030c 	add.w	r3, r7, #12
 8008de6:	461a      	mov	r2, r3
 8008de8:	2104      	movs	r1, #4
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f002 ff70 	bl	800bcd0 <get_sequence_step_timeout>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008df6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d103      	bne.n	8008e06 <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008e06:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	37a8      	adds	r7, #168	; 0xa8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	200000ac 	.word	0x200000ac

08008e18 <VL53L0X_ResetDevice>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_ResetDevice(VL53L0X_DEV Dev)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* Set reset bit */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 8008e24:	2200      	movs	r2, #0
 8008e26:	21bf      	movs	r1, #191	; 0xbf
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f004 f9b1 	bl	800d190 <VL53L0X_WrByte>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73fb      	strb	r3, [r7, #15]
		0x00);

	/* Wait for some time */
	if (Status == VL53L0X_ERROR_NONE) {
 8008e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10b      	bne.n	8008e52 <VL53L0X_ResetDevice+0x3a>
		do {
			Status = VL53L0X_RdByte(Dev,
 8008e3a:	f107 030e 	add.w	r3, r7, #14
 8008e3e:	461a      	mov	r2, r3
 8008e40:	21c0      	movs	r1, #192	; 0xc0
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f004 fa26 	bl	800d294 <VL53L0X_RdByte>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Byte);
		} while (Byte != 0x00);
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1f3      	bne.n	8008e3a <VL53L0X_ResetDevice+0x22>
	}

	VL53L0X_PollingDelay(Dev);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f004 fabc 	bl	800d3d0 <VL53L0X_PollingDelay>

	/* Release reset */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 8008e58:	2201      	movs	r2, #1
 8008e5a:	21bf      	movs	r1, #191	; 0xbf
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f004 f997 	bl	800d190 <VL53L0X_WrByte>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]
		0x01);

	/* Wait until correct boot-up of the device */
	if (Status == VL53L0X_ERROR_NONE) {
 8008e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10b      	bne.n	8008e86 <VL53L0X_ResetDevice+0x6e>
		do {
			Status = VL53L0X_RdByte(Dev,
 8008e6e:	f107 030e 	add.w	r3, r7, #14
 8008e72:	461a      	mov	r2, r3
 8008e74:	21c0      	movs	r1, #192	; 0xc0
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f004 fa0c 	bl	800d294 <VL53L0X_RdByte>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Byte);
		} while (Byte == 0x00);
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0f3      	beq.n	8008e6e <VL53L0X_ResetDevice+0x56>
	}

	VL53L0X_PollingDelay(Dev);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f004 faa2 	bl	800d3d0 <VL53L0X_PollingDelay>

	/* Set PAL State to VL53L0X_STATE_POWERDOWN */
	if (Status == VL53L0X_ERROR_NONE)
 8008e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d103      	bne.n	8008e9c <VL53L0X_ResetDevice+0x84>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_POWERDOWN);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 8008e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f8d6 	bl	800906c <VL53L0X_GetDeviceMode>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d107      	bne.n	8008edc <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa86 	bl	80093e4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8008edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d102      	bne.n	8008eea <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8008eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d107      	bne.n	8008f02 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	3310      	adds	r3, #16
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fabc 	bl	8009476 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8008f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d107      	bne.n	8008f1a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	3314      	adds	r3, #20
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7ff fc63 	bl	80087dc <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8008f16:	4603      	mov	r3, r0
 8008f18:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8008f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d134      	bne.n	8008f8c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008f22:	2300      	movs	r3, #0
 8008f24:	60bb      	str	r3, [r7, #8]
 8008f26:	e02a      	b.n	8008f7e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d12a      	bne.n	8008f86 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	b299      	uxth	r1, r3
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	3308      	adds	r3, #8
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	3304      	adds	r3, #4
 8008f40:	461a      	mov	r2, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fbdc 	bl	8009700 <VL53L0X_GetLimitCheckValue>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d117      	bne.n	8008f8a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	b299      	uxth	r1, r3
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	3318      	adds	r3, #24
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	4413      	add	r3, r2
 8008f66:	461a      	mov	r2, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fb43 	bl	80095f4 <VL53L0X_GetLimitCheckEnable>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	461a      	mov	r2, r3
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	60bb      	str	r3, [r7, #8]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b05      	cmp	r3, #5
 8008f82:	ddd1      	ble.n	8008f28 <VL53L0X_GetDeviceParameters+0x80>
 8008f84:	e002      	b.n	8008f8c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8008f86:	bf00      	nop
 8008f88:	e000      	b.n	8008f8c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8008f8a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d107      	bne.n	8008fa4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	3374      	adds	r3, #116	; 0x74
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fc3e 	bl	800981c <VL53L0X_GetWrapAroundCheckEnable>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8008fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d107      	bne.n	8008fbc <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	3304      	adds	r3, #4
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f89f 	bl	80090f6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d120      	bne.n	8009006 <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60bb      	str	r3, [r7, #8]
 8008fc8:	e01a      	b.n	8009000 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	3310      	adds	r3, #16
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	330e      	adds	r3, #14
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	440b      	add	r3, r1
 8008fe0:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	3316      	adds	r3, #22
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	3314      	adds	r3, #20
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	440b      	add	r3, r1
 8008ff8:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	60bb      	str	r3, [r7, #8]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b06      	cmp	r3, #6
 8009004:	dde1      	ble.n	8008fca <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009006:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	2b15      	cmp	r3, #21
 8009028:	bf8c      	ite	hi
 800902a:	2201      	movhi	r2, #1
 800902c:	2200      	movls	r2, #0
 800902e:	b2d2      	uxtb	r2, r2
 8009030:	2a00      	cmp	r2, #0
 8009032:	d10e      	bne.n	8009052 <VL53L0X_SetDeviceMode+0x3e>
 8009034:	2201      	movs	r2, #1
 8009036:	409a      	lsls	r2, r3
 8009038:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <VL53L0X_SetDeviceMode+0x54>)
 800903a:	4013      	ands	r3, r2
 800903c:	2b00      	cmp	r3, #0
 800903e:	bf14      	ite	ne
 8009040:	2301      	movne	r3, #1
 8009042:	2300      	moveq	r3, #0
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d003      	beq.n	8009052 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	78fa      	ldrb	r2, [r7, #3]
 800904e:	721a      	strb	r2, [r3, #8]
		break;
 8009050:	e001      	b.n	8009056 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009052:	23f8      	movs	r3, #248	; 0xf8
 8009054:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009056:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3714      	adds	r7, #20
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	0030000b 	.word	0x0030000b

0800906c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	7a1a      	ldrb	r2, [r3, #8]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009082:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	2109      	movs	r1, #9
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f004 f8f5 	bl	800d294 <VL53L0X_RdByte>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80090ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d106      	bne.n	80090c4 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80090c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090da:	2300      	movs	r3, #0
 80090dc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f002 ffff 	bl	800c0e4 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80090ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b084      	sub	sp, #16
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009100:	2300      	movs	r3, #0
 8009102:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f003 f8bf 	bl	800c28a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800910c:	4603      	mov	r3, r0
 800910e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8009110:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	460b      	mov	r3, r1
 8009126:	607a      	str	r2, [r7, #4]
 8009128:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800912a:	2300      	movs	r3, #0
 800912c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800912e:	7afb      	ldrb	r3, [r7, #11]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	4619      	mov	r1, r3
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f002 ff9e 	bl	800c076 <VL53L0X_get_vcsel_pulse_period>
 800913a:	4603      	mov	r3, r0
 800913c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800913e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
 8009158:	4613      	mov	r3, r2
 800915a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800915c:	2300      	movs	r3, #0
 800915e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009168:	f107 030f 	add.w	r3, r7, #15
 800916c:	461a      	mov	r2, r3
 800916e:	2101      	movs	r1, #1
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f004 f88f 	bl	800d294 <VL53L0X_RdByte>
 8009176:	4603      	mov	r3, r0
 8009178:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800917e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d15a      	bne.n	800923c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8009186:	78bb      	ldrb	r3, [r7, #2]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d12b      	bne.n	80091e4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800918c:	78fb      	ldrb	r3, [r7, #3]
 800918e:	2b04      	cmp	r3, #4
 8009190:	d825      	bhi.n	80091de <VL53L0X_SetSequenceStepEnable+0x92>
 8009192:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	080091ad 	.word	0x080091ad
 800919c:	080091b7 	.word	0x080091b7
 80091a0:	080091c1 	.word	0x080091c1
 80091a4:	080091cb 	.word	0x080091cb
 80091a8:	080091d5 	.word	0x080091d5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80091ac:	7dbb      	ldrb	r3, [r7, #22]
 80091ae:	f043 0310 	orr.w	r3, r3, #16
 80091b2:	75bb      	strb	r3, [r7, #22]
				break;
 80091b4:	e043      	b.n	800923e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80091b6:	7dbb      	ldrb	r3, [r7, #22]
 80091b8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80091bc:	75bb      	strb	r3, [r7, #22]
				break;
 80091be:	e03e      	b.n	800923e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80091c0:	7dbb      	ldrb	r3, [r7, #22]
 80091c2:	f043 0304 	orr.w	r3, r3, #4
 80091c6:	75bb      	strb	r3, [r7, #22]
				break;
 80091c8:	e039      	b.n	800923e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80091ca:	7dbb      	ldrb	r3, [r7, #22]
 80091cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d0:	75bb      	strb	r3, [r7, #22]
				break;
 80091d2:	e034      	b.n	800923e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80091d4:	7dbb      	ldrb	r3, [r7, #22]
 80091d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091da:	75bb      	strb	r3, [r7, #22]
				break;
 80091dc:	e02f      	b.n	800923e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80091de:	23fc      	movs	r3, #252	; 0xfc
 80091e0:	75fb      	strb	r3, [r7, #23]
 80091e2:	e02c      	b.n	800923e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80091e4:	78fb      	ldrb	r3, [r7, #3]
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d825      	bhi.n	8009236 <VL53L0X_SetSequenceStepEnable+0xea>
 80091ea:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009205 	.word	0x08009205
 80091f4:	0800920f 	.word	0x0800920f
 80091f8:	08009219 	.word	0x08009219
 80091fc:	08009223 	.word	0x08009223
 8009200:	0800922d 	.word	0x0800922d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8009204:	7dbb      	ldrb	r3, [r7, #22]
 8009206:	f023 0310 	bic.w	r3, r3, #16
 800920a:	75bb      	strb	r3, [r7, #22]
				break;
 800920c:	e017      	b.n	800923e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800920e:	7dbb      	ldrb	r3, [r7, #22]
 8009210:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8009214:	75bb      	strb	r3, [r7, #22]
				break;
 8009216:	e012      	b.n	800923e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8009218:	7dbb      	ldrb	r3, [r7, #22]
 800921a:	f023 0304 	bic.w	r3, r3, #4
 800921e:	75bb      	strb	r3, [r7, #22]
				break;
 8009220:	e00d      	b.n	800923e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8009222:	7dbb      	ldrb	r3, [r7, #22]
 8009224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009228:	75bb      	strb	r3, [r7, #22]
				break;
 800922a:	e008      	b.n	800923e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800922c:	7dbb      	ldrb	r3, [r7, #22]
 800922e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009232:	75bb      	strb	r3, [r7, #22]
				break;
 8009234:	e003      	b.n	800923e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009236:	23fc      	movs	r3, #252	; 0xfc
 8009238:	75fb      	strb	r3, [r7, #23]
 800923a:	e000      	b.n	800923e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800923c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	7dba      	ldrb	r2, [r7, #22]
 8009242:	429a      	cmp	r2, r3
 8009244:	d01e      	beq.n	8009284 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8009246:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d107      	bne.n	800925e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800924e:	7dbb      	ldrb	r3, [r7, #22]
 8009250:	461a      	mov	r2, r3
 8009252:	2101      	movs	r1, #1
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f003 ff9b 	bl	800d190 <VL53L0X_WrByte>
 800925a:	4603      	mov	r3, r0
 800925c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800925e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d103      	bne.n	800926e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	7dba      	ldrb	r2, [r7, #22]
 800926a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800926e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d106      	bne.n	8009284 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800927c:	6939      	ldr	r1, [r7, #16]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff ff26 	bl	80090d0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009284:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8009290:	b480      	push	{r7}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	607b      	str	r3, [r7, #4]
 800929a:	460b      	mov	r3, r1
 800929c:	72fb      	strb	r3, [r7, #11]
 800929e:	4613      	mov	r3, r2
 80092a0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092a2:	2300      	movs	r3, #0
 80092a4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80092ac:	7afb      	ldrb	r3, [r7, #11]
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d836      	bhi.n	8009320 <sequence_step_enabled+0x90>
 80092b2:	a201      	add	r2, pc, #4	; (adr r2, 80092b8 <sequence_step_enabled+0x28>)
 80092b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b8:	080092cd 	.word	0x080092cd
 80092bc:	080092df 	.word	0x080092df
 80092c0:	080092f1 	.word	0x080092f1
 80092c4:	08009303 	.word	0x08009303
 80092c8:	08009315 	.word	0x08009315
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80092cc:	7abb      	ldrb	r3, [r7, #10]
 80092ce:	111b      	asrs	r3, r3, #4
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	701a      	strb	r2, [r3, #0]
		break;
 80092dc:	e022      	b.n	8009324 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80092de:	7abb      	ldrb	r3, [r7, #10]
 80092e0:	10db      	asrs	r3, r3, #3
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	701a      	strb	r2, [r3, #0]
		break;
 80092ee:	e019      	b.n	8009324 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80092f0:	7abb      	ldrb	r3, [r7, #10]
 80092f2:	109b      	asrs	r3, r3, #2
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	701a      	strb	r2, [r3, #0]
		break;
 8009300:	e010      	b.n	8009324 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8009302:	7abb      	ldrb	r3, [r7, #10]
 8009304:	119b      	asrs	r3, r3, #6
 8009306:	b2db      	uxtb	r3, r3
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	b2da      	uxtb	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	701a      	strb	r2, [r3, #0]
		break;
 8009312:	e007      	b.n	8009324 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8009314:	7abb      	ldrb	r3, [r7, #10]
 8009316:	09db      	lsrs	r3, r3, #7
 8009318:	b2da      	uxtb	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	701a      	strb	r2, [r3, #0]
		break;
 800931e:	e001      	b.n	8009324 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009320:	23fc      	movs	r3, #252	; 0xfc
 8009322:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009324:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009328:	4618      	mov	r0, r3
 800932a:	371c      	adds	r7, #28
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800933e:	2300      	movs	r3, #0
 8009340:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009346:	f107 030e 	add.w	r3, r7, #14
 800934a:	461a      	mov	r2, r3
 800934c:	2101      	movs	r1, #1
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f003 ffa0 	bl	800d294 <VL53L0X_RdByte>
 8009354:	4603      	mov	r3, r0
 8009356:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d107      	bne.n	8009370 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8009360:	7bba      	ldrb	r2, [r7, #14]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2100      	movs	r1, #0
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff ff92 	bl	8009290 <sequence_step_enabled>
 800936c:	4603      	mov	r3, r0
 800936e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d108      	bne.n	800938a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009378:	7bba      	ldrb	r2, [r7, #14]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	3302      	adds	r3, #2
 800937e:	2101      	movs	r1, #1
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7ff ff85 	bl	8009290 <sequence_step_enabled>
 8009386:	4603      	mov	r3, r0
 8009388:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800938a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d108      	bne.n	80093a4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8009392:	7bba      	ldrb	r2, [r7, #14]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	3301      	adds	r3, #1
 8009398:	2102      	movs	r1, #2
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff ff78 	bl	8009290 <sequence_step_enabled>
 80093a0:	4603      	mov	r3, r0
 80093a2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80093a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d108      	bne.n	80093be <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80093ac:	7bba      	ldrb	r2, [r7, #14]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	3303      	adds	r3, #3
 80093b2:	2103      	movs	r1, #3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7ff ff6b 	bl	8009290 <sequence_step_enabled>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80093be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d108      	bne.n	80093d8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80093c6:	7bba      	ldrb	r2, [r7, #14]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	3304      	adds	r3, #4
 80093cc:	2104      	movs	r1, #4
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7ff ff5e 	bl	8009290 <sequence_step_enabled>
 80093d4:	4603      	mov	r3, r0
 80093d6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80093d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093ee:	2300      	movs	r3, #0
 80093f0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80093f2:	f107 030c 	add.w	r3, r7, #12
 80093f6:	461a      	mov	r2, r3
 80093f8:	21f8      	movs	r1, #248	; 0xf8
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f003 ff74 	bl	800d2e8 <VL53L0X_RdWord>
 8009400:	4603      	mov	r3, r0
 8009402:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8009404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d108      	bne.n	800941e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800940c:	f107 0308 	add.w	r3, r7, #8
 8009410:	461a      	mov	r2, r3
 8009412:	2104      	movs	r1, #4
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f003 ff9f 	bl	800d358 <VL53L0X_RdDWord>
 800941a:	4603      	mov	r3, r0
 800941c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800941e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10c      	bne.n	8009440 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8009426:	89bb      	ldrh	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d005      	beq.n	8009438 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	89ba      	ldrh	r2, [r7, #12]
 8009430:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009440:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	7d1b      	ldrb	r3, [r3, #20]
 800945e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	7bba      	ldrb	r2, [r7, #14]
 8009464:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009466:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b086      	sub	sp, #24
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009480:	2300      	movs	r3, #0
 8009482:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8009484:	f107 030e 	add.w	r3, r7, #14
 8009488:	461a      	mov	r2, r3
 800948a:	2120      	movs	r1, #32
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f003 ff2b 	bl	800d2e8 <VL53L0X_RdWord>
 8009492:	4603      	mov	r3, r0
 8009494:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8009496:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d118      	bne.n	80094d0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800949e:	89fb      	ldrh	r3, [r7, #14]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d109      	bne.n	80094b8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	751a      	strb	r2, [r3, #20]
 80094b6:	e00b      	b.n	80094d0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80094b8:	89fb      	ldrh	r3, [r7, #14]
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80094d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	807b      	strh	r3, [r7, #2]
 80094e8:	4613      	mov	r3, r2
 80094ea:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094ec:	2300      	movs	r3, #0
 80094ee:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80094fc:	887b      	ldrh	r3, [r7, #2]
 80094fe:	2b05      	cmp	r3, #5
 8009500:	d902      	bls.n	8009508 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009502:	23fc      	movs	r3, #252	; 0xfc
 8009504:	75fb      	strb	r3, [r7, #23]
 8009506:	e05b      	b.n	80095c0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009508:	787b      	ldrb	r3, [r7, #1]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800950e:	2300      	movs	r3, #0
 8009510:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009516:	2301      	movs	r3, #1
 8009518:	73bb      	strb	r3, [r7, #14]
 800951a:	e00a      	b.n	8009532 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800951c:	887b      	ldrh	r3, [r7, #2]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	330a      	adds	r3, #10
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800952e:	2301      	movs	r3, #1
 8009530:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8009532:	887b      	ldrh	r3, [r7, #2]
 8009534:	2b05      	cmp	r3, #5
 8009536:	d841      	bhi.n	80095bc <VL53L0X_SetLimitCheckEnable+0xe0>
 8009538:	a201      	add	r2, pc, #4	; (adr r2, 8009540 <VL53L0X_SetLimitCheckEnable+0x64>)
 800953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953e:	bf00      	nop
 8009540:	08009559 	.word	0x08009559
 8009544:	08009563 	.word	0x08009563
 8009548:	08009579 	.word	0x08009579
 800954c:	08009583 	.word	0x08009583
 8009550:	0800958d 	.word	0x0800958d
 8009554:	080095a5 	.word	0x080095a5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	7bfa      	ldrb	r2, [r7, #15]
 800955c:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8009560:	e02e      	b.n	80095c0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009566:	b29b      	uxth	r3, r3
 8009568:	461a      	mov	r2, r3
 800956a:	2144      	movs	r1, #68	; 0x44
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f003 fe33 	bl	800d1d8 <VL53L0X_WrWord>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]

			break;
 8009576:	e023      	b.n	80095c0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7bfa      	ldrb	r2, [r7, #15]
 800957c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8009580:	e01e      	b.n	80095c0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	7bfa      	ldrb	r2, [r7, #15]
 8009586:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800958a:	e019      	b.n	80095c0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	005b      	lsls	r3, r3, #1
 8009590:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009592:	7b7b      	ldrb	r3, [r7, #13]
 8009594:	22fe      	movs	r2, #254	; 0xfe
 8009596:	2160      	movs	r1, #96	; 0x60
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f003 fe47 	bl	800d22c <VL53L0X_UpdateByte>
 800959e:	4603      	mov	r3, r0
 80095a0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80095a2:	e00d      	b.n	80095c0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80095a4:	7bbb      	ldrb	r3, [r7, #14]
 80095a6:	011b      	lsls	r3, r3, #4
 80095a8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80095aa:	7b7b      	ldrb	r3, [r7, #13]
 80095ac:	22ef      	movs	r2, #239	; 0xef
 80095ae:	2160      	movs	r1, #96	; 0x60
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f003 fe3b 	bl	800d22c <VL53L0X_UpdateByte>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80095ba:	e001      	b.n	80095c0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80095bc:	23fc      	movs	r3, #252	; 0xfc
 80095be:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80095c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10f      	bne.n	80095e8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80095c8:	787b      	ldrb	r3, [r7, #1]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d106      	bne.n	80095dc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80095ce:	887b      	ldrh	r3, [r7, #2]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	4413      	add	r3, r2
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2020 	strb.w	r2, [r3, #32]
 80095da:	e005      	b.n	80095e8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80095dc:	887b      	ldrh	r3, [r7, #2]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	4413      	add	r3, r2
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80095e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	460b      	mov	r3, r1
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009602:	2300      	movs	r3, #0
 8009604:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009606:	897b      	ldrh	r3, [r7, #10]
 8009608:	2b05      	cmp	r3, #5
 800960a:	d905      	bls.n	8009618 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800960c:	23fc      	movs	r3, #252	; 0xfc
 800960e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	701a      	strb	r2, [r3, #0]
 8009616:	e008      	b.n	800962a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009618:	897b      	ldrh	r3, [r7, #10]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	4413      	add	r3, r2
 800961e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009622:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	7dba      	ldrb	r2, [r7, #22]
 8009628:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800962a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800962e:	4618      	mov	r0, r3
 8009630:	371c      	adds	r7, #28
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
	...

0800963c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	460b      	mov	r3, r1
 8009646:	607a      	str	r2, [r7, #4]
 8009648:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800964a:	2300      	movs	r3, #0
 800964c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800964e:	897b      	ldrh	r3, [r7, #10]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	4413      	add	r3, r2
 8009654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009658:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800965a:	7dbb      	ldrb	r3, [r7, #22]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d107      	bne.n	8009670 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009660:	897b      	ldrh	r3, [r7, #10]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	330a      	adds	r3, #10
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	605a      	str	r2, [r3, #4]
 800966e:	e040      	b.n	80096f2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8009670:	897b      	ldrh	r3, [r7, #10]
 8009672:	2b05      	cmp	r3, #5
 8009674:	d830      	bhi.n	80096d8 <VL53L0X_SetLimitCheckValue+0x9c>
 8009676:	a201      	add	r2, pc, #4	; (adr r2, 800967c <VL53L0X_SetLimitCheckValue+0x40>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	08009695 	.word	0x08009695
 8009680:	0800969d 	.word	0x0800969d
 8009684:	080096b3 	.word	0x080096b3
 8009688:	080096bb 	.word	0x080096bb
 800968c:	080096c3 	.word	0x080096c3
 8009690:	080096c3 	.word	0x080096c3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800969a:	e01f      	b.n	80096dc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	461a      	mov	r2, r3
 80096a4:	2144      	movs	r1, #68	; 0x44
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f003 fd96 	bl	800d1d8 <VL53L0X_WrWord>
 80096ac:	4603      	mov	r3, r0
 80096ae:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80096b0:	e014      	b.n	80096dc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80096b8:	e010      	b.n	80096dc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80096c0:	e00c      	b.n	80096dc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	461a      	mov	r2, r3
 80096ca:	2164      	movs	r1, #100	; 0x64
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f003 fd83 	bl	800d1d8 <VL53L0X_WrWord>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80096d6:	e001      	b.n	80096dc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80096d8:	23fc      	movs	r3, #252	; 0xfc
 80096da:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80096dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d106      	bne.n	80096f2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80096e4:	897b      	ldrh	r3, [r7, #10]
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	330a      	adds	r3, #10
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80096f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop

08009700 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b088      	sub	sp, #32
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	460b      	mov	r3, r1
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800970e:	2300      	movs	r3, #0
 8009710:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009716:	897b      	ldrh	r3, [r7, #10]
 8009718:	2b05      	cmp	r3, #5
 800971a:	d847      	bhi.n	80097ac <VL53L0X_GetLimitCheckValue+0xac>
 800971c:	a201      	add	r2, pc, #4	; (adr r2, 8009724 <VL53L0X_GetLimitCheckValue+0x24>)
 800971e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009722:	bf00      	nop
 8009724:	0800973d 	.word	0x0800973d
 8009728:	08009749 	.word	0x08009749
 800972c:	0800976f 	.word	0x0800976f
 8009730:	0800977b 	.word	0x0800977b
 8009734:	08009787 	.word	0x08009787
 8009738:	08009787 	.word	0x08009787

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009740:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	77bb      	strb	r3, [r7, #30]
		break;
 8009746:	e033      	b.n	80097b0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009748:	f107 0316 	add.w	r3, r7, #22
 800974c:	461a      	mov	r2, r3
 800974e:	2144      	movs	r1, #68	; 0x44
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f003 fdc9 	bl	800d2e8 <VL53L0X_RdWord>
 8009756:	4603      	mov	r3, r0
 8009758:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800975a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d102      	bne.n	8009768 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009762:	8afb      	ldrh	r3, [r7, #22]
 8009764:	025b      	lsls	r3, r3, #9
 8009766:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8009768:	2301      	movs	r3, #1
 800976a:	77bb      	strb	r3, [r7, #30]
		break;
 800976c:	e020      	b.n	80097b0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009772:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	77bb      	strb	r3, [r7, #30]
		break;
 8009778:	e01a      	b.n	80097b0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	77bb      	strb	r3, [r7, #30]
		break;
 8009784:	e014      	b.n	80097b0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009786:	f107 0316 	add.w	r3, r7, #22
 800978a:	461a      	mov	r2, r3
 800978c:	2164      	movs	r1, #100	; 0x64
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f003 fdaa 	bl	800d2e8 <VL53L0X_RdWord>
 8009794:	4603      	mov	r3, r0
 8009796:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009798:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d102      	bne.n	80097a6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80097a0:	8afb      	ldrh	r3, [r7, #22]
 80097a2:	025b      	lsls	r3, r3, #9
 80097a4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	77bb      	strb	r3, [r7, #30]
		break;
 80097aa:	e001      	b.n	80097b0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80097ac:	23fc      	movs	r3, #252	; 0xfc
 80097ae:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80097b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d12a      	bne.n	800980e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80097b8:	7fbb      	ldrb	r3, [r7, #30]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d124      	bne.n	8009808 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d110      	bne.n	80097e6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80097c4:	897b      	ldrh	r3, [r7, #10]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	330a      	adds	r3, #10
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80097d8:	897b      	ldrh	r3, [r7, #10]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	4413      	add	r3, r2
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2020 	strb.w	r2, [r3, #32]
 80097e4:	e013      	b.n	800980e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	69ba      	ldr	r2, [r7, #24]
 80097ea:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80097ec:	897b      	ldrh	r3, [r7, #10]
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	330a      	adds	r3, #10
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80097fa:	897b      	ldrh	r3, [r7, #10]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	4413      	add	r3, r2
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2020 	strb.w	r2, [r3, #32]
 8009806:	e002      	b.n	800980e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800980e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009812:	4618      	mov	r0, r3
 8009814:	3720      	adds	r7, #32
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop

0800981c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009826:	2300      	movs	r3, #0
 8009828:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800982a:	f107 030e 	add.w	r3, r7, #14
 800982e:	461a      	mov	r2, r3
 8009830:	2101      	movs	r1, #1
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f003 fd2e 	bl	800d294 <VL53L0X_RdByte>
 8009838:	4603      	mov	r3, r0
 800983a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800983c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10e      	bne.n	8009862 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8009844:	7bba      	ldrb	r2, [r7, #14]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 800984c:	7bbb      	ldrb	r3, [r7, #14]
 800984e:	b25b      	sxtb	r3, r3
 8009850:	2b00      	cmp	r3, #0
 8009852:	da03      	bge.n	800985c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2201      	movs	r2, #1
 8009858:	701a      	strb	r2, [r3, #0]
 800985a:	e002      	b.n	8009862 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	2200      	movs	r2, #0
 8009860:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d104      	bne.n	8009874 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781a      	ldrb	r2, [r3, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009888:	2300      	movs	r3, #0
 800988a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800988c:	f107 030e 	add.w	r3, r7, #14
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff fbea 	bl	800906c <VL53L0X_GetDeviceMode>
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 800989c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d107      	bne.n	80098b4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d104      	bne.n	80098b4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f924 	bl	8009af8 <VL53L0X_StartMeasurement>
 80098b0:	4603      	mov	r3, r0
 80098b2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80098b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d104      	bne.n	80098c6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f001 fbcb 	bl	800b058 <VL53L0X_measurement_poll_for_completion>
 80098c2:	4603      	mov	r3, r0
 80098c4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80098c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d106      	bne.n	80098dc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d103      	bne.n	80098dc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2203      	movs	r2, #3
 80098d8:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 80098dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098f4:	2300      	movs	r3, #0
 80098f6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80098f8:	2301      	movs	r3, #1
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	68b9      	ldr	r1, [r7, #8]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f001 fb6d 	bl	800afde <VL53L0X_perform_ref_calibration>
 8009904:	4603      	mov	r3, r0
 8009906:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8009908:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009920:	2300      	movs	r3, #0
 8009922:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800992a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 800992c:	7dbb      	ldrb	r3, [r7, #22]
 800992e:	2b03      	cmp	r3, #3
 8009930:	f000 8093 	beq.w	8009a5a <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 8009934:	2b03      	cmp	r3, #3
 8009936:	f300 80d6 	bgt.w	8009ae6 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 800993a:	2b01      	cmp	r3, #1
 800993c:	d002      	beq.n	8009944 <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 800993e:	2b02      	cmp	r3, #2
 8009940:	d047      	beq.n	80099d2 <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 8009942:	e0d0      	b.n	8009ae6 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8009944:	f107 030c 	add.w	r3, r7, #12
 8009948:	f107 0210 	add.w	r2, r7, #16
 800994c:	2101      	movs	r1, #1
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fc4c 	bl	800a1ec <VL53L0X_GetInterruptThresholds>
 8009954:	4603      	mov	r3, r0
 8009956:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800995e:	f240 80bd 	bls.w	8009adc <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 8009962:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009966:	2b00      	cmp	r3, #0
 8009968:	f040 80b8 	bne.w	8009adc <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800996c:	78fb      	ldrb	r3, [r7, #3]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d006      	beq.n	8009980 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 8009972:	4960      	ldr	r1, [pc, #384]	; (8009af4 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f002 fd39 	bl	800c3ec <VL53L0X_load_tuning_settings>
 800997a:	4603      	mov	r3, r0
 800997c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800997e:	e0ad      	b.n	8009adc <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8009980:	2204      	movs	r2, #4
 8009982:	21ff      	movs	r1, #255	; 0xff
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f003 fc03 	bl	800d190 <VL53L0X_WrByte>
 800998a:	4603      	mov	r3, r0
 800998c:	461a      	mov	r2, r3
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	4313      	orrs	r3, r2
 8009992:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8009994:	2200      	movs	r2, #0
 8009996:	2170      	movs	r1, #112	; 0x70
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f003 fbf9 	bl	800d190 <VL53L0X_WrByte>
 800999e:	4603      	mov	r3, r0
 80099a0:	461a      	mov	r2, r3
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80099a8:	2200      	movs	r2, #0
 80099aa:	21ff      	movs	r1, #255	; 0xff
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f003 fbef 	bl	800d190 <VL53L0X_WrByte>
 80099b2:	4603      	mov	r3, r0
 80099b4:	461a      	mov	r2, r3
 80099b6:	7dfb      	ldrb	r3, [r7, #23]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80099bc:	2200      	movs	r2, #0
 80099be:	2180      	movs	r1, #128	; 0x80
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f003 fbe5 	bl	800d190 <VL53L0X_WrByte>
 80099c6:	4603      	mov	r3, r0
 80099c8:	461a      	mov	r2, r3
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	75fb      	strb	r3, [r7, #23]
		break;
 80099d0:	e084      	b.n	8009adc <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80099d2:	f107 030c 	add.w	r3, r7, #12
 80099d6:	f107 0210 	add.w	r2, r7, #16
 80099da:	2101      	movs	r1, #1
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fc05 	bl	800a1ec <VL53L0X_GetInterruptThresholds>
 80099e2:	4603      	mov	r3, r0
 80099e4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d079      	beq.n	8009ae0 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 80099ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d175      	bne.n	8009ae0 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80099f4:	78fb      	ldrb	r3, [r7, #3]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d006      	beq.n	8009a08 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 80099fa:	493e      	ldr	r1, [pc, #248]	; (8009af4 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f002 fcf5 	bl	800c3ec <VL53L0X_load_tuning_settings>
 8009a02:	4603      	mov	r3, r0
 8009a04:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8009a06:	e06b      	b.n	8009ae0 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8009a08:	2204      	movs	r2, #4
 8009a0a:	21ff      	movs	r1, #255	; 0xff
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f003 fbbf 	bl	800d190 <VL53L0X_WrByte>
 8009a12:	4603      	mov	r3, r0
 8009a14:	461a      	mov	r2, r3
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2170      	movs	r1, #112	; 0x70
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f003 fbb5 	bl	800d190 <VL53L0X_WrByte>
 8009a26:	4603      	mov	r3, r0
 8009a28:	461a      	mov	r2, r3
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009a30:	2200      	movs	r2, #0
 8009a32:	21ff      	movs	r1, #255	; 0xff
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f003 fbab 	bl	800d190 <VL53L0X_WrByte>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	7dfb      	ldrb	r3, [r7, #23]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009a44:	2200      	movs	r2, #0
 8009a46:	2180      	movs	r1, #128	; 0x80
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f003 fba1 	bl	800d190 <VL53L0X_WrByte>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	461a      	mov	r2, r3
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	75fb      	strb	r3, [r7, #23]
		break;
 8009a58:	e042      	b.n	8009ae0 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8009a5a:	f107 030c 	add.w	r3, r7, #12
 8009a5e:	f107 0210 	add.w	r2, r7, #16
 8009a62:	2101      	movs	r1, #1
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fbc1 	bl	800a1ec <VL53L0X_GetInterruptThresholds>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 8009a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d136      	bne.n	8009ae4 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d006      	beq.n	8009a8a <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 8009a7c:	491d      	ldr	r1, [pc, #116]	; (8009af4 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f002 fcb4 	bl	800c3ec <VL53L0X_load_tuning_settings>
 8009a84:	4603      	mov	r3, r0
 8009a86:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8009a88:	e02c      	b.n	8009ae4 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8009a8a:	2204      	movs	r2, #4
 8009a8c:	21ff      	movs	r1, #255	; 0xff
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f003 fb7e 	bl	800d190 <VL53L0X_WrByte>
 8009a94:	4603      	mov	r3, r0
 8009a96:	461a      	mov	r2, r3
 8009a98:	7dfb      	ldrb	r3, [r7, #23]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	2170      	movs	r1, #112	; 0x70
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f003 fb74 	bl	800d190 <VL53L0X_WrByte>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	461a      	mov	r2, r3
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	21ff      	movs	r1, #255	; 0xff
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f003 fb6a 	bl	800d190 <VL53L0X_WrByte>
 8009abc:	4603      	mov	r3, r0
 8009abe:	461a      	mov	r2, r3
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2180      	movs	r1, #128	; 0x80
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f003 fb60 	bl	800d190 <VL53L0X_WrByte>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	75fb      	strb	r3, [r7, #23]
		break;
 8009ada:	e003      	b.n	8009ae4 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 8009adc:	bf00      	nop
 8009ade:	e002      	b.n	8009ae6 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8009ae0:	bf00      	nop
 8009ae2:	e000      	b.n	8009ae6 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8009ae4:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	200001a0 	.word	0x200001a0

08009af8 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b00:	2300      	movs	r3, #0
 8009b02:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8009b04:	2301      	movs	r3, #1
 8009b06:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009b08:	f107 030e 	add.w	r3, r7, #14
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff faac 	bl	800906c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009b14:	2201      	movs	r2, #1
 8009b16:	2180      	movs	r1, #128	; 0x80
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f003 fb39 	bl	800d190 <VL53L0X_WrByte>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009b22:	2201      	movs	r2, #1
 8009b24:	21ff      	movs	r1, #255	; 0xff
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f003 fb32 	bl	800d190 <VL53L0X_WrByte>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009b30:	2200      	movs	r2, #0
 8009b32:	2100      	movs	r1, #0
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f003 fb2b 	bl	800d190 <VL53L0X_WrByte>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8009b44:	461a      	mov	r2, r3
 8009b46:	2191      	movs	r1, #145	; 0x91
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f003 fb21 	bl	800d190 <VL53L0X_WrByte>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009b52:	2201      	movs	r2, #1
 8009b54:	2100      	movs	r1, #0
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f003 fb1a 	bl	800d190 <VL53L0X_WrByte>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009b60:	2200      	movs	r2, #0
 8009b62:	21ff      	movs	r1, #255	; 0xff
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f003 fb13 	bl	800d190 <VL53L0X_WrByte>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2180      	movs	r1, #128	; 0x80
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f003 fb0c 	bl	800d190 <VL53L0X_WrByte>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d054      	beq.n	8009c2c <VL53L0X_StartMeasurement+0x134>
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	dc6c      	bgt.n	8009c60 <VL53L0X_StartMeasurement+0x168>
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d002      	beq.n	8009b90 <VL53L0X_StartMeasurement+0x98>
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d034      	beq.n	8009bf8 <VL53L0X_StartMeasurement+0x100>
 8009b8e:	e067      	b.n	8009c60 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8009b90:	2201      	movs	r2, #1
 8009b92:	2100      	movs	r1, #0
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f003 fafb 	bl	800d190 <VL53L0X_WrByte>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ba0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8009ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d15d      	bne.n	8009c66 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d008      	beq.n	8009bc6 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8009bb4:	f107 030d 	add.w	r3, r7, #13
 8009bb8:	461a      	mov	r2, r3
 8009bba:	2100      	movs	r1, #0
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f003 fb69 	bl	800d294 <VL53L0X_RdByte>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8009bcc:	7b7a      	ldrb	r2, [r7, #13]
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009bd4:	7bfa      	ldrb	r2, [r7, #15]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d107      	bne.n	8009bea <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8009bda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d103      	bne.n	8009bea <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009be8:	d3e1      	bcc.n	8009bae <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009bf0:	d339      	bcc.n	8009c66 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8009bf2:	23f9      	movs	r3, #249	; 0xf9
 8009bf4:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8009bf6:	e036      	b.n	8009c66 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d105      	bne.n	8009c0c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009c00:	2101      	movs	r1, #1
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff fe86 	bl	8009914 <VL53L0X_CheckAndLoadInterruptSettings>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	2100      	movs	r1, #0
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f003 fabd 	bl	800d190 <VL53L0X_WrByte>
 8009c16:	4603      	mov	r3, r0
 8009c18:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8009c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d123      	bne.n	8009c6a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2204      	movs	r2, #4
 8009c26:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8009c2a:	e01e      	b.n	8009c6a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d105      	bne.n	8009c40 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009c34:	2101      	movs	r1, #1
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff fe6c 	bl	8009914 <VL53L0X_CheckAndLoadInterruptSettings>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009c40:	2204      	movs	r2, #4
 8009c42:	2100      	movs	r1, #0
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f003 faa3 	bl	800d190 <VL53L0X_WrByte>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8009c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10b      	bne.n	8009c6e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2204      	movs	r2, #4
 8009c5a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8009c5e:	e006      	b.n	8009c6e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009c60:	23f8      	movs	r3, #248	; 0xf8
 8009c62:	75fb      	strb	r3, [r7, #23]
 8009c64:	e004      	b.n	8009c70 <VL53L0X_StartMeasurement+0x178>
		break;
 8009c66:	bf00      	nop
 8009c68:	e002      	b.n	8009c70 <VL53L0X_StartMeasurement+0x178>
		break;
 8009c6a:	bf00      	nop
 8009c6c:	e000      	b.n	8009c70 <VL53L0X_StartMeasurement+0x178>
		break;
 8009c6e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8009c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8009c90:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8009c92:	7bbb      	ldrb	r3, [r7, #14]
 8009c94:	2b04      	cmp	r3, #4
 8009c96:	d112      	bne.n	8009cbe <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8009c98:	f107 0308 	add.w	r3, r7, #8
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fb1a 	bl	800a2d8 <VL53L0X_GetInterruptMaskStatus>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	d103      	bne.n	8009cb6 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	701a      	strb	r2, [r3, #0]
 8009cb4:	e01c      	b.n	8009cf0 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
 8009cbc:	e018      	b.n	8009cf0 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8009cbe:	f107 030d 	add.w	r3, r7, #13
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	2114      	movs	r1, #20
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f003 fae4 	bl	800d294 <VL53L0X_RdByte>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8009cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10b      	bne.n	8009cf0 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8009cd8:	7b7b      	ldrb	r3, [r7, #13]
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	701a      	strb	r2, [r3, #0]
 8009ce8:	e002      	b.n	8009cf0 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2200      	movs	r2, #0
 8009cee:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009cfc:	b5b0      	push	{r4, r5, r7, lr}
 8009cfe:	b096      	sub	sp, #88	; 0x58
 8009d00:	af02      	add	r7, sp, #8
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d06:	2300      	movs	r3, #0
 8009d08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8009d0c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009d10:	230c      	movs	r3, #12
 8009d12:	2114      	movs	r1, #20
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f003 fa0f 	bl	800d138 <VL53L0X_ReadMulti>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8009d20:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f040 80d1 	bne.w	8009ecc <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 8009d36:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	4413      	add	r3, r2
 8009d48:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8009d52:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	021b      	lsls	r3, r3, #8
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	4413      	add	r3, r2
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	025b      	lsls	r3, r3, #9
 8009d68:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d6e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 8009d70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	021b      	lsls	r3, r3, #8
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	4413      	add	r3, r2
 8009d82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8009d86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d8a:	025b      	lsls	r3, r3, #9
 8009d8c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8009d92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	021b      	lsls	r3, r3, #8
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	4413      	add	r3, r2
 8009da4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009dae:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8009db0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009db4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 8009dbe:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 8009dc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8009dca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dd0:	d046      	beq.n	8009e60 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8009dd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009dd4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009dd8:	fb02 f303 	mul.w	r3, r2, r3
 8009ddc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009de0:	4a57      	ldr	r2, [pc, #348]	; (8009f40 <VL53L0X_GetRangingMeasurementData+0x244>)
 8009de2:	fb82 1203 	smull	r1, r2, r2, r3
 8009de6:	1192      	asrs	r2, r2, #6
 8009de8:	17db      	asrs	r3, r3, #31
 8009dea:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8009dec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	7d1b      	ldrb	r3, [r3, #20]
 8009dfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8009dfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d02c      	beq.n	8009e60 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8009e06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e08:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009e0c:	fb02 f303 	mul.w	r3, r2, r3
 8009e10:	121a      	asrs	r2, r3, #8
					<= 0) {
 8009e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d10d      	bne.n	8009e34 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8009e18:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d004      	beq.n	8009e2a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8009e20:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8009e24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009e28:	e016      	b.n	8009e58 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8009e2a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8009e2e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009e32:	e011      	b.n	8009e58 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8009e34:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e3a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8009e3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e40:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8009e44:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8009e48:	121b      	asrs	r3, r3, #8
 8009e4a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8009e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e4e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8009e50:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8009e54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8009e58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009e5c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8009e60:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00d      	beq.n	8009e84 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8009e68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009e6c:	089b      	lsrs	r3, r3, #2
 8009e6e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8009e74:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	019b      	lsls	r3, r3, #6
 8009e7c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	75da      	strb	r2, [r3, #23]
 8009e82:	e006      	b.n	8009e92 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009e8a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8009e92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009e96:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8009e9a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f002 fef1 	bl	800cc90 <VL53L0X_get_pal_range_status>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8009ebc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d103      	bne.n	8009ecc <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8009ec4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009ecc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d12f      	bne.n	8009f34 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f107 040c 	add.w	r4, r7, #12
 8009eda:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8009ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ee2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009ee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8009eee:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8009ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8009efc:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8009f02:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8009f08:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8009f0e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8009f14:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8009f1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8009f24:	f107 050c 	add.w	r5, r7, #12
 8009f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009f30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f34:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3750      	adds	r7, #80	; 0x50
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8009f40:	10624dd3 	.word	0x10624dd3

08009f44 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8009f52:	2100      	movs	r1, #0
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff f85d 	bl	8009014 <VL53L0X_SetDeviceMode>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d104      	bne.n	8009f70 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff fc8a 	bl	8009880 <VL53L0X_PerformSingleMeasurement>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d105      	bne.n	8009f84 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7ff febe 	bl	8009cfc <VL53L0X_GetRangingMeasurementData>
 8009f80:	4603      	mov	r3, r0
 8009f82:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8009f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d105      	bne.n	8009f98 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f962 	bl	800a258 <VL53L0X_ClearInterruptMask>
 8009f94:	4603      	mov	r3, r0
 8009f96:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8009f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	4608      	mov	r0, r1
 8009fae:	4611      	mov	r1, r2
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	70fb      	strb	r3, [r7, #3]
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	70bb      	strb	r3, [r7, #2]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8009fc2:	78fb      	ldrb	r3, [r7, #3]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8009fc8:	23f6      	movs	r3, #246	; 0xf6
 8009fca:	73fb      	strb	r3, [r7, #15]
 8009fcc:	e107      	b.n	800a1de <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8009fce:	78bb      	ldrb	r3, [r7, #2]
 8009fd0:	2b14      	cmp	r3, #20
 8009fd2:	d110      	bne.n	8009ff6 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009fd4:	7e3b      	ldrb	r3, [r7, #24]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d102      	bne.n	8009fe0 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8009fda:	2310      	movs	r3, #16
 8009fdc:	73bb      	strb	r3, [r7, #14]
 8009fde:	e001      	b.n	8009fe4 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	2184      	movs	r1, #132	; 0x84
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f003 f8d0 	bl	800d190 <VL53L0X_WrByte>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73fb      	strb	r3, [r7, #15]
 8009ff4:	e0f3      	b.n	800a1de <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8009ff6:	78bb      	ldrb	r3, [r7, #2]
 8009ff8:	2b15      	cmp	r3, #21
 8009ffa:	f040 8097 	bne.w	800a12c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009ffe:	2201      	movs	r2, #1
 800a000:	21ff      	movs	r1, #255	; 0xff
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f003 f8c4 	bl	800d190 <VL53L0X_WrByte>
 800a008:	4603      	mov	r3, r0
 800a00a:	461a      	mov	r2, r3
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	4313      	orrs	r3, r2
 800a010:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a012:	2200      	movs	r2, #0
 800a014:	2100      	movs	r1, #0
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f003 f8ba 	bl	800d190 <VL53L0X_WrByte>
 800a01c:	4603      	mov	r3, r0
 800a01e:	461a      	mov	r2, r3
 800a020:	7bfb      	ldrb	r3, [r7, #15]
 800a022:	4313      	orrs	r3, r2
 800a024:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a026:	2200      	movs	r2, #0
 800a028:	21ff      	movs	r1, #255	; 0xff
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f003 f8b0 	bl	800d190 <VL53L0X_WrByte>
 800a030:	4603      	mov	r3, r0
 800a032:	461a      	mov	r2, r3
 800a034:	7bfb      	ldrb	r3, [r7, #15]
 800a036:	4313      	orrs	r3, r2
 800a038:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a03a:	2201      	movs	r2, #1
 800a03c:	2180      	movs	r1, #128	; 0x80
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f003 f8a6 	bl	800d190 <VL53L0X_WrByte>
 800a044:	4603      	mov	r3, r0
 800a046:	461a      	mov	r2, r3
 800a048:	7bfb      	ldrb	r3, [r7, #15]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a04e:	2202      	movs	r2, #2
 800a050:	2185      	movs	r1, #133	; 0x85
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f003 f89c 	bl	800d190 <VL53L0X_WrByte>
 800a058:	4603      	mov	r3, r0
 800a05a:	461a      	mov	r2, r3
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	4313      	orrs	r3, r2
 800a060:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a062:	2204      	movs	r2, #4
 800a064:	21ff      	movs	r1, #255	; 0xff
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f003 f892 	bl	800d190 <VL53L0X_WrByte>
 800a06c:	4603      	mov	r3, r0
 800a06e:	461a      	mov	r2, r3
 800a070:	7bfb      	ldrb	r3, [r7, #15]
 800a072:	4313      	orrs	r3, r2
 800a074:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a076:	2200      	movs	r2, #0
 800a078:	21cd      	movs	r1, #205	; 0xcd
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f003 f888 	bl	800d190 <VL53L0X_WrByte>
 800a080:	4603      	mov	r3, r0
 800a082:	461a      	mov	r2, r3
 800a084:	7bfb      	ldrb	r3, [r7, #15]
 800a086:	4313      	orrs	r3, r2
 800a088:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a08a:	2211      	movs	r2, #17
 800a08c:	21cc      	movs	r1, #204	; 0xcc
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f003 f87e 	bl	800d190 <VL53L0X_WrByte>
 800a094:	4603      	mov	r3, r0
 800a096:	461a      	mov	r2, r3
 800a098:	7bfb      	ldrb	r3, [r7, #15]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a09e:	2207      	movs	r2, #7
 800a0a0:	21ff      	movs	r1, #255	; 0xff
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f003 f874 	bl	800d190 <VL53L0X_WrByte>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	21be      	movs	r1, #190	; 0xbe
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f003 f86a 	bl	800d190 <VL53L0X_WrByte>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	461a      	mov	r2, r3
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a0c6:	2206      	movs	r2, #6
 800a0c8:	21ff      	movs	r1, #255	; 0xff
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f003 f860 	bl	800d190 <VL53L0X_WrByte>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a0da:	2209      	movs	r2, #9
 800a0dc:	21cc      	movs	r1, #204	; 0xcc
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f003 f856 	bl	800d190 <VL53L0X_WrByte>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	21ff      	movs	r1, #255	; 0xff
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f003 f84c 	bl	800d190 <VL53L0X_WrByte>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a102:	2201      	movs	r2, #1
 800a104:	21ff      	movs	r1, #255	; 0xff
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f003 f842 	bl	800d190 <VL53L0X_WrByte>
 800a10c:	4603      	mov	r3, r0
 800a10e:	461a      	mov	r2, r3
 800a110:	7bfb      	ldrb	r3, [r7, #15]
 800a112:	4313      	orrs	r3, r2
 800a114:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a116:	2200      	movs	r2, #0
 800a118:	2100      	movs	r1, #0
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f003 f838 	bl	800d190 <VL53L0X_WrByte>
 800a120:	4603      	mov	r3, r0
 800a122:	461a      	mov	r2, r3
 800a124:	7bfb      	ldrb	r3, [r7, #15]
 800a126:	4313      	orrs	r3, r2
 800a128:	73fb      	strb	r3, [r7, #15]
 800a12a:	e058      	b.n	800a1de <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800a12c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d121      	bne.n	800a178 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800a134:	787b      	ldrb	r3, [r7, #1]
 800a136:	2b04      	cmp	r3, #4
 800a138:	d81b      	bhi.n	800a172 <VL53L0X_SetGpioConfig+0x1ce>
 800a13a:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <VL53L0X_SetGpioConfig+0x19c>)
 800a13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a140:	0800a155 	.word	0x0800a155
 800a144:	0800a15b 	.word	0x0800a15b
 800a148:	0800a161 	.word	0x0800a161
 800a14c:	0800a167 	.word	0x0800a167
 800a150:	0800a16d 	.word	0x0800a16d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a154:	2300      	movs	r3, #0
 800a156:	73bb      	strb	r3, [r7, #14]
				break;
 800a158:	e00f      	b.n	800a17a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a15a:	2301      	movs	r3, #1
 800a15c:	73bb      	strb	r3, [r7, #14]
				break;
 800a15e:	e00c      	b.n	800a17a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a160:	2302      	movs	r3, #2
 800a162:	73bb      	strb	r3, [r7, #14]
				break;
 800a164:	e009      	b.n	800a17a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a166:	2303      	movs	r3, #3
 800a168:	73bb      	strb	r3, [r7, #14]
				break;
 800a16a:	e006      	b.n	800a17a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a16c:	2304      	movs	r3, #4
 800a16e:	73bb      	strb	r3, [r7, #14]
				break;
 800a170:	e003      	b.n	800a17a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800a172:	23f5      	movs	r3, #245	; 0xf5
 800a174:	73fb      	strb	r3, [r7, #15]
 800a176:	e000      	b.n	800a17a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800a178:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800a17a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d107      	bne.n	800a192 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800a182:	7bbb      	ldrb	r3, [r7, #14]
 800a184:	461a      	mov	r2, r3
 800a186:	210a      	movs	r1, #10
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f003 f801 	bl	800d190 <VL53L0X_WrByte>
 800a18e:	4603      	mov	r3, r0
 800a190:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800a192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10f      	bne.n	800a1ba <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a19a:	7e3b      	ldrb	r3, [r7, #24]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d102      	bne.n	800a1a6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	73bb      	strb	r3, [r7, #14]
 800a1a4:	e001      	b.n	800a1aa <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800a1a6:	2310      	movs	r3, #16
 800a1a8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
 800a1ac:	22ef      	movs	r2, #239	; 0xef
 800a1ae:	2184      	movs	r1, #132	; 0x84
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f003 f83b 	bl	800d22c <VL53L0X_UpdateByte>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d103      	bne.n	800a1ca <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	787a      	ldrb	r2, [r7, #1]
 800a1c6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800a1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d105      	bne.n	800a1de <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f83f 	bl	800a258 <VL53L0X_ClearInterruptMask>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a1de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop

0800a1ec <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	607a      	str	r2, [r7, #4]
 800a1f6:	603b      	str	r3, [r7, #0]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 800a200:	f107 0314 	add.w	r3, r7, #20
 800a204:	461a      	mov	r2, r3
 800a206:	210e      	movs	r1, #14
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f003 f86d 	bl	800d2e8 <VL53L0X_RdWord>
 800a20e:	4603      	mov	r3, r0
 800a210:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a212:	8abb      	ldrh	r3, [r7, #20]
 800a214:	045b      	lsls	r3, r3, #17
 800a216:	461a      	mov	r2, r3
 800a218:	4b0e      	ldr	r3, [pc, #56]	; (800a254 <VL53L0X_GetInterruptThresholds+0x68>)
 800a21a:	4013      	ands	r3, r2
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a220:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10f      	bne.n	800a248 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800a228:	f107 0314 	add.w	r3, r7, #20
 800a22c:	461a      	mov	r2, r3
 800a22e:	210c      	movs	r1, #12
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f003 f859 	bl	800d2e8 <VL53L0X_RdWord>
 800a236:	4603      	mov	r3, r0
 800a238:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a23a:	8abb      	ldrh	r3, [r7, #20]
 800a23c:	045b      	lsls	r3, r3, #17
 800a23e:	461a      	mov	r2, r3
 800a240:	4b04      	ldr	r3, [pc, #16]	; (800a254 <VL53L0X_GetInterruptThresholds+0x68>)
 800a242:	4013      	ands	r3, r2
		*pThresholdHigh =
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a248:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3718      	adds	r7, #24
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	1ffe0000 	.word	0x1ffe0000

0800a258 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800a26a:	2201      	movs	r2, #1
 800a26c:	210b      	movs	r1, #11
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f002 ff8e 	bl	800d190 <VL53L0X_WrByte>
 800a274:	4603      	mov	r3, r0
 800a276:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800a278:	2200      	movs	r2, #0
 800a27a:	210b      	movs	r1, #11
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f002 ff87 	bl	800d190 <VL53L0X_WrByte>
 800a282:	4603      	mov	r3, r0
 800a284:	461a      	mov	r2, r3
 800a286:	7bfb      	ldrb	r3, [r7, #15]
 800a288:	4313      	orrs	r3, r2
 800a28a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800a28c:	f107 030d 	add.w	r3, r7, #13
 800a290:	461a      	mov	r2, r3
 800a292:	2113      	movs	r1, #19
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f002 fffd 	bl	800d294 <VL53L0X_RdByte>
 800a29a:	4603      	mov	r3, r0
 800a29c:	461a      	mov	r2, r3
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800a2a4:	7bbb      	ldrb	r3, [r7, #14]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800a2aa:	7b7b      	ldrb	r3, [r7, #13]
 800a2ac:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d006      	beq.n	800a2c2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800a2b4:	7bbb      	ldrb	r3, [r7, #14]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d803      	bhi.n	800a2c2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800a2ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d0d3      	beq.n	800a26a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800a2c2:	7bbb      	ldrb	r3, [r7, #14]
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d901      	bls.n	800a2cc <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800a2c8:	23f4      	movs	r3, #244	; 0xf4
 800a2ca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 800a2e6:	f107 030e 	add.w	r3, r7, #14
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	2113      	movs	r1, #19
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f002 ffd0 	bl	800d294 <VL53L0X_RdByte>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
 800a2fa:	f003 0207 	and.w	r2, r3, #7
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800a302:	7bbb      	ldrb	r3, [r7, #14]
 800a304:	f003 0318 	and.w	r3, r3, #24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800a30c:	23fa      	movs	r3, #250	; 0xfa
 800a30e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a310:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a328:	2300      	movs	r3, #0
 800a32a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	68b9      	ldr	r1, [r7, #8]
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 fa03 	bl	800a73c <VL53L0X_perform_ref_spad_management>
 800a336:	4603      	mov	r3, r0
 800a338:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800a33a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a350:	2300      	movs	r3, #0
 800a352:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800a354:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a358:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800a35a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a35e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800a360:	f107 0308 	add.w	r3, r7, #8
 800a364:	461a      	mov	r2, r3
 800a366:	2128      	movs	r1, #40	; 0x28
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f002 ffbd 	bl	800d2e8 <VL53L0X_RdWord>
 800a36e:	4603      	mov	r3, r0
 800a370:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800a372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d11e      	bne.n	800a3b8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800a37a:	893b      	ldrh	r3, [r7, #8]
 800a37c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a380:	b29b      	uxth	r3, r3
 800a382:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800a384:	893b      	ldrh	r3, [r7, #8]
 800a386:	461a      	mov	r2, r3
 800a388:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	dd0b      	ble.n	800a3a8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800a390:	893a      	ldrh	r2, [r7, #8]
 800a392:	897b      	ldrh	r3, [r7, #10]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	b29b      	uxth	r3, r3
 800a398:	b21b      	sxth	r3, r3
 800a39a:	461a      	mov	r2, r3
					* 250;
 800a39c:	23fa      	movs	r3, #250	; 0xfa
 800a39e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	e007      	b.n	800a3b8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800a3a8:	893b      	ldrh	r3, [r7, #8]
 800a3aa:	b21b      	sxth	r3, r3
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	23fa      	movs	r3, #250	; 0xfa
 800a3b0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800a3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b08b      	sub	sp, #44	; 0x2c
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
 800a3d0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800a3d2:	2308      	movs	r3, #8
 800a3d4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ea:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	69ba      	ldr	r2, [r7, #24]
 800a3f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3f4:	69b9      	ldr	r1, [r7, #24]
 800a3f6:	fb01 f202 	mul.w	r2, r1, r2
 800a3fa:	1a9b      	subs	r3, r3, r2
 800a3fc:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	627b      	str	r3, [r7, #36]	; 0x24
 800a402:	e030      	b.n	800a466 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	4413      	add	r3, r2
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800a412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	429a      	cmp	r2, r3
 800a418:	d11e      	bne.n	800a458 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 800a41a:	7ffa      	ldrb	r2, [r7, #31]
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	fa42 f303 	asr.w	r3, r2, r3
 800a422:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800a428:	e016      	b.n	800a458 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800a42a:	7ffb      	ldrb	r3, [r7, #31]
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00b      	beq.n	800a44c <get_next_good_spad+0x88>
				success = 1;
 800a434:	2301      	movs	r3, #1
 800a436:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	fb03 f202 	mul.w	r2, r3, r2
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	4413      	add	r3, r2
 800a444:	461a      	mov	r2, r3
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	601a      	str	r2, [r3, #0]
				break;
 800a44a:	e009      	b.n	800a460 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800a44c:	7ffb      	ldrb	r3, [r7, #31]
 800a44e:	085b      	lsrs	r3, r3, #1
 800a450:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800a452:	6a3b      	ldr	r3, [r7, #32]
 800a454:	3301      	adds	r3, #1
 800a456:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800a458:	6a3a      	ldr	r2, [r7, #32]
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d3e4      	bcc.n	800a42a <get_next_good_spad+0x66>
				coarseIndex++) {
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	3301      	adds	r3, #1
 800a464:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d202      	bcs.n	800a474 <get_next_good_spad+0xb0>
 800a46e:	7fbb      	ldrb	r3, [r7, #30]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d0c7      	beq.n	800a404 <get_next_good_spad+0x40>
		}
	}
}
 800a474:	bf00      	nop
 800a476:	372c      	adds	r7, #44	; 0x2c
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800a488:	2301      	movs	r3, #1
 800a48a:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	099b      	lsrs	r3, r3, #6
 800a490:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800a492:	4a07      	ldr	r2, [pc, #28]	; (800a4b0 <is_aperture+0x30>)
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <is_aperture+0x22>
		isAperture = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr
 800a4b0:	20000358 	.word	0x20000358

0800a4b4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b089      	sub	sp, #36	; 0x24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800a4c4:	2308      	movs	r3, #8
 800a4c6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	69ba      	ldr	r2, [r7, #24]
 800a4d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4da:	69b9      	ldr	r1, [r7, #24]
 800a4dc:	fb01 f202 	mul.w	r2, r1, r2
 800a4e0:	1a9b      	subs	r3, r3, r2
 800a4e2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d302      	bcc.n	800a4f2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a4ec:	23ce      	movs	r3, #206	; 0xce
 800a4ee:	77fb      	strb	r3, [r7, #31]
 800a4f0:	e010      	b.n	800a514 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	b25a      	sxtb	r2, r3
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	fa01 f303 	lsl.w	r3, r1, r3
 800a504:	b25b      	sxtb	r3, r3
 800a506:	4313      	orrs	r3, r2
 800a508:	b259      	sxtb	r1, r3
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	4413      	add	r3, r2
 800a510:	b2ca      	uxtb	r2, r1
 800a512:	701a      	strb	r2, [r3, #0]

	return status;
 800a514:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3724      	adds	r7, #36	; 0x24
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800a52e:	2306      	movs	r3, #6
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	21b0      	movs	r1, #176	; 0xb0
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f002 fdcf 	bl	800d0d8 <VL53L0X_WriteMulti>
 800a53a:	4603      	mov	r3, r0
 800a53c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800a53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800a554:	2306      	movs	r3, #6
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	21b0      	movs	r1, #176	; 0xb0
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f002 fdec 	bl	800d138 <VL53L0X_ReadMulti>
 800a560:	4603      	mov	r3, r0
 800a562:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800a564:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b08c      	sub	sp, #48	; 0x30
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	607a      	str	r2, [r7, #4]
 800a57a:	603b      	str	r3, [r7, #0]
 800a57c:	460b      	mov	r3, r1
 800a57e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a580:	2300      	movs	r3, #0
 800a582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800a586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a588:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800a58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a58c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a58e:	2300      	movs	r3, #0
 800a590:	62bb      	str	r3, [r7, #40]	; 0x28
 800a592:	e02b      	b.n	800a5ec <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800a594:	f107 031c 	add.w	r3, r7, #28
 800a598:	6a3a      	ldr	r2, [r7, #32]
 800a59a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f7ff ff11 	bl	800a3c4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a8:	d103      	bne.n	800a5b2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a5aa:	23ce      	movs	r3, #206	; 0xce
 800a5ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a5b0:	e020      	b.n	800a5f4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b8:	4413      	add	r3, r2
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7ff ff60 	bl	800a480 <is_aperture>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	7afb      	ldrb	r3, [r7, #11]
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d003      	beq.n	800a5d2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a5ca:	23ce      	movs	r3, #206	; 0xce
 800a5cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a5d0:	e010      	b.n	800a5f4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800a5d6:	6a3a      	ldr	r2, [r7, #32]
 800a5d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a5da:	6838      	ldr	r0, [r7, #0]
 800a5dc:	f7ff ff6a 	bl	800a4b4 <enable_spad_bit>
		currentSpad++;
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d3cf      	bcc.n	800a594 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800a5f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5f6:	6a3a      	ldr	r2, [r7, #32]
 800a5f8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800a5fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d106      	bne.n	800a610 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f7ff ff8d 	bl	800a524 <set_ref_spad_map>
 800a60a:	4603      	mov	r3, r0
 800a60c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800a610:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a614:	2b00      	cmp	r3, #0
 800a616:	d121      	bne.n	800a65c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800a618:	f107 0314 	add.w	r3, r7, #20
 800a61c:	4619      	mov	r1, r3
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f7ff ff93 	bl	800a54a <get_ref_spad_map>
 800a624:	4603      	mov	r3, r0
 800a626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800a62e:	e011      	b.n	800a654 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a634:	4413      	add	r3, r2
 800a636:	781a      	ldrb	r2, [r3, #0]
 800a638:	f107 0114 	add.w	r1, r7, #20
 800a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63e:	440b      	add	r3, r1
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d003      	beq.n	800a64e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a646:	23ce      	movs	r3, #206	; 0xce
 800a648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a64c:	e006      	b.n	800a65c <enable_ref_spads+0xec>
			}
			i++;
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	3301      	adds	r3, #1
 800a652:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800a654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a658:	429a      	cmp	r2, r3
 800a65a:	d3e9      	bcc.n	800a630 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800a65c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a660:	4618      	mov	r0, r3
 800a662:	3730      	adds	r7, #48	; 0x30
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b08a      	sub	sp, #40	; 0x28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a672:	2300      	movs	r3, #0
 800a674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800a684:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800a688:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d107      	bne.n	800a6a0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800a690:	22c0      	movs	r2, #192	; 0xc0
 800a692:	2101      	movs	r1, #1
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f002 fd7b 	bl	800d190 <VL53L0X_WrByte>
 800a69a:	4603      	mov	r3, r0
 800a69c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800a6a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d108      	bne.n	800a6ba <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800a6a8:	f107 0308 	add.w	r3, r7, #8
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff fc48 	bl	8009f44 <VL53L0X_PerformSingleRangingMeasurement>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800a6ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d107      	bne.n	800a6d2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	21ff      	movs	r1, #255	; 0xff
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f002 fd62 	bl	800d190 <VL53L0X_WrByte>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800a6d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d107      	bne.n	800a6ea <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800a6da:	683a      	ldr	r2, [r7, #0]
 800a6dc:	21b6      	movs	r1, #182	; 0xb6
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f002 fe02 	bl	800d2e8 <VL53L0X_RdWord>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800a6ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d107      	bne.n	800a702 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	21ff      	movs	r1, #255	; 0xff
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f002 fd4a 	bl	800d190 <VL53L0X_WrByte>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800a702:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a706:	2b00      	cmp	r3, #0
 800a708:	d112      	bne.n	800a730 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a70a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a70e:	461a      	mov	r2, r3
 800a710:	2101      	movs	r1, #1
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f002 fd3c 	bl	800d190 <VL53L0X_WrByte>
 800a718:	4603      	mov	r3, r0
 800a71a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800a71e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a722:	2b00      	cmp	r3, #0
 800a724:	d104      	bne.n	800a730 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a72c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 800a730:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a734:	4618      	mov	r0, r3
 800a736:	3728      	adds	r7, #40	; 0x28
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800a73c:	b590      	push	{r4, r7, lr}
 800a73e:	b09d      	sub	sp, #116	; 0x74
 800a740:	af06      	add	r7, sp, #24
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a748:	2300      	movs	r3, #0
 800a74a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800a74e:	23b4      	movs	r3, #180	; 0xb4
 800a750:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800a754:	2303      	movs	r3, #3
 800a756:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800a758:	232c      	movs	r3, #44	; 0x2c
 800a75a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800a768:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a76c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800a776:	2306      	movs	r3, #6
 800a778:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 800a7a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7a6:	e009      	b.n	800a7bc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800a7b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d3f1      	bcc.n	800a7a8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	21ff      	movs	r1, #255	; 0xff
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f002 fce1 	bl	800d190 <VL53L0X_WrByte>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800a7d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d107      	bne.n	800a7ec <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800a7dc:	2200      	movs	r2, #0
 800a7de:	214f      	movs	r1, #79	; 0x4f
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f002 fcd5 	bl	800d190 <VL53L0X_WrByte>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800a7ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d107      	bne.n	800a804 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800a7f4:	222c      	movs	r2, #44	; 0x2c
 800a7f6:	214e      	movs	r1, #78	; 0x4e
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f002 fcc9 	bl	800d190 <VL53L0X_WrByte>
 800a7fe:	4603      	mov	r3, r0
 800a800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800a804:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d107      	bne.n	800a81c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a80c:	2200      	movs	r2, #0
 800a80e:	21ff      	movs	r1, #255	; 0xff
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f002 fcbd 	bl	800d190 <VL53L0X_WrByte>
 800a816:	4603      	mov	r3, r0
 800a818:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800a81c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a820:	2b00      	cmp	r3, #0
 800a822:	d109      	bne.n	800a838 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800a824:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a828:	461a      	mov	r2, r3
 800a82a:	21b6      	movs	r1, #182	; 0xb6
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f002 fcaf 	bl	800d190 <VL53L0X_WrByte>
 800a832:	4603      	mov	r3, r0
 800a834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800a838:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d107      	bne.n	800a850 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800a840:	2200      	movs	r2, #0
 800a842:	2180      	movs	r1, #128	; 0x80
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f002 fca3 	bl	800d190 <VL53L0X_WrByte>
 800a84a:	4603      	mov	r3, r0
 800a84c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800a850:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800a858:	f107 0210 	add.w	r2, r7, #16
 800a85c:	f107 0111 	add.w	r1, r7, #17
 800a860:	2300      	movs	r3, #0
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f000 fbbb 	bl	800afde <VL53L0X_perform_ref_calibration>
 800a868:	4603      	mov	r3, r0
 800a86a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800a86e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a872:	2b00      	cmp	r3, #0
 800a874:	d121      	bne.n	800a8ba <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800a87a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a87c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800a882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a884:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 800a892:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a896:	f107 0218 	add.w	r2, r7, #24
 800a89a:	9204      	str	r2, [sp, #16]
 800a89c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a89e:	9203      	str	r2, [sp, #12]
 800a8a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8a2:	9202      	str	r2, [sp, #8]
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	4623      	mov	r3, r4
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f7ff fe5e 	bl	800a570 <enable_ref_spads>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a8ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d174      	bne.n	800a9ac <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800a8c6:	f107 0312 	add.w	r3, r7, #18
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f7ff fecb 	bl	800a668 <perform_ref_signal_measurement>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800a8d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d161      	bne.n	800a9a4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800a8e0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800a8e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d25d      	bcs.n	800a9a4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8ec:	e009      	b.n	800a902 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800a8fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8fe:	3301      	adds	r3, #1
 800a900:	64bb      	str	r3, [r7, #72]	; 0x48
 800a902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a906:	429a      	cmp	r2, r3
 800a908:	d3f1      	bcc.n	800a8ee <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800a90a:	e002      	b.n	800a912 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800a90c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a90e:	3301      	adds	r3, #1
 800a910:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800a912:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800a916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a918:	4413      	add	r3, r2
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7ff fdb0 	bl	800a480 <is_aperture>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d103      	bne.n	800a92e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800a926:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d3ee      	bcc.n	800a90c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800a92e:	2301      	movs	r3, #1
 800a930:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800a932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a934:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 800a942:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a946:	f107 0218 	add.w	r2, r7, #24
 800a94a:	9204      	str	r2, [sp, #16]
 800a94c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a94e:	9203      	str	r2, [sp, #12]
 800a950:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a952:	9202      	str	r2, [sp, #8]
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	4623      	mov	r3, r4
 800a95c:	4602      	mov	r2, r0
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7ff fe06 	bl	800a570 <enable_ref_spads>
 800a964:	4603      	mov	r3, r0
 800a966:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800a96a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d11b      	bne.n	800a9aa <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800a976:	f107 0312 	add.w	r3, r7, #18
 800a97a:	4619      	mov	r1, r3
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7ff fe73 	bl	800a668 <perform_ref_signal_measurement>
 800a982:	4603      	mov	r3, r0
 800a984:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800a988:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10c      	bne.n	800a9aa <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800a990:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800a992:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a994:	429a      	cmp	r2, r3
 800a996:	d208      	bcs.n	800a9aa <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800a998:	2301      	movs	r3, #1
 800a99a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800a99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800a9a2:	e002      	b.n	800a9aa <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9a8:	e000      	b.n	800a9ac <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800a9aa:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a9ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f040 80af 	bne.w	800ab14 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800a9b6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800a9b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	f240 80aa 	bls.w	800ab14 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800a9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800a9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 800a9d0:	f107 031c 	add.w	r3, r7, #28
 800a9d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f002 fd5e 	bl	800d498 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800a9dc:	8a7b      	ldrh	r3, [r7, #18]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	bfb8      	it	lt
 800a9e8:	425b      	neglt	r3, r3
 800a9ea:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800a9f2:	e086      	b.n	800ab02 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 800a9fa:	f107 0314 	add.w	r3, r7, #20
 800a9fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa02:	f7ff fcdf 	bl	800a3c4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0c:	d103      	bne.n	800aa16 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800aa0e:	23ce      	movs	r3, #206	; 0xce
 800aa10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800aa14:	e07e      	b.n	800ab14 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800aa16:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff fd2e 	bl	800a480 <is_aperture>
 800aa24:	4603      	mov	r3, r0
 800aa26:	461a      	mov	r2, r3
 800aa28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d003      	beq.n	800aa36 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800aa34:	e06e      	b.n	800ab14 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800aa36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa38:	3301      	adds	r3, #1
 800aa3a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 800aa46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7ff fd32 	bl	800a4b4 <enable_spad_bit>
 800aa50:	4603      	mov	r3, r0
 800aa52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800aa56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10c      	bne.n	800aa78 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800aa5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa60:	3301      	adds	r3, #1
 800aa62:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f7ff fd59 	bl	800a524 <set_ref_spad_map>
 800aa72:	4603      	mov	r3, r0
 800aa74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800aa78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d146      	bne.n	800ab0e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800aa80:	f107 0312 	add.w	r3, r7, #18
 800aa84:	4619      	mov	r1, r3
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f7ff fdee 	bl	800a668 <perform_ref_signal_measurement>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800aa92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d13b      	bne.n	800ab12 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800aa9a:	8a7b      	ldrh	r3, [r7, #18]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	bfb8      	it	lt
 800aaa6:	425b      	neglt	r3, r3
 800aaa8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800aaaa:	8a7b      	ldrh	r3, [r7, #18]
 800aaac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d21c      	bcs.n	800aaec <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800aab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d914      	bls.n	800aae4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 800aaba:	f107 031c 	add.w	r3, r7, #28
 800aabe:	4619      	mov	r1, r3
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f7ff fd2f 	bl	800a524 <set_ref_spad_map>
 800aac6:	4603      	mov	r3, r0
 800aac8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 800aad2:	f107 011c 	add.w	r1, r7, #28
 800aad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aad8:	4618      	mov	r0, r3
 800aada:	f002 fcdd 	bl	800d498 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800aade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae0:	3b01      	subs	r3, #1
 800aae2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800aae4:	2301      	movs	r3, #1
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaea:	e00a      	b.n	800ab02 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 800aaf6:	f107 031c 	add.w	r3, r7, #28
 800aafa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aafc:	4618      	mov	r0, r3
 800aafe:	f002 fccb 	bl	800d498 <memcpy>
		while (!complete) {
 800ab02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f43f af74 	beq.w	800a9f4 <VL53L0X_perform_ref_spad_management+0x2b8>
 800ab0c:	e002      	b.n	800ab14 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800ab0e:	bf00      	nop
 800ab10:	e000      	b.n	800ab14 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800ab12:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d115      	bne.n	800ab48 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab20:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800ab28:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	781a      	ldrb	r2, [r3, #0]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800ab48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	375c      	adds	r7, #92	; 0x5c
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd90      	pop	{r4, r7, pc}

0800ab54 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800ab54:	b590      	push	{r4, r7, lr}
 800ab56:	b093      	sub	sp, #76	; 0x4c
 800ab58:	af06      	add	r7, sp, #24
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab62:	2300      	movs	r3, #0
 800ab64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800ab6c:	23b4      	movs	r3, #180	; 0xb4
 800ab6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800ab72:	2306      	movs	r3, #6
 800ab74:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800ab76:	232c      	movs	r3, #44	; 0x2c
 800ab78:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	21ff      	movs	r1, #255	; 0xff
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f002 fb06 	bl	800d190 <VL53L0X_WrByte>
 800ab84:	4603      	mov	r3, r0
 800ab86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800ab8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d107      	bne.n	800aba2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800ab92:	2200      	movs	r2, #0
 800ab94:	214f      	movs	r1, #79	; 0x4f
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f002 fafa 	bl	800d190 <VL53L0X_WrByte>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800aba2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d107      	bne.n	800abba <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800abaa:	222c      	movs	r2, #44	; 0x2c
 800abac:	214e      	movs	r1, #78	; 0x4e
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f002 faee 	bl	800d190 <VL53L0X_WrByte>
 800abb4:	4603      	mov	r3, r0
 800abb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800abba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d107      	bne.n	800abd2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800abc2:	2200      	movs	r2, #0
 800abc4:	21ff      	movs	r1, #255	; 0xff
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f002 fae2 	bl	800d190 <VL53L0X_WrByte>
 800abcc:	4603      	mov	r3, r0
 800abce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800abd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d109      	bne.n	800abee <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800abda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abde:	461a      	mov	r2, r3
 800abe0:	21b6      	movs	r1, #182	; 0xb6
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f002 fad4 	bl	800d190 <VL53L0X_WrByte>
 800abe8:	4603      	mov	r3, r0
 800abea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800abee:	2300      	movs	r3, #0
 800abf0:	627b      	str	r3, [r7, #36]	; 0x24
 800abf2:	e009      	b.n	800ac08 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	4413      	add	r3, r2
 800abfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abfe:	2200      	movs	r2, #0
 800ac00:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	3301      	adds	r3, #1
 800ac06:	627b      	str	r3, [r7, #36]	; 0x24
 800ac08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d3f1      	bcc.n	800abf4 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800ac10:	79fb      	ldrb	r3, [r7, #7]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d011      	beq.n	800ac3a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800ac16:	e002      	b.n	800ac1e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800ac18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800ac1e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ac22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac24:	4413      	add	r3, r2
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7ff fc2a 	bl	800a480 <is_aperture>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d103      	bne.n	800ac3a <VL53L0X_set_reference_spads+0xe6>
 800ac32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d3ee      	bcc.n	800ac18 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 800ac46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac4a:	79f9      	ldrb	r1, [r7, #7]
 800ac4c:	f107 0214 	add.w	r2, r7, #20
 800ac50:	9204      	str	r2, [sp, #16]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	9203      	str	r2, [sp, #12]
 800ac56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac58:	9202      	str	r2, [sp, #8]
 800ac5a:	9301      	str	r3, [sp, #4]
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	4623      	mov	r3, r4
 800ac62:	4602      	mov	r2, r0
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f7ff fc83 	bl	800a570 <enable_ref_spads>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800ac70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10c      	bne.n	800ac92 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	b2da      	uxtb	r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	79fa      	ldrb	r2, [r7, #7]
 800ac8e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800ac92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3734      	adds	r7, #52	; 0x34
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd90      	pop	{r4, r7, pc}

0800ac9e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	460b      	mov	r3, r1
 800aca8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acaa:	2300      	movs	r3, #0
 800acac:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800acae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10a      	bne.n	800accc <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800acb6:	78fb      	ldrb	r3, [r7, #3]
 800acb8:	f043 0301 	orr.w	r3, r3, #1
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	461a      	mov	r2, r3
 800acc0:	2100      	movs	r1, #0
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f002 fa64 	bl	800d190 <VL53L0X_WrByte>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800accc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d104      	bne.n	800acde <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f9bf 	bl	800b058 <VL53L0X_measurement_poll_for_completion>
 800acda:	4603      	mov	r3, r0
 800acdc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800acde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d105      	bne.n	800acf2 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800ace6:	2100      	movs	r1, #0
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff fab5 	bl	800a258 <VL53L0X_ClearInterruptMask>
 800acee:	4603      	mov	r3, r0
 800acf0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800acf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d106      	bne.n	800ad08 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800acfa:	2200      	movs	r2, #0
 800acfc:	2100      	movs	r1, #0
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f002 fa46 	bl	800d190 <VL53L0X_WrByte>
 800ad04:	4603      	mov	r3, r0
 800ad06:	73fb      	strb	r3, [r7, #15]

	return Status;
 800ad08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	4611      	mov	r1, r2
 800ad20:	461a      	mov	r2, r3
 800ad22:	4603      	mov	r3, r0
 800ad24:	70fb      	strb	r3, [r7, #3]
 800ad26:	460b      	mov	r3, r1
 800ad28:	70bb      	strb	r3, [r7, #2]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ad36:	2201      	movs	r2, #1
 800ad38:	21ff      	movs	r1, #255	; 0xff
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f002 fa28 	bl	800d190 <VL53L0X_WrByte>
 800ad40:	4603      	mov	r3, r0
 800ad42:	461a      	mov	r2, r3
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f002 fa1e 	bl	800d190 <VL53L0X_WrByte>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	7bfb      	ldrb	r3, [r7, #15]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ad5e:	2200      	movs	r2, #0
 800ad60:	21ff      	movs	r1, #255	; 0xff
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f002 fa14 	bl	800d190 <VL53L0X_WrByte>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800ad72:	78fb      	ldrb	r3, [r7, #3]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d01e      	beq.n	800adb6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800ad78:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d009      	beq.n	800ad94 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	21cb      	movs	r1, #203	; 0xcb
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f002 fa85 	bl	800d294 <VL53L0X_RdByte>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800ad94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d02a      	beq.n	800adf2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800ad9c:	f107 030e 	add.w	r3, r7, #14
 800ada0:	461a      	mov	r2, r3
 800ada2:	21ee      	movs	r1, #238	; 0xee
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f002 fa75 	bl	800d294 <VL53L0X_RdByte>
 800adaa:	4603      	mov	r3, r0
 800adac:	461a      	mov	r2, r3
 800adae:	7bfb      	ldrb	r3, [r7, #15]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	73fb      	strb	r3, [r7, #15]
 800adb4:	e01d      	b.n	800adf2 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800adb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00a      	beq.n	800add4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800adbe:	78bb      	ldrb	r3, [r7, #2]
 800adc0:	461a      	mov	r2, r3
 800adc2:	21cb      	movs	r1, #203	; 0xcb
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f002 f9e3 	bl	800d190 <VL53L0X_WrByte>
 800adca:	4603      	mov	r3, r0
 800adcc:	461a      	mov	r2, r3
 800adce:	7bfb      	ldrb	r3, [r7, #15]
 800add0:	4313      	orrs	r3, r2
 800add2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800add4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00a      	beq.n	800adf2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800addc:	787b      	ldrb	r3, [r7, #1]
 800adde:	2280      	movs	r2, #128	; 0x80
 800ade0:	21ee      	movs	r1, #238	; 0xee
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f002 fa22 	bl	800d22c <VL53L0X_UpdateByte>
 800ade8:	4603      	mov	r3, r0
 800adea:	461a      	mov	r2, r3
 800adec:	7bfb      	ldrb	r3, [r7, #15]
 800adee:	4313      	orrs	r3, r2
 800adf0:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800adf2:	2201      	movs	r2, #1
 800adf4:	21ff      	movs	r1, #255	; 0xff
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f002 f9ca 	bl	800d190 <VL53L0X_WrByte>
 800adfc:	4603      	mov	r3, r0
 800adfe:	461a      	mov	r2, r3
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ae06:	2201      	movs	r2, #1
 800ae08:	2100      	movs	r1, #0
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f002 f9c0 	bl	800d190 <VL53L0X_WrByte>
 800ae10:	4603      	mov	r3, r0
 800ae12:	461a      	mov	r2, r3
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	21ff      	movs	r1, #255	; 0xff
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f002 f9b6 	bl	800d190 <VL53L0X_WrByte>
 800ae24:	4603      	mov	r3, r0
 800ae26:	461a      	mov	r2, r3
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	f023 0310 	bic.w	r3, r3, #16
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	701a      	strb	r2, [r3, #0]

	return Status;
 800ae3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b08a      	sub	sp, #40	; 0x28
 800ae4a:	af04      	add	r7, sp, #16
 800ae4c:	60f8      	str	r0, [r7, #12]
 800ae4e:	60b9      	str	r1, [r7, #8]
 800ae50:	4611      	mov	r1, r2
 800ae52:	461a      	mov	r2, r3
 800ae54:	460b      	mov	r3, r1
 800ae56:	71fb      	strb	r3, [r7, #7]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800ae70:	79bb      	ldrb	r3, [r7, #6]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ae7c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800ae7e:	2201      	movs	r2, #1
 800ae80:	2101      	movs	r1, #1
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f002 f984 	bl	800d190 <VL53L0X_WrByte>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800ae8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d105      	bne.n	800aea0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800ae94:	2140      	movs	r1, #64	; 0x40
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f7ff ff01 	bl	800ac9e <VL53L0X_perform_single_ref_calibration>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800aea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d115      	bne.n	800aed4 <VL53L0X_perform_vhv_calibration+0x8e>
 800aea8:	79fb      	ldrb	r3, [r7, #7]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d112      	bne.n	800aed4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800aeae:	7d39      	ldrb	r1, [r7, #20]
 800aeb0:	7d7a      	ldrb	r2, [r7, #21]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	9303      	str	r3, [sp, #12]
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	9302      	str	r3, [sp, #8]
 800aeba:	f107 0313 	add.w	r3, r7, #19
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	460b      	mov	r3, r1
 800aec6:	2101      	movs	r1, #1
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f7ff ff23 	bl	800ad14 <VL53L0X_ref_calibration_io>
 800aece:	4603      	mov	r3, r0
 800aed0:	75fb      	strb	r3, [r7, #23]
 800aed2:	e002      	b.n	800aeda <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2200      	movs	r2, #0
 800aed8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800aeda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d112      	bne.n	800af08 <VL53L0X_perform_vhv_calibration+0xc2>
 800aee2:	79bb      	ldrb	r3, [r7, #6]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00f      	beq.n	800af08 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800aee8:	7dbb      	ldrb	r3, [r7, #22]
 800aeea:	461a      	mov	r2, r3
 800aeec:	2101      	movs	r1, #1
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f002 f94e 	bl	800d190 <VL53L0X_WrByte>
 800aef4:	4603      	mov	r3, r0
 800aef6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800aef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d103      	bne.n	800af08 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	7dba      	ldrb	r2, [r7, #22]
 800af04:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800af08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08a      	sub	sp, #40	; 0x28
 800af18:	af04      	add	r7, sp, #16
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	4611      	mov	r1, r2
 800af20:	461a      	mov	r2, r3
 800af22:	460b      	mov	r3, r1
 800af24:	71fb      	strb	r3, [r7, #7]
 800af26:	4613      	mov	r3, r2
 800af28:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af2a:	2300      	movs	r3, #0
 800af2c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800af3a:	79bb      	ldrb	r3, [r7, #6]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d003      	beq.n	800af48 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800af46:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800af48:	2202      	movs	r2, #2
 800af4a:	2101      	movs	r1, #1
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f002 f91f 	bl	800d190 <VL53L0X_WrByte>
 800af52:	4603      	mov	r3, r0
 800af54:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800af56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d105      	bne.n	800af6a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800af5e:	2100      	movs	r1, #0
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f7ff fe9c 	bl	800ac9e <VL53L0X_perform_single_ref_calibration>
 800af66:	4603      	mov	r3, r0
 800af68:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800af6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d115      	bne.n	800af9e <VL53L0X_perform_phase_calibration+0x8a>
 800af72:	79fb      	ldrb	r3, [r7, #7]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d112      	bne.n	800af9e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800af78:	7d39      	ldrb	r1, [r7, #20]
 800af7a:	7d7a      	ldrb	r2, [r7, #21]
 800af7c:	2301      	movs	r3, #1
 800af7e:	9303      	str	r3, [sp, #12]
 800af80:	2300      	movs	r3, #0
 800af82:	9302      	str	r3, [sp, #8]
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	9301      	str	r3, [sp, #4]
 800af88:	f107 0313 	add.w	r3, r7, #19
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	460b      	mov	r3, r1
 800af90:	2101      	movs	r1, #1
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f7ff febe 	bl	800ad14 <VL53L0X_ref_calibration_io>
 800af98:	4603      	mov	r3, r0
 800af9a:	75fb      	strb	r3, [r7, #23]
 800af9c:	e002      	b.n	800afa4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2200      	movs	r2, #0
 800afa2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800afa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d112      	bne.n	800afd2 <VL53L0X_perform_phase_calibration+0xbe>
 800afac:	79bb      	ldrb	r3, [r7, #6]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00f      	beq.n	800afd2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800afb2:	7dbb      	ldrb	r3, [r7, #22]
 800afb4:	461a      	mov	r2, r3
 800afb6:	2101      	movs	r1, #1
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f002 f8e9 	bl	800d190 <VL53L0X_WrByte>
 800afbe:	4603      	mov	r3, r0
 800afc0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800afc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d103      	bne.n	800afd2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	7dba      	ldrb	r2, [r7, #22]
 800afce:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800afd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3718      	adds	r7, #24
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b086      	sub	sp, #24
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	60f8      	str	r0, [r7, #12]
 800afe6:	60b9      	str	r1, [r7, #8]
 800afe8:	607a      	str	r2, [r7, #4]
 800afea:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afec:	2300      	movs	r3, #0
 800afee:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800affa:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 800affc:	78fa      	ldrb	r2, [r7, #3]
 800affe:	2300      	movs	r3, #0
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f7ff ff1f 	bl	800ae46 <VL53L0X_perform_vhv_calibration>
 800b008:	4603      	mov	r3, r0
 800b00a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b00c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d107      	bne.n	800b024 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b014:	78fa      	ldrb	r2, [r7, #3]
 800b016:	2300      	movs	r3, #0
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7ff ff7a 	bl	800af14 <VL53L0X_perform_phase_calibration>
 800b020:	4603      	mov	r3, r0
 800b022:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800b024:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10f      	bne.n	800b04c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b02c:	7dbb      	ldrb	r3, [r7, #22]
 800b02e:	461a      	mov	r2, r3
 800b030:	2101      	movs	r1, #1
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f002 f8ac 	bl	800d190 <VL53L0X_WrByte>
 800b038:	4603      	mov	r3, r0
 800b03a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b03c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d103      	bne.n	800b04c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	7dba      	ldrb	r2, [r7, #22]
 800b048:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800b04c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3718      	adds	r7, #24
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b060:	2300      	movs	r3, #0
 800b062:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800b068:	2300      	movs	r3, #0
 800b06a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b06c:	f107 030f 	add.w	r3, r7, #15
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7fe fe02 	bl	8009c7c <VL53L0X_GetMeasurementDataReady>
 800b078:	4603      	mov	r3, r0
 800b07a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b07c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d110      	bne.n	800b0a6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b084:	7bfb      	ldrb	r3, [r7, #15]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d00f      	beq.n	800b0aa <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	3301      	adds	r3, #1
 800b08e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b096:	d302      	bcc.n	800b09e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b098:	23f9      	movs	r3, #249	; 0xf9
 800b09a:	75fb      	strb	r3, [r7, #23]
			break;
 800b09c:	e006      	b.n	800b0ac <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f002 f996 	bl	800d3d0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b0a4:	e7e2      	b.n	800b06c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b0a6:	bf00      	nop
 800b0a8:	e000      	b.n	800b0ac <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800b0aa:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800b0ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	4603      	mov	r3, r0
 800b0c0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b0ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0ee:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800b0f0:	e002      	b.n	800b0f8 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	089b      	lsrs	r3, r3, #2
 800b0f6:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d8f8      	bhi.n	800b0f2 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b100:	e017      	b.n	800b132 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b102:	68fa      	ldr	r2, [r7, #12]
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	4413      	add	r3, r2
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d30b      	bcc.n	800b126 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	4413      	add	r3, r2
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	085b      	lsrs	r3, r3, #1
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	4413      	add	r3, r2
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	e002      	b.n	800b12c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	085b      	lsrs	r3, r3, #1
 800b12a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	089b      	lsrs	r3, r3, #2
 800b130:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1e4      	bne.n	800b102 <VL53L0X_isqrt+0x24>
	}

	return res;
 800b138:	68fb      	ldr	r3, [r7, #12]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3714      	adds	r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b086      	sub	sp, #24
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b14e:	2300      	movs	r3, #0
 800b150:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800b152:	2200      	movs	r2, #0
 800b154:	2183      	movs	r1, #131	; 0x83
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f002 f81a 	bl	800d190 <VL53L0X_WrByte>
 800b15c:	4603      	mov	r3, r0
 800b15e:	461a      	mov	r2, r3
 800b160:	7dfb      	ldrb	r3, [r7, #23]
 800b162:	4313      	orrs	r3, r2
 800b164:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 800b166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d11e      	bne.n	800b1ac <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800b172:	f107 030f 	add.w	r3, r7, #15
 800b176:	461a      	mov	r2, r3
 800b178:	2183      	movs	r1, #131	; 0x83
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f002 f88a 	bl	800d294 <VL53L0X_RdByte>
 800b180:	4603      	mov	r3, r0
 800b182:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800b184:	7bfb      	ldrb	r3, [r7, #15]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10a      	bne.n	800b1a0 <VL53L0X_device_read_strobe+0x5a>
 800b18a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	3301      	adds	r3, #1
 800b196:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b19e:	d3e8      	bcc.n	800b172 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b1a6:	d301      	bcc.n	800b1ac <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b1a8:	23f9      	movs	r3, #249	; 0xf9
 800b1aa:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	2183      	movs	r1, #131	; 0x83
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f001 ffed 	bl	800d190 <VL53L0X_WrByte>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	7dfb      	ldrb	r3, [r7, #23]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800b1c0:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3718      	adds	r7, #24
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b098      	sub	sp, #96	; 0x60
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800b1fc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800b200:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b214:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 800b218:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b21c:	2b07      	cmp	r3, #7
 800b21e:	f000 8408 	beq.w	800ba32 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b222:	2201      	movs	r2, #1
 800b224:	2180      	movs	r1, #128	; 0x80
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f001 ffb2 	bl	800d190 <VL53L0X_WrByte>
 800b22c:	4603      	mov	r3, r0
 800b22e:	461a      	mov	r2, r3
 800b230:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b234:	4313      	orrs	r3, r2
 800b236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b23a:	2201      	movs	r2, #1
 800b23c:	21ff      	movs	r1, #255	; 0xff
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f001 ffa6 	bl	800d190 <VL53L0X_WrByte>
 800b244:	4603      	mov	r3, r0
 800b246:	461a      	mov	r2, r3
 800b248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b24c:	4313      	orrs	r3, r2
 800b24e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b252:	2200      	movs	r2, #0
 800b254:	2100      	movs	r1, #0
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f001 ff9a 	bl	800d190 <VL53L0X_WrByte>
 800b25c:	4603      	mov	r3, r0
 800b25e:	461a      	mov	r2, r3
 800b260:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b264:	4313      	orrs	r3, r2
 800b266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b26a:	2206      	movs	r2, #6
 800b26c:	21ff      	movs	r1, #255	; 0xff
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f001 ff8e 	bl	800d190 <VL53L0X_WrByte>
 800b274:	4603      	mov	r3, r0
 800b276:	461a      	mov	r2, r3
 800b278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b27c:	4313      	orrs	r3, r2
 800b27e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b282:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800b286:	461a      	mov	r2, r3
 800b288:	2183      	movs	r1, #131	; 0x83
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f002 f802 	bl	800d294 <VL53L0X_RdByte>
 800b290:	4603      	mov	r3, r0
 800b292:	461a      	mov	r2, r3
 800b294:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b298:	4313      	orrs	r3, r2
 800b29a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800b29e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2a2:	f043 0304 	orr.w	r3, r3, #4
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	2183      	movs	r1, #131	; 0x83
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f001 ff6f 	bl	800d190 <VL53L0X_WrByte>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800b2c0:	2207      	movs	r2, #7
 800b2c2:	21ff      	movs	r1, #255	; 0xff
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f001 ff63 	bl	800d190 <VL53L0X_WrByte>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800b2d8:	2201      	movs	r2, #1
 800b2da:	2181      	movs	r1, #129	; 0x81
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f001 ff57 	bl	800d190 <VL53L0X_WrByte>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f002 f86d 	bl	800d3d0 <VL53L0X_PollingDelay>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2fe:	4313      	orrs	r3, r2
 800b300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b304:	2201      	movs	r2, #1
 800b306:	2180      	movs	r1, #128	; 0x80
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f001 ff41 	bl	800d190 <VL53L0X_WrByte>
 800b30e:	4603      	mov	r3, r0
 800b310:	461a      	mov	r2, r3
 800b312:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b316:	4313      	orrs	r3, r2
 800b318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800b31c:	78fb      	ldrb	r3, [r7, #3]
 800b31e:	f003 0301 	and.w	r3, r3, #1
 800b322:	2b00      	cmp	r3, #0
 800b324:	f000 8098 	beq.w	800b458 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b328:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b32c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b330:	2b00      	cmp	r3, #0
 800b332:	f040 8091 	bne.w	800b458 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800b336:	226b      	movs	r2, #107	; 0x6b
 800b338:	2194      	movs	r1, #148	; 0x94
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f001 ff28 	bl	800d190 <VL53L0X_WrByte>
 800b340:	4603      	mov	r3, r0
 800b342:	461a      	mov	r2, r3
 800b344:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b348:	4313      	orrs	r3, r2
 800b34a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7ff fef9 	bl	800b146 <VL53L0X_device_read_strobe>
 800b354:	4603      	mov	r3, r0
 800b356:	461a      	mov	r2, r3
 800b358:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b35c:	4313      	orrs	r3, r2
 800b35e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b366:	461a      	mov	r2, r3
 800b368:	2190      	movs	r1, #144	; 0x90
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 fff4 	bl	800d358 <VL53L0X_RdDWord>
 800b370:	4603      	mov	r3, r0
 800b372:	461a      	mov	r2, r3
 800b374:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b378:	4313      	orrs	r3, r2
 800b37a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800b37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b380:	0a1b      	lsrs	r3, r3, #8
 800b382:	b2db      	uxtb	r3, r3
 800b384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b388:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38e:	0bdb      	lsrs	r3, r3, #15
 800b390:	b2db      	uxtb	r3, r3
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800b39a:	2224      	movs	r2, #36	; 0x24
 800b39c:	2194      	movs	r1, #148	; 0x94
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f001 fef6 	bl	800d190 <VL53L0X_WrByte>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7ff fec7 	bl	800b146 <VL53L0X_device_read_strobe>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b3c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	2190      	movs	r1, #144	; 0x90
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f001 ffc2 	bl	800d358 <VL53L0X_RdDWord>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e4:	0e1b      	lsrs	r3, r3, #24
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	0c1b      	lsrs	r3, r3, #16
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f4:	0a1b      	lsrs	r3, r3, #8
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800b400:	2225      	movs	r2, #37	; 0x25
 800b402:	2194      	movs	r1, #148	; 0x94
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f001 fec3 	bl	800d190 <VL53L0X_WrByte>
 800b40a:	4603      	mov	r3, r0
 800b40c:	461a      	mov	r2, r3
 800b40e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b412:	4313      	orrs	r3, r2
 800b414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7ff fe94 	bl	800b146 <VL53L0X_device_read_strobe>
 800b41e:	4603      	mov	r3, r0
 800b420:	461a      	mov	r2, r3
 800b422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b426:	4313      	orrs	r3, r2
 800b428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b42c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b430:	461a      	mov	r2, r3
 800b432:	2190      	movs	r1, #144	; 0x90
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f001 ff8f 	bl	800d358 <VL53L0X_RdDWord>
 800b43a:	4603      	mov	r3, r0
 800b43c:	461a      	mov	r2, r3
 800b43e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b442:	4313      	orrs	r3, r2
 800b444:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800b448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44a:	0e1b      	lsrs	r3, r3, #24
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800b450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b452:	0c1b      	lsrs	r3, r3, #16
 800b454:	b2db      	uxtb	r3, r3
 800b456:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800b458:	78fb      	ldrb	r3, [r7, #3]
 800b45a:	f003 0302 	and.w	r3, r3, #2
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f000 8189 	beq.w	800b776 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b464:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b468:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f040 8182 	bne.w	800b776 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800b472:	2202      	movs	r2, #2
 800b474:	2194      	movs	r1, #148	; 0x94
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f001 fe8a 	bl	800d190 <VL53L0X_WrByte>
 800b47c:	4603      	mov	r3, r0
 800b47e:	461a      	mov	r2, r3
 800b480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b484:	4313      	orrs	r3, r2
 800b486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff fe5b 	bl	800b146 <VL53L0X_device_read_strobe>
 800b490:	4603      	mov	r3, r0
 800b492:	461a      	mov	r2, r3
 800b494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b498:	4313      	orrs	r3, r2
 800b49a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800b49e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	2190      	movs	r1, #144	; 0x90
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f001 fef4 	bl	800d294 <VL53L0X_RdByte>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b4ba:	227b      	movs	r2, #123	; 0x7b
 800b4bc:	2194      	movs	r1, #148	; 0x94
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f001 fe66 	bl	800d190 <VL53L0X_WrByte>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f7ff fe37 	bl	800b146 <VL53L0X_device_read_strobe>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	461a      	mov	r2, r3
 800b4dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800b4e6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	2190      	movs	r1, #144	; 0x90
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f001 fed0 	bl	800d294 <VL53L0X_RdByte>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800b502:	2277      	movs	r2, #119	; 0x77
 800b504:	2194      	movs	r1, #148	; 0x94
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f001 fe42 	bl	800d190 <VL53L0X_WrByte>
 800b50c:	4603      	mov	r3, r0
 800b50e:	461a      	mov	r2, r3
 800b510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b514:	4313      	orrs	r3, r2
 800b516:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7ff fe13 	bl	800b146 <VL53L0X_device_read_strobe>
 800b520:	4603      	mov	r3, r0
 800b522:	461a      	mov	r2, r3
 800b524:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b528:	4313      	orrs	r3, r2
 800b52a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b52e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b532:	461a      	mov	r2, r3
 800b534:	2190      	movs	r1, #144	; 0x90
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f001 ff0e 	bl	800d358 <VL53L0X_RdDWord>
 800b53c:	4603      	mov	r3, r0
 800b53e:	461a      	mov	r2, r3
 800b540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b544:	4313      	orrs	r3, r2
 800b546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	0e5b      	lsrs	r3, r3, #25
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b554:	b2db      	uxtb	r3, r3
 800b556:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800b558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55a:	0c9b      	lsrs	r3, r3, #18
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b562:	b2db      	uxtb	r3, r3
 800b564:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800b566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b568:	0adb      	lsrs	r3, r3, #11
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b570:	b2db      	uxtb	r3, r3
 800b572:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800b574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b576:	091b      	lsrs	r3, r3, #4
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800b582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b584:	b2db      	uxtb	r3, r3
 800b586:	00db      	lsls	r3, r3, #3
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800b594:	2278      	movs	r2, #120	; 0x78
 800b596:	2194      	movs	r1, #148	; 0x94
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f001 fdf9 	bl	800d190 <VL53L0X_WrByte>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7ff fdca 	bl	800b146 <VL53L0X_device_read_strobe>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b5c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	2190      	movs	r1, #144	; 0x90
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f001 fec5 	bl	800d358 <VL53L0X_RdDWord>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5de:	0f5b      	lsrs	r3, r3, #29
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5e6:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800b5e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b5ec:	4413      	add	r3, r2
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	0d9b      	lsrs	r3, r3, #22
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	0bdb      	lsrs	r3, r3, #15
 800b604:	b2db      	uxtb	r3, r3
 800b606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	0a1b      	lsrs	r3, r3, #8
 800b612:	b2db      	uxtb	r3, r3
 800b614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800b61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61e:	085b      	lsrs	r3, r3, #1
 800b620:	b2db      	uxtb	r3, r3
 800b622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b626:	b2db      	uxtb	r3, r3
 800b628:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	019b      	lsls	r3, r3, #6
 800b630:	b2db      	uxtb	r3, r3
 800b632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b636:	b2db      	uxtb	r3, r3
 800b638:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800b63c:	2279      	movs	r2, #121	; 0x79
 800b63e:	2194      	movs	r1, #148	; 0x94
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f001 fda5 	bl	800d190 <VL53L0X_WrByte>
 800b646:	4603      	mov	r3, r0
 800b648:	461a      	mov	r2, r3
 800b64a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b64e:	4313      	orrs	r3, r2
 800b650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff fd76 	bl	800b146 <VL53L0X_device_read_strobe>
 800b65a:	4603      	mov	r3, r0
 800b65c:	461a      	mov	r2, r3
 800b65e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b662:	4313      	orrs	r3, r2
 800b664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b66c:	461a      	mov	r2, r3
 800b66e:	2190      	movs	r1, #144	; 0x90
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f001 fe71 	bl	800d358 <VL53L0X_RdDWord>
 800b676:	4603      	mov	r3, r0
 800b678:	461a      	mov	r2, r3
 800b67a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b67e:	4313      	orrs	r3, r2
 800b680:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800b684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b686:	0e9b      	lsrs	r3, r3, #26
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b68e:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800b690:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b694:	4413      	add	r3, r2
 800b696:	b2db      	uxtb	r3, r3
 800b698:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	0cdb      	lsrs	r3, r3, #19
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	0b1b      	lsrs	r3, r3, #12
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	095b      	lsrs	r3, r3, #5
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800b6d6:	227a      	movs	r2, #122	; 0x7a
 800b6d8:	2194      	movs	r1, #148	; 0x94
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f001 fd58 	bl	800d190 <VL53L0X_WrByte>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7ff fd29 	bl	800b146 <VL53L0X_device_read_strobe>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b706:	461a      	mov	r2, r3
 800b708:	2190      	movs	r1, #144	; 0x90
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f001 fe24 	bl	800d358 <VL53L0X_RdDWord>
 800b710:	4603      	mov	r3, r0
 800b712:	461a      	mov	r2, r3
 800b714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b718:	4313      	orrs	r3, r2
 800b71a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800b71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b720:	0f9b      	lsrs	r3, r3, #30
 800b722:	b2db      	uxtb	r3, r3
 800b724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b728:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800b72a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b72e:	4413      	add	r3, r2
 800b730:	b2db      	uxtb	r3, r3
 800b732:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	0ddb      	lsrs	r3, r3, #23
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	0c1b      	lsrs	r3, r3, #16
 800b746:	b2db      	uxtb	r3, r3
 800b748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	0a5b      	lsrs	r3, r3, #9
 800b754:	b2db      	uxtb	r3, r3
 800b756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800b760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b762:	089b      	lsrs	r3, r3, #2
 800b764:	b2db      	uxtb	r3, r3
 800b766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800b770:	2300      	movs	r3, #0
 800b772:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800b776:	78fb      	ldrb	r3, [r7, #3]
 800b778:	f003 0304 	and.w	r3, r3, #4
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f000 80f1 	beq.w	800b964 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800b782:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b786:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f040 80ea 	bne.w	800b964 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b790:	227b      	movs	r2, #123	; 0x7b
 800b792:	2194      	movs	r1, #148	; 0x94
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f001 fcfb 	bl	800d190 <VL53L0X_WrByte>
 800b79a:	4603      	mov	r3, r0
 800b79c:	461a      	mov	r2, r3
 800b79e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f7ff fccc 	bl	800b146 <VL53L0X_device_read_strobe>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800b7bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	2190      	movs	r1, #144	; 0x90
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f001 fdc7 	bl	800d358 <VL53L0X_RdDWord>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800b7d8:	227c      	movs	r2, #124	; 0x7c
 800b7da:	2194      	movs	r1, #148	; 0x94
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f001 fcd7 	bl	800d190 <VL53L0X_WrByte>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7ff fca8 	bl	800b146 <VL53L0X_device_read_strobe>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7fe:	4313      	orrs	r3, r2
 800b800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800b804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b808:	461a      	mov	r2, r3
 800b80a:	2190      	movs	r1, #144	; 0x90
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f001 fda3 	bl	800d358 <VL53L0X_RdDWord>
 800b812:	4603      	mov	r3, r0
 800b814:	461a      	mov	r2, r3
 800b816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b81a:	4313      	orrs	r3, r2
 800b81c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800b820:	2273      	movs	r2, #115	; 0x73
 800b822:	2194      	movs	r1, #148	; 0x94
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f001 fcb3 	bl	800d190 <VL53L0X_WrByte>
 800b82a:	4603      	mov	r3, r0
 800b82c:	461a      	mov	r2, r3
 800b82e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b832:	4313      	orrs	r3, r2
 800b834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7ff fc84 	bl	800b146 <VL53L0X_device_read_strobe>
 800b83e:	4603      	mov	r3, r0
 800b840:	461a      	mov	r2, r3
 800b842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b846:	4313      	orrs	r3, r2
 800b848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b84c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b850:	461a      	mov	r2, r3
 800b852:	2190      	movs	r1, #144	; 0x90
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f001 fd7f 	bl	800d358 <VL53L0X_RdDWord>
 800b85a:	4603      	mov	r3, r0
 800b85c:	461a      	mov	r2, r3
 800b85e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b862:	4313      	orrs	r3, r2
 800b864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800b868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86a:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800b870:	2274      	movs	r2, #116	; 0x74
 800b872:	2194      	movs	r1, #148	; 0x94
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f001 fc8b 	bl	800d190 <VL53L0X_WrByte>
 800b87a:	4603      	mov	r3, r0
 800b87c:	461a      	mov	r2, r3
 800b87e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b882:	4313      	orrs	r3, r2
 800b884:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f7ff fc5c 	bl	800b146 <VL53L0X_device_read_strobe>
 800b88e:	4603      	mov	r3, r0
 800b890:	461a      	mov	r2, r3
 800b892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b896:	4313      	orrs	r3, r2
 800b898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b89c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	2190      	movs	r1, #144	; 0x90
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f001 fd57 	bl	800d358 <VL53L0X_RdDWord>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800b8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ba:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800b8bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800b8c2:	2275      	movs	r2, #117	; 0x75
 800b8c4:	2194      	movs	r1, #148	; 0x94
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f001 fc62 	bl	800d190 <VL53L0X_WrByte>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fc33 	bl	800b146 <VL53L0X_device_read_strobe>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b8ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	2190      	movs	r1, #144	; 0x90
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f001 fd2e 	bl	800d358 <VL53L0X_RdDWord>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	461a      	mov	r2, r3
 800b900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b904:	4313      	orrs	r3, r2
 800b906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800b90e:	b29b      	uxth	r3, r3
 800b910:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800b912:	2276      	movs	r2, #118	; 0x76
 800b914:	2194      	movs	r1, #148	; 0x94
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f001 fc3a 	bl	800d190 <VL53L0X_WrByte>
 800b91c:	4603      	mov	r3, r0
 800b91e:	461a      	mov	r2, r3
 800b920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b924:	4313      	orrs	r3, r2
 800b926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7ff fc0b 	bl	800b146 <VL53L0X_device_read_strobe>
 800b930:	4603      	mov	r3, r0
 800b932:	461a      	mov	r2, r3
 800b934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b938:	4313      	orrs	r3, r2
 800b93a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b93e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b942:	461a      	mov	r2, r3
 800b944:	2190      	movs	r1, #144	; 0x90
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f001 fd06 	bl	800d358 <VL53L0X_RdDWord>
 800b94c:	4603      	mov	r3, r0
 800b94e:	461a      	mov	r2, r3
 800b950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b954:	4313      	orrs	r3, r2
 800b956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800b95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95c:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800b95e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b960:	4313      	orrs	r3, r2
 800b962:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800b964:	2200      	movs	r2, #0
 800b966:	2181      	movs	r1, #129	; 0x81
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f001 fc11 	bl	800d190 <VL53L0X_WrByte>
 800b96e:	4603      	mov	r3, r0
 800b970:	461a      	mov	r2, r3
 800b972:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b976:	4313      	orrs	r3, r2
 800b978:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b97c:	2206      	movs	r2, #6
 800b97e:	21ff      	movs	r1, #255	; 0xff
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f001 fc05 	bl	800d190 <VL53L0X_WrByte>
 800b986:	4603      	mov	r3, r0
 800b988:	461a      	mov	r2, r3
 800b98a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b98e:	4313      	orrs	r3, r2
 800b990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b994:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800b998:	461a      	mov	r2, r3
 800b99a:	2183      	movs	r1, #131	; 0x83
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f001 fc79 	bl	800d294 <VL53L0X_RdByte>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800b9b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b9b4:	f023 0304 	bic.w	r3, r3, #4
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	2183      	movs	r1, #131	; 0x83
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f001 fbe6 	bl	800d190 <VL53L0X_WrByte>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	21ff      	movs	r1, #255	; 0xff
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f001 fbda 	bl	800d190 <VL53L0X_WrByte>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	461a      	mov	r2, r3
 800b9e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f001 fbce 	bl	800d190 <VL53L0X_WrByte>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ba02:	2200      	movs	r2, #0
 800ba04:	21ff      	movs	r1, #255	; 0xff
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f001 fbc2 	bl	800d190 <VL53L0X_WrByte>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba14:	4313      	orrs	r3, r2
 800ba16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	2180      	movs	r1, #128	; 0x80
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f001 fbb6 	bl	800d190 <VL53L0X_WrByte>
 800ba24:	4603      	mov	r3, r0
 800ba26:	461a      	mov	r2, r3
 800ba28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800ba32:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	f040 8090 	bne.w	800bb5c <VL53L0X_get_info_from_device+0x990>
 800ba3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ba40:	2b07      	cmp	r3, #7
 800ba42:	f000 808b 	beq.w	800bb5c <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800ba46:	78fb      	ldrb	r3, [r7, #3]
 800ba48:	f003 0301 	and.w	r3, r3, #1
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d024      	beq.n	800ba9a <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800ba50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ba54:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d11e      	bne.n	800ba9a <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800ba62:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800ba6c:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ba70:	2300      	movs	r3, #0
 800ba72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba74:	e00e      	b.n	800ba94 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800ba76:	f107 0208 	add.w	r2, r7, #8
 800ba7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba7c:	4413      	add	r3, r2
 800ba7e:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba84:	4413      	add	r3, r2
 800ba86:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 800ba8a:	460a      	mov	r2, r1
 800ba8c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ba8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba90:	3301      	adds	r3, #1
 800ba92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba96:	2b05      	cmp	r3, #5
 800ba98:	dded      	ble.n	800ba76 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800ba9a:	78fb      	ldrb	r3, [r7, #3]
 800ba9c:	f003 0302 	and.w	r3, r3, #2
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d019      	beq.n	800bad8 <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800baa4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800baa8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800baac:	2b00      	cmp	r3, #0
 800baae:	d113      	bne.n	800bad8 <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bab0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800baba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f203 131f 	addw	r3, r3, #287	; 0x11f
 800baca:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800bacc:	f107 0310 	add.w	r3, r7, #16
 800bad0:	4619      	mov	r1, r3
 800bad2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bad4:	f001 fd4a 	bl	800d56c <strcpy>

		}

		if (((option & 4) == 4) &&
 800bad8:	78fb      	ldrb	r3, [r7, #3]
 800bada:	f003 0304 	and.w	r3, r3, #4
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d030      	beq.n	800bb44 <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800bae2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bae6:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800baea:	2b00      	cmp	r3, #0
 800baec:	d12a      	bne.n	800bb44 <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800baee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800baf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800bafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb00:	025b      	lsls	r3, r3, #9
 800bb02:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb08:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800bb12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d011      	beq.n	800bb3c <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 800bb18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800bb20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bb26:	fb02 f303 	mul.w	r3, r2, r3
 800bb2a:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 800bb2c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 800bb30:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800bb34:	425b      	negs	r3, r3
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800bb3c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800bb44:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800bb48:	78fb      	ldrb	r3, [r7, #3]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800bb52:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb5c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3760      	adds	r7, #96	; 0x60
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 800bb74:	f240 6277 	movw	r2, #1655	; 0x677
 800bb78:	f04f 0300 	mov.w	r3, #0
 800bb7c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800bb80:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800bb84:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800bb86:	78fb      	ldrb	r3, [r7, #3]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800bb8e:	693a      	ldr	r2, [r7, #16]
 800bb90:	fb02 f303 	mul.w	r3, r2, r3
 800bb94:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800bb96:	68bb      	ldr	r3, [r7, #8]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	371c      	adds	r7, #28
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b087      	sub	sp, #28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d017      	beq.n	800bbee <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800bbc4:	e005      	b.n	800bbd2 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	085b      	lsrs	r3, r3, #1
 800bbca:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800bbcc:	89fb      	ldrh	r3, [r7, #14]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1f4      	bne.n	800bbc6 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800bbdc:	89fb      	ldrh	r3, [r7, #14]
 800bbde:	021b      	lsls	r3, r3, #8
 800bbe0:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800bbea:	4413      	add	r3, r2
 800bbec:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800bbee:	8afb      	ldrh	r3, [r7, #22]

}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	371c      	adds	r7, #28
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	4603      	mov	r3, r0
 800bc04:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800bc0a:	88fb      	ldrh	r3, [r7, #6]
 800bc0c:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800bc0e:	88fa      	ldrh	r2, [r7, #6]
 800bc10:	0a12      	lsrs	r2, r2, #8
 800bc12:	b292      	uxth	r2, r2
 800bc14:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800bc16:	3301      	adds	r3, #1
 800bc18:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b088      	sub	sp, #32
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	4613      	mov	r3, r2
 800bc34:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800bc3a:	79fb      	ldrb	r3, [r7, #7]
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f7ff ff92 	bl	800bb68 <VL53L0X_calc_macro_period_ps>
 800bc44:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bc4c:	4a0a      	ldr	r2, [pc, #40]	; (800bc78 <VL53L0X_calc_timeout_mclks+0x50>)
 800bc4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc52:	099b      	lsrs	r3, r3, #6
 800bc54:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc5c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	085b      	lsrs	r3, r3, #1
 800bc64:	441a      	add	r2, r3
	timeout_period_mclks =
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc6c:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800bc6e:	69fb      	ldr	r3, [r7, #28]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3720      	adds	r7, #32
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	10624dd3 	.word	0x10624dd3

0800bc7c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	460b      	mov	r3, r1
 800bc86:	807b      	strh	r3, [r7, #2]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800bc90:	787b      	ldrb	r3, [r7, #1]
 800bc92:	4619      	mov	r1, r3
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7ff ff67 	bl	800bb68 <VL53L0X_calc_macro_period_ps>
 800bc9a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bca2:	4a0a      	ldr	r2, [pc, #40]	; (800bccc <VL53L0X_calc_timeout_us+0x50>)
 800bca4:	fba2 2303 	umull	r2, r3, r2, r3
 800bca8:	099b      	lsrs	r3, r3, #6
 800bcaa:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800bcac:	887b      	ldrh	r3, [r7, #2]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	fb02 f303 	mul.w	r3, r2, r3
 800bcb4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800bcb8:	4a04      	ldr	r2, [pc, #16]	; (800bccc <VL53L0X_calc_timeout_us+0x50>)
 800bcba:	fba2 2303 	umull	r2, r3, r2, r3
 800bcbe:	099b      	lsrs	r3, r3, #6
 800bcc0:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800bcc2:	697b      	ldr	r3, [r7, #20]
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3718      	adds	r7, #24
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	10624dd3 	.word	0x10624dd3

0800bcd0 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08c      	sub	sp, #48	; 0x30
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcde:	2300      	movs	r3, #0
 800bce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800bcea:	2300      	movs	r3, #0
 800bcec:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800bcf6:	7afb      	ldrb	r3, [r7, #11]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d005      	beq.n	800bd08 <get_sequence_step_timeout+0x38>
 800bcfc:	7afb      	ldrb	r3, [r7, #11]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d002      	beq.n	800bd08 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800bd02:	7afb      	ldrb	r3, [r7, #11]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d128      	bne.n	800bd5a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bd08:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	2100      	movs	r1, #0
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f7fd fa03 	bl	800911c <VL53L0X_GetVcselPulsePeriod>
 800bd16:	4603      	mov	r3, r0
 800bd18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800bd1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d109      	bne.n	800bd38 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800bd24:	f107 0320 	add.w	r3, r7, #32
 800bd28:	461a      	mov	r2, r3
 800bd2a:	2146      	movs	r1, #70	; 0x46
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f001 fab1 	bl	800d294 <VL53L0X_RdByte>
 800bd32:	4603      	mov	r3, r0
 800bd34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800bd38:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7ff ff5c 	bl	800bbfc <VL53L0X_decode_timeout>
 800bd44:	4603      	mov	r3, r0
 800bd46:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800bd48:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bd4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd4e:	4619      	mov	r1, r3
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7ff ff93 	bl	800bc7c <VL53L0X_calc_timeout_us>
 800bd56:	62b8      	str	r0, [r7, #40]	; 0x28
 800bd58:	e092      	b.n	800be80 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800bd5a:	7afb      	ldrb	r3, [r7, #11]
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d135      	bne.n	800bdcc <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bd60:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800bd64:	461a      	mov	r2, r3
 800bd66:	2100      	movs	r1, #0
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f7fd f9d7 	bl	800911c <VL53L0X_GetVcselPulsePeriod>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800bd74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f040 8081 	bne.w	800be80 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bd7e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800bd82:	461a      	mov	r2, r3
 800bd84:	2100      	movs	r1, #0
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f7fd f9c8 	bl	800911c <VL53L0X_GetVcselPulsePeriod>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800bd92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d109      	bne.n	800bdae <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800bd9a:	f107 031e 	add.w	r3, r7, #30
 800bd9e:	461a      	mov	r2, r3
 800bda0:	2151      	movs	r1, #81	; 0x51
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f001 faa0 	bl	800d2e8 <VL53L0X_RdWord>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800bdae:	8bfb      	ldrh	r3, [r7, #30]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7ff ff23 	bl	800bbfc <VL53L0X_decode_timeout>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800bdba:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bdbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f7ff ff5a 	bl	800bc7c <VL53L0X_calc_timeout_us>
 800bdc8:	62b8      	str	r0, [r7, #40]	; 0x28
 800bdca:	e059      	b.n	800be80 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800bdcc:	7afb      	ldrb	r3, [r7, #11]
 800bdce:	2b04      	cmp	r3, #4
 800bdd0:	d156      	bne.n	800be80 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800bdd2:	f107 0314 	add.w	r3, r7, #20
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	68f8      	ldr	r0, [r7, #12]
 800bdda:	f7fd faab 	bl	8009334 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800bdde:	2300      	movs	r3, #0
 800bde0:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800bde2:	7dfb      	ldrb	r3, [r7, #23]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d01d      	beq.n	800be24 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bde8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800bdec:	461a      	mov	r2, r3
 800bdee:	2100      	movs	r1, #0
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f7fd f993 	bl	800911c <VL53L0X_GetVcselPulsePeriod>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800bdfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800be00:	2b00      	cmp	r3, #0
 800be02:	d10f      	bne.n	800be24 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800be04:	f107 031e 	add.w	r3, r7, #30
 800be08:	461a      	mov	r2, r3
 800be0a:	2151      	movs	r1, #81	; 0x51
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f001 fa6b 	bl	800d2e8 <VL53L0X_RdWord>
 800be12:	4603      	mov	r3, r0
 800be14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800be18:	8bfb      	ldrh	r3, [r7, #30]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7ff feee 	bl	800bbfc <VL53L0X_decode_timeout>
 800be20:	4603      	mov	r3, r0
 800be22:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800be24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d109      	bne.n	800be40 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800be2c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800be30:	461a      	mov	r2, r3
 800be32:	2101      	movs	r1, #1
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f7fd f971 	bl	800911c <VL53L0X_GetVcselPulsePeriod>
 800be3a:	4603      	mov	r3, r0
 800be3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800be40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10f      	bne.n	800be68 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800be48:	f107 031c 	add.w	r3, r7, #28
 800be4c:	461a      	mov	r2, r3
 800be4e:	2171      	movs	r1, #113	; 0x71
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f001 fa49 	bl	800d2e8 <VL53L0X_RdWord>
 800be56:	4603      	mov	r3, r0
 800be58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800be5c:	8bbb      	ldrh	r3, [r7, #28]
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff fecc 	bl	800bbfc <VL53L0X_decode_timeout>
 800be64:	4603      	mov	r3, r0
 800be66:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800be68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800be70:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800be74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be76:	4619      	mov	r1, r3
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f7ff feff 	bl	800bc7c <VL53L0X_calc_timeout_us>
 800be7e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be84:	601a      	str	r2, [r3, #0]

	return Status;
 800be86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3730      	adds	r7, #48	; 0x30
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b08a      	sub	sp, #40	; 0x28
 800be96:	af00      	add	r7, sp, #0
 800be98:	60f8      	str	r0, [r7, #12]
 800be9a:	460b      	mov	r3, r1
 800be9c:	607a      	str	r2, [r7, #4]
 800be9e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bea0:	2300      	movs	r3, #0
 800bea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800bea6:	7afb      	ldrb	r3, [r7, #11]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d005      	beq.n	800beb8 <set_sequence_step_timeout+0x26>
 800beac:	7afb      	ldrb	r3, [r7, #11]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d002      	beq.n	800beb8 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800beb2:	7afb      	ldrb	r3, [r7, #11]
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d138      	bne.n	800bf2a <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800beb8:	f107 031b 	add.w	r3, r7, #27
 800bebc:	461a      	mov	r2, r3
 800bebe:	2100      	movs	r1, #0
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f7fd f92b 	bl	800911c <VL53L0X_GetVcselPulsePeriod>
 800bec6:	4603      	mov	r3, r0
 800bec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800becc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d11a      	bne.n	800bf0a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800bed4:	7efb      	ldrb	r3, [r7, #27]
 800bed6:	461a      	mov	r2, r3
 800bed8:	6879      	ldr	r1, [r7, #4]
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f7ff fea4 	bl	800bc28 <VL53L0X_calc_timeout_mclks>
 800bee0:	4603      	mov	r3, r0
 800bee2:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800bee4:	8bbb      	ldrh	r3, [r7, #28]
 800bee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beea:	d903      	bls.n	800bef4 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800beec:	23ff      	movs	r3, #255	; 0xff
 800beee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bef2:	e004      	b.n	800befe <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800bef4:	8bbb      	ldrh	r3, [r7, #28]
 800bef6:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800bef8:	3b01      	subs	r3, #1
 800befa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800befe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800bf0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f040 80ab 	bne.w	800c06a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800bf14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf18:	461a      	mov	r2, r3
 800bf1a:	2146      	movs	r1, #70	; 0x46
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f001 f937 	bl	800d190 <VL53L0X_WrByte>
 800bf22:	4603      	mov	r3, r0
 800bf24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800bf28:	e09f      	b.n	800c06a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800bf2a:	7afb      	ldrb	r3, [r7, #11]
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	d135      	bne.n	800bf9c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800bf30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d11b      	bne.n	800bf70 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bf38:	f107 031b 	add.w	r3, r7, #27
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	2100      	movs	r1, #0
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f7fd f8eb 	bl	800911c <VL53L0X_GetVcselPulsePeriod>
 800bf46:	4603      	mov	r3, r0
 800bf48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800bf4c:	7efb      	ldrb	r3, [r7, #27]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	6879      	ldr	r1, [r7, #4]
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f7ff fe68 	bl	800bc28 <VL53L0X_calc_timeout_mclks>
 800bf58:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800bf5a:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800bf5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7ff fe20 	bl	800bba4 <VL53L0X_encode_timeout>
 800bf64:	4603      	mov	r3, r0
 800bf66:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bf68:	8b3a      	ldrh	r2, [r7, #24]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800bf70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d108      	bne.n	800bf8a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800bf78:	8b3b      	ldrh	r3, [r7, #24]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	2151      	movs	r1, #81	; 0x51
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f001 f92a 	bl	800d1d8 <VL53L0X_WrWord>
 800bf84:	4603      	mov	r3, r0
 800bf86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800bf8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d16b      	bne.n	800c06a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800bf9a:	e066      	b.n	800c06a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800bf9c:	7afb      	ldrb	r3, [r7, #11]
 800bf9e:	2b04      	cmp	r3, #4
 800bfa0:	d160      	bne.n	800c064 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800bfa2:	f107 0310 	add.w	r3, r7, #16
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f7fd f9c3 	bl	8009334 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800bfb2:	7cfb      	ldrb	r3, [r7, #19]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d01d      	beq.n	800bff4 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bfb8:	f107 031b 	add.w	r3, r7, #27
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f7fd f8ab 	bl	800911c <VL53L0X_GetVcselPulsePeriod>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 800bfcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10f      	bne.n	800bff4 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800bfd4:	f107 0318 	add.w	r3, r7, #24
 800bfd8:	461a      	mov	r2, r3
 800bfda:	2151      	movs	r1, #81	; 0x51
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f001 f983 	bl	800d2e8 <VL53L0X_RdWord>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800bfe8:	8b3b      	ldrh	r3, [r7, #24]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7ff fe06 	bl	800bbfc <VL53L0X_decode_timeout>
 800bff0:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800bff2:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800bff4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d109      	bne.n	800c010 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bffc:	f107 031b 	add.w	r3, r7, #27
 800c000:	461a      	mov	r2, r3
 800c002:	2101      	movs	r1, #1
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	f7fd f889 	bl	800911c <VL53L0X_GetVcselPulsePeriod>
 800c00a:	4603      	mov	r3, r0
 800c00c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800c010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c014:	2b00      	cmp	r3, #0
 800c016:	d128      	bne.n	800c06a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c018:	7efb      	ldrb	r3, [r7, #27]
 800c01a:	461a      	mov	r2, r3
 800c01c:	6879      	ldr	r1, [r7, #4]
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f7ff fe02 	bl	800bc28 <VL53L0X_calc_timeout_mclks>
 800c024:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800c026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c028:	6a3a      	ldr	r2, [r7, #32]
 800c02a:	4413      	add	r3, r2
 800c02c:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800c02e:	6a38      	ldr	r0, [r7, #32]
 800c030:	f7ff fdb8 	bl	800bba4 <VL53L0X_encode_timeout>
 800c034:	4603      	mov	r3, r0
 800c036:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800c038:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d108      	bne.n	800c052 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c040:	8bfb      	ldrh	r3, [r7, #30]
 800c042:	461a      	mov	r2, r3
 800c044:	2171      	movs	r1, #113	; 0x71
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f001 f8c6 	bl	800d1d8 <VL53L0X_WrWord>
 800c04c:	4603      	mov	r3, r0
 800c04e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800c052:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c056:	2b00      	cmp	r3, #0
 800c058:	d107      	bne.n	800c06a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800c062:	e002      	b.n	800c06a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c064:	23fc      	movs	r3, #252	; 0xfc
 800c066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800c06a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3728      	adds	r7, #40	; 0x28
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b086      	sub	sp, #24
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	460b      	mov	r3, r1
 800c080:	607a      	str	r2, [r7, #4]
 800c082:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c084:	2300      	movs	r3, #0
 800c086:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800c088:	7afb      	ldrb	r3, [r7, #11]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d002      	beq.n	800c094 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d00a      	beq.n	800c0a8 <VL53L0X_get_vcsel_pulse_period+0x32>
 800c092:	e013      	b.n	800c0bc <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c094:	f107 0316 	add.w	r3, r7, #22
 800c098:	461a      	mov	r2, r3
 800c09a:	2150      	movs	r1, #80	; 0x50
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f001 f8f9 	bl	800d294 <VL53L0X_RdByte>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c0a6:	e00b      	b.n	800c0c0 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c0a8:	f107 0316 	add.w	r3, r7, #22
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	2170      	movs	r1, #112	; 0x70
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f001 f8ef 	bl	800d294 <VL53L0X_RdByte>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c0ba:	e001      	b.n	800c0c0 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c0bc:	23fc      	movs	r3, #252	; 0xfc
 800c0be:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800c0c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d107      	bne.n	800c0d8 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800c0c8:	7dbb      	ldrb	r3, [r7, #22]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fe fff4 	bl	800b0b8 <VL53L0X_decode_vcsel_period>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	701a      	strb	r2, [r3, #0]

	return Status;
 800c0d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b090      	sub	sp, #64	; 0x40
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c0f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c0f8:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800c0fa:	f240 7376 	movw	r3, #1910	; 0x776
 800c0fe:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 800c100:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c104:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c106:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c10a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 800c10c:	f240 234e 	movw	r3, #590	; 0x24e
 800c110:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 800c112:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c116:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c118:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c11c:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c11e:	f240 2326 	movw	r3, #550	; 0x226
 800c122:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c124:	2300      	movs	r3, #0
 800c126:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 800c128:	2300      	movs	r3, #0
 800c12a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800c12c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c130:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800c132:	683a      	ldr	r2, [r7, #0]
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c138:	f107 0310 	add.w	r3, r7, #16
 800c13c:	4619      	mov	r1, r3
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7fd f8f8 	bl	8009334 <VL53L0X_GetSequenceStepEnables>
 800c144:	4603      	mov	r3, r0
 800c146:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 800c14a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d15b      	bne.n	800c20a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 800c152:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 800c154:	2b00      	cmp	r3, #0
 800c156:	d105      	bne.n	800c164 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800c158:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d102      	bne.n	800c164 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 800c15e:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 800c160:	2b00      	cmp	r3, #0
 800c162:	d052      	beq.n	800c20a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800c164:	f107 030c 	add.w	r3, r7, #12
 800c168:	461a      	mov	r2, r3
 800c16a:	2102      	movs	r1, #2
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7ff fdaf 	bl	800bcd0 <get_sequence_step_timeout>
 800c172:	4603      	mov	r3, r0
 800c174:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 800c178:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d002      	beq.n	800c186 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 800c180:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c184:	e07d      	b.n	800c282 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800c186:	7c3b      	ldrb	r3, [r7, #16]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00f      	beq.n	800c1ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800c18c:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800c18e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c190:	4413      	add	r3, r2
 800c192:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 800c194:	69ba      	ldr	r2, [r7, #24]
 800c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c198:	429a      	cmp	r2, r3
 800c19a:	d204      	bcs.n	800c1a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800c19c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1a4:	e002      	b.n	800c1ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c1a6:	23fc      	movs	r3, #252	; 0xfc
 800c1a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800c1ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 800c1b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c1b8:	e063      	b.n	800c282 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800c1ba:	7cbb      	ldrb	r3, [r7, #18]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d011      	beq.n	800c1e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c4:	4413      	add	r3, r2
 800c1c6:	005b      	lsls	r3, r3, #1
 800c1c8:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c1ca:	69ba      	ldr	r2, [r7, #24]
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d204      	bcs.n	800c1dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800c1d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1da:	e016      	b.n	800c20a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c1dc:	23fc      	movs	r3, #252	; 0xfc
 800c1de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c1e2:	e012      	b.n	800c20a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800c1e4:	7c7b      	ldrb	r3, [r7, #17]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00f      	beq.n	800c20a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1ee:	4413      	add	r3, r2
 800c1f0:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c1f2:	69ba      	ldr	r2, [r7, #24]
 800c1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d204      	bcs.n	800c204 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800c1fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	63bb      	str	r3, [r7, #56]	; 0x38
 800c202:	e002      	b.n	800c20a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c204:	23fc      	movs	r3, #252	; 0xfc
 800c206:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c20a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d002      	beq.n	800c218 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 800c212:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c216:	e034      	b.n	800c282 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800c218:	7cfb      	ldrb	r3, [r7, #19]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d019      	beq.n	800c252 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800c21e:	f107 0308 	add.w	r3, r7, #8
 800c222:	461a      	mov	r2, r3
 800c224:	2103      	movs	r1, #3
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7ff fd52 	bl	800bcd0 <get_sequence_step_timeout>
 800c22c:	4603      	mov	r3, r0
 800c22e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	6a3a      	ldr	r2, [r7, #32]
 800c236:	4413      	add	r3, r2
 800c238:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c23a:	69ba      	ldr	r2, [r7, #24]
 800c23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23e:	429a      	cmp	r2, r3
 800c240:	d204      	bcs.n	800c24c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800c242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	1ad3      	subs	r3, r2, r3
 800c248:	63bb      	str	r3, [r7, #56]	; 0x38
 800c24a:	e002      	b.n	800c252 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c24c:	23fc      	movs	r3, #252	; 0xfc
 800c24e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800c252:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c256:	2b00      	cmp	r3, #0
 800c258:	d111      	bne.n	800c27e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 800c25a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00e      	beq.n	800c27e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 800c260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	1ad3      	subs	r3, r2, r3
 800c266:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800c268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c26a:	2104      	movs	r1, #4
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f7ff fe10 	bl	800be92 <set_sequence_step_timeout>
 800c272:	4603      	mov	r3, r0
 800c274:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800c27e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c282:	4618      	mov	r0, r3
 800c284:	3740      	adds	r7, #64	; 0x40
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b090      	sub	sp, #64	; 0x40
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c294:	2300      	movs	r3, #0
 800c296:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c29a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c29e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800c2a0:	f240 7376 	movw	r3, #1910	; 0x776
 800c2a4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800c2a6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c2aa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c2ac:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c2b0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800c2b2:	f240 234e 	movw	r3, #590	; 0x24e
 800c2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800c2b8:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c2bc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c2be:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c2c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c2c4:	f240 2326 	movw	r3, #550	; 0x226
 800c2c8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800c2ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d2:	441a      	add	r2, r3
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c2d8:	f107 0318 	add.w	r3, r7, #24
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7fd f828 	bl	8009334 <VL53L0X_GetSequenceStepEnables>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800c2ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d002      	beq.n	800c2f8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800c2f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c2f6:	e075      	b.n	800c3e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800c2f8:	7e3b      	ldrb	r3, [r7, #24]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d105      	bne.n	800c30a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800c2fe:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800c300:	2b00      	cmp	r3, #0
 800c302:	d102      	bne.n	800c30a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800c304:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800c306:	2b00      	cmp	r3, #0
 800c308:	d030      	beq.n	800c36c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800c30a:	f107 0310 	add.w	r3, r7, #16
 800c30e:	461a      	mov	r2, r3
 800c310:	2102      	movs	r1, #2
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7ff fcdc 	bl	800bcd0 <get_sequence_step_timeout>
 800c318:	4603      	mov	r3, r0
 800c31a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800c31e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c322:	2b00      	cmp	r3, #0
 800c324:	d122      	bne.n	800c36c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800c326:	7e3b      	ldrb	r3, [r7, #24]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d007      	beq.n	800c33c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800c330:	6939      	ldr	r1, [r7, #16]
 800c332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c334:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c336:	441a      	add	r2, r3
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800c33c:	7ebb      	ldrb	r3, [r7, #26]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d009      	beq.n	800c356 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800c346:	6939      	ldr	r1, [r7, #16]
 800c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34a:	440b      	add	r3, r1
 800c34c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c34e:	441a      	add	r2, r3
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	e00a      	b.n	800c36c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800c356:	7e7b      	ldrb	r3, [r7, #25]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d007      	beq.n	800c36c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800c360:	6939      	ldr	r1, [r7, #16]
 800c362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c364:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c366:	441a      	add	r2, r3
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c36c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c370:	2b00      	cmp	r3, #0
 800c372:	d114      	bne.n	800c39e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800c374:	7efb      	ldrb	r3, [r7, #27]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d011      	beq.n	800c39e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800c37a:	f107 030c 	add.w	r3, r7, #12
 800c37e:	461a      	mov	r2, r3
 800c380:	2103      	movs	r1, #3
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f7ff fca4 	bl	800bcd0 <get_sequence_step_timeout>
 800c388:	4603      	mov	r3, r0
 800c38a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800c392:	68f9      	ldr	r1, [r7, #12]
 800c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c396:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800c398:	441a      	add	r2, r3
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c39e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d114      	bne.n	800c3d0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800c3a6:	7f3b      	ldrb	r3, [r7, #28]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d011      	beq.n	800c3d0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800c3ac:	f107 0314 	add.w	r3, r7, #20
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	2104      	movs	r1, #4
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7ff fc8b 	bl	800bcd0 <get_sequence_step_timeout>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800c3c4:	6979      	ldr	r1, [r7, #20]
 800c3c6:	6a3b      	ldr	r3, [r7, #32]
 800c3c8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800c3ca:	441a      	add	r2, r3
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c3d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d103      	bne.n	800c3e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c3e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3740      	adds	r7, #64	; 0x40
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b088      	sub	sp, #32
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c3fe:	e0c6      	b.n	800c58e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	683a      	ldr	r2, [r7, #0]
 800c404:	4413      	add	r3, r2
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	74fb      	strb	r3, [r7, #19]
		Index++;
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	3301      	adds	r3, #1
 800c40e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800c410:	7cfb      	ldrb	r3, [r7, #19]
 800c412:	2bff      	cmp	r3, #255	; 0xff
 800c414:	f040 808d 	bne.w	800c532 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	4413      	add	r3, r2
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	747b      	strb	r3, [r7, #17]
			Index++;
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	3301      	adds	r3, #1
 800c426:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800c428:	7c7b      	ldrb	r3, [r7, #17]
 800c42a:	2b03      	cmp	r3, #3
 800c42c:	d87e      	bhi.n	800c52c <VL53L0X_load_tuning_settings+0x140>
 800c42e:	a201      	add	r2, pc, #4	; (adr r2, 800c434 <VL53L0X_load_tuning_settings+0x48>)
 800c430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c434:	0800c445 	.word	0x0800c445
 800c438:	0800c47f 	.word	0x0800c47f
 800c43c:	0800c4b9 	.word	0x0800c4b9
 800c440:	0800c4f3 	.word	0x0800c4f3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	4413      	add	r3, r2
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	743b      	strb	r3, [r7, #16]
				Index++;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	3301      	adds	r3, #1
 800c452:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	683a      	ldr	r2, [r7, #0]
 800c458:	4413      	add	r3, r2
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	3301      	adds	r3, #1
 800c462:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c464:	7c3b      	ldrb	r3, [r7, #16]
 800c466:	b29b      	uxth	r3, r3
 800c468:	021b      	lsls	r3, r3, #8
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
 800c46e:	b29b      	uxth	r3, r3
 800c470:	4413      	add	r3, r2
 800c472:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	89ba      	ldrh	r2, [r7, #12]
 800c478:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 800c47c:	e087      	b.n	800c58e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	4413      	add	r3, r2
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	743b      	strb	r3, [r7, #16]
				Index++;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	3301      	adds	r3, #1
 800c48c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	4413      	add	r3, r2
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	3301      	adds	r3, #1
 800c49c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c49e:	7c3b      	ldrb	r3, [r7, #16]
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	021b      	lsls	r3, r3, #8
 800c4a4:	b29a      	uxth	r2, r3
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	4413      	add	r3, r2
 800c4ac:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	89ba      	ldrh	r2, [r7, #12]
 800c4b2:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 800c4b6:	e06a      	b.n	800c58e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	4413      	add	r3, r2
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	743b      	strb	r3, [r7, #16]
				Index++;
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c4d8:	7c3b      	ldrb	r3, [r7, #16]
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	021b      	lsls	r3, r3, #8
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	4413      	add	r3, r2
 800c4e6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	89ba      	ldrh	r2, [r7, #12]
 800c4ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 800c4f0:	e04d      	b.n	800c58e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	683a      	ldr	r2, [r7, #0]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	743b      	strb	r3, [r7, #16]
				Index++;
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	3301      	adds	r3, #1
 800c500:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	4413      	add	r3, r2
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	3301      	adds	r3, #1
 800c510:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c512:	7c3b      	ldrb	r3, [r7, #16]
 800c514:	b29b      	uxth	r3, r3
 800c516:	021b      	lsls	r3, r3, #8
 800c518:	b29a      	uxth	r2, r3
 800c51a:	7bfb      	ldrb	r3, [r7, #15]
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	4413      	add	r3, r2
 800c520:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	89ba      	ldrh	r2, [r7, #12]
 800c526:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 800c52a:	e030      	b.n	800c58e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c52c:	23fc      	movs	r3, #252	; 0xfc
 800c52e:	77fb      	strb	r3, [r7, #31]
 800c530:	e02d      	b.n	800c58e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800c532:	7cfb      	ldrb	r3, [r7, #19]
 800c534:	2b04      	cmp	r3, #4
 800c536:	d828      	bhi.n	800c58a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	683a      	ldr	r2, [r7, #0]
 800c53c:	4413      	add	r3, r2
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	74bb      	strb	r3, [r7, #18]
			Index++;
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	3301      	adds	r3, #1
 800c546:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800c548:	2300      	movs	r3, #0
 800c54a:	61bb      	str	r3, [r7, #24]
 800c54c:	e00f      	b.n	800c56e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	683a      	ldr	r2, [r7, #0]
 800c552:	4413      	add	r3, r2
 800c554:	7819      	ldrb	r1, [r3, #0]
 800c556:	f107 0208 	add.w	r2, r7, #8
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	4413      	add	r3, r2
 800c55e:	460a      	mov	r2, r1
 800c560:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	3301      	adds	r3, #1
 800c566:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	3301      	adds	r3, #1
 800c56c:	61bb      	str	r3, [r7, #24]
 800c56e:	7cfb      	ldrb	r3, [r7, #19]
 800c570:	69ba      	ldr	r2, [r7, #24]
 800c572:	429a      	cmp	r2, r3
 800c574:	dbeb      	blt.n	800c54e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800c576:	7cfb      	ldrb	r3, [r7, #19]
 800c578:	f107 0208 	add.w	r2, r7, #8
 800c57c:	7cb9      	ldrb	r1, [r7, #18]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fdaa 	bl	800d0d8 <VL53L0X_WriteMulti>
 800c584:	4603      	mov	r3, r0
 800c586:	77fb      	strb	r3, [r7, #31]
 800c588:	e001      	b.n	800c58e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c58a:	23fc      	movs	r3, #252	; 0xfc
 800c58c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	4413      	add	r3, r2
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d004      	beq.n	800c5a4 <VL53L0X_load_tuning_settings+0x1b8>
 800c59a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f43f af2e 	beq.w	800c400 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c5a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3720      	adds	r7, #32
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b088      	sub	sp, #32
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800c5c6:	f107 0313 	add.w	r3, r7, #19
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f7fc ff3d 	bl	800944c <VL53L0X_GetXTalkCompensationEnable>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800c5d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d111      	bne.n	800c602 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800c5de:	7cfb      	ldrb	r3, [r7, #19]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d00e      	beq.n	800c602 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	8a9b      	ldrh	r3, [r3, #20]
 800c5ee:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	fb02 f303 	mul.w	r3, r2, r3
 800c5f6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	3380      	adds	r3, #128	; 0x80
 800c5fc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800c602:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3720      	adds	r7, #32
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b086      	sub	sp, #24
 800c612:	af00      	add	r7, sp, #0
 800c614:	60f8      	str	r0, [r7, #12]
 800c616:	60b9      	str	r1, [r7, #8]
 800c618:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c61a:	2300      	movs	r3, #0
 800c61c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800c626:	f107 0310 	add.w	r3, r7, #16
 800c62a:	461a      	mov	r2, r3
 800c62c:	68b9      	ldr	r1, [r7, #8]
 800c62e:	68f8      	ldr	r0, [r7, #12]
 800c630:	f7ff ffbe 	bl	800c5b0 <VL53L0X_get_total_xtalk_rate>
 800c634:	4603      	mov	r3, r0
 800c636:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800c638:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d105      	bne.n	800c64c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	441a      	add	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	601a      	str	r2, [r3, #0]

	return Status;
 800c64c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3718      	adds	r7, #24
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 800c658:	b084      	sub	sp, #16
 800c65a:	b480      	push	{r7}
 800c65c:	b085      	sub	sp, #20
 800c65e:	af00      	add	r7, sp, #0
 800c660:	f107 0c18 	add.w	ip, r7, #24
 800c664:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c668:	2300      	movs	r3, #0
 800c66a:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 800c670:	2300      	movs	r3, #0
 800c672:	60bb      	str	r3, [r7, #8]
	int index = 0;
 800c674:	2300      	movs	r3, #0
 800c676:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 800c678:	2300      	movs	r3, #0
 800c67a:	607b      	str	r3, [r7, #4]
 800c67c:	e00d      	b.n	800c69a <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f107 0218 	add.w	r2, r7, #24
 800c684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c688:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d802      	bhi.n	800c694 <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	60bb      	str	r3, [r7, #8]
			break;
 800c692:	e006      	b.n	800c6a2 <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	3301      	adds	r3, #1
 800c698:	607b      	str	r3, [r7, #4]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d8ed      	bhi.n	800c67e <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 800c6a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d105      	bne.n	800c6b6 <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 800c6aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	60bb      	str	r3, [r7, #8]
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	60fb      	str	r3, [r7, #12]
 800c6b4:	e008      	b.n	800c6c8 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d102      	bne.n	800c6c2 <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	e002      	b.n	800c6c8 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6cc:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6d2:	601a      	str	r2, [r3, #0]

	return Status;
 800c6d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	b004      	add	sp, #16
 800c6e4:	4770      	bx	lr

0800c6e6 <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 800c6e6:	b5b0      	push	{r4, r5, r7, lr}
 800c6e8:	b0ba      	sub	sp, #232	; 0xe8
 800c6ea:	af0e      	add	r7, sp, #56	; 0x38
 800c6ec:	60f8      	str	r0, [r7, #12]
 800c6ee:	60b9      	str	r1, [r7, #8]
 800c6f0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800c700:	f107 031c 	add.w	r3, r7, #28
 800c704:	4619      	mov	r1, r3
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f7fc fbce 	bl	8008ea8 <VL53L0X_GetDeviceParameters>
 800c70c:	4603      	mov	r3, r0
 800c70e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 800c712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c714:	68ba      	ldr	r2, [r7, #8]
 800c716:	429a      	cmp	r2, r3
 800c718:	d803      	bhi.n	800c722 <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 800c71a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c71c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c720:	e07c      	b.n	800c81c <VL53L0X_calc_dmax+0x136>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 800c722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 800c724:	68ba      	ldr	r2, [r7, #8]
 800c726:	429a      	cmp	r2, r3
 800c728:	d304      	bcc.n	800c734 <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 800c72a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c72e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c732:	e073      	b.n	800c81c <VL53L0X_calc_dmax+0x136>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 800c734:	f107 0314 	add.w	r3, r7, #20
 800c738:	930d      	str	r3, [sp, #52]	; 0x34
 800c73a:	f107 0318 	add.w	r3, r7, #24
 800c73e:	930c      	str	r3, [sp, #48]	; 0x30
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	930b      	str	r3, [sp, #44]	; 0x2c
 800c744:	2307      	movs	r3, #7
 800c746:	930a      	str	r3, [sp, #40]	; 0x28
 800c748:	466d      	mov	r5, sp
 800c74a:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800c74e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c756:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c75a:	e885 0003 	stmia.w	r5, {r0, r1}
 800c75e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c764:	f7ff ff78 	bl	800c658 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 800c768:	69ba      	ldr	r2, [r7, #24]
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d109      	bne.n	800c784 <VL53L0X_calc_dmax+0x9e>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	3314      	adds	r3, #20
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	33b0      	adds	r3, #176	; 0xb0
 800c778:	443b      	add	r3, r7
 800c77a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800c77e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c782:	e04b      	b.n	800c81c <VL53L0X_calc_dmax+0x136>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	330e      	adds	r3, #14
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	33b0      	adds	r3, #176	; 0xb0
 800c78c:	443b      	add	r3, r7
 800c78e:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800c792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	330e      	adds	r3, #14
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	33b0      	adds	r3, #176	; 0xb0
 800c79e:	443b      	add	r3, r7
 800c7a0:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800c7a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	3314      	adds	r3, #20
 800c7ac:	009b      	lsls	r3, r3, #2
 800c7ae:	33b0      	adds	r3, #176	; 0xb0
 800c7b0:	443b      	add	r3, r7
 800c7b2:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800c7b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	3314      	adds	r3, #20
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	33b0      	adds	r3, #176	; 0xb0
 800c7c2:	443b      	add	r3, r7
 800c7c4:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800c7c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 800c7cc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c7d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d01d      	beq.n	800c814 <VL53L0X_calc_dmax+0x12e>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 800c7d8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c7dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7e0:	1ad2      	subs	r2, r2, r3
 800c7e2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800c7e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c7ea:	1acb      	subs	r3, r1, r3
 800c7ec:	0a1b      	lsrs	r3, r3, #8
 800c7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 800c7f6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 800c7fe:	0a1b      	lsrs	r3, r3, #8
 800c800:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c804:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 800c808:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c80c:	4413      	add	r3, r2
 800c80e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c812:	e003      	b.n	800c81c <VL53L0X_calc_dmax+0x136>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 800c814:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 800c81c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c820:	0c1a      	lsrs	r2, r3, #16
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800c826:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	37b0      	adds	r7, #176	; 0xb0
 800c82e:	46bd      	mov	sp, r7
 800c830:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c834 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b0b0      	sub	sp, #192	; 0xc0
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800c840:	f44f 7348 	mov.w	r3, #800	; 0x320
 800c844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800c848:	f44f 7316 	mov.w	r3, #600	; 0x258
 800c84c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 800c850:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800c854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800c858:	f241 235c 	movw	r3, #4700	; 0x125c
 800c85c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800c860:	4b98      	ldr	r3, [pc, #608]	; (800cac4 <VL53L0X_calc_sigma_estimate+0x290>)
 800c862:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800c866:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c86a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800c86e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800c872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c876:	fbb2 f3f3 	udiv	r3, r2, r3
 800c87a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800c87e:	4b92      	ldr	r3, [pc, #584]	; (800cac8 <VL53L0X_calc_sigma_estimate+0x294>)
 800c880:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800c882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c886:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800c888:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800c88c:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 800c88e:	f240 6377 	movw	r3, #1655	; 0x677
 800c892:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c894:	2300      	movs	r3, #0
 800c896:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	699b      	ldr	r3, [r3, #24]
 800c89e:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	691b      	ldr	r3, [r3, #16]
 800c8a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8a8:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800c8ac:	0c1b      	lsrs	r3, r3, #16
 800c8ae:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 800c8b0:	f107 0314 	add.w	r3, r7, #20
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	68b9      	ldr	r1, [r7, #8]
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f7ff fea8 	bl	800c60e <VL53L0X_get_total_signal_rate>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800c8c4:	f107 0318 	add.w	r3, r7, #24
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	68b9      	ldr	r1, [r7, #8]
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f7ff fe6f 	bl	800c5b0 <VL53L0X_get_total_xtalk_rate>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8de:	fb02 f303 	mul.w	r3, r2, r3
 800c8e2:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800c8e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c8ea:	0c1b      	lsrs	r3, r3, #16
 800c8ec:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8f4:	fb02 f303 	mul.w	r3, r2, r3
 800c8f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800c8fc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c902:	429a      	cmp	r2, r3
 800c904:	d902      	bls.n	800c90c <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800c906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c908:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800c90c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800c910:	2b00      	cmp	r3, #0
 800c912:	d160      	bne.n	800c9d6 <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c91a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800c924:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c928:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800c92c:	461a      	mov	r2, r3
 800c92e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f7ff f978 	bl	800bc28 <VL53L0X_calc_timeout_mclks>
 800c938:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800c940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800c94a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c94e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c952:	461a      	mov	r2, r3
 800c954:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f7ff f965 	bl	800bc28 <VL53L0X_calc_timeout_mclks>
 800c95e:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800c960:	2303      	movs	r3, #3
 800c962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800c966:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800c96a:	2b08      	cmp	r3, #8
 800c96c:	d102      	bne.n	800c974 <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 800c96e:	2302      	movs	r3, #2
 800c970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800c974:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c978:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800c97a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c97e:	fb02 f303 	mul.w	r3, r2, r3
 800c982:	02db      	lsls	r3, r3, #11
 800c984:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c988:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c98c:	4a4f      	ldr	r2, [pc, #316]	; (800cacc <VL53L0X_calc_sigma_estimate+0x298>)
 800c98e:	fba2 2303 	umull	r2, r3, r2, r3
 800c992:	099b      	lsrs	r3, r3, #6
 800c994:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 800c996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c998:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c99a:	fb02 f303 	mul.w	r3, r2, r3
 800c99e:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c9a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c9a6:	4a49      	ldr	r2, [pc, #292]	; (800cacc <VL53L0X_calc_sigma_estimate+0x298>)
 800c9a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ac:	099b      	lsrs	r3, r3, #6
 800c9ae:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	3380      	adds	r3, #128	; 0x80
 800c9b4:	0a1b      	lsrs	r3, r3, #8
 800c9b6:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9bc:	fb02 f303 	mul.w	r3, r2, r3
 800c9c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800c9c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c9c8:	3380      	adds	r3, #128	; 0x80
 800c9ca:	0a1b      	lsrs	r3, r3, #8
 800c9cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	021b      	lsls	r3, r3, #8
 800c9d4:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c9d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 800c9de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800c9e2:	e14a      	b.n	800cc7a <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 800c9e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d109      	bne.n	800c9fe <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c9f0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c9f8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800c9fc:	e13b      	b.n	800cc76 <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 800c9fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d102      	bne.n	800ca0c <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 800ca06:	2301      	movs	r3, #1
 800ca08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800ca0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ca10:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800ca12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca14:	041a      	lsls	r2, r3, #16
 800ca16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800ca20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ca24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d903      	bls.n	800ca34 <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800ca2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800ca34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ca38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ca3c:	fb02 f303 	mul.w	r3, r2, r3
 800ca40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ca44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ca48:	4613      	mov	r3, r2
 800ca4a:	005b      	lsls	r3, r3, #1
 800ca4c:	4413      	add	r3, r2
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7fe fb44 	bl	800b0de <VL53L0X_isqrt>
 800ca56:	4603      	mov	r3, r0
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	891b      	ldrh	r3, [r3, #8]
 800ca60:	461a      	mov	r2, r3
 800ca62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca64:	fb02 f303 	mul.w	r3, r2, r3
 800ca68:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ca6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca6c:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ca6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca72:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ca74:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ca76:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ca7a:	4a14      	ldr	r2, [pc, #80]	; (800cacc <VL53L0X_calc_sigma_estimate+0x298>)
 800ca7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca80:	099b      	lsrs	r3, r3, #6
 800ca82:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800ca84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca86:	041b      	lsls	r3, r3, #16
 800ca88:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ca8c:	4a0f      	ldr	r2, [pc, #60]	; (800cacc <VL53L0X_calc_sigma_estimate+0x298>)
 800ca8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca92:	099b      	lsrs	r3, r3, #6
 800ca94:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 800ca96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca98:	021b      	lsls	r3, r3, #8
 800ca9a:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800ca9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	bfb8      	it	lt
 800caa8:	425b      	neglt	r3, r3
 800caaa:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800caac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caae:	021b      	lsls	r3, r3, #8
 800cab0:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	7e1b      	ldrb	r3, [r3, #24]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d00a      	beq.n	800cad0 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 800caba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cabe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cac2:	e032      	b.n	800cb2a <VL53L0X_calc_sigma_estimate+0x2f6>
 800cac4:	028f87ae 	.word	0x028f87ae
 800cac8:	0006999a 	.word	0x0006999a
 800cacc:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 800cad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cad6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800cade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae0:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800cae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cae8:	fb02 f303 	mul.w	r3, r2, r3
 800caec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800caf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800caf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800caf6:	4413      	add	r3, r2
 800caf8:	0c1b      	lsrs	r3, r3, #16
 800cafa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800cafe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb02:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800cb06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 800cb0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb0e:	085b      	lsrs	r3, r3, #1
 800cb10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800cb14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb18:	fb03 f303 	mul.w	r3, r3, r3
 800cb1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800cb20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb24:	0b9b      	lsrs	r3, r3, #14
 800cb26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800cb2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb30:	fb02 f303 	mul.w	r3, r2, r3
 800cb34:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800cb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cb3c:	0c1b      	lsrs	r3, r3, #16
 800cb3e:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800cb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb42:	fb03 f303 	mul.w	r3, r3, r3
 800cb46:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 800cb48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cb4c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cb54:	0c1b      	lsrs	r3, r3, #16
 800cb56:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800cb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5a:	fb03 f303 	mul.w	r3, r3, r3
 800cb5e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800cb60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb64:	4413      	add	r3, r2
 800cb66:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800cb68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb6a:	f7fe fab8 	bl	800b0de <VL53L0X_isqrt>
 800cb6e:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800cb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb72:	041b      	lsls	r3, r3, #16
 800cb74:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800cb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb78:	3332      	adds	r3, #50	; 0x32
 800cb7a:	4a42      	ldr	r2, [pc, #264]	; (800cc84 <VL53L0X_calc_sigma_estimate+0x450>)
 800cb7c:	fba2 2303 	umull	r2, r3, r2, r3
 800cb80:	095a      	lsrs	r2, r3, #5
 800cb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb84:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800cb8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cb90:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800cb94:	fb02 f303 	mul.w	r3, r2, r3
 800cb98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800cb9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cba0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800cba4:	3308      	adds	r3, #8
 800cba6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800cbaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cbae:	4a36      	ldr	r2, [pc, #216]	; (800cc88 <VL53L0X_calc_sigma_estimate+0x454>)
 800cbb0:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb4:	0b5b      	lsrs	r3, r3, #13
 800cbb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800cbba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cbbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d903      	bls.n	800cbce <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 800cbc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 800cbce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800cbd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cbd6:	4413      	add	r3, r2
 800cbd8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800cbdc:	4a2b      	ldr	r2, [pc, #172]	; (800cc8c <VL53L0X_calc_sigma_estimate+0x458>)
 800cbde:	fba2 2303 	umull	r2, r3, r2, r3
 800cbe2:	099b      	lsrs	r3, r3, #6
 800cbe4:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800cbea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cbee:	441a      	add	r2, r3
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7fe fa71 	bl	800b0de <VL53L0X_isqrt>
 800cbfc:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800cbfe:	6a3b      	ldr	r3, [r7, #32]
 800cc00:	021b      	lsls	r3, r3, #8
 800cc02:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cc0a:	4a20      	ldr	r2, [pc, #128]	; (800cc8c <VL53L0X_calc_sigma_estimate+0x458>)
 800cc0c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc10:	099b      	lsrs	r3, r3, #6
 800cc12:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800cc14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cc18:	fb03 f303 	mul.w	r3, r3, r3
 800cc1c:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800cc1e:	6a3b      	ldr	r3, [r7, #32]
 800cc20:	fb03 f303 	mul.w	r3, r3, r3
 800cc24:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800cc26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2a:	4413      	add	r3, r2
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fe fa56 	bl	800b0de <VL53L0X_isqrt>
 800cc32:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc3a:	fb02 f303 	mul.w	r3, r2, r3
 800cc3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800cc42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d009      	beq.n	800cc5c <VL53L0X_calc_sigma_estimate+0x428>
 800cc48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d005      	beq.n	800cc5c <VL53L0X_calc_sigma_estimate+0x428>
 800cc50:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cc54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d903      	bls.n	800cc64 <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 800cc5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cc6a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cc76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	37c0      	adds	r7, #192	; 0xc0
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	51eb851f 	.word	0x51eb851f
 800cc88:	d1b71759 	.word	0xd1b71759
 800cc8c:	10624dd3 	.word	0x10624dd3

0800cc90 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b090      	sub	sp, #64	; 0x40
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	607a      	str	r2, [r7, #4]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	72fb      	strb	r3, [r7, #11]
 800cca0:	4613      	mov	r3, r2
 800cca2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cca4:	2300      	movs	r3, #0
 800cca6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800cce2:	7afb      	ldrb	r3, [r7, #11]
 800cce4:	10db      	asrs	r3, r3, #3
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	f003 030f 	and.w	r3, r3, #15
 800ccec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800ccf0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d017      	beq.n	800cd28 <VL53L0X_get_pal_range_status+0x98>
 800ccf8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ccfc:	2b05      	cmp	r3, #5
 800ccfe:	d013      	beq.n	800cd28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800cd00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cd04:	2b07      	cmp	r3, #7
 800cd06:	d00f      	beq.n	800cd28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800cd08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cd0c:	2b0c      	cmp	r3, #12
 800cd0e:	d00b      	beq.n	800cd28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800cd10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cd14:	2b0d      	cmp	r3, #13
 800cd16:	d007      	beq.n	800cd28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800cd18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cd1c:	2b0e      	cmp	r3, #14
 800cd1e:	d003      	beq.n	800cd28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800cd20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cd24:	2b0f      	cmp	r3, #15
 800cd26:	d103      	bne.n	800cd30 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800cd2e:	e002      	b.n	800cd36 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800cd36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d109      	bne.n	800cd52 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800cd3e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800cd42:	461a      	mov	r2, r3
 800cd44:	2100      	movs	r1, #0
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	f7fc fc54 	bl	80095f4 <VL53L0X_GetLimitCheckEnable>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800cd52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d03c      	beq.n	800cdd4 <VL53L0X_get_pal_range_status+0x144>
 800cd5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d138      	bne.n	800cdd4 <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800cd62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd66:	461a      	mov	r2, r3
 800cd68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f7ff fd62 	bl	800c834 <VL53L0X_calc_sigma_estimate>
 800cd70:	4603      	mov	r3, r0
 800cd72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 800cd76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d10a      	bne.n	800cd94 <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 800cd7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	f107 0210 	add.w	r2, r7, #16
 800cd86:	4619      	mov	r1, r3
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f7ff fcac 	bl	800c6e6 <VL53L0X_calc_dmax>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800cd94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d103      	bne.n	800cda4 <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cda2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800cda4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d113      	bne.n	800cdd4 <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800cdac:	f107 0320 	add.w	r3, r7, #32
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f7fc fca3 	bl	8009700 <VL53L0X_GetLimitCheckValue>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800cdc0:	6a3b      	ldr	r3, [r7, #32]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d006      	beq.n	800cdd4 <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 800cdc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdc8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d902      	bls.n	800cdd4 <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800cdd4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d109      	bne.n	800cdf0 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800cddc:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800cde0:	461a      	mov	r2, r3
 800cde2:	2102      	movs	r1, #2
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f7fc fc05 	bl	80095f4 <VL53L0X_GetLimitCheckEnable>
 800cdea:	4603      	mov	r3, r0
 800cdec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800cdf0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d044      	beq.n	800ce82 <VL53L0X_get_pal_range_status+0x1f2>
 800cdf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d140      	bne.n	800ce82 <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ce00:	f107 031c 	add.w	r3, r7, #28
 800ce04:	461a      	mov	r2, r3
 800ce06:	2102      	movs	r1, #2
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f7fc fc79 	bl	8009700 <VL53L0X_GetLimitCheckValue>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800ce14:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d107      	bne.n	800ce2c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	21ff      	movs	r1, #255	; 0xff
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f000 f9b5 	bl	800d190 <VL53L0X_WrByte>
 800ce26:	4603      	mov	r3, r0
 800ce28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800ce2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d109      	bne.n	800ce48 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 800ce34:	f107 0316 	add.w	r3, r7, #22
 800ce38:	461a      	mov	r2, r3
 800ce3a:	21b6      	movs	r1, #182	; 0xb6
 800ce3c:	68f8      	ldr	r0, [r7, #12]
 800ce3e:	f000 fa53 	bl	800d2e8 <VL53L0X_RdWord>
 800ce42:	4603      	mov	r3, r0
 800ce44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800ce48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d107      	bne.n	800ce60 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ce50:	2200      	movs	r2, #0
 800ce52:	21ff      	movs	r1, #255	; 0xff
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	f000 f99b 	bl	800d190 <VL53L0X_WrByte>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800ce60:	8afb      	ldrh	r3, [r7, #22]
 800ce62:	025b      	lsls	r3, r3, #9
 800ce64:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce6a:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d006      	beq.n	800ce82 <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800ce74:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800ce76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d902      	bls.n	800ce82 <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ce82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d109      	bne.n	800ce9e <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ce8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce8e:	461a      	mov	r2, r3
 800ce90:	2103      	movs	r1, #3
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f7fc fbae 	bl	80095f4 <VL53L0X_GetLimitCheckEnable>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800ce9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d023      	beq.n	800ceee <VL53L0X_get_pal_range_status+0x25e>
 800cea6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d11f      	bne.n	800ceee <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800ceae:	893b      	ldrh	r3, [r7, #8]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d102      	bne.n	800ceba <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	637b      	str	r3, [r7, #52]	; 0x34
 800ceb8:	e005      	b.n	800cec6 <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	021a      	lsls	r2, r3, #8
 800cebe:	893b      	ldrh	r3, [r7, #8]
 800cec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cec4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800cec6:	f107 0318 	add.w	r3, r7, #24
 800ceca:	461a      	mov	r2, r3
 800cecc:	2103      	movs	r1, #3
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f7fc fc16 	bl	8009700 <VL53L0X_GetLimitCheckValue>
 800ced4:	4603      	mov	r3, r0
 800ced6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d006      	beq.n	800ceee <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800cee0:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800cee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d202      	bcs.n	800ceee <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800cee8:	2301      	movs	r3, #1
 800ceea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ceee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d14a      	bne.n	800cf8c <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 800cef6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d103      	bne.n	800cf06 <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 800cefe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf00:	22ff      	movs	r2, #255	; 0xff
 800cf02:	701a      	strb	r2, [r3, #0]
 800cf04:	e042      	b.n	800cf8c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 800cf06:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d007      	beq.n	800cf1e <VL53L0X_get_pal_range_status+0x28e>
 800cf0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	d003      	beq.n	800cf1e <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 800cf16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf1a:	2b03      	cmp	r3, #3
 800cf1c:	d103      	bne.n	800cf26 <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800cf1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf20:	2205      	movs	r2, #5
 800cf22:	701a      	strb	r2, [r3, #0]
 800cf24:	e032      	b.n	800cf8c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 800cf26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf2a:	2b06      	cmp	r3, #6
 800cf2c:	d003      	beq.n	800cf36 <VL53L0X_get_pal_range_status+0x2a6>
 800cf2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf32:	2b09      	cmp	r3, #9
 800cf34:	d103      	bne.n	800cf3e <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800cf36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf38:	2204      	movs	r2, #4
 800cf3a:	701a      	strb	r2, [r3, #0]
 800cf3c:	e026      	b.n	800cf8c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 800cf3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf42:	2b08      	cmp	r3, #8
 800cf44:	d007      	beq.n	800cf56 <VL53L0X_get_pal_range_status+0x2c6>
 800cf46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf4a:	2b0a      	cmp	r3, #10
 800cf4c:	d003      	beq.n	800cf56 <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 800cf4e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d103      	bne.n	800cf5e <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800cf56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf58:	2203      	movs	r2, #3
 800cf5a:	701a      	strb	r2, [r3, #0]
 800cf5c:	e016      	b.n	800cf8c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 800cf5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf62:	2b04      	cmp	r3, #4
 800cf64:	d003      	beq.n	800cf6e <VL53L0X_get_pal_range_status+0x2de>
 800cf66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d103      	bne.n	800cf76 <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800cf6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf70:	2202      	movs	r2, #2
 800cf72:	701a      	strb	r2, [r3, #0]
 800cf74:	e00a      	b.n	800cf8c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 800cf76:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d103      	bne.n	800cf86 <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800cf7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf80:	2201      	movs	r2, #1
 800cf82:	701a      	strb	r2, [r3, #0]
 800cf84:	e002      	b.n	800cf8c <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800cf86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf88:	2200      	movs	r2, #0
 800cf8a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800cf8c:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800cf90:	461a      	mov	r2, r3
 800cf92:	2101      	movs	r1, #1
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f7fc fb2d 	bl	80095f4 <VL53L0X_GetLimitCheckEnable>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800cfa0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d14f      	bne.n	800d048 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800cfa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d003      	beq.n	800cfb8 <VL53L0X_get_pal_range_status+0x328>
 800cfb0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d103      	bne.n	800cfc0 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfbe:	e002      	b.n	800cfc6 <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cfcc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800cfd0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cfd4:	2b04      	cmp	r3, #4
 800cfd6:	d003      	beq.n	800cfe0 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800cfd8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d103      	bne.n	800cfe8 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfe6:	e002      	b.n	800cfee <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cff4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800cff8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d003      	beq.n	800d008 <VL53L0X_get_pal_range_status+0x378>
 800d000:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d004:	2b01      	cmp	r3, #1
 800d006:	d103      	bne.n	800d010 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800d008:	2301      	movs	r3, #1
 800d00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d00e:	e002      	b.n	800d016 <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 800d010:	2300      	movs	r3, #0
 800d012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d01c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800d020:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d024:	2b00      	cmp	r3, #0
 800d026:	d003      	beq.n	800d030 <VL53L0X_get_pal_range_status+0x3a0>
 800d028:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d103      	bne.n	800d038 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800d030:	2301      	movs	r3, #1
 800d032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d036:	e002      	b.n	800d03e <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 800d038:	2300      	movs	r3, #0
 800d03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d044:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d048:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3740      	adds	r7, #64	; 0x40
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d054:	b580      	push	{r7, lr}
 800d056:	b088      	sub	sp, #32
 800d058:	af02      	add	r7, sp, #8
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	330a      	adds	r3, #10
 800d064:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800d072:	b299      	uxth	r1, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	b29a      	uxth	r2, r3
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	4613      	mov	r3, r2
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	f7f4 f97e 	bl	8001380 <HAL_I2C_Master_Transmit>
 800d084:	4603      	mov	r3, r0
 800d086:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d088:	693b      	ldr	r3, [r7, #16]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3718      	adds	r7, #24
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d092:	b580      	push	{r7, lr}
 800d094:	b088      	sub	sp, #32
 800d096:	af02      	add	r7, sp, #8
 800d098:	60f8      	str	r0, [r7, #12]
 800d09a:	60b9      	str	r1, [r7, #8]
 800d09c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	330a      	adds	r3, #10
 800d0a2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800d0b0:	f043 0301 	orr.w	r3, r3, #1
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	b299      	uxth	r1, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	68ba      	ldr	r2, [r7, #8]
 800d0c4:	f7f4 fa50 	bl	8001568 <HAL_I2C_Master_Receive>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d0cc:	693b      	ldr	r3, [r7, #16]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3718      	adds	r7, #24
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
	...

0800d0d8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	607a      	str	r2, [r7, #4]
 800d0e2:	603b      	str	r3, [r7, #0]
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	2b3f      	cmp	r3, #63	; 0x3f
 800d0f0:	d902      	bls.n	800d0f8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800d0f2:	f06f 0303 	mvn.w	r3, #3
 800d0f6:	e016      	b.n	800d126 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800d0f8:	4a0d      	ldr	r2, [pc, #52]	; (800d130 <VL53L0X_WriteMulti+0x58>)
 800d0fa:	7afb      	ldrb	r3, [r7, #11]
 800d0fc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800d0fe:	683a      	ldr	r2, [r7, #0]
 800d100:	6879      	ldr	r1, [r7, #4]
 800d102:	480c      	ldr	r0, [pc, #48]	; (800d134 <VL53L0X_WriteMulti+0x5c>)
 800d104:	f000 f9c8 	bl	800d498 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	3301      	adds	r3, #1
 800d10c:	461a      	mov	r2, r3
 800d10e:	4908      	ldr	r1, [pc, #32]	; (800d130 <VL53L0X_WriteMulti+0x58>)
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f7ff ff9f 	bl	800d054 <_I2CWrite>
 800d116:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d001      	beq.n	800d122 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d11e:	23ec      	movs	r3, #236	; 0xec
 800d120:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800d122:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d126:	4618      	mov	r0, r3
 800d128:	3718      	adds	r7, #24
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	20001ba8 	.word	0x20001ba8
 800d134:	20001ba9 	.word	0x20001ba9

0800d138 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	607a      	str	r2, [r7, #4]
 800d142:	603b      	str	r3, [r7, #0]
 800d144:	460b      	mov	r3, r1
 800d146:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d148:	2300      	movs	r3, #0
 800d14a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d14c:	f107 030b 	add.w	r3, r7, #11
 800d150:	2201      	movs	r2, #1
 800d152:	4619      	mov	r1, r3
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f7ff ff7d 	bl	800d054 <_I2CWrite>
 800d15a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d002      	beq.n	800d168 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d162:	23ec      	movs	r3, #236	; 0xec
 800d164:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d166:	e00c      	b.n	800d182 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800d168:	683a      	ldr	r2, [r7, #0]
 800d16a:	6879      	ldr	r1, [r7, #4]
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f7ff ff90 	bl	800d092 <_I2CRead>
 800d172:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d17a:	23ec      	movs	r3, #236	; 0xec
 800d17c:	75fb      	strb	r3, [r7, #23]
 800d17e:	e000      	b.n	800d182 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800d180:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800d182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3718      	adds	r7, #24
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
	...

0800d190 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	70fb      	strb	r3, [r7, #3]
 800d19c:	4613      	mov	r3, r2
 800d19e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800d1a4:	4a0b      	ldr	r2, [pc, #44]	; (800d1d4 <VL53L0X_WrByte+0x44>)
 800d1a6:	78fb      	ldrb	r3, [r7, #3]
 800d1a8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800d1aa:	4a0a      	ldr	r2, [pc, #40]	; (800d1d4 <VL53L0X_WrByte+0x44>)
 800d1ac:	78bb      	ldrb	r3, [r7, #2]
 800d1ae:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	4908      	ldr	r1, [pc, #32]	; (800d1d4 <VL53L0X_WrByte+0x44>)
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f7ff ff4d 	bl	800d054 <_I2CWrite>
 800d1ba:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d001      	beq.n	800d1c6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d1c2:	23ec      	movs	r3, #236	; 0xec
 800d1c4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800d1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	20001ba8 	.word	0x20001ba8

0800d1d8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	70fb      	strb	r3, [r7, #3]
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800d1ec:	4a0e      	ldr	r2, [pc, #56]	; (800d228 <VL53L0X_WrWord+0x50>)
 800d1ee:	78fb      	ldrb	r3, [r7, #3]
 800d1f0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800d1f2:	883b      	ldrh	r3, [r7, #0]
 800d1f4:	0a1b      	lsrs	r3, r3, #8
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	b2da      	uxtb	r2, r3
 800d1fa:	4b0b      	ldr	r3, [pc, #44]	; (800d228 <VL53L0X_WrWord+0x50>)
 800d1fc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800d1fe:	883b      	ldrh	r3, [r7, #0]
 800d200:	b2da      	uxtb	r2, r3
 800d202:	4b09      	ldr	r3, [pc, #36]	; (800d228 <VL53L0X_WrWord+0x50>)
 800d204:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800d206:	2203      	movs	r2, #3
 800d208:	4907      	ldr	r1, [pc, #28]	; (800d228 <VL53L0X_WrWord+0x50>)
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff ff22 	bl	800d054 <_I2CWrite>
 800d210:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d218:	23ec      	movs	r3, #236	; 0xec
 800d21a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800d21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	20001ba8 	.word	0x20001ba8

0800d22c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	4608      	mov	r0, r1
 800d236:	4611      	mov	r1, r2
 800d238:	461a      	mov	r2, r3
 800d23a:	4603      	mov	r3, r0
 800d23c:	70fb      	strb	r3, [r7, #3]
 800d23e:	460b      	mov	r3, r1
 800d240:	70bb      	strb	r3, [r7, #2]
 800d242:	4613      	mov	r3, r2
 800d244:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d246:	2300      	movs	r3, #0
 800d248:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800d24a:	f107 020e 	add.w	r2, r7, #14
 800d24e:	78fb      	ldrb	r3, [r7, #3]
 800d250:	4619      	mov	r1, r3
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 f81e 	bl	800d294 <VL53L0X_RdByte>
 800d258:	4603      	mov	r3, r0
 800d25a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800d25c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d110      	bne.n	800d286 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800d264:	7bba      	ldrb	r2, [r7, #14]
 800d266:	78bb      	ldrb	r3, [r7, #2]
 800d268:	4013      	ands	r3, r2
 800d26a:	b2da      	uxtb	r2, r3
 800d26c:	787b      	ldrb	r3, [r7, #1]
 800d26e:	4313      	orrs	r3, r2
 800d270:	b2db      	uxtb	r3, r3
 800d272:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800d274:	7bba      	ldrb	r2, [r7, #14]
 800d276:	78fb      	ldrb	r3, [r7, #3]
 800d278:	4619      	mov	r1, r3
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f7ff ff88 	bl	800d190 <VL53L0X_WrByte>
 800d280:	4603      	mov	r3, r0
 800d282:	73fb      	strb	r3, [r7, #15]
 800d284:	e000      	b.n	800d288 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800d286:	bf00      	nop
done:
    return Status;
 800d288:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800d294:	b580      	push	{r7, lr}
 800d296:	b086      	sub	sp, #24
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	460b      	mov	r3, r1
 800d29e:	607a      	str	r2, [r7, #4]
 800d2a0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d2a6:	f107 030b 	add.w	r3, r7, #11
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f7ff fed0 	bl	800d054 <_I2CWrite>
 800d2b4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d002      	beq.n	800d2c2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d2bc:	23ec      	movs	r3, #236	; 0xec
 800d2be:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d2c0:	e00c      	b.n	800d2dc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	6879      	ldr	r1, [r7, #4]
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	f7ff fee3 	bl	800d092 <_I2CRead>
 800d2cc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d002      	beq.n	800d2da <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d2d4:	23ec      	movs	r3, #236	; 0xec
 800d2d6:	75fb      	strb	r3, [r7, #23]
 800d2d8:	e000      	b.n	800d2dc <VL53L0X_RdByte+0x48>
    }
done:
 800d2da:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800d2dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3718      	adds	r7, #24
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	607a      	str	r2, [r7, #4]
 800d2f4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d2fa:	f107 030b 	add.w	r3, r7, #11
 800d2fe:	2201      	movs	r2, #1
 800d300:	4619      	mov	r1, r3
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f7ff fea6 	bl	800d054 <_I2CWrite>
 800d308:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d002      	beq.n	800d316 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d310:	23ec      	movs	r3, #236	; 0xec
 800d312:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d314:	e017      	b.n	800d346 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800d316:	2202      	movs	r2, #2
 800d318:	490e      	ldr	r1, [pc, #56]	; (800d354 <VL53L0X_RdWord+0x6c>)
 800d31a:	68f8      	ldr	r0, [r7, #12]
 800d31c:	f7ff feb9 	bl	800d092 <_I2CRead>
 800d320:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d002      	beq.n	800d32e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d328:	23ec      	movs	r3, #236	; 0xec
 800d32a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d32c:	e00b      	b.n	800d346 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800d32e:	4b09      	ldr	r3, [pc, #36]	; (800d354 <VL53L0X_RdWord+0x6c>)
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	b29b      	uxth	r3, r3
 800d334:	021b      	lsls	r3, r3, #8
 800d336:	b29a      	uxth	r2, r3
 800d338:	4b06      	ldr	r3, [pc, #24]	; (800d354 <VL53L0X_RdWord+0x6c>)
 800d33a:	785b      	ldrb	r3, [r3, #1]
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	4413      	add	r3, r2
 800d340:	b29a      	uxth	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800d346:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	20001ba8 	.word	0x20001ba8

0800d358 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	460b      	mov	r3, r1
 800d362:	607a      	str	r2, [r7, #4]
 800d364:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d366:	2300      	movs	r3, #0
 800d368:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d36a:	f107 030b 	add.w	r3, r7, #11
 800d36e:	2201      	movs	r2, #1
 800d370:	4619      	mov	r1, r3
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	f7ff fe6e 	bl	800d054 <_I2CWrite>
 800d378:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d002      	beq.n	800d386 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d380:	23ec      	movs	r3, #236	; 0xec
 800d382:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d384:	e01b      	b.n	800d3be <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800d386:	2204      	movs	r2, #4
 800d388:	4910      	ldr	r1, [pc, #64]	; (800d3cc <VL53L0X_RdDWord+0x74>)
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f7ff fe81 	bl	800d092 <_I2CRead>
 800d390:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d002      	beq.n	800d39e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d398:	23ec      	movs	r3, #236	; 0xec
 800d39a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d39c:	e00f      	b.n	800d3be <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800d39e:	4b0b      	ldr	r3, [pc, #44]	; (800d3cc <VL53L0X_RdDWord+0x74>)
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	061a      	lsls	r2, r3, #24
 800d3a4:	4b09      	ldr	r3, [pc, #36]	; (800d3cc <VL53L0X_RdDWord+0x74>)
 800d3a6:	785b      	ldrb	r3, [r3, #1]
 800d3a8:	041b      	lsls	r3, r3, #16
 800d3aa:	441a      	add	r2, r3
 800d3ac:	4b07      	ldr	r3, [pc, #28]	; (800d3cc <VL53L0X_RdDWord+0x74>)
 800d3ae:	789b      	ldrb	r3, [r3, #2]
 800d3b0:	021b      	lsls	r3, r3, #8
 800d3b2:	4413      	add	r3, r2
 800d3b4:	4a05      	ldr	r2, [pc, #20]	; (800d3cc <VL53L0X_RdDWord+0x74>)
 800d3b6:	78d2      	ldrb	r2, [r2, #3]
 800d3b8:	441a      	add	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800d3be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3718      	adds	r7, #24
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20001ba8 	.word	0x20001ba8

0800d3d0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800d3dc:	2002      	movs	r0, #2
 800d3de:	f7f3 f931 	bl	8000644 <HAL_Delay>
    return status;
 800d3e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
	...

0800d3f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800d3f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d428 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800d3f4:	f7fb f9e0 	bl	80087b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d3f8:	480c      	ldr	r0, [pc, #48]	; (800d42c <LoopForever+0x6>)
  ldr r1, =_edata
 800d3fa:	490d      	ldr	r1, [pc, #52]	; (800d430 <LoopForever+0xa>)
  ldr r2, =_sidata
 800d3fc:	4a0d      	ldr	r2, [pc, #52]	; (800d434 <LoopForever+0xe>)
  movs r3, #0
 800d3fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d400:	e002      	b.n	800d408 <LoopCopyDataInit>

0800d402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d406:	3304      	adds	r3, #4

0800d408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d40a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d40c:	d3f9      	bcc.n	800d402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d40e:	4a0a      	ldr	r2, [pc, #40]	; (800d438 <LoopForever+0x12>)
  ldr r4, =_ebss
 800d410:	4c0a      	ldr	r4, [pc, #40]	; (800d43c <LoopForever+0x16>)
  movs r3, #0
 800d412:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d414:	e001      	b.n	800d41a <LoopFillZerobss>

0800d416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d418:	3204      	adds	r2, #4

0800d41a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d41a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d41c:	d3fb      	bcc.n	800d416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d41e:	f000 f817 	bl	800d450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800d422:	f7fa fb6f 	bl	8007b04 <main>

0800d426 <LoopForever>:

LoopForever:
    b LoopForever
 800d426:	e7fe      	b.n	800d426 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800d428:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800d42c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d430:	200003cc 	.word	0x200003cc
  ldr r2, =_sidata
 800d434:	0800e1bc 	.word	0x0800e1bc
  ldr r2, =_sbss
 800d438:	200003cc 	.word	0x200003cc
  ldr r4, =_ebss
 800d43c:	20001bf8 	.word	0x20001bf8

0800d440 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800d440:	e7fe      	b.n	800d440 <ADC1_IRQHandler>
	...

0800d444 <__errno>:
 800d444:	4b01      	ldr	r3, [pc, #4]	; (800d44c <__errno+0x8>)
 800d446:	6818      	ldr	r0, [r3, #0]
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	20000368 	.word	0x20000368

0800d450 <__libc_init_array>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	4d0d      	ldr	r5, [pc, #52]	; (800d488 <__libc_init_array+0x38>)
 800d454:	4c0d      	ldr	r4, [pc, #52]	; (800d48c <__libc_init_array+0x3c>)
 800d456:	1b64      	subs	r4, r4, r5
 800d458:	10a4      	asrs	r4, r4, #2
 800d45a:	2600      	movs	r6, #0
 800d45c:	42a6      	cmp	r6, r4
 800d45e:	d109      	bne.n	800d474 <__libc_init_array+0x24>
 800d460:	4d0b      	ldr	r5, [pc, #44]	; (800d490 <__libc_init_array+0x40>)
 800d462:	4c0c      	ldr	r4, [pc, #48]	; (800d494 <__libc_init_array+0x44>)
 800d464:	f000 fcca 	bl	800ddfc <_init>
 800d468:	1b64      	subs	r4, r4, r5
 800d46a:	10a4      	asrs	r4, r4, #2
 800d46c:	2600      	movs	r6, #0
 800d46e:	42a6      	cmp	r6, r4
 800d470:	d105      	bne.n	800d47e <__libc_init_array+0x2e>
 800d472:	bd70      	pop	{r4, r5, r6, pc}
 800d474:	f855 3b04 	ldr.w	r3, [r5], #4
 800d478:	4798      	blx	r3
 800d47a:	3601      	adds	r6, #1
 800d47c:	e7ee      	b.n	800d45c <__libc_init_array+0xc>
 800d47e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d482:	4798      	blx	r3
 800d484:	3601      	adds	r6, #1
 800d486:	e7f2      	b.n	800d46e <__libc_init_array+0x1e>
 800d488:	0800e1b4 	.word	0x0800e1b4
 800d48c:	0800e1b4 	.word	0x0800e1b4
 800d490:	0800e1b4 	.word	0x0800e1b4
 800d494:	0800e1b8 	.word	0x0800e1b8

0800d498 <memcpy>:
 800d498:	440a      	add	r2, r1
 800d49a:	4291      	cmp	r1, r2
 800d49c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4a0:	d100      	bne.n	800d4a4 <memcpy+0xc>
 800d4a2:	4770      	bx	lr
 800d4a4:	b510      	push	{r4, lr}
 800d4a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4ae:	4291      	cmp	r1, r2
 800d4b0:	d1f9      	bne.n	800d4a6 <memcpy+0xe>
 800d4b2:	bd10      	pop	{r4, pc}

0800d4b4 <memset>:
 800d4b4:	4402      	add	r2, r0
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d100      	bne.n	800d4be <memset+0xa>
 800d4bc:	4770      	bx	lr
 800d4be:	f803 1b01 	strb.w	r1, [r3], #1
 800d4c2:	e7f9      	b.n	800d4b8 <memset+0x4>

0800d4c4 <sniprintf>:
 800d4c4:	b40c      	push	{r2, r3}
 800d4c6:	b530      	push	{r4, r5, lr}
 800d4c8:	4b17      	ldr	r3, [pc, #92]	; (800d528 <sniprintf+0x64>)
 800d4ca:	1e0c      	subs	r4, r1, #0
 800d4cc:	681d      	ldr	r5, [r3, #0]
 800d4ce:	b09d      	sub	sp, #116	; 0x74
 800d4d0:	da08      	bge.n	800d4e4 <sniprintf+0x20>
 800d4d2:	238b      	movs	r3, #139	; 0x8b
 800d4d4:	602b      	str	r3, [r5, #0]
 800d4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4da:	b01d      	add	sp, #116	; 0x74
 800d4dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4e0:	b002      	add	sp, #8
 800d4e2:	4770      	bx	lr
 800d4e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d4e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d4ec:	bf14      	ite	ne
 800d4ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d4f2:	4623      	moveq	r3, r4
 800d4f4:	9304      	str	r3, [sp, #16]
 800d4f6:	9307      	str	r3, [sp, #28]
 800d4f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4fc:	9002      	str	r0, [sp, #8]
 800d4fe:	9006      	str	r0, [sp, #24]
 800d500:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d504:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d506:	ab21      	add	r3, sp, #132	; 0x84
 800d508:	a902      	add	r1, sp, #8
 800d50a:	4628      	mov	r0, r5
 800d50c:	9301      	str	r3, [sp, #4]
 800d50e:	f000 f927 	bl	800d760 <_svfiprintf_r>
 800d512:	1c43      	adds	r3, r0, #1
 800d514:	bfbc      	itt	lt
 800d516:	238b      	movlt	r3, #139	; 0x8b
 800d518:	602b      	strlt	r3, [r5, #0]
 800d51a:	2c00      	cmp	r4, #0
 800d51c:	d0dd      	beq.n	800d4da <sniprintf+0x16>
 800d51e:	9b02      	ldr	r3, [sp, #8]
 800d520:	2200      	movs	r2, #0
 800d522:	701a      	strb	r2, [r3, #0]
 800d524:	e7d9      	b.n	800d4da <sniprintf+0x16>
 800d526:	bf00      	nop
 800d528:	20000368 	.word	0x20000368

0800d52c <siprintf>:
 800d52c:	b40e      	push	{r1, r2, r3}
 800d52e:	b500      	push	{lr}
 800d530:	b09c      	sub	sp, #112	; 0x70
 800d532:	ab1d      	add	r3, sp, #116	; 0x74
 800d534:	9002      	str	r0, [sp, #8]
 800d536:	9006      	str	r0, [sp, #24]
 800d538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d53c:	4809      	ldr	r0, [pc, #36]	; (800d564 <siprintf+0x38>)
 800d53e:	9107      	str	r1, [sp, #28]
 800d540:	9104      	str	r1, [sp, #16]
 800d542:	4909      	ldr	r1, [pc, #36]	; (800d568 <siprintf+0x3c>)
 800d544:	f853 2b04 	ldr.w	r2, [r3], #4
 800d548:	9105      	str	r1, [sp, #20]
 800d54a:	6800      	ldr	r0, [r0, #0]
 800d54c:	9301      	str	r3, [sp, #4]
 800d54e:	a902      	add	r1, sp, #8
 800d550:	f000 f906 	bl	800d760 <_svfiprintf_r>
 800d554:	9b02      	ldr	r3, [sp, #8]
 800d556:	2200      	movs	r2, #0
 800d558:	701a      	strb	r2, [r3, #0]
 800d55a:	b01c      	add	sp, #112	; 0x70
 800d55c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d560:	b003      	add	sp, #12
 800d562:	4770      	bx	lr
 800d564:	20000368 	.word	0x20000368
 800d568:	ffff0208 	.word	0xffff0208

0800d56c <strcpy>:
 800d56c:	4603      	mov	r3, r0
 800d56e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d572:	f803 2b01 	strb.w	r2, [r3], #1
 800d576:	2a00      	cmp	r2, #0
 800d578:	d1f9      	bne.n	800d56e <strcpy+0x2>
 800d57a:	4770      	bx	lr

0800d57c <__retarget_lock_acquire_recursive>:
 800d57c:	4770      	bx	lr

0800d57e <__retarget_lock_release_recursive>:
 800d57e:	4770      	bx	lr

0800d580 <sbrk_aligned>:
 800d580:	b570      	push	{r4, r5, r6, lr}
 800d582:	4e0e      	ldr	r6, [pc, #56]	; (800d5bc <sbrk_aligned+0x3c>)
 800d584:	460c      	mov	r4, r1
 800d586:	6831      	ldr	r1, [r6, #0]
 800d588:	4605      	mov	r5, r0
 800d58a:	b911      	cbnz	r1, 800d592 <sbrk_aligned+0x12>
 800d58c:	f000 fb7c 	bl	800dc88 <_sbrk_r>
 800d590:	6030      	str	r0, [r6, #0]
 800d592:	4621      	mov	r1, r4
 800d594:	4628      	mov	r0, r5
 800d596:	f000 fb77 	bl	800dc88 <_sbrk_r>
 800d59a:	1c43      	adds	r3, r0, #1
 800d59c:	d00a      	beq.n	800d5b4 <sbrk_aligned+0x34>
 800d59e:	1cc4      	adds	r4, r0, #3
 800d5a0:	f024 0403 	bic.w	r4, r4, #3
 800d5a4:	42a0      	cmp	r0, r4
 800d5a6:	d007      	beq.n	800d5b8 <sbrk_aligned+0x38>
 800d5a8:	1a21      	subs	r1, r4, r0
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	f000 fb6c 	bl	800dc88 <_sbrk_r>
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	d101      	bne.n	800d5b8 <sbrk_aligned+0x38>
 800d5b4:	f04f 34ff 	mov.w	r4, #4294967295
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	bd70      	pop	{r4, r5, r6, pc}
 800d5bc:	20001bf0 	.word	0x20001bf0

0800d5c0 <_malloc_r>:
 800d5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c4:	1ccd      	adds	r5, r1, #3
 800d5c6:	f025 0503 	bic.w	r5, r5, #3
 800d5ca:	3508      	adds	r5, #8
 800d5cc:	2d0c      	cmp	r5, #12
 800d5ce:	bf38      	it	cc
 800d5d0:	250c      	movcc	r5, #12
 800d5d2:	2d00      	cmp	r5, #0
 800d5d4:	4607      	mov	r7, r0
 800d5d6:	db01      	blt.n	800d5dc <_malloc_r+0x1c>
 800d5d8:	42a9      	cmp	r1, r5
 800d5da:	d905      	bls.n	800d5e8 <_malloc_r+0x28>
 800d5dc:	230c      	movs	r3, #12
 800d5de:	603b      	str	r3, [r7, #0]
 800d5e0:	2600      	movs	r6, #0
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e8:	4e2e      	ldr	r6, [pc, #184]	; (800d6a4 <_malloc_r+0xe4>)
 800d5ea:	f000 fb77 	bl	800dcdc <__malloc_lock>
 800d5ee:	6833      	ldr	r3, [r6, #0]
 800d5f0:	461c      	mov	r4, r3
 800d5f2:	bb34      	cbnz	r4, 800d642 <_malloc_r+0x82>
 800d5f4:	4629      	mov	r1, r5
 800d5f6:	4638      	mov	r0, r7
 800d5f8:	f7ff ffc2 	bl	800d580 <sbrk_aligned>
 800d5fc:	1c43      	adds	r3, r0, #1
 800d5fe:	4604      	mov	r4, r0
 800d600:	d14d      	bne.n	800d69e <_malloc_r+0xde>
 800d602:	6834      	ldr	r4, [r6, #0]
 800d604:	4626      	mov	r6, r4
 800d606:	2e00      	cmp	r6, #0
 800d608:	d140      	bne.n	800d68c <_malloc_r+0xcc>
 800d60a:	6823      	ldr	r3, [r4, #0]
 800d60c:	4631      	mov	r1, r6
 800d60e:	4638      	mov	r0, r7
 800d610:	eb04 0803 	add.w	r8, r4, r3
 800d614:	f000 fb38 	bl	800dc88 <_sbrk_r>
 800d618:	4580      	cmp	r8, r0
 800d61a:	d13a      	bne.n	800d692 <_malloc_r+0xd2>
 800d61c:	6821      	ldr	r1, [r4, #0]
 800d61e:	3503      	adds	r5, #3
 800d620:	1a6d      	subs	r5, r5, r1
 800d622:	f025 0503 	bic.w	r5, r5, #3
 800d626:	3508      	adds	r5, #8
 800d628:	2d0c      	cmp	r5, #12
 800d62a:	bf38      	it	cc
 800d62c:	250c      	movcc	r5, #12
 800d62e:	4629      	mov	r1, r5
 800d630:	4638      	mov	r0, r7
 800d632:	f7ff ffa5 	bl	800d580 <sbrk_aligned>
 800d636:	3001      	adds	r0, #1
 800d638:	d02b      	beq.n	800d692 <_malloc_r+0xd2>
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	442b      	add	r3, r5
 800d63e:	6023      	str	r3, [r4, #0]
 800d640:	e00e      	b.n	800d660 <_malloc_r+0xa0>
 800d642:	6822      	ldr	r2, [r4, #0]
 800d644:	1b52      	subs	r2, r2, r5
 800d646:	d41e      	bmi.n	800d686 <_malloc_r+0xc6>
 800d648:	2a0b      	cmp	r2, #11
 800d64a:	d916      	bls.n	800d67a <_malloc_r+0xba>
 800d64c:	1961      	adds	r1, r4, r5
 800d64e:	42a3      	cmp	r3, r4
 800d650:	6025      	str	r5, [r4, #0]
 800d652:	bf18      	it	ne
 800d654:	6059      	strne	r1, [r3, #4]
 800d656:	6863      	ldr	r3, [r4, #4]
 800d658:	bf08      	it	eq
 800d65a:	6031      	streq	r1, [r6, #0]
 800d65c:	5162      	str	r2, [r4, r5]
 800d65e:	604b      	str	r3, [r1, #4]
 800d660:	4638      	mov	r0, r7
 800d662:	f104 060b 	add.w	r6, r4, #11
 800d666:	f000 fb3f 	bl	800dce8 <__malloc_unlock>
 800d66a:	f026 0607 	bic.w	r6, r6, #7
 800d66e:	1d23      	adds	r3, r4, #4
 800d670:	1af2      	subs	r2, r6, r3
 800d672:	d0b6      	beq.n	800d5e2 <_malloc_r+0x22>
 800d674:	1b9b      	subs	r3, r3, r6
 800d676:	50a3      	str	r3, [r4, r2]
 800d678:	e7b3      	b.n	800d5e2 <_malloc_r+0x22>
 800d67a:	6862      	ldr	r2, [r4, #4]
 800d67c:	42a3      	cmp	r3, r4
 800d67e:	bf0c      	ite	eq
 800d680:	6032      	streq	r2, [r6, #0]
 800d682:	605a      	strne	r2, [r3, #4]
 800d684:	e7ec      	b.n	800d660 <_malloc_r+0xa0>
 800d686:	4623      	mov	r3, r4
 800d688:	6864      	ldr	r4, [r4, #4]
 800d68a:	e7b2      	b.n	800d5f2 <_malloc_r+0x32>
 800d68c:	4634      	mov	r4, r6
 800d68e:	6876      	ldr	r6, [r6, #4]
 800d690:	e7b9      	b.n	800d606 <_malloc_r+0x46>
 800d692:	230c      	movs	r3, #12
 800d694:	603b      	str	r3, [r7, #0]
 800d696:	4638      	mov	r0, r7
 800d698:	f000 fb26 	bl	800dce8 <__malloc_unlock>
 800d69c:	e7a1      	b.n	800d5e2 <_malloc_r+0x22>
 800d69e:	6025      	str	r5, [r4, #0]
 800d6a0:	e7de      	b.n	800d660 <_malloc_r+0xa0>
 800d6a2:	bf00      	nop
 800d6a4:	20001bec 	.word	0x20001bec

0800d6a8 <__ssputs_r>:
 800d6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6ac:	688e      	ldr	r6, [r1, #8]
 800d6ae:	429e      	cmp	r6, r3
 800d6b0:	4682      	mov	sl, r0
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	4690      	mov	r8, r2
 800d6b6:	461f      	mov	r7, r3
 800d6b8:	d838      	bhi.n	800d72c <__ssputs_r+0x84>
 800d6ba:	898a      	ldrh	r2, [r1, #12]
 800d6bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d6c0:	d032      	beq.n	800d728 <__ssputs_r+0x80>
 800d6c2:	6825      	ldr	r5, [r4, #0]
 800d6c4:	6909      	ldr	r1, [r1, #16]
 800d6c6:	eba5 0901 	sub.w	r9, r5, r1
 800d6ca:	6965      	ldr	r5, [r4, #20]
 800d6cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d6d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	444b      	add	r3, r9
 800d6d8:	106d      	asrs	r5, r5, #1
 800d6da:	429d      	cmp	r5, r3
 800d6dc:	bf38      	it	cc
 800d6de:	461d      	movcc	r5, r3
 800d6e0:	0553      	lsls	r3, r2, #21
 800d6e2:	d531      	bpl.n	800d748 <__ssputs_r+0xa0>
 800d6e4:	4629      	mov	r1, r5
 800d6e6:	f7ff ff6b 	bl	800d5c0 <_malloc_r>
 800d6ea:	4606      	mov	r6, r0
 800d6ec:	b950      	cbnz	r0, 800d704 <__ssputs_r+0x5c>
 800d6ee:	230c      	movs	r3, #12
 800d6f0:	f8ca 3000 	str.w	r3, [sl]
 800d6f4:	89a3      	ldrh	r3, [r4, #12]
 800d6f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6fa:	81a3      	strh	r3, [r4, #12]
 800d6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d704:	6921      	ldr	r1, [r4, #16]
 800d706:	464a      	mov	r2, r9
 800d708:	f7ff fec6 	bl	800d498 <memcpy>
 800d70c:	89a3      	ldrh	r3, [r4, #12]
 800d70e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d716:	81a3      	strh	r3, [r4, #12]
 800d718:	6126      	str	r6, [r4, #16]
 800d71a:	6165      	str	r5, [r4, #20]
 800d71c:	444e      	add	r6, r9
 800d71e:	eba5 0509 	sub.w	r5, r5, r9
 800d722:	6026      	str	r6, [r4, #0]
 800d724:	60a5      	str	r5, [r4, #8]
 800d726:	463e      	mov	r6, r7
 800d728:	42be      	cmp	r6, r7
 800d72a:	d900      	bls.n	800d72e <__ssputs_r+0x86>
 800d72c:	463e      	mov	r6, r7
 800d72e:	6820      	ldr	r0, [r4, #0]
 800d730:	4632      	mov	r2, r6
 800d732:	4641      	mov	r1, r8
 800d734:	f000 fab8 	bl	800dca8 <memmove>
 800d738:	68a3      	ldr	r3, [r4, #8]
 800d73a:	1b9b      	subs	r3, r3, r6
 800d73c:	60a3      	str	r3, [r4, #8]
 800d73e:	6823      	ldr	r3, [r4, #0]
 800d740:	4433      	add	r3, r6
 800d742:	6023      	str	r3, [r4, #0]
 800d744:	2000      	movs	r0, #0
 800d746:	e7db      	b.n	800d700 <__ssputs_r+0x58>
 800d748:	462a      	mov	r2, r5
 800d74a:	f000 fb1f 	bl	800dd8c <_realloc_r>
 800d74e:	4606      	mov	r6, r0
 800d750:	2800      	cmp	r0, #0
 800d752:	d1e1      	bne.n	800d718 <__ssputs_r+0x70>
 800d754:	6921      	ldr	r1, [r4, #16]
 800d756:	4650      	mov	r0, sl
 800d758:	f000 facc 	bl	800dcf4 <_free_r>
 800d75c:	e7c7      	b.n	800d6ee <__ssputs_r+0x46>
	...

0800d760 <_svfiprintf_r>:
 800d760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d764:	4698      	mov	r8, r3
 800d766:	898b      	ldrh	r3, [r1, #12]
 800d768:	061b      	lsls	r3, r3, #24
 800d76a:	b09d      	sub	sp, #116	; 0x74
 800d76c:	4607      	mov	r7, r0
 800d76e:	460d      	mov	r5, r1
 800d770:	4614      	mov	r4, r2
 800d772:	d50e      	bpl.n	800d792 <_svfiprintf_r+0x32>
 800d774:	690b      	ldr	r3, [r1, #16]
 800d776:	b963      	cbnz	r3, 800d792 <_svfiprintf_r+0x32>
 800d778:	2140      	movs	r1, #64	; 0x40
 800d77a:	f7ff ff21 	bl	800d5c0 <_malloc_r>
 800d77e:	6028      	str	r0, [r5, #0]
 800d780:	6128      	str	r0, [r5, #16]
 800d782:	b920      	cbnz	r0, 800d78e <_svfiprintf_r+0x2e>
 800d784:	230c      	movs	r3, #12
 800d786:	603b      	str	r3, [r7, #0]
 800d788:	f04f 30ff 	mov.w	r0, #4294967295
 800d78c:	e0d1      	b.n	800d932 <_svfiprintf_r+0x1d2>
 800d78e:	2340      	movs	r3, #64	; 0x40
 800d790:	616b      	str	r3, [r5, #20]
 800d792:	2300      	movs	r3, #0
 800d794:	9309      	str	r3, [sp, #36]	; 0x24
 800d796:	2320      	movs	r3, #32
 800d798:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d79c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7a0:	2330      	movs	r3, #48	; 0x30
 800d7a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d94c <_svfiprintf_r+0x1ec>
 800d7a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7aa:	f04f 0901 	mov.w	r9, #1
 800d7ae:	4623      	mov	r3, r4
 800d7b0:	469a      	mov	sl, r3
 800d7b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7b6:	b10a      	cbz	r2, 800d7bc <_svfiprintf_r+0x5c>
 800d7b8:	2a25      	cmp	r2, #37	; 0x25
 800d7ba:	d1f9      	bne.n	800d7b0 <_svfiprintf_r+0x50>
 800d7bc:	ebba 0b04 	subs.w	fp, sl, r4
 800d7c0:	d00b      	beq.n	800d7da <_svfiprintf_r+0x7a>
 800d7c2:	465b      	mov	r3, fp
 800d7c4:	4622      	mov	r2, r4
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	f7ff ff6d 	bl	800d6a8 <__ssputs_r>
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	f000 80aa 	beq.w	800d928 <_svfiprintf_r+0x1c8>
 800d7d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7d6:	445a      	add	r2, fp
 800d7d8:	9209      	str	r2, [sp, #36]	; 0x24
 800d7da:	f89a 3000 	ldrb.w	r3, [sl]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	f000 80a2 	beq.w	800d928 <_svfiprintf_r+0x1c8>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7ee:	f10a 0a01 	add.w	sl, sl, #1
 800d7f2:	9304      	str	r3, [sp, #16]
 800d7f4:	9307      	str	r3, [sp, #28]
 800d7f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7fa:	931a      	str	r3, [sp, #104]	; 0x68
 800d7fc:	4654      	mov	r4, sl
 800d7fe:	2205      	movs	r2, #5
 800d800:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d804:	4851      	ldr	r0, [pc, #324]	; (800d94c <_svfiprintf_r+0x1ec>)
 800d806:	f7f2 fd13 	bl	8000230 <memchr>
 800d80a:	9a04      	ldr	r2, [sp, #16]
 800d80c:	b9d8      	cbnz	r0, 800d846 <_svfiprintf_r+0xe6>
 800d80e:	06d0      	lsls	r0, r2, #27
 800d810:	bf44      	itt	mi
 800d812:	2320      	movmi	r3, #32
 800d814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d818:	0711      	lsls	r1, r2, #28
 800d81a:	bf44      	itt	mi
 800d81c:	232b      	movmi	r3, #43	; 0x2b
 800d81e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d822:	f89a 3000 	ldrb.w	r3, [sl]
 800d826:	2b2a      	cmp	r3, #42	; 0x2a
 800d828:	d015      	beq.n	800d856 <_svfiprintf_r+0xf6>
 800d82a:	9a07      	ldr	r2, [sp, #28]
 800d82c:	4654      	mov	r4, sl
 800d82e:	2000      	movs	r0, #0
 800d830:	f04f 0c0a 	mov.w	ip, #10
 800d834:	4621      	mov	r1, r4
 800d836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d83a:	3b30      	subs	r3, #48	; 0x30
 800d83c:	2b09      	cmp	r3, #9
 800d83e:	d94e      	bls.n	800d8de <_svfiprintf_r+0x17e>
 800d840:	b1b0      	cbz	r0, 800d870 <_svfiprintf_r+0x110>
 800d842:	9207      	str	r2, [sp, #28]
 800d844:	e014      	b.n	800d870 <_svfiprintf_r+0x110>
 800d846:	eba0 0308 	sub.w	r3, r0, r8
 800d84a:	fa09 f303 	lsl.w	r3, r9, r3
 800d84e:	4313      	orrs	r3, r2
 800d850:	9304      	str	r3, [sp, #16]
 800d852:	46a2      	mov	sl, r4
 800d854:	e7d2      	b.n	800d7fc <_svfiprintf_r+0x9c>
 800d856:	9b03      	ldr	r3, [sp, #12]
 800d858:	1d19      	adds	r1, r3, #4
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	9103      	str	r1, [sp, #12]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	bfbb      	ittet	lt
 800d862:	425b      	neglt	r3, r3
 800d864:	f042 0202 	orrlt.w	r2, r2, #2
 800d868:	9307      	strge	r3, [sp, #28]
 800d86a:	9307      	strlt	r3, [sp, #28]
 800d86c:	bfb8      	it	lt
 800d86e:	9204      	strlt	r2, [sp, #16]
 800d870:	7823      	ldrb	r3, [r4, #0]
 800d872:	2b2e      	cmp	r3, #46	; 0x2e
 800d874:	d10c      	bne.n	800d890 <_svfiprintf_r+0x130>
 800d876:	7863      	ldrb	r3, [r4, #1]
 800d878:	2b2a      	cmp	r3, #42	; 0x2a
 800d87a:	d135      	bne.n	800d8e8 <_svfiprintf_r+0x188>
 800d87c:	9b03      	ldr	r3, [sp, #12]
 800d87e:	1d1a      	adds	r2, r3, #4
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	9203      	str	r2, [sp, #12]
 800d884:	2b00      	cmp	r3, #0
 800d886:	bfb8      	it	lt
 800d888:	f04f 33ff 	movlt.w	r3, #4294967295
 800d88c:	3402      	adds	r4, #2
 800d88e:	9305      	str	r3, [sp, #20]
 800d890:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d95c <_svfiprintf_r+0x1fc>
 800d894:	7821      	ldrb	r1, [r4, #0]
 800d896:	2203      	movs	r2, #3
 800d898:	4650      	mov	r0, sl
 800d89a:	f7f2 fcc9 	bl	8000230 <memchr>
 800d89e:	b140      	cbz	r0, 800d8b2 <_svfiprintf_r+0x152>
 800d8a0:	2340      	movs	r3, #64	; 0x40
 800d8a2:	eba0 000a 	sub.w	r0, r0, sl
 800d8a6:	fa03 f000 	lsl.w	r0, r3, r0
 800d8aa:	9b04      	ldr	r3, [sp, #16]
 800d8ac:	4303      	orrs	r3, r0
 800d8ae:	3401      	adds	r4, #1
 800d8b0:	9304      	str	r3, [sp, #16]
 800d8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8b6:	4826      	ldr	r0, [pc, #152]	; (800d950 <_svfiprintf_r+0x1f0>)
 800d8b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8bc:	2206      	movs	r2, #6
 800d8be:	f7f2 fcb7 	bl	8000230 <memchr>
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	d038      	beq.n	800d938 <_svfiprintf_r+0x1d8>
 800d8c6:	4b23      	ldr	r3, [pc, #140]	; (800d954 <_svfiprintf_r+0x1f4>)
 800d8c8:	bb1b      	cbnz	r3, 800d912 <_svfiprintf_r+0x1b2>
 800d8ca:	9b03      	ldr	r3, [sp, #12]
 800d8cc:	3307      	adds	r3, #7
 800d8ce:	f023 0307 	bic.w	r3, r3, #7
 800d8d2:	3308      	adds	r3, #8
 800d8d4:	9303      	str	r3, [sp, #12]
 800d8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8d8:	4433      	add	r3, r6
 800d8da:	9309      	str	r3, [sp, #36]	; 0x24
 800d8dc:	e767      	b.n	800d7ae <_svfiprintf_r+0x4e>
 800d8de:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8e2:	460c      	mov	r4, r1
 800d8e4:	2001      	movs	r0, #1
 800d8e6:	e7a5      	b.n	800d834 <_svfiprintf_r+0xd4>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	3401      	adds	r4, #1
 800d8ec:	9305      	str	r3, [sp, #20]
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	f04f 0c0a 	mov.w	ip, #10
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8fa:	3a30      	subs	r2, #48	; 0x30
 800d8fc:	2a09      	cmp	r2, #9
 800d8fe:	d903      	bls.n	800d908 <_svfiprintf_r+0x1a8>
 800d900:	2b00      	cmp	r3, #0
 800d902:	d0c5      	beq.n	800d890 <_svfiprintf_r+0x130>
 800d904:	9105      	str	r1, [sp, #20]
 800d906:	e7c3      	b.n	800d890 <_svfiprintf_r+0x130>
 800d908:	fb0c 2101 	mla	r1, ip, r1, r2
 800d90c:	4604      	mov	r4, r0
 800d90e:	2301      	movs	r3, #1
 800d910:	e7f0      	b.n	800d8f4 <_svfiprintf_r+0x194>
 800d912:	ab03      	add	r3, sp, #12
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	462a      	mov	r2, r5
 800d918:	4b0f      	ldr	r3, [pc, #60]	; (800d958 <_svfiprintf_r+0x1f8>)
 800d91a:	a904      	add	r1, sp, #16
 800d91c:	4638      	mov	r0, r7
 800d91e:	f3af 8000 	nop.w
 800d922:	1c42      	adds	r2, r0, #1
 800d924:	4606      	mov	r6, r0
 800d926:	d1d6      	bne.n	800d8d6 <_svfiprintf_r+0x176>
 800d928:	89ab      	ldrh	r3, [r5, #12]
 800d92a:	065b      	lsls	r3, r3, #25
 800d92c:	f53f af2c 	bmi.w	800d788 <_svfiprintf_r+0x28>
 800d930:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d932:	b01d      	add	sp, #116	; 0x74
 800d934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d938:	ab03      	add	r3, sp, #12
 800d93a:	9300      	str	r3, [sp, #0]
 800d93c:	462a      	mov	r2, r5
 800d93e:	4b06      	ldr	r3, [pc, #24]	; (800d958 <_svfiprintf_r+0x1f8>)
 800d940:	a904      	add	r1, sp, #16
 800d942:	4638      	mov	r0, r7
 800d944:	f000 f87a 	bl	800da3c <_printf_i>
 800d948:	e7eb      	b.n	800d922 <_svfiprintf_r+0x1c2>
 800d94a:	bf00      	nop
 800d94c:	0800e178 	.word	0x0800e178
 800d950:	0800e182 	.word	0x0800e182
 800d954:	00000000 	.word	0x00000000
 800d958:	0800d6a9 	.word	0x0800d6a9
 800d95c:	0800e17e 	.word	0x0800e17e

0800d960 <_printf_common>:
 800d960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d964:	4616      	mov	r6, r2
 800d966:	4699      	mov	r9, r3
 800d968:	688a      	ldr	r2, [r1, #8]
 800d96a:	690b      	ldr	r3, [r1, #16]
 800d96c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d970:	4293      	cmp	r3, r2
 800d972:	bfb8      	it	lt
 800d974:	4613      	movlt	r3, r2
 800d976:	6033      	str	r3, [r6, #0]
 800d978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d97c:	4607      	mov	r7, r0
 800d97e:	460c      	mov	r4, r1
 800d980:	b10a      	cbz	r2, 800d986 <_printf_common+0x26>
 800d982:	3301      	adds	r3, #1
 800d984:	6033      	str	r3, [r6, #0]
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	0699      	lsls	r1, r3, #26
 800d98a:	bf42      	ittt	mi
 800d98c:	6833      	ldrmi	r3, [r6, #0]
 800d98e:	3302      	addmi	r3, #2
 800d990:	6033      	strmi	r3, [r6, #0]
 800d992:	6825      	ldr	r5, [r4, #0]
 800d994:	f015 0506 	ands.w	r5, r5, #6
 800d998:	d106      	bne.n	800d9a8 <_printf_common+0x48>
 800d99a:	f104 0a19 	add.w	sl, r4, #25
 800d99e:	68e3      	ldr	r3, [r4, #12]
 800d9a0:	6832      	ldr	r2, [r6, #0]
 800d9a2:	1a9b      	subs	r3, r3, r2
 800d9a4:	42ab      	cmp	r3, r5
 800d9a6:	dc26      	bgt.n	800d9f6 <_printf_common+0x96>
 800d9a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d9ac:	1e13      	subs	r3, r2, #0
 800d9ae:	6822      	ldr	r2, [r4, #0]
 800d9b0:	bf18      	it	ne
 800d9b2:	2301      	movne	r3, #1
 800d9b4:	0692      	lsls	r2, r2, #26
 800d9b6:	d42b      	bmi.n	800da10 <_printf_common+0xb0>
 800d9b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9bc:	4649      	mov	r1, r9
 800d9be:	4638      	mov	r0, r7
 800d9c0:	47c0      	blx	r8
 800d9c2:	3001      	adds	r0, #1
 800d9c4:	d01e      	beq.n	800da04 <_printf_common+0xa4>
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	68e5      	ldr	r5, [r4, #12]
 800d9ca:	6832      	ldr	r2, [r6, #0]
 800d9cc:	f003 0306 	and.w	r3, r3, #6
 800d9d0:	2b04      	cmp	r3, #4
 800d9d2:	bf08      	it	eq
 800d9d4:	1aad      	subeq	r5, r5, r2
 800d9d6:	68a3      	ldr	r3, [r4, #8]
 800d9d8:	6922      	ldr	r2, [r4, #16]
 800d9da:	bf0c      	ite	eq
 800d9dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9e0:	2500      	movne	r5, #0
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	bfc4      	itt	gt
 800d9e6:	1a9b      	subgt	r3, r3, r2
 800d9e8:	18ed      	addgt	r5, r5, r3
 800d9ea:	2600      	movs	r6, #0
 800d9ec:	341a      	adds	r4, #26
 800d9ee:	42b5      	cmp	r5, r6
 800d9f0:	d11a      	bne.n	800da28 <_printf_common+0xc8>
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	e008      	b.n	800da08 <_printf_common+0xa8>
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	4652      	mov	r2, sl
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	4638      	mov	r0, r7
 800d9fe:	47c0      	blx	r8
 800da00:	3001      	adds	r0, #1
 800da02:	d103      	bne.n	800da0c <_printf_common+0xac>
 800da04:	f04f 30ff 	mov.w	r0, #4294967295
 800da08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da0c:	3501      	adds	r5, #1
 800da0e:	e7c6      	b.n	800d99e <_printf_common+0x3e>
 800da10:	18e1      	adds	r1, r4, r3
 800da12:	1c5a      	adds	r2, r3, #1
 800da14:	2030      	movs	r0, #48	; 0x30
 800da16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da1a:	4422      	add	r2, r4
 800da1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da24:	3302      	adds	r3, #2
 800da26:	e7c7      	b.n	800d9b8 <_printf_common+0x58>
 800da28:	2301      	movs	r3, #1
 800da2a:	4622      	mov	r2, r4
 800da2c:	4649      	mov	r1, r9
 800da2e:	4638      	mov	r0, r7
 800da30:	47c0      	blx	r8
 800da32:	3001      	adds	r0, #1
 800da34:	d0e6      	beq.n	800da04 <_printf_common+0xa4>
 800da36:	3601      	adds	r6, #1
 800da38:	e7d9      	b.n	800d9ee <_printf_common+0x8e>
	...

0800da3c <_printf_i>:
 800da3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da40:	7e0f      	ldrb	r7, [r1, #24]
 800da42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da44:	2f78      	cmp	r7, #120	; 0x78
 800da46:	4691      	mov	r9, r2
 800da48:	4680      	mov	r8, r0
 800da4a:	460c      	mov	r4, r1
 800da4c:	469a      	mov	sl, r3
 800da4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da52:	d807      	bhi.n	800da64 <_printf_i+0x28>
 800da54:	2f62      	cmp	r7, #98	; 0x62
 800da56:	d80a      	bhi.n	800da6e <_printf_i+0x32>
 800da58:	2f00      	cmp	r7, #0
 800da5a:	f000 80d8 	beq.w	800dc0e <_printf_i+0x1d2>
 800da5e:	2f58      	cmp	r7, #88	; 0x58
 800da60:	f000 80a3 	beq.w	800dbaa <_printf_i+0x16e>
 800da64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da6c:	e03a      	b.n	800dae4 <_printf_i+0xa8>
 800da6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da72:	2b15      	cmp	r3, #21
 800da74:	d8f6      	bhi.n	800da64 <_printf_i+0x28>
 800da76:	a101      	add	r1, pc, #4	; (adr r1, 800da7c <_printf_i+0x40>)
 800da78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da7c:	0800dad5 	.word	0x0800dad5
 800da80:	0800dae9 	.word	0x0800dae9
 800da84:	0800da65 	.word	0x0800da65
 800da88:	0800da65 	.word	0x0800da65
 800da8c:	0800da65 	.word	0x0800da65
 800da90:	0800da65 	.word	0x0800da65
 800da94:	0800dae9 	.word	0x0800dae9
 800da98:	0800da65 	.word	0x0800da65
 800da9c:	0800da65 	.word	0x0800da65
 800daa0:	0800da65 	.word	0x0800da65
 800daa4:	0800da65 	.word	0x0800da65
 800daa8:	0800dbf5 	.word	0x0800dbf5
 800daac:	0800db19 	.word	0x0800db19
 800dab0:	0800dbd7 	.word	0x0800dbd7
 800dab4:	0800da65 	.word	0x0800da65
 800dab8:	0800da65 	.word	0x0800da65
 800dabc:	0800dc17 	.word	0x0800dc17
 800dac0:	0800da65 	.word	0x0800da65
 800dac4:	0800db19 	.word	0x0800db19
 800dac8:	0800da65 	.word	0x0800da65
 800dacc:	0800da65 	.word	0x0800da65
 800dad0:	0800dbdf 	.word	0x0800dbdf
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	1d1a      	adds	r2, r3, #4
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	602a      	str	r2, [r5, #0]
 800dadc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dae4:	2301      	movs	r3, #1
 800dae6:	e0a3      	b.n	800dc30 <_printf_i+0x1f4>
 800dae8:	6820      	ldr	r0, [r4, #0]
 800daea:	6829      	ldr	r1, [r5, #0]
 800daec:	0606      	lsls	r6, r0, #24
 800daee:	f101 0304 	add.w	r3, r1, #4
 800daf2:	d50a      	bpl.n	800db0a <_printf_i+0xce>
 800daf4:	680e      	ldr	r6, [r1, #0]
 800daf6:	602b      	str	r3, [r5, #0]
 800daf8:	2e00      	cmp	r6, #0
 800dafa:	da03      	bge.n	800db04 <_printf_i+0xc8>
 800dafc:	232d      	movs	r3, #45	; 0x2d
 800dafe:	4276      	negs	r6, r6
 800db00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db04:	485e      	ldr	r0, [pc, #376]	; (800dc80 <_printf_i+0x244>)
 800db06:	230a      	movs	r3, #10
 800db08:	e019      	b.n	800db3e <_printf_i+0x102>
 800db0a:	680e      	ldr	r6, [r1, #0]
 800db0c:	602b      	str	r3, [r5, #0]
 800db0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800db12:	bf18      	it	ne
 800db14:	b236      	sxthne	r6, r6
 800db16:	e7ef      	b.n	800daf8 <_printf_i+0xbc>
 800db18:	682b      	ldr	r3, [r5, #0]
 800db1a:	6820      	ldr	r0, [r4, #0]
 800db1c:	1d19      	adds	r1, r3, #4
 800db1e:	6029      	str	r1, [r5, #0]
 800db20:	0601      	lsls	r1, r0, #24
 800db22:	d501      	bpl.n	800db28 <_printf_i+0xec>
 800db24:	681e      	ldr	r6, [r3, #0]
 800db26:	e002      	b.n	800db2e <_printf_i+0xf2>
 800db28:	0646      	lsls	r6, r0, #25
 800db2a:	d5fb      	bpl.n	800db24 <_printf_i+0xe8>
 800db2c:	881e      	ldrh	r6, [r3, #0]
 800db2e:	4854      	ldr	r0, [pc, #336]	; (800dc80 <_printf_i+0x244>)
 800db30:	2f6f      	cmp	r7, #111	; 0x6f
 800db32:	bf0c      	ite	eq
 800db34:	2308      	moveq	r3, #8
 800db36:	230a      	movne	r3, #10
 800db38:	2100      	movs	r1, #0
 800db3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db3e:	6865      	ldr	r5, [r4, #4]
 800db40:	60a5      	str	r5, [r4, #8]
 800db42:	2d00      	cmp	r5, #0
 800db44:	bfa2      	ittt	ge
 800db46:	6821      	ldrge	r1, [r4, #0]
 800db48:	f021 0104 	bicge.w	r1, r1, #4
 800db4c:	6021      	strge	r1, [r4, #0]
 800db4e:	b90e      	cbnz	r6, 800db54 <_printf_i+0x118>
 800db50:	2d00      	cmp	r5, #0
 800db52:	d04d      	beq.n	800dbf0 <_printf_i+0x1b4>
 800db54:	4615      	mov	r5, r2
 800db56:	fbb6 f1f3 	udiv	r1, r6, r3
 800db5a:	fb03 6711 	mls	r7, r3, r1, r6
 800db5e:	5dc7      	ldrb	r7, [r0, r7]
 800db60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db64:	4637      	mov	r7, r6
 800db66:	42bb      	cmp	r3, r7
 800db68:	460e      	mov	r6, r1
 800db6a:	d9f4      	bls.n	800db56 <_printf_i+0x11a>
 800db6c:	2b08      	cmp	r3, #8
 800db6e:	d10b      	bne.n	800db88 <_printf_i+0x14c>
 800db70:	6823      	ldr	r3, [r4, #0]
 800db72:	07de      	lsls	r6, r3, #31
 800db74:	d508      	bpl.n	800db88 <_printf_i+0x14c>
 800db76:	6923      	ldr	r3, [r4, #16]
 800db78:	6861      	ldr	r1, [r4, #4]
 800db7a:	4299      	cmp	r1, r3
 800db7c:	bfde      	ittt	le
 800db7e:	2330      	movle	r3, #48	; 0x30
 800db80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db84:	f105 35ff 	addle.w	r5, r5, #4294967295
 800db88:	1b52      	subs	r2, r2, r5
 800db8a:	6122      	str	r2, [r4, #16]
 800db8c:	f8cd a000 	str.w	sl, [sp]
 800db90:	464b      	mov	r3, r9
 800db92:	aa03      	add	r2, sp, #12
 800db94:	4621      	mov	r1, r4
 800db96:	4640      	mov	r0, r8
 800db98:	f7ff fee2 	bl	800d960 <_printf_common>
 800db9c:	3001      	adds	r0, #1
 800db9e:	d14c      	bne.n	800dc3a <_printf_i+0x1fe>
 800dba0:	f04f 30ff 	mov.w	r0, #4294967295
 800dba4:	b004      	add	sp, #16
 800dba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbaa:	4835      	ldr	r0, [pc, #212]	; (800dc80 <_printf_i+0x244>)
 800dbac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dbb0:	6829      	ldr	r1, [r5, #0]
 800dbb2:	6823      	ldr	r3, [r4, #0]
 800dbb4:	f851 6b04 	ldr.w	r6, [r1], #4
 800dbb8:	6029      	str	r1, [r5, #0]
 800dbba:	061d      	lsls	r5, r3, #24
 800dbbc:	d514      	bpl.n	800dbe8 <_printf_i+0x1ac>
 800dbbe:	07df      	lsls	r7, r3, #31
 800dbc0:	bf44      	itt	mi
 800dbc2:	f043 0320 	orrmi.w	r3, r3, #32
 800dbc6:	6023      	strmi	r3, [r4, #0]
 800dbc8:	b91e      	cbnz	r6, 800dbd2 <_printf_i+0x196>
 800dbca:	6823      	ldr	r3, [r4, #0]
 800dbcc:	f023 0320 	bic.w	r3, r3, #32
 800dbd0:	6023      	str	r3, [r4, #0]
 800dbd2:	2310      	movs	r3, #16
 800dbd4:	e7b0      	b.n	800db38 <_printf_i+0xfc>
 800dbd6:	6823      	ldr	r3, [r4, #0]
 800dbd8:	f043 0320 	orr.w	r3, r3, #32
 800dbdc:	6023      	str	r3, [r4, #0]
 800dbde:	2378      	movs	r3, #120	; 0x78
 800dbe0:	4828      	ldr	r0, [pc, #160]	; (800dc84 <_printf_i+0x248>)
 800dbe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dbe6:	e7e3      	b.n	800dbb0 <_printf_i+0x174>
 800dbe8:	0659      	lsls	r1, r3, #25
 800dbea:	bf48      	it	mi
 800dbec:	b2b6      	uxthmi	r6, r6
 800dbee:	e7e6      	b.n	800dbbe <_printf_i+0x182>
 800dbf0:	4615      	mov	r5, r2
 800dbf2:	e7bb      	b.n	800db6c <_printf_i+0x130>
 800dbf4:	682b      	ldr	r3, [r5, #0]
 800dbf6:	6826      	ldr	r6, [r4, #0]
 800dbf8:	6961      	ldr	r1, [r4, #20]
 800dbfa:	1d18      	adds	r0, r3, #4
 800dbfc:	6028      	str	r0, [r5, #0]
 800dbfe:	0635      	lsls	r5, r6, #24
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	d501      	bpl.n	800dc08 <_printf_i+0x1cc>
 800dc04:	6019      	str	r1, [r3, #0]
 800dc06:	e002      	b.n	800dc0e <_printf_i+0x1d2>
 800dc08:	0670      	lsls	r0, r6, #25
 800dc0a:	d5fb      	bpl.n	800dc04 <_printf_i+0x1c8>
 800dc0c:	8019      	strh	r1, [r3, #0]
 800dc0e:	2300      	movs	r3, #0
 800dc10:	6123      	str	r3, [r4, #16]
 800dc12:	4615      	mov	r5, r2
 800dc14:	e7ba      	b.n	800db8c <_printf_i+0x150>
 800dc16:	682b      	ldr	r3, [r5, #0]
 800dc18:	1d1a      	adds	r2, r3, #4
 800dc1a:	602a      	str	r2, [r5, #0]
 800dc1c:	681d      	ldr	r5, [r3, #0]
 800dc1e:	6862      	ldr	r2, [r4, #4]
 800dc20:	2100      	movs	r1, #0
 800dc22:	4628      	mov	r0, r5
 800dc24:	f7f2 fb04 	bl	8000230 <memchr>
 800dc28:	b108      	cbz	r0, 800dc2e <_printf_i+0x1f2>
 800dc2a:	1b40      	subs	r0, r0, r5
 800dc2c:	6060      	str	r0, [r4, #4]
 800dc2e:	6863      	ldr	r3, [r4, #4]
 800dc30:	6123      	str	r3, [r4, #16]
 800dc32:	2300      	movs	r3, #0
 800dc34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc38:	e7a8      	b.n	800db8c <_printf_i+0x150>
 800dc3a:	6923      	ldr	r3, [r4, #16]
 800dc3c:	462a      	mov	r2, r5
 800dc3e:	4649      	mov	r1, r9
 800dc40:	4640      	mov	r0, r8
 800dc42:	47d0      	blx	sl
 800dc44:	3001      	adds	r0, #1
 800dc46:	d0ab      	beq.n	800dba0 <_printf_i+0x164>
 800dc48:	6823      	ldr	r3, [r4, #0]
 800dc4a:	079b      	lsls	r3, r3, #30
 800dc4c:	d413      	bmi.n	800dc76 <_printf_i+0x23a>
 800dc4e:	68e0      	ldr	r0, [r4, #12]
 800dc50:	9b03      	ldr	r3, [sp, #12]
 800dc52:	4298      	cmp	r0, r3
 800dc54:	bfb8      	it	lt
 800dc56:	4618      	movlt	r0, r3
 800dc58:	e7a4      	b.n	800dba4 <_printf_i+0x168>
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	4632      	mov	r2, r6
 800dc5e:	4649      	mov	r1, r9
 800dc60:	4640      	mov	r0, r8
 800dc62:	47d0      	blx	sl
 800dc64:	3001      	adds	r0, #1
 800dc66:	d09b      	beq.n	800dba0 <_printf_i+0x164>
 800dc68:	3501      	adds	r5, #1
 800dc6a:	68e3      	ldr	r3, [r4, #12]
 800dc6c:	9903      	ldr	r1, [sp, #12]
 800dc6e:	1a5b      	subs	r3, r3, r1
 800dc70:	42ab      	cmp	r3, r5
 800dc72:	dcf2      	bgt.n	800dc5a <_printf_i+0x21e>
 800dc74:	e7eb      	b.n	800dc4e <_printf_i+0x212>
 800dc76:	2500      	movs	r5, #0
 800dc78:	f104 0619 	add.w	r6, r4, #25
 800dc7c:	e7f5      	b.n	800dc6a <_printf_i+0x22e>
 800dc7e:	bf00      	nop
 800dc80:	0800e189 	.word	0x0800e189
 800dc84:	0800e19a 	.word	0x0800e19a

0800dc88 <_sbrk_r>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	4d06      	ldr	r5, [pc, #24]	; (800dca4 <_sbrk_r+0x1c>)
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	4604      	mov	r4, r0
 800dc90:	4608      	mov	r0, r1
 800dc92:	602b      	str	r3, [r5, #0]
 800dc94:	f7fa fd5a 	bl	800874c <_sbrk>
 800dc98:	1c43      	adds	r3, r0, #1
 800dc9a:	d102      	bne.n	800dca2 <_sbrk_r+0x1a>
 800dc9c:	682b      	ldr	r3, [r5, #0]
 800dc9e:	b103      	cbz	r3, 800dca2 <_sbrk_r+0x1a>
 800dca0:	6023      	str	r3, [r4, #0]
 800dca2:	bd38      	pop	{r3, r4, r5, pc}
 800dca4:	20001bf4 	.word	0x20001bf4

0800dca8 <memmove>:
 800dca8:	4288      	cmp	r0, r1
 800dcaa:	b510      	push	{r4, lr}
 800dcac:	eb01 0402 	add.w	r4, r1, r2
 800dcb0:	d902      	bls.n	800dcb8 <memmove+0x10>
 800dcb2:	4284      	cmp	r4, r0
 800dcb4:	4623      	mov	r3, r4
 800dcb6:	d807      	bhi.n	800dcc8 <memmove+0x20>
 800dcb8:	1e43      	subs	r3, r0, #1
 800dcba:	42a1      	cmp	r1, r4
 800dcbc:	d008      	beq.n	800dcd0 <memmove+0x28>
 800dcbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcc6:	e7f8      	b.n	800dcba <memmove+0x12>
 800dcc8:	4402      	add	r2, r0
 800dcca:	4601      	mov	r1, r0
 800dccc:	428a      	cmp	r2, r1
 800dcce:	d100      	bne.n	800dcd2 <memmove+0x2a>
 800dcd0:	bd10      	pop	{r4, pc}
 800dcd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcda:	e7f7      	b.n	800dccc <memmove+0x24>

0800dcdc <__malloc_lock>:
 800dcdc:	4801      	ldr	r0, [pc, #4]	; (800dce4 <__malloc_lock+0x8>)
 800dcde:	f7ff bc4d 	b.w	800d57c <__retarget_lock_acquire_recursive>
 800dce2:	bf00      	nop
 800dce4:	20001be8 	.word	0x20001be8

0800dce8 <__malloc_unlock>:
 800dce8:	4801      	ldr	r0, [pc, #4]	; (800dcf0 <__malloc_unlock+0x8>)
 800dcea:	f7ff bc48 	b.w	800d57e <__retarget_lock_release_recursive>
 800dcee:	bf00      	nop
 800dcf0:	20001be8 	.word	0x20001be8

0800dcf4 <_free_r>:
 800dcf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcf6:	2900      	cmp	r1, #0
 800dcf8:	d044      	beq.n	800dd84 <_free_r+0x90>
 800dcfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcfe:	9001      	str	r0, [sp, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f1a1 0404 	sub.w	r4, r1, #4
 800dd06:	bfb8      	it	lt
 800dd08:	18e4      	addlt	r4, r4, r3
 800dd0a:	f7ff ffe7 	bl	800dcdc <__malloc_lock>
 800dd0e:	4a1e      	ldr	r2, [pc, #120]	; (800dd88 <_free_r+0x94>)
 800dd10:	9801      	ldr	r0, [sp, #4]
 800dd12:	6813      	ldr	r3, [r2, #0]
 800dd14:	b933      	cbnz	r3, 800dd24 <_free_r+0x30>
 800dd16:	6063      	str	r3, [r4, #4]
 800dd18:	6014      	str	r4, [r2, #0]
 800dd1a:	b003      	add	sp, #12
 800dd1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd20:	f7ff bfe2 	b.w	800dce8 <__malloc_unlock>
 800dd24:	42a3      	cmp	r3, r4
 800dd26:	d908      	bls.n	800dd3a <_free_r+0x46>
 800dd28:	6825      	ldr	r5, [r4, #0]
 800dd2a:	1961      	adds	r1, r4, r5
 800dd2c:	428b      	cmp	r3, r1
 800dd2e:	bf01      	itttt	eq
 800dd30:	6819      	ldreq	r1, [r3, #0]
 800dd32:	685b      	ldreq	r3, [r3, #4]
 800dd34:	1949      	addeq	r1, r1, r5
 800dd36:	6021      	streq	r1, [r4, #0]
 800dd38:	e7ed      	b.n	800dd16 <_free_r+0x22>
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	b10b      	cbz	r3, 800dd44 <_free_r+0x50>
 800dd40:	42a3      	cmp	r3, r4
 800dd42:	d9fa      	bls.n	800dd3a <_free_r+0x46>
 800dd44:	6811      	ldr	r1, [r2, #0]
 800dd46:	1855      	adds	r5, r2, r1
 800dd48:	42a5      	cmp	r5, r4
 800dd4a:	d10b      	bne.n	800dd64 <_free_r+0x70>
 800dd4c:	6824      	ldr	r4, [r4, #0]
 800dd4e:	4421      	add	r1, r4
 800dd50:	1854      	adds	r4, r2, r1
 800dd52:	42a3      	cmp	r3, r4
 800dd54:	6011      	str	r1, [r2, #0]
 800dd56:	d1e0      	bne.n	800dd1a <_free_r+0x26>
 800dd58:	681c      	ldr	r4, [r3, #0]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	6053      	str	r3, [r2, #4]
 800dd5e:	4421      	add	r1, r4
 800dd60:	6011      	str	r1, [r2, #0]
 800dd62:	e7da      	b.n	800dd1a <_free_r+0x26>
 800dd64:	d902      	bls.n	800dd6c <_free_r+0x78>
 800dd66:	230c      	movs	r3, #12
 800dd68:	6003      	str	r3, [r0, #0]
 800dd6a:	e7d6      	b.n	800dd1a <_free_r+0x26>
 800dd6c:	6825      	ldr	r5, [r4, #0]
 800dd6e:	1961      	adds	r1, r4, r5
 800dd70:	428b      	cmp	r3, r1
 800dd72:	bf04      	itt	eq
 800dd74:	6819      	ldreq	r1, [r3, #0]
 800dd76:	685b      	ldreq	r3, [r3, #4]
 800dd78:	6063      	str	r3, [r4, #4]
 800dd7a:	bf04      	itt	eq
 800dd7c:	1949      	addeq	r1, r1, r5
 800dd7e:	6021      	streq	r1, [r4, #0]
 800dd80:	6054      	str	r4, [r2, #4]
 800dd82:	e7ca      	b.n	800dd1a <_free_r+0x26>
 800dd84:	b003      	add	sp, #12
 800dd86:	bd30      	pop	{r4, r5, pc}
 800dd88:	20001bec 	.word	0x20001bec

0800dd8c <_realloc_r>:
 800dd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd90:	4680      	mov	r8, r0
 800dd92:	4614      	mov	r4, r2
 800dd94:	460e      	mov	r6, r1
 800dd96:	b921      	cbnz	r1, 800dda2 <_realloc_r+0x16>
 800dd98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd9c:	4611      	mov	r1, r2
 800dd9e:	f7ff bc0f 	b.w	800d5c0 <_malloc_r>
 800dda2:	b92a      	cbnz	r2, 800ddb0 <_realloc_r+0x24>
 800dda4:	f7ff ffa6 	bl	800dcf4 <_free_r>
 800dda8:	4625      	mov	r5, r4
 800ddaa:	4628      	mov	r0, r5
 800ddac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb0:	f000 f81b 	bl	800ddea <_malloc_usable_size_r>
 800ddb4:	4284      	cmp	r4, r0
 800ddb6:	4607      	mov	r7, r0
 800ddb8:	d802      	bhi.n	800ddc0 <_realloc_r+0x34>
 800ddba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddbe:	d812      	bhi.n	800dde6 <_realloc_r+0x5a>
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	4640      	mov	r0, r8
 800ddc4:	f7ff fbfc 	bl	800d5c0 <_malloc_r>
 800ddc8:	4605      	mov	r5, r0
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	d0ed      	beq.n	800ddaa <_realloc_r+0x1e>
 800ddce:	42bc      	cmp	r4, r7
 800ddd0:	4622      	mov	r2, r4
 800ddd2:	4631      	mov	r1, r6
 800ddd4:	bf28      	it	cs
 800ddd6:	463a      	movcs	r2, r7
 800ddd8:	f7ff fb5e 	bl	800d498 <memcpy>
 800dddc:	4631      	mov	r1, r6
 800ddde:	4640      	mov	r0, r8
 800dde0:	f7ff ff88 	bl	800dcf4 <_free_r>
 800dde4:	e7e1      	b.n	800ddaa <_realloc_r+0x1e>
 800dde6:	4635      	mov	r5, r6
 800dde8:	e7df      	b.n	800ddaa <_realloc_r+0x1e>

0800ddea <_malloc_usable_size_r>:
 800ddea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddee:	1f18      	subs	r0, r3, #4
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	bfbc      	itt	lt
 800ddf4:	580b      	ldrlt	r3, [r1, r0]
 800ddf6:	18c0      	addlt	r0, r0, r3
 800ddf8:	4770      	bx	lr
	...

0800ddfc <_init>:
 800ddfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddfe:	bf00      	nop
 800de00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de02:	bc08      	pop	{r3}
 800de04:	469e      	mov	lr, r3
 800de06:	4770      	bx	lr

0800de08 <_fini>:
 800de08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de0a:	bf00      	nop
 800de0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de0e:	bc08      	pop	{r3}
 800de10:	469e      	mov	lr, r3
 800de12:	4770      	bx	lr
