
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5bc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  0800c77c  0800c77c  0001c77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cac0  0800cac0  000203c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cac0  0800cac0  0001cac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cac8  0800cac8  000203c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cac8  0800cac8  0001cac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cacc  0800cacc  0001cacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  0800cad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  200003c8  0800ce98  000203c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c3c  0800ce98  00020c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020dab  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003386  00000000  00000000  000411a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  00044530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001780  00000000  00000000  00045df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d681  00000000  00000000  00047578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d3b2  00000000  00000000  00074bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114827  00000000  00000000  00091fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a67d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007044  00000000  00000000  001a6824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200003c8 	.word	0x200003c8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c764 	.word	0x0800c764

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200003cc 	.word	0x200003cc
 80001fc:	0800c764 	.word	0x0800c764

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005da:	2300      	movs	r3, #0
 80005dc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005de:	2003      	movs	r0, #3
 80005e0:	f000 f960 	bl	80008a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 f80d 	bl	8000604 <HAL_InitTick>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d002      	beq.n	80005f6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	e001      	b.n	80005fa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005f6:	f006 fb9d 	bl	8006d34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_InitTick+0x6c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d023      	beq.n	8000660 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <HAL_InitTick+0x70>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_InitTick+0x6c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000626:	fbb3 f3f1 	udiv	r3, r3, r1
 800062a:	fbb2 f3f3 	udiv	r3, r2, r3
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f96d 	bl	800090e <HAL_SYSTICK_Config>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10f      	bne.n	800065a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d809      	bhi.n	8000654 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295
 8000648:	f000 f937 	bl	80008ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800064c:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <HAL_InitTick+0x74>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	e007      	b.n	8000664 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000654:	2301      	movs	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	e004      	b.n	8000664 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	e001      	b.n	8000664 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000004 	.word	0x20000004
 8000674:	200000a4 	.word	0x200000a4
 8000678:	20000000 	.word	0x20000000

0800067c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x20>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_IncTick+0x24>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <HAL_IncTick+0x24>)
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000004 	.word	0x20000004
 80006a0:	200003e4 	.word	0x200003e4

080006a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return uwTick;
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <HAL_GetTick+0x14>)
 80006aa:	681b      	ldr	r3, [r3, #0]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	200003e4 	.word	0x200003e4

080006bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c4:	f7ff ffee 	bl	80006a4 <HAL_GetTick>
 80006c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d4:	d005      	beq.n	80006e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_Delay+0x44>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4413      	add	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006e2:	bf00      	nop
 80006e4:	f7ff ffde 	bl	80006a4 <HAL_GetTick>
 80006e8:	4602      	mov	r2, r0
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d8f7      	bhi.n	80006e4 <HAL_Delay+0x28>
  {
  }
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000004 	.word	0x20000004

08000704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800072c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000736:	4a04      	ldr	r2, [pc, #16]	; (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	60d3      	str	r3, [r2, #12]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <__NVIC_GetPriorityGrouping+0x18>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	f003 0307 	and.w	r3, r3, #7
}
 800075a:	4618      	mov	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	2b00      	cmp	r3, #0
 8000778:	db0b      	blt.n	8000792 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	f003 021f 	and.w	r2, r3, #31
 8000780:	4907      	ldr	r1, [pc, #28]	; (80007a0 <__NVIC_EnableIRQ+0x38>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	095b      	lsrs	r3, r3, #5
 8000788:	2001      	movs	r0, #1
 800078a:	fa00 f202 	lsl.w	r2, r0, r2
 800078e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000e100 	.word	0xe000e100

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	; (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	; (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
         );
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	; 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000870:	d301      	bcc.n	8000876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000872:	2301      	movs	r3, #1
 8000874:	e00f      	b.n	8000896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <SysTick_Config+0x40>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087e:	210f      	movs	r1, #15
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f7ff ff8e 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <SysTick_Config+0x40>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <SysTick_Config+0x40>)
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff29 	bl	8000704 <__NVIC_SetPriorityGrouping>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008cc:	f7ff ff3e 	bl	800074c <__NVIC_GetPriorityGrouping>
 80008d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff8e 	bl	80007f8 <NVIC_EncodePriority>
 80008dc:	4602      	mov	r2, r0
 80008de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff5d 	bl	80007a4 <__NVIC_SetPriority>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff31 	bl	8000768 <__NVIC_EnableIRQ>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ffa2 	bl	8000860 <SysTick_Config>
 800091c:	4603      	mov	r3, r0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e08d      	b.n	8000a56 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <HAL_DMA_Init+0x138>)
 8000942:	429a      	cmp	r2, r3
 8000944:	d80f      	bhi.n	8000966 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	4b45      	ldr	r3, [pc, #276]	; (8000a64 <HAL_DMA_Init+0x13c>)
 800094e:	4413      	add	r3, r2
 8000950:	4a45      	ldr	r2, [pc, #276]	; (8000a68 <HAL_DMA_Init+0x140>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	091b      	lsrs	r3, r3, #4
 8000958:	009a      	lsls	r2, r3, #2
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a42      	ldr	r2, [pc, #264]	; (8000a6c <HAL_DMA_Init+0x144>)
 8000962:	641a      	str	r2, [r3, #64]	; 0x40
 8000964:	e00e      	b.n	8000984 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b40      	ldr	r3, [pc, #256]	; (8000a70 <HAL_DMA_Init+0x148>)
 800096e:	4413      	add	r3, r2
 8000970:	4a3d      	ldr	r2, [pc, #244]	; (8000a68 <HAL_DMA_Init+0x140>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	009a      	lsls	r2, r3, #2
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a3c      	ldr	r2, [pc, #240]	; (8000a74 <HAL_DMA_Init+0x14c>)
 8000982:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2202      	movs	r2, #2
 8000988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800099a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800099e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80009a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a1b      	ldr	r3, [r3, #32]
 80009c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 fa72 	bl	8000ec0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009e4:	d102      	bne.n	80009ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685a      	ldr	r2, [r3, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000a00:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d010      	beq.n	8000a2c <HAL_DMA_Init+0x104>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d80c      	bhi.n	8000a2c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 fa92 	bl	8000f3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	e008      	b.n	8000a3e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40020407 	.word	0x40020407
 8000a64:	bffdfff8 	.word	0xbffdfff8
 8000a68:	cccccccd 	.word	0xcccccccd
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	bffdfbf8 	.word	0xbffdfbf8
 8000a74:	40020400 	.word	0x40020400

08000a78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
 8000a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d101      	bne.n	8000a98 <HAL_DMA_Start_IT+0x20>
 8000a94:	2302      	movs	r3, #2
 8000a96:	e066      	b.n	8000b66 <HAL_DMA_Start_IT+0xee>
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d155      	bne.n	8000b58 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2202      	movs	r2, #2
 8000ab0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 0201 	bic.w	r2, r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	68b9      	ldr	r1, [r7, #8]
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f000 f9b6 	bl	8000e42 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d008      	beq.n	8000af0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f042 020e 	orr.w	r2, r2, #14
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e00f      	b.n	8000b10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f022 0204 	bic.w	r2, r2, #4
 8000afe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f042 020a 	orr.w	r2, r2, #10
 8000b0e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d007      	beq.n	8000b2e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b2c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d007      	beq.n	8000b46 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b44:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f042 0201 	orr.w	r2, r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	e005      	b.n	8000b64 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b60:	2302      	movs	r3, #2
 8000b62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b085      	sub	sp, #20
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d008      	beq.n	8000b98 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2204      	movs	r2, #4
 8000b8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e040      	b.n	8000c1a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f022 020e 	bic.w	r2, r2, #14
 8000ba6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bb6:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f022 0201 	bic.w	r2, r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bcc:	f003 021c 	and.w	r2, r3, #28
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bda:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000be4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00c      	beq.n	8000c08 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bfc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000c06:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b084      	sub	sp, #16
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d005      	beq.n	8000c4a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2204      	movs	r2, #4
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e047      	b.n	8000cda <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 020e 	bic.w	r2, r2, #14
 8000c58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 0201 	bic.w	r2, r2, #1
 8000c68:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f003 021c 	and.w	r2, r3, #28
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	2101      	movs	r1, #1
 8000c88:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000c96:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00c      	beq.n	8000cba <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000caa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000cb8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	4798      	blx	r3
    }
  }
  return status;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d00:	f003 031c 	and.w	r3, r3, #28
 8000d04:	2204      	movs	r2, #4
 8000d06:	409a      	lsls	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d026      	beq.n	8000d5e <HAL_DMA_IRQHandler+0x7a>
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d021      	beq.n	8000d5e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0320 	and.w	r3, r3, #32
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d107      	bne.n	8000d38 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0204 	bic.w	r2, r2, #4
 8000d36:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3c:	f003 021c 	and.w	r2, r3, #28
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	2104      	movs	r1, #4
 8000d46:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d071      	beq.n	8000e38 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000d5c:	e06c      	b.n	8000e38 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f003 031c 	and.w	r3, r3, #28
 8000d66:	2202      	movs	r2, #2
 8000d68:	409a      	lsls	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d02e      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0xec>
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d029      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0320 	and.w	r3, r3, #32
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10b      	bne.n	8000da2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f022 020a 	bic.w	r2, r2, #10
 8000d98:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f003 021c 	and.w	r2, r3, #28
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	2102      	movs	r1, #2
 8000db0:	fa01 f202 	lsl.w	r2, r1, r2
 8000db4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d038      	beq.n	8000e38 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000dce:	e033      	b.n	8000e38 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	f003 031c 	and.w	r3, r3, #28
 8000dd8:	2208      	movs	r2, #8
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4013      	ands	r3, r2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d02a      	beq.n	8000e3a <HAL_DMA_IRQHandler+0x156>
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d025      	beq.n	8000e3a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f022 020e 	bic.w	r2, r2, #14
 8000dfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f003 021c 	and.w	r2, r3, #28
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d004      	beq.n	8000e3a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
}
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e58:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d004      	beq.n	8000e6c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e6a:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e70:	f003 021c 	and.w	r2, r3, #28
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	2101      	movs	r1, #1
 8000e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2b10      	cmp	r3, #16
 8000e8e:	d108      	bne.n	8000ea2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68ba      	ldr	r2, [r7, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ea0:	e007      	b.n	8000eb2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	60da      	str	r2, [r3, #12]
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d80a      	bhi.n	8000eea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ee0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6493      	str	r3, [r2, #72]	; 0x48
 8000ee8:	e007      	b.n	8000efa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	009a      	lsls	r2, r3, #2
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000ef4:	4413      	add	r3, r2
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	3b08      	subs	r3, #8
 8000f02:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8000f10:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f003 031f 	and.w	r3, r3, #31
 8000f18:	2201      	movs	r2, #1
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	40020407 	.word	0x40020407
 8000f30:	4002081c 	.word	0x4002081c
 8000f34:	cccccccd 	.word	0xcccccccd
 8000f38:	40020880 	.word	0x40020880

08000f3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000f50:	4413      	add	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	461a      	mov	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000f5e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2201      	movs	r2, #1
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	1000823f 	.word	0x1000823f
 8000f80:	40020940 	.word	0x40020940

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f92:	e166      	b.n	8001262 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	2101      	movs	r1, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8158 	beq.w	800125c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d005      	beq.n	8000fc4 <HAL_GPIO_Init+0x40>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d130      	bne.n	8001026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	f003 0201 	and.w	r2, r3, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b03      	cmp	r3, #3
 8001030:	d017      	beq.n	8001062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d123      	bne.n	80010b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	6939      	ldr	r1, [r7, #16]
 80010b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0203 	and.w	r2, r3, #3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 80b2 	beq.w	800125c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f8:	4b61      	ldr	r3, [pc, #388]	; (8001280 <HAL_GPIO_Init+0x2fc>)
 80010fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fc:	4a60      	ldr	r2, [pc, #384]	; (8001280 <HAL_GPIO_Init+0x2fc>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6613      	str	r3, [r2, #96]	; 0x60
 8001104:	4b5e      	ldr	r3, [pc, #376]	; (8001280 <HAL_GPIO_Init+0x2fc>)
 8001106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001110:	4a5c      	ldr	r2, [pc, #368]	; (8001284 <HAL_GPIO_Init+0x300>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800113a:	d02b      	beq.n	8001194 <HAL_GPIO_Init+0x210>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_GPIO_Init+0x304>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d025      	beq.n	8001190 <HAL_GPIO_Init+0x20c>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a51      	ldr	r2, [pc, #324]	; (800128c <HAL_GPIO_Init+0x308>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d01f      	beq.n	800118c <HAL_GPIO_Init+0x208>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a50      	ldr	r2, [pc, #320]	; (8001290 <HAL_GPIO_Init+0x30c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d019      	beq.n	8001188 <HAL_GPIO_Init+0x204>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a4f      	ldr	r2, [pc, #316]	; (8001294 <HAL_GPIO_Init+0x310>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d013      	beq.n	8001184 <HAL_GPIO_Init+0x200>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a4e      	ldr	r2, [pc, #312]	; (8001298 <HAL_GPIO_Init+0x314>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d00d      	beq.n	8001180 <HAL_GPIO_Init+0x1fc>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a4d      	ldr	r2, [pc, #308]	; (800129c <HAL_GPIO_Init+0x318>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d007      	beq.n	800117c <HAL_GPIO_Init+0x1f8>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a4c      	ldr	r2, [pc, #304]	; (80012a0 <HAL_GPIO_Init+0x31c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d101      	bne.n	8001178 <HAL_GPIO_Init+0x1f4>
 8001174:	2307      	movs	r3, #7
 8001176:	e00e      	b.n	8001196 <HAL_GPIO_Init+0x212>
 8001178:	2308      	movs	r3, #8
 800117a:	e00c      	b.n	8001196 <HAL_GPIO_Init+0x212>
 800117c:	2306      	movs	r3, #6
 800117e:	e00a      	b.n	8001196 <HAL_GPIO_Init+0x212>
 8001180:	2305      	movs	r3, #5
 8001182:	e008      	b.n	8001196 <HAL_GPIO_Init+0x212>
 8001184:	2304      	movs	r3, #4
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x212>
 8001188:	2303      	movs	r3, #3
 800118a:	e004      	b.n	8001196 <HAL_GPIO_Init+0x212>
 800118c:	2302      	movs	r3, #2
 800118e:	e002      	b.n	8001196 <HAL_GPIO_Init+0x212>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <HAL_GPIO_Init+0x212>
 8001194:	2300      	movs	r3, #0
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	f002 0203 	and.w	r2, r2, #3
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	4093      	lsls	r3, r2
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a6:	4937      	ldr	r1, [pc, #220]	; (8001284 <HAL_GPIO_Init+0x300>)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b4:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_GPIO_Init+0x320>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011d8:	4a32      	ldr	r2, [pc, #200]	; (80012a4 <HAL_GPIO_Init+0x320>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <HAL_GPIO_Init+0x320>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001202:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <HAL_GPIO_Init+0x320>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_GPIO_Init+0x320>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800122c:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <HAL_GPIO_Init+0x320>)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_GPIO_Init+0x320>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001256:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <HAL_GPIO_Init+0x320>)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa22 f303 	lsr.w	r3, r2, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	f47f ae91 	bne.w	8000f94 <HAL_GPIO_Init+0x10>
  }
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000
 8001288:	48000400 	.word	0x48000400
 800128c:	48000800 	.word	0x48000800
 8001290:	48000c00 	.word	0x48000c00
 8001294:	48001000 	.word	0x48001000
 8001298:	48001400 	.word	0x48001400
 800129c:	48001800 	.word	0x48001800
 80012a0:	48001c00 	.word	0x48001c00
 80012a4:	40010400 	.word	0x40010400

080012a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e001      	b.n	80012ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
 80012e4:	4613      	mov	r3, r2
 80012e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e8:	787b      	ldrb	r3, [r7, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	4618      	mov	r0, r3
 8001328:	f005 fc8c 	bl	8006c44 <HAL_GPIO_EXTI_Callback>
  }
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e081      	b.n	800144e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f005 fd0c 	bl	8006d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001388:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001398:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d107      	bne.n	80013b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	e006      	b.n	80013c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d104      	bne.n	80013d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69d9      	ldr	r1, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2220      	movs	r2, #32
 800143a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af02      	add	r7, sp, #8
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	461a      	mov	r2, r3
 8001464:	460b      	mov	r3, r1
 8001466:	817b      	strh	r3, [r7, #10]
 8001468:	4613      	mov	r3, r2
 800146a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b20      	cmp	r3, #32
 8001476:	f040 80da 	bne.w	800162e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_I2C_Master_Transmit+0x30>
 8001484:	2302      	movs	r3, #2
 8001486:	e0d3      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001490:	f7ff f908 	bl	80006a4 <HAL_GetTick>
 8001494:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2319      	movs	r3, #25
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 f9e6 	bl	8001874 <I2C_WaitOnFlagUntilTimeout>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0be      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2221      	movs	r2, #33	; 0x21
 80014b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2210      	movs	r2, #16
 80014be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	893a      	ldrh	r2, [r7, #8]
 80014d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014de:	b29b      	uxth	r3, r3
 80014e0:	2bff      	cmp	r3, #255	; 0xff
 80014e2:	d90e      	bls.n	8001502 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	22ff      	movs	r2, #255	; 0xff
 80014e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	8979      	ldrh	r1, [r7, #10]
 80014f2:	4b51      	ldr	r3, [pc, #324]	; (8001638 <HAL_I2C_Master_Transmit+0x1e0>)
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 fbdc 	bl	8001cb8 <I2C_TransferConfig>
 8001500:	e06c      	b.n	80015dc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001510:	b2da      	uxtb	r2, r3
 8001512:	8979      	ldrh	r1, [r7, #10]
 8001514:	4b48      	ldr	r3, [pc, #288]	; (8001638 <HAL_I2C_Master_Transmit+0x1e0>)
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 fbcb 	bl	8001cb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001522:	e05b      	b.n	80015dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	6a39      	ldr	r1, [r7, #32]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f9e3 	bl	80018f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e07b      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b01      	subs	r3, #1
 8001556:	b29a      	uxth	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001560:	3b01      	subs	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d034      	beq.n	80015dc <HAL_I2C_Master_Transmit+0x184>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001576:	2b00      	cmp	r3, #0
 8001578:	d130      	bne.n	80015dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	2200      	movs	r2, #0
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 f975 	bl	8001874 <I2C_WaitOnFlagUntilTimeout>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e04d      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	2bff      	cmp	r3, #255	; 0xff
 800159c:	d90e      	bls.n	80015bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	22ff      	movs	r2, #255	; 0xff
 80015a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	8979      	ldrh	r1, [r7, #10]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 fb7f 	bl	8001cb8 <I2C_TransferConfig>
 80015ba:	e00f      	b.n	80015dc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	8979      	ldrh	r1, [r7, #10]
 80015ce:	2300      	movs	r3, #0
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fb6e 	bl	8001cb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d19e      	bne.n	8001524 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	6a39      	ldr	r1, [r7, #32]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 f9c2 	bl	8001974 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e01a      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2220      	movs	r2, #32
 8001600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_I2C_Master_Transmit+0x1e4>)
 800160e:	400b      	ands	r3, r1
 8001610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800162e:	2302      	movs	r3, #2
  }
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	80002000 	.word	0x80002000
 800163c:	fe00e800 	.word	0xfe00e800

08001640 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	460b      	mov	r3, r1
 800164e:	817b      	strh	r3, [r7, #10]
 8001650:	4613      	mov	r3, r2
 8001652:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b20      	cmp	r3, #32
 800165e:	f040 80db 	bne.w	8001818 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_I2C_Master_Receive+0x30>
 800166c:	2302      	movs	r3, #2
 800166e:	e0d4      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001678:	f7ff f814 	bl	80006a4 <HAL_GetTick>
 800167c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2319      	movs	r3, #25
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f8f2 	bl	8001874 <I2C_WaitOnFlagUntilTimeout>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0bf      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2222      	movs	r2, #34	; 0x22
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2210      	movs	r2, #16
 80016a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	893a      	ldrh	r2, [r7, #8]
 80016ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2bff      	cmp	r3, #255	; 0xff
 80016ca:	d90e      	bls.n	80016ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	22ff      	movs	r2, #255	; 0xff
 80016d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	8979      	ldrh	r1, [r7, #10]
 80016da:	4b52      	ldr	r3, [pc, #328]	; (8001824 <HAL_I2C_Master_Receive+0x1e4>)
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fae8 	bl	8001cb8 <I2C_TransferConfig>
 80016e8:	e06d      	b.n	80017c6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	8979      	ldrh	r1, [r7, #10]
 80016fc:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_I2C_Master_Receive+0x1e4>)
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 fad7 	bl	8001cb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800170a:	e05c      	b.n	80017c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	6a39      	ldr	r1, [r7, #32]
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 f96b 	bl	80019ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e07c      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d034      	beq.n	80017c6 <HAL_I2C_Master_Receive+0x186>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	d130      	bne.n	80017c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	2200      	movs	r2, #0
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f880 	bl	8001874 <I2C_WaitOnFlagUntilTimeout>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e04d      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	2bff      	cmp	r3, #255	; 0xff
 8001786:	d90e      	bls.n	80017a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	22ff      	movs	r2, #255	; 0xff
 800178c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	b2da      	uxtb	r2, r3
 8001794:	8979      	ldrh	r1, [r7, #10]
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 fa8a 	bl	8001cb8 <I2C_TransferConfig>
 80017a4:	e00f      	b.n	80017c6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	8979      	ldrh	r1, [r7, #10]
 80017b8:	2300      	movs	r3, #0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 fa79 	bl	8001cb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d19d      	bne.n	800170c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	6a39      	ldr	r1, [r7, #32]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 f8cd 	bl	8001974 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01a      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2220      	movs	r2, #32
 80017ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6859      	ldr	r1, [r3, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_I2C_Master_Receive+0x1e8>)
 80017f8:	400b      	ands	r3, r1
 80017fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001818:	2302      	movs	r3, #2
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	80002400 	.word	0x80002400
 8001828:	fe00e800 	.word	0xfe00e800

0800182c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b02      	cmp	r3, #2
 8001840:	d103      	bne.n	800184a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b01      	cmp	r3, #1
 8001856:	d007      	beq.n	8001868 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699a      	ldr	r2, [r3, #24]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	619a      	str	r2, [r3, #24]
  }
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	4613      	mov	r3, r2
 8001882:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001884:	e022      	b.n	80018cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d01e      	beq.n	80018cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188e:	f7fe ff09 	bl	80006a4 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d302      	bcc.n	80018a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d113      	bne.n	80018cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	f043 0220 	orr.w	r2, r3, #32
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e00f      	b.n	80018ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	4013      	ands	r3, r2
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	429a      	cmp	r2, r3
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d0cd      	beq.n	8001886 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001900:	e02c      	b.n	800195c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f8ea 	bl	8001ae0 <I2C_IsErrorOccurred>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e02a      	b.n	800196c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d01e      	beq.n	800195c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800191e:	f7fe fec1 	bl	80006a4 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	429a      	cmp	r2, r3
 800192c:	d302      	bcc.n	8001934 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d113      	bne.n	800195c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f043 0220 	orr.w	r2, r3, #32
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2220      	movs	r2, #32
 8001944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e007      	b.n	800196c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d1cb      	bne.n	8001902 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001980:	e028      	b.n	80019d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f8aa 	bl	8001ae0 <I2C_IsErrorOccurred>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e026      	b.n	80019e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001996:	f7fe fe85 	bl	80006a4 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d302      	bcc.n	80019ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d113      	bne.n	80019d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	f043 0220 	orr.w	r2, r3, #32
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2220      	movs	r2, #32
 80019bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e007      	b.n	80019e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b20      	cmp	r3, #32
 80019e0:	d1cf      	bne.n	8001982 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019f8:	e064      	b.n	8001ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f86e 	bl	8001ae0 <I2C_IsErrorOccurred>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e062      	b.n	8001ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d138      	bne.n	8001a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d105      	bne.n	8001a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e04e      	b.n	8001ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d107      	bne.n	8001a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2210      	movs	r2, #16
 8001a4a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
 8001a52:	e002      	b.n	8001a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001a6e:	400b      	ands	r3, r1
 8001a70:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2220      	movs	r2, #32
 8001a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e022      	b.n	8001ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8e:	f7fe fe09 	bl	80006a4 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d302      	bcc.n	8001aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10f      	bne.n	8001ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f043 0220 	orr.w	r2, r3, #32
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e007      	b.n	8001ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d193      	bne.n	80019fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	fe00e800 	.word	0xfe00e800

08001ae0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d075      	beq.n	8001bf8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2210      	movs	r2, #16
 8001b12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b14:	e056      	b.n	8001bc4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d052      	beq.n	8001bc4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b1e:	f7fe fdc1 	bl	80006a4 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d302      	bcc.n	8001b34 <I2C_IsErrorOccurred+0x54>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d147      	bne.n	8001bc4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b56:	d12e      	bne.n	8001bb6 <I2C_IsErrorOccurred+0xd6>
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b5e:	d02a      	beq.n	8001bb6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001b60:	7cfb      	ldrb	r3, [r7, #19]
 8001b62:	2b20      	cmp	r3, #32
 8001b64:	d027      	beq.n	8001bb6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b76:	f7fe fd95 	bl	80006a4 <HAL_GetTick>
 8001b7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b7c:	e01b      	b.n	8001bb6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b7e:	f7fe fd91 	bl	80006a4 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b19      	cmp	r3, #25
 8001b8a:	d914      	bls.n	8001bb6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	d1dc      	bne.n	8001b7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	d003      	beq.n	8001bda <I2C_IsErrorOccurred+0xfa>
 8001bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d09d      	beq.n	8001b16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d103      	bne.n	8001bea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2220      	movs	r2, #32
 8001be8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00b      	beq.n	8001c44 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	f043 0308 	orr.w	r3, r3, #8
 8001c32:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d01c      	beq.n	8001ca8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f7ff fddc 	bl	800182c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <I2C_IsErrorOccurred+0x1d4>)
 8001c80:	400b      	ands	r3, r1
 8001c82:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3728      	adds	r7, #40	; 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	fe00e800 	.word	0xfe00e800

08001cb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	817b      	strh	r3, [r7, #10]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cca:	897b      	ldrh	r3, [r7, #10]
 8001ccc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cd0:	7a7b      	ldrb	r3, [r7, #9]
 8001cd2:	041b      	lsls	r3, r3, #16
 8001cd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cd8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ce6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	0d5b      	lsrs	r3, r3, #21
 8001cf2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <I2C_TransferConfig+0x60>)
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	ea02 0103 	and.w	r1, r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	03ff63ff 	.word	0x03ff63ff

08001d1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b20      	cmp	r3, #32
 8001d30:	d138      	bne.n	8001da4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e032      	b.n	8001da6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2224      	movs	r2, #36	; 0x24
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6819      	ldr	r1, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
  }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b085      	sub	sp, #20
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	d139      	bne.n	8001e3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e033      	b.n	8001e3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2224      	movs	r2, #36	; 0x24
 8001de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e000      	b.n	8001e3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e3c:	2302      	movs	r3, #2
  }
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e50:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5c:	d102      	bne.n	8001e64 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e62:	e00b      	b.n	8001e7c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e72:	d102      	bne.n	8001e7a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e78:	e000      	b.n	8001e7c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001e7a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40007000 	.word	0x40007000

08001e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d141      	bne.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9a:	4b4b      	ldr	r3, [pc, #300]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea6:	d131      	bne.n	8001f0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ea8:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eae:	4a46      	ldr	r2, [pc, #280]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb8:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec0:	4a41      	ldr	r2, [pc, #260]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ec8:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2232      	movs	r2, #50	; 0x32
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	4a3f      	ldr	r2, [pc, #252]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed8:	0c9b      	lsrs	r3, r3, #18
 8001eda:	3301      	adds	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ede:	e002      	b.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee6:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef2:	d102      	bne.n	8001efa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f2      	bne.n	8001ee0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001efa:	4b33      	ldr	r3, [pc, #204]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f06:	d158      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e057      	b.n	8001fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f12:	4a2d      	ldr	r2, [pc, #180]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f1c:	e04d      	b.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f24:	d141      	bne.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f32:	d131      	bne.n	8001f98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f34:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f3a:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f44:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2232      	movs	r2, #50	; 0x32
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	0c9b      	lsrs	r3, r3, #18
 8001f66:	3301      	adds	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f6a:	e002      	b.n	8001f72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7e:	d102      	bne.n	8001f86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f2      	bne.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f92:	d112      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e011      	b.n	8001fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fa8:	e007      	b.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fb8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	200000a4 	.word	0x200000a4
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f000 bc08 	b.w	80027f8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe8:	4b96      	ldr	r3, [pc, #600]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ff2:	4b94      	ldr	r3, [pc, #592]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80e4 	beq.w	80021d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_RCC_OscConfig+0x4c>
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	2b0c      	cmp	r3, #12
 8002014:	f040 808b 	bne.w	800212e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b01      	cmp	r3, #1
 800201c:	f040 8087 	bne.w	800212e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002020:	4b88      	ldr	r3, [pc, #544]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_OscConfig+0x64>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e3df      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1a      	ldr	r2, [r3, #32]
 800203c:	4b81      	ldr	r3, [pc, #516]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_RCC_OscConfig+0x7e>
 8002048:	4b7e      	ldr	r3, [pc, #504]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002050:	e005      	b.n	800205e <HAL_RCC_OscConfig+0x8a>
 8002052:	4b7c      	ldr	r3, [pc, #496]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800205e:	4293      	cmp	r3, r2
 8002060:	d223      	bcs.n	80020aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fdcc 	bl	8002c04 <RCC_SetFlashLatencyFromMSIRange>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e3c0      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002076:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a72      	ldr	r2, [pc, #456]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b70      	ldr	r3, [pc, #448]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	496d      	ldr	r1, [pc, #436]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002094:	4b6b      	ldr	r3, [pc, #428]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	4968      	ldr	r1, [pc, #416]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
 80020a8:	e025      	b.n	80020f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020aa:	4b66      	ldr	r3, [pc, #408]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a65      	ldr	r2, [pc, #404]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b63      	ldr	r3, [pc, #396]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4960      	ldr	r1, [pc, #384]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c8:	4b5e      	ldr	r3, [pc, #376]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	495b      	ldr	r1, [pc, #364]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fd8c 	bl	8002c04 <RCC_SetFlashLatencyFromMSIRange>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e380      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020f6:	f000 fcc1 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b51      	ldr	r3, [pc, #324]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	4950      	ldr	r1, [pc, #320]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	4a4e      	ldr	r2, [pc, #312]	; (800224c <HAL_RCC_OscConfig+0x278>)
 8002114:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002116:	4b4e      	ldr	r3, [pc, #312]	; (8002250 <HAL_RCC_OscConfig+0x27c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa72 	bl	8000604 <HAL_InitTick>
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d052      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	e364      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d032      	beq.n	800219c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002136:	4b43      	ldr	r3, [pc, #268]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a42      	ldr	r2, [pc, #264]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002142:	f7fe faaf 	bl	80006a4 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800214a:	f7fe faab 	bl	80006a4 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e34d      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800215c:	4b39      	ldr	r3, [pc, #228]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002168:	4b36      	ldr	r3, [pc, #216]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a35      	ldr	r2, [pc, #212]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800216e:	f043 0308 	orr.w	r3, r3, #8
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b33      	ldr	r3, [pc, #204]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4930      	ldr	r1, [pc, #192]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002186:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	492b      	ldr	r1, [pc, #172]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
 800219a:	e01a      	b.n	80021d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a28      	ldr	r2, [pc, #160]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fa7c 	bl	80006a4 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b0:	f7fe fa78 	bl	80006a4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e31a      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1dc>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d073      	beq.n	80022c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_OscConfig+0x21c>
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d10e      	bne.n	8002208 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d10b      	bne.n	8002208 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d063      	beq.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d15f      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e2f7      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d106      	bne.n	8002220 <HAL_RCC_OscConfig+0x24c>
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e025      	b.n	800226c <HAL_RCC_OscConfig+0x298>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002228:	d114      	bne.n	8002254 <HAL_RCC_OscConfig+0x280>
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a02      	ldr	r2, [pc, #8]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e013      	b.n	800226c <HAL_RCC_OscConfig+0x298>
 8002244:	40021000 	.word	0x40021000
 8002248:	0800c8e0 	.word	0x0800c8e0
 800224c:	200000a4 	.word	0x200000a4
 8002250:	20000000 	.word	0x20000000
 8002254:	4ba0      	ldr	r3, [pc, #640]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a9f      	ldr	r2, [pc, #636]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b9d      	ldr	r3, [pc, #628]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a9c      	ldr	r2, [pc, #624]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7fe fa16 	bl	80006a4 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7fe fa12 	bl	80006a4 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e2b4      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228e:	4b92      	ldr	r3, [pc, #584]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x2a8>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe fa02 	bl	80006a4 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7fe f9fe 	bl	80006a4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e2a0      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b6:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x2d0>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d060      	beq.n	8002394 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_OscConfig+0x310>
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d119      	bne.n	8002312 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d116      	bne.n	8002312 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e4:	4b7c      	ldr	r3, [pc, #496]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_OscConfig+0x328>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e27d      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b76      	ldr	r3, [pc, #472]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	061b      	lsls	r3, r3, #24
 800230a:	4973      	ldr	r1, [pc, #460]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002310:	e040      	b.n	8002394 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d023      	beq.n	8002362 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800231a:	4b6f      	ldr	r3, [pc, #444]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6e      	ldr	r2, [pc, #440]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7fe f9bd 	bl	80006a4 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232e:	f7fe f9b9 	bl	80006a4 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e25b      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002340:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234c:	4b62      	ldr	r3, [pc, #392]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	061b      	lsls	r3, r3, #24
 800235a:	495f      	ldr	r1, [pc, #380]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
 8002360:	e018      	b.n	8002394 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002362:	4b5d      	ldr	r3, [pc, #372]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a5c      	ldr	r2, [pc, #368]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800236c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7fe f999 	bl	80006a4 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002376:	f7fe f995 	bl	80006a4 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e237      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002388:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d03c      	beq.n	800241a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a8:	4b4b      	ldr	r3, [pc, #300]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ae:	4a4a      	ldr	r2, [pc, #296]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe f974 	bl	80006a4 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7fe f970 	bl	80006a4 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e212      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023d2:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ef      	beq.n	80023c0 <HAL_RCC_OscConfig+0x3ec>
 80023e0:	e01b      	b.n	800241a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e2:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80023e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e8:	4a3b      	ldr	r2, [pc, #236]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f2:	f7fe f957 	bl	80006a4 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fa:	f7fe f953 	bl	80006a4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e1f5      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800240c:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 800240e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1ef      	bne.n	80023fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80a6 	beq.w	8002574 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800242c:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10d      	bne.n	8002454 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	4a26      	ldr	r2, [pc, #152]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 800243e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002442:	6593      	str	r3, [r2, #88]	; 0x58
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002450:	2301      	movs	r3, #1
 8002452:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002454:	4b21      	ldr	r3, [pc, #132]	; (80024dc <HAL_RCC_OscConfig+0x508>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d118      	bne.n	8002492 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <HAL_RCC_OscConfig+0x508>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_RCC_OscConfig+0x508>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246c:	f7fe f91a 	bl	80006a4 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002474:	f7fe f916 	bl	80006a4 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1b8      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_RCC_OscConfig+0x508>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <HAL_RCC_OscConfig+0x4d8>
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024aa:	e029      	b.n	8002500 <HAL_RCC_OscConfig+0x52c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d115      	bne.n	80024e0 <HAL_RCC_OscConfig+0x50c>
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ca:	4a03      	ldr	r2, [pc, #12]	; (80024d8 <HAL_RCC_OscConfig+0x504>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d4:	e014      	b.n	8002500 <HAL_RCC_OscConfig+0x52c>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40007000 	.word	0x40007000
 80024e0:	4b9d      	ldr	r3, [pc, #628]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	4a9c      	ldr	r2, [pc, #624]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f0:	4b99      	ldr	r3, [pc, #612]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	4a98      	ldr	r2, [pc, #608]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d016      	beq.n	8002536 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7fe f8cc 	bl	80006a4 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250e:	e00a      	b.n	8002526 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002510:	f7fe f8c8 	bl	80006a4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e168      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002526:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ed      	beq.n	8002510 <HAL_RCC_OscConfig+0x53c>
 8002534:	e015      	b.n	8002562 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002536:	f7fe f8b5 	bl	80006a4 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800253c:	e00a      	b.n	8002554 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7fe f8b1 	bl	80006a4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e151      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002554:	4b80      	ldr	r3, [pc, #512]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ed      	bne.n	800253e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002562:	7ffb      	ldrb	r3, [r7, #31]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002568:	4b7b      	ldr	r3, [pc, #492]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	4a7a      	ldr	r2, [pc, #488]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 800256e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002572:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d03c      	beq.n	80025fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002588:	4b73      	ldr	r3, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 800258a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800258e:	4a72      	ldr	r2, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7fe f884 	bl	80006a4 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a0:	f7fe f880 	bl	80006a4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e122      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025b2:	4b69      	ldr	r3, [pc, #420]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 80025b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ef      	beq.n	80025a0 <HAL_RCC_OscConfig+0x5cc>
 80025c0:	e01b      	b.n	80025fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025c2:	4b65      	ldr	r3, [pc, #404]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 80025c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025c8:	4a63      	ldr	r2, [pc, #396]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d2:	f7fe f867 	bl	80006a4 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025da:	f7fe f863 	bl	80006a4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e105      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025ec:	4b5a      	ldr	r3, [pc, #360]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 80025ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ef      	bne.n	80025da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80f9 	beq.w	80027f6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	2b02      	cmp	r3, #2
 800260a:	f040 80cf 	bne.w	80027ac <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800260e:	4b52      	ldr	r3, [pc, #328]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f003 0203 	and.w	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	429a      	cmp	r2, r3
 8002620:	d12c      	bne.n	800267c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	3b01      	subs	r3, #1
 800262e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d123      	bne.n	800267c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d11b      	bne.n	800267c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d113      	bne.n	800267c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	3b01      	subs	r3, #1
 8002662:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d109      	bne.n	800267c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	3b01      	subs	r3, #1
 8002676:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d071      	beq.n	8002760 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d068      	beq.n	8002754 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002682:	4b35      	ldr	r3, [pc, #212]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d105      	bne.n	800269a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800268e:	4b32      	ldr	r3, [pc, #200]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e0ac      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800269e:	4b2e      	ldr	r3, [pc, #184]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 80026a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026aa:	f7fd fffb 	bl	80006a4 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b2:	f7fd fff7 	bl	80006a4 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e099      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c4:	4b24      	ldr	r3, [pc, #144]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d0:	4b21      	ldr	r3, [pc, #132]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	4b21      	ldr	r3, [pc, #132]	; (800275c <HAL_RCC_OscConfig+0x788>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026e0:	3a01      	subs	r2, #1
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	4311      	orrs	r1, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026ea:	0212      	lsls	r2, r2, #8
 80026ec:	4311      	orrs	r1, r2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026f2:	0852      	lsrs	r2, r2, #1
 80026f4:	3a01      	subs	r2, #1
 80026f6:	0552      	lsls	r2, r2, #21
 80026f8:	4311      	orrs	r1, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026fe:	0852      	lsrs	r2, r2, #1
 8002700:	3a01      	subs	r2, #1
 8002702:	0652      	lsls	r2, r2, #25
 8002704:	4311      	orrs	r1, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800270a:	06d2      	lsls	r2, r2, #27
 800270c:	430a      	orrs	r2, r1
 800270e:	4912      	ldr	r1, [pc, #72]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 8002710:	4313      	orrs	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 800271a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800271e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 8002726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800272a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800272c:	f7fd ffba 	bl	80006a4 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7fd ffb6 	bl	80006a4 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e058      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <HAL_RCC_OscConfig+0x784>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002752:	e050      	b.n	80027f6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e04f      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
 8002758:	40021000 	.word	0x40021000
 800275c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_RCC_OscConfig+0x82c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d144      	bne.n	80027f6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_RCC_OscConfig+0x82c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a23      	ldr	r2, [pc, #140]	; (8002800 <HAL_RCC_OscConfig+0x82c>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002776:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002778:	4b21      	ldr	r3, [pc, #132]	; (8002800 <HAL_RCC_OscConfig+0x82c>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a20      	ldr	r2, [pc, #128]	; (8002800 <HAL_RCC_OscConfig+0x82c>)
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002782:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002784:	f7fd ff8e 	bl	80006a4 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7fd ff8a 	bl	80006a4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e02c      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_RCC_OscConfig+0x82c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x7b8>
 80027aa:	e024      	b.n	80027f6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d01f      	beq.n	80027f2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_RCC_OscConfig+0x82c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <HAL_RCC_OscConfig+0x82c>)
 80027b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fd ff71 	bl	80006a4 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fd ff6d 	bl	80006a4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e00f      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCC_OscConfig+0x82c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_RCC_OscConfig+0x82c>)
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	4905      	ldr	r1, [pc, #20]	; (8002800 <HAL_RCC_OscConfig+0x82c>)
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_OscConfig+0x830>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	60cb      	str	r3, [r1, #12]
 80027f0:	e001      	b.n	80027f6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	feeefffc 	.word	0xfeeefffc

08002808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e11d      	b.n	8002a5c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002820:	4b90      	ldr	r3, [pc, #576]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d910      	bls.n	8002850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b8d      	ldr	r3, [pc, #564]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 020f 	bic.w	r2, r3, #15
 8002836:	498b      	ldr	r1, [pc, #556]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b89      	ldr	r3, [pc, #548]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e105      	b.n	8002a5c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d010      	beq.n	800287e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	4b81      	ldr	r3, [pc, #516]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002868:	429a      	cmp	r2, r3
 800286a:	d908      	bls.n	800287e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286c:	4b7e      	ldr	r3, [pc, #504]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	497b      	ldr	r1, [pc, #492]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d079      	beq.n	800297e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d11e      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002892:	4b75      	ldr	r3, [pc, #468]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0dc      	b.n	8002a5c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80028a2:	f000 fa09 	bl	8002cb8 <RCC_GetSysClockFreqFromPLLSource>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4a70      	ldr	r2, [pc, #448]	; (8002a6c <HAL_RCC_ClockConfig+0x264>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d946      	bls.n	800293c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028ae:	4b6e      	ldr	r3, [pc, #440]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d140      	bne.n	800293c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028ba:	4b6b      	ldr	r3, [pc, #428]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028c2:	4a69      	ldr	r2, [pc, #420]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80028c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e035      	b.n	800293c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d8:	4b63      	ldr	r3, [pc, #396]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d115      	bne.n	8002910 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0b9      	b.n	8002a5c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f0:	4b5d      	ldr	r3, [pc, #372]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0ad      	b.n	8002a5c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002900:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0a5      	b.n	8002a5c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002910:	f000 f8b4 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002914:	4603      	mov	r3, r0
 8002916:	4a55      	ldr	r2, [pc, #340]	; (8002a6c <HAL_RCC_ClockConfig+0x264>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d90f      	bls.n	800293c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800291c:	4b52      	ldr	r3, [pc, #328]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002928:	4b4f      	ldr	r3, [pc, #316]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002930:	4a4d      	ldr	r2, [pc, #308]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 8002932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002936:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800293c:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 0203 	bic.w	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4947      	ldr	r1, [pc, #284]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294e:	f7fd fea9 	bl	80006a4 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002954:	e00a      	b.n	800296c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002956:	f7fd fea5 	bl	80006a4 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	; 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e077      	b.n	8002a5c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296c:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 020c 	and.w	r2, r3, #12
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	429a      	cmp	r2, r3
 800297c:	d1eb      	bne.n	8002956 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d105      	bne.n	8002990 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002984:	4b38      	ldr	r3, [pc, #224]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a37      	ldr	r2, [pc, #220]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 800298a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800298e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d010      	beq.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d208      	bcs.n	80029be <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ac:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	492b      	ldr	r1, [pc, #172]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029be:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d210      	bcs.n	80029ee <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 020f 	bic.w	r2, r3, #15
 80029d4:	4923      	ldr	r1, [pc, #140]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	4313      	orrs	r3, r2
 80029da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e036      	b.n	8002a5c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029fa:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4918      	ldr	r1, [pc, #96]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d009      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4910      	ldr	r1, [pc, #64]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a2c:	f000 f826 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	490c      	ldr	r1, [pc, #48]	; (8002a70 <HAL_RCC_ClockConfig+0x268>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_RCC_ClockConfig+0x26c>)
 8002a4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_RCC_ClockConfig+0x270>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fd fdd7 	bl	8000604 <HAL_InitTick>
 8002a56:	4603      	mov	r3, r0
 8002a58:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40022000 	.word	0x40022000
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	04c4b400 	.word	0x04c4b400
 8002a70:	0800c8e0 	.word	0x0800c8e0
 8002a74:	200000a4 	.word	0x200000a4
 8002a78:	20000000 	.word	0x20000000

08002a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a94:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d121      	bne.n	8002aee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d11e      	bne.n	8002aee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ab0:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002abc:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e005      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002acc:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ad8:	4a2b      	ldr	r2, [pc, #172]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10d      	bne.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d102      	bne.n	8002afa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	e004      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b00:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d134      	bne.n	8002b74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d003      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d003      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0xac>
 8002b20:	e005      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b24:	617b      	str	r3, [r7, #20]
      break;
 8002b26:	e005      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b2a:	617b      	str	r3, [r7, #20]
      break;
 8002b2c:	e002      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	617b      	str	r3, [r7, #20]
      break;
 8002b32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	3301      	adds	r3, #1
 8002b40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	fb03 f202 	mul.w	r2, r3, r2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	0e5b      	lsrs	r3, r3, #25
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	3301      	adds	r3, #1
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b74:	69bb      	ldr	r3, [r7, #24]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	0800c8f8 	.word	0x0800c8f8
 8002b8c:	00f42400 	.word	0x00f42400
 8002b90:	007a1200 	.word	0x007a1200

08002b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	200000a4 	.word	0x200000a4

08002bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bb0:	f7ff fff0 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4904      	ldr	r1, [pc, #16]	; (8002bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	0800c8f0 	.word	0x0800c8f0

08002bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bdc:	f7ff ffda 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002be0:	4602      	mov	r2, r0
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	0adb      	lsrs	r3, r3, #11
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	4904      	ldr	r1, [pc, #16]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bee:	5ccb      	ldrb	r3, [r1, r3]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	0800c8f0 	.word	0x0800c8f0

08002c04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c10:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c1c:	f7ff f916 	bl	8001e4c <HAL_PWREx_GetVoltageRange>
 8002c20:	6178      	str	r0, [r7, #20]
 8002c22:	e014      	b.n	8002c4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c3c:	f7ff f906 	bl	8001e4c <HAL_PWREx_GetVoltageRange>
 8002c40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c54:	d10b      	bne.n	8002c6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d913      	bls.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c60:	d902      	bls.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c62:	2302      	movs	r3, #2
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	e00d      	b.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c68:	2301      	movs	r3, #1
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	e00a      	b.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b7f      	cmp	r3, #127	; 0x7f
 8002c72:	d902      	bls.n	8002c7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c74:	2302      	movs	r3, #2
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	e004      	b.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b70      	cmp	r3, #112	; 0x70
 8002c7e:	d101      	bne.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c80:	2301      	movs	r3, #1
 8002c82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 020f 	bic.w	r2, r3, #15
 8002c8c:	4909      	ldr	r1, [pc, #36]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c94:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d001      	beq.n	8002ca6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40022000 	.word	0x40022000

08002cb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d00b      	beq.n	8002ce6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d825      	bhi.n	8002d20 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d008      	beq.n	8002cec <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d11f      	bne.n	8002d20 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ce2:	613b      	str	r3, [r7, #16]
    break;
 8002ce4:	e01f      	b.n	8002d26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002ce6:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002ce8:	613b      	str	r3, [r7, #16]
    break;
 8002cea:	e01c      	b.n	8002d26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cec:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e005      	b.n	8002d14 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002d14:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1c:	613b      	str	r3, [r7, #16]
    break;
 8002d1e:	e002      	b.n	8002d26 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
    break;
 8002d24:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	3301      	adds	r3, #1
 8002d32:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	fb03 f202 	mul.w	r2, r3, r2
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0e5b      	lsrs	r3, r3, #25
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	3301      	adds	r3, #1
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d66:	683b      	ldr	r3, [r7, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40021000 	.word	0x40021000
 8002d78:	00f42400 	.word	0x00f42400
 8002d7c:	007a1200 	.word	0x007a1200
 8002d80:	0800c8f8 	.word	0x0800c8f8

08002d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d90:	2300      	movs	r3, #0
 8002d92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d040      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d02a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002da8:	2b80      	cmp	r3, #128	; 0x80
 8002daa:	d825      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002dac:	2b60      	cmp	r3, #96	; 0x60
 8002dae:	d026      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002db0:	2b60      	cmp	r3, #96	; 0x60
 8002db2:	d821      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d006      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d81d      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002dc4:	e018      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dc6:	4b89      	ldr	r3, [pc, #548]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	4a88      	ldr	r2, [pc, #544]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dd2:	e015      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fb02 	bl	80033e4 <RCCEx_PLLSAI1_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002de4:	e00c      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3320      	adds	r3, #32
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fbed 	bl	80035cc <RCCEx_PLLSAI2_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002df6:	e003      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	74fb      	strb	r3, [r7, #19]
      break;
 8002dfc:	e000      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e06:	4b79      	ldr	r3, [pc, #484]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e0c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e14:	4975      	ldr	r1, [pc, #468]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e1c:	e001      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1e:	7cfb      	ldrb	r3, [r7, #19]
 8002e20:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d047      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e36:	d030      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3c:	d82a      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e42:	d02a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e48:	d824      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e54:	d81e      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5e:	d010      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e60:	e018      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e62:	4b62      	ldr	r3, [pc, #392]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4a61      	ldr	r2, [pc, #388]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e6e:	e015      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fab4 	bl	80033e4 <RCCEx_PLLSAI1_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e80:	e00c      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3320      	adds	r3, #32
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fb9f 	bl	80035cc <RCCEx_PLLSAI2_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e92:	e003      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	74fb      	strb	r3, [r7, #19]
      break;
 8002e98:	e000      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ea2:	4b52      	ldr	r3, [pc, #328]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ea4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	494e      	ldr	r1, [pc, #312]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002eb8:	e001      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eba:	7cfb      	ldrb	r3, [r7, #19]
 8002ebc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 809f 	beq.w	800300a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ed0:	4b46      	ldr	r3, [pc, #280]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	4b41      	ldr	r3, [pc, #260]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	4a40      	ldr	r2, [pc, #256]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef2:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efe:	2301      	movs	r3, #1
 8002f00:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f02:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a3a      	ldr	r2, [pc, #232]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f0e:	f7fd fbc9 	bl	80006a4 <HAL_GetTick>
 8002f12:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f14:	e009      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f16:	f7fd fbc5 	bl	80006a4 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d902      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	74fb      	strb	r3, [r7, #19]
        break;
 8002f28:	e005      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f2a:	4b31      	ldr	r3, [pc, #196]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ef      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d15b      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01f      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d019      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f5a:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f66:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f86:	4a19      	ldr	r2, [pc, #100]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d016      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fd fb84 	bl	80006a4 <HAL_GetTick>
 8002f9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fd fb80 	bl	80006a4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d902      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	74fb      	strb	r3, [r7, #19]
            break;
 8002fb6:	e006      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ec      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002fc6:	7cfb      	ldrb	r3, [r7, #19]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	4903      	ldr	r1, [pc, #12]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fe6:	7cfb      	ldrb	r3, [r7, #19]
 8002fe8:	74bb      	strb	r3, [r7, #18]
 8002fea:	e005      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff8:	7c7b      	ldrb	r3, [r7, #17]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d105      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffe:	4ba0      	ldr	r3, [pc, #640]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003002:	4a9f      	ldr	r2, [pc, #636]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003008:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003016:	4b9a      	ldr	r3, [pc, #616]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	f023 0203 	bic.w	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	4996      	ldr	r1, [pc, #600]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003038:	4b91      	ldr	r3, [pc, #580]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f023 020c 	bic.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	498e      	ldr	r1, [pc, #568]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800305a:	4b89      	ldr	r3, [pc, #548]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	4985      	ldr	r1, [pc, #532]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800307c:	4b80      	ldr	r3, [pc, #512]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	497d      	ldr	r1, [pc, #500]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800309e:	4b78      	ldr	r3, [pc, #480]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ac:	4974      	ldr	r1, [pc, #464]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030c0:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ce:	496c      	ldr	r1, [pc, #432]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030e2:	4b67      	ldr	r3, [pc, #412]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030f0:	4963      	ldr	r1, [pc, #396]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003104:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003112:	495b      	ldr	r1, [pc, #364]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003126:	4b56      	ldr	r3, [pc, #344]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	4952      	ldr	r1, [pc, #328]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003148:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	494a      	ldr	r1, [pc, #296]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800316a:	4b45      	ldr	r3, [pc, #276]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003178:	4941      	ldr	r1, [pc, #260]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800318c:	4b3c      	ldr	r3, [pc, #240]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003192:	f023 0203 	bic.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319a:	4939      	ldr	r1, [pc, #228]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d028      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ae:	4b34      	ldr	r3, [pc, #208]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031bc:	4930      	ldr	r1, [pc, #192]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031cc:	d106      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ce:	4b2c      	ldr	r3, [pc, #176]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031d8:	60d3      	str	r3, [r2, #12]
 80031da:	e011      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031e4:	d10c      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2101      	movs	r1, #1
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f8f9 	bl	80033e4 <RCCEx_PLLSAI1_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d04d      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003214:	d108      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003216:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003218:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800321c:	4a18      	ldr	r2, [pc, #96]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003222:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003226:	e012      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003228:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800322e:	4a14      	ldr	r2, [pc, #80]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003234:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003246:	490e      	ldr	r1, [pc, #56]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003256:	d106      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4a08      	ldr	r2, [pc, #32]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003262:	60d3      	str	r3, [r2, #12]
 8003264:	e020      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800326a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800326e:	d109      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4a02      	ldr	r2, [pc, #8]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327a:	60d3      	str	r3, [r2, #12]
 800327c:	e014      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800328c:	d10c      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	2101      	movs	r1, #1
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f8a5 	bl	80033e4 <RCCEx_PLLSAI1_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d028      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032b4:	4b4a      	ldr	r3, [pc, #296]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c2:	4947      	ldr	r1, [pc, #284]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d2:	d106      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d4:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a41      	ldr	r2, [pc, #260]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032de:	60d3      	str	r3, [r2, #12]
 80032e0:	e011      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ea:	d10c      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3304      	adds	r3, #4
 80032f0:	2101      	movs	r1, #1
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f876 	bl	80033e4 <RCCEx_PLLSAI1_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01e      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003312:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003322:	492f      	ldr	r1, [pc, #188]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003334:	d10c      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3304      	adds	r3, #4
 800333a:	2102      	movs	r1, #2
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f851 	bl	80033e4 <RCCEx_PLLSAI1_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00b      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800335c:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003362:	f023 0204 	bic.w	r2, r3, #4
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336c:	491c      	ldr	r1, [pc, #112]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00b      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003386:	f023 0218 	bic.w	r2, r3, #24
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	4913      	ldr	r1, [pc, #76]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d017      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b4:	490a      	ldr	r1, [pc, #40]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033c6:	d105      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000

080033e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033f2:	4b72      	ldr	r3, [pc, #456]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00e      	beq.n	800341c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033fe:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0203 	and.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d103      	bne.n	8003416 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
       ||
 8003412:	2b00      	cmp	r3, #0
 8003414:	d142      	bne.n	800349c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
 800341a:	e03f      	b.n	800349c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d018      	beq.n	8003456 <RCCEx_PLLSAI1_Config+0x72>
 8003424:	2b03      	cmp	r3, #3
 8003426:	d825      	bhi.n	8003474 <RCCEx_PLLSAI1_Config+0x90>
 8003428:	2b01      	cmp	r3, #1
 800342a:	d002      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0x4e>
 800342c:	2b02      	cmp	r3, #2
 800342e:	d009      	beq.n	8003444 <RCCEx_PLLSAI1_Config+0x60>
 8003430:	e020      	b.n	8003474 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003432:	4b62      	ldr	r3, [pc, #392]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11d      	bne.n	800347a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003442:	e01a      	b.n	800347a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003444:	4b5d      	ldr	r3, [pc, #372]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344c:	2b00      	cmp	r3, #0
 800344e:	d116      	bne.n	800347e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003454:	e013      	b.n	800347e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003456:	4b59      	ldr	r3, [pc, #356]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10f      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003472:	e006      	b.n	8003482 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      break;
 8003478:	e004      	b.n	8003484 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800347a:	bf00      	nop
 800347c:	e002      	b.n	8003484 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800347e:	bf00      	nop
 8003480:	e000      	b.n	8003484 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003482:	bf00      	nop
    }

    if(status == HAL_OK)
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800348a:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4949      	ldr	r1, [pc, #292]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003498:	4313      	orrs	r3, r2
 800349a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 8086 	bne.w	80035b0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034a4:	4b45      	ldr	r3, [pc, #276]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a44      	ldr	r2, [pc, #272]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80034aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b0:	f7fd f8f8 	bl	80006a4 <HAL_GetTick>
 80034b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b6:	e009      	b.n	80034cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b8:	f7fd f8f4 	bl	80006a4 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d902      	bls.n	80034cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	73fb      	strb	r3, [r7, #15]
        break;
 80034ca:	e005      	b.n	80034d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034cc:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ef      	bne.n	80034b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d168      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d113      	bne.n	800350c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e4:	4b35      	ldr	r3, [pc, #212]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	4b35      	ldr	r3, [pc, #212]	; (80035c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6892      	ldr	r2, [r2, #8]
 80034f0:	0211      	lsls	r1, r2, #8
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	06d2      	lsls	r2, r2, #27
 80034f8:	4311      	orrs	r1, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6852      	ldr	r2, [r2, #4]
 80034fe:	3a01      	subs	r2, #1
 8003500:	0112      	lsls	r2, r2, #4
 8003502:	430a      	orrs	r2, r1
 8003504:	492d      	ldr	r1, [pc, #180]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003506:	4313      	orrs	r3, r2
 8003508:	610b      	str	r3, [r1, #16]
 800350a:	e02d      	b.n	8003568 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d115      	bne.n	800353e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003512:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003518:	4013      	ands	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6892      	ldr	r2, [r2, #8]
 800351e:	0211      	lsls	r1, r2, #8
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6912      	ldr	r2, [r2, #16]
 8003524:	0852      	lsrs	r2, r2, #1
 8003526:	3a01      	subs	r2, #1
 8003528:	0552      	lsls	r2, r2, #21
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6852      	ldr	r2, [r2, #4]
 8003530:	3a01      	subs	r2, #1
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	430a      	orrs	r2, r1
 8003536:	4921      	ldr	r1, [pc, #132]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003538:	4313      	orrs	r3, r2
 800353a:	610b      	str	r3, [r1, #16]
 800353c:	e014      	b.n	8003568 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800353e:	4b1f      	ldr	r3, [pc, #124]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6892      	ldr	r2, [r2, #8]
 800354a:	0211      	lsls	r1, r2, #8
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6952      	ldr	r2, [r2, #20]
 8003550:	0852      	lsrs	r2, r2, #1
 8003552:	3a01      	subs	r2, #1
 8003554:	0652      	lsls	r2, r2, #25
 8003556:	4311      	orrs	r1, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6852      	ldr	r2, [r2, #4]
 800355c:	3a01      	subs	r2, #1
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	430a      	orrs	r2, r1
 8003562:	4916      	ldr	r1, [pc, #88]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003564:	4313      	orrs	r3, r2
 8003566:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a13      	ldr	r2, [pc, #76]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800356e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fd f896 	bl	80006a4 <HAL_GetTick>
 8003578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800357a:	e009      	b.n	8003590 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800357c:	f7fd f892 	bl	80006a4 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d902      	bls.n	8003590 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	73fb      	strb	r3, [r7, #15]
          break;
 800358e:	e005      	b.n	800359c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ef      	beq.n	800357c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	4904      	ldr	r1, [pc, #16]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	07ff800f 	.word	0x07ff800f
 80035c4:	ff9f800f 	.word	0xff9f800f
 80035c8:	f9ff800f 	.word	0xf9ff800f

080035cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035da:	4b72      	ldr	r3, [pc, #456]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00e      	beq.n	8003604 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035e6:	4b6f      	ldr	r3, [pc, #444]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0203 	and.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d103      	bne.n	80035fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
       ||
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d142      	bne.n	8003684 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	e03f      	b.n	8003684 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d018      	beq.n	800363e <RCCEx_PLLSAI2_Config+0x72>
 800360c:	2b03      	cmp	r3, #3
 800360e:	d825      	bhi.n	800365c <RCCEx_PLLSAI2_Config+0x90>
 8003610:	2b01      	cmp	r3, #1
 8003612:	d002      	beq.n	800361a <RCCEx_PLLSAI2_Config+0x4e>
 8003614:	2b02      	cmp	r3, #2
 8003616:	d009      	beq.n	800362c <RCCEx_PLLSAI2_Config+0x60>
 8003618:	e020      	b.n	800365c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800361a:	4b62      	ldr	r3, [pc, #392]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d11d      	bne.n	8003662 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362a:	e01a      	b.n	8003662 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800362c:	4b5d      	ldr	r3, [pc, #372]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003634:	2b00      	cmp	r3, #0
 8003636:	d116      	bne.n	8003666 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363c:	e013      	b.n	8003666 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800363e:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10f      	bne.n	800366a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800364a:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800365a:	e006      	b.n	800366a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	e004      	b.n	800366c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003662:	bf00      	nop
 8003664:	e002      	b.n	800366c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003666:	bf00      	nop
 8003668:	e000      	b.n	800366c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800366a:	bf00      	nop
    }

    if(status == HAL_OK)
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003672:	4b4c      	ldr	r3, [pc, #304]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4949      	ldr	r1, [pc, #292]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003680:	4313      	orrs	r3, r2
 8003682:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 8086 	bne.w	8003798 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800368c:	4b45      	ldr	r3, [pc, #276]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a44      	ldr	r2, [pc, #272]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003698:	f7fd f804 	bl	80006a4 <HAL_GetTick>
 800369c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800369e:	e009      	b.n	80036b4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036a0:	f7fd f800 	bl	80006a4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d902      	bls.n	80036b4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	73fb      	strb	r3, [r7, #15]
        break;
 80036b2:	e005      	b.n	80036c0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036b4:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ef      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d168      	bne.n	8003798 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d113      	bne.n	80036f4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6892      	ldr	r2, [r2, #8]
 80036d8:	0211      	lsls	r1, r2, #8
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68d2      	ldr	r2, [r2, #12]
 80036de:	06d2      	lsls	r2, r2, #27
 80036e0:	4311      	orrs	r1, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6852      	ldr	r2, [r2, #4]
 80036e6:	3a01      	subs	r2, #1
 80036e8:	0112      	lsls	r2, r2, #4
 80036ea:	430a      	orrs	r2, r1
 80036ec:	492d      	ldr	r1, [pc, #180]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	614b      	str	r3, [r1, #20]
 80036f2:	e02d      	b.n	8003750 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d115      	bne.n	8003726 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036fa:	4b2a      	ldr	r3, [pc, #168]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <RCCEx_PLLSAI2_Config+0x1e0>)
 8003700:	4013      	ands	r3, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6892      	ldr	r2, [r2, #8]
 8003706:	0211      	lsls	r1, r2, #8
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6912      	ldr	r2, [r2, #16]
 800370c:	0852      	lsrs	r2, r2, #1
 800370e:	3a01      	subs	r2, #1
 8003710:	0552      	lsls	r2, r2, #21
 8003712:	4311      	orrs	r1, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6852      	ldr	r2, [r2, #4]
 8003718:	3a01      	subs	r2, #1
 800371a:	0112      	lsls	r2, r2, #4
 800371c:	430a      	orrs	r2, r1
 800371e:	4921      	ldr	r1, [pc, #132]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003720:	4313      	orrs	r3, r2
 8003722:	614b      	str	r3, [r1, #20]
 8003724:	e014      	b.n	8003750 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003726:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800372c:	4013      	ands	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6892      	ldr	r2, [r2, #8]
 8003732:	0211      	lsls	r1, r2, #8
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6952      	ldr	r2, [r2, #20]
 8003738:	0852      	lsrs	r2, r2, #1
 800373a:	3a01      	subs	r2, #1
 800373c:	0652      	lsls	r2, r2, #25
 800373e:	4311      	orrs	r1, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6852      	ldr	r2, [r2, #4]
 8003744:	3a01      	subs	r2, #1
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	430a      	orrs	r2, r1
 800374a:	4916      	ldr	r1, [pc, #88]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800374c:	4313      	orrs	r3, r2
 800374e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003750:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a13      	ldr	r2, [pc, #76]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fc ffa2 	bl	80006a4 <HAL_GetTick>
 8003760:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003762:	e009      	b.n	8003778 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003764:	f7fc ff9e 	bl	80006a4 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d902      	bls.n	8003778 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	73fb      	strb	r3, [r7, #15]
          break;
 8003776:	e005      	b.n	8003784 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ef      	beq.n	8003764 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	4904      	ldr	r1, [pc, #16]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003794:	4313      	orrs	r3, r2
 8003796:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	07ff800f 	.word	0x07ff800f
 80037ac:	ff9f800f 	.word	0xff9f800f
 80037b0:	f9ff800f 	.word	0xf9ff800f

080037b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e049      	b.n	800385a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f003 fb2c 	bl	8006e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f000 fa50 	bl	8003c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b02      	cmp	r3, #2
 8003876:	d122      	bne.n	80038be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b02      	cmp	r3, #2
 8003884:	d11b      	bne.n	80038be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f06f 0202 	mvn.w	r2, #2
 800388e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f9d8 	bl	8003c5a <HAL_TIM_IC_CaptureCallback>
 80038aa:	e005      	b.n	80038b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f9ca 	bl	8003c46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f9db 	bl	8003c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d122      	bne.n	8003912 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d11b      	bne.n	8003912 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f06f 0204 	mvn.w	r2, #4
 80038e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f9ae 	bl	8003c5a <HAL_TIM_IC_CaptureCallback>
 80038fe:	e005      	b.n	800390c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f9a0 	bl	8003c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f9b1 	bl	8003c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b08      	cmp	r3, #8
 800391e:	d122      	bne.n	8003966 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b08      	cmp	r3, #8
 800392c:	d11b      	bne.n	8003966 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0208 	mvn.w	r2, #8
 8003936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2204      	movs	r2, #4
 800393c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f984 	bl	8003c5a <HAL_TIM_IC_CaptureCallback>
 8003952:	e005      	b.n	8003960 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f976 	bl	8003c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f987 	bl	8003c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b10      	cmp	r3, #16
 8003972:	d122      	bne.n	80039ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	2b10      	cmp	r3, #16
 8003980:	d11b      	bne.n	80039ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f06f 0210 	mvn.w	r2, #16
 800398a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2208      	movs	r2, #8
 8003990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f95a 	bl	8003c5a <HAL_TIM_IC_CaptureCallback>
 80039a6:	e005      	b.n	80039b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f94c 	bl	8003c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f95d 	bl	8003c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d10e      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d107      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0201 	mvn.w	r2, #1
 80039de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f926 	bl	8003c32 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	2b80      	cmp	r3, #128	; 0x80
 80039f2:	d10e      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fe:	2b80      	cmp	r3, #128	; 0x80
 8003a00:	d107      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fb09 	bl	8004024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a20:	d10e      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2c:	2b80      	cmp	r3, #128	; 0x80
 8003a2e:	d107      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fafc 	bl	8004038 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b40      	cmp	r3, #64	; 0x40
 8003a4c:	d10e      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d107      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f90b 	bl	8003c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d10e      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d107      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0220 	mvn.w	r2, #32
 8003a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fabc 	bl	8004010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_TIM_ConfigClockSource+0x1c>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0b6      	b.n	8003c2a <HAL_TIM_ConfigClockSource+0x18a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af8:	d03e      	beq.n	8003b78 <HAL_TIM_ConfigClockSource+0xd8>
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afe:	f200 8087 	bhi.w	8003c10 <HAL_TIM_ConfigClockSource+0x170>
 8003b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b06:	f000 8086 	beq.w	8003c16 <HAL_TIM_ConfigClockSource+0x176>
 8003b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0e:	d87f      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x170>
 8003b10:	2b70      	cmp	r3, #112	; 0x70
 8003b12:	d01a      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0xaa>
 8003b14:	2b70      	cmp	r3, #112	; 0x70
 8003b16:	d87b      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x170>
 8003b18:	2b60      	cmp	r3, #96	; 0x60
 8003b1a:	d050      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x11e>
 8003b1c:	2b60      	cmp	r3, #96	; 0x60
 8003b1e:	d877      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x170>
 8003b20:	2b50      	cmp	r3, #80	; 0x50
 8003b22:	d03c      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0xfe>
 8003b24:	2b50      	cmp	r3, #80	; 0x50
 8003b26:	d873      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x170>
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d058      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x13e>
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d86f      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x170>
 8003b30:	2b30      	cmp	r3, #48	; 0x30
 8003b32:	d064      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x15e>
 8003b34:	2b30      	cmp	r3, #48	; 0x30
 8003b36:	d86b      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x170>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d060      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x15e>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d867      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x170>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d05c      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x15e>
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d05a      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x15e>
 8003b48:	e062      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6899      	ldr	r1, [r3, #8]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f000 f9b1 	bl	8003ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	609a      	str	r2, [r3, #8]
      break;
 8003b76:	e04f      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f000 f99a 	bl	8003ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b9a:	609a      	str	r2, [r3, #8]
      break;
 8003b9c:	e03c      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f000 f90e 	bl	8003dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2150      	movs	r1, #80	; 0x50
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f967 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003bbc:	e02c      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6859      	ldr	r1, [r3, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f000 f92d 	bl	8003e2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2160      	movs	r1, #96	; 0x60
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f957 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003bdc:	e01c      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	461a      	mov	r2, r3
 8003bec:	f000 f8ee 	bl	8003dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2140      	movs	r1, #64	; 0x40
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 f947 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003bfc:	e00c      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f000 f93e 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003c0e:	e003      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      break;
 8003c14:	e000      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a40      	ldr	r2, [pc, #256]	; (8003dac <TIM_Base_SetConfig+0x114>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d013      	beq.n	8003cd8 <TIM_Base_SetConfig+0x40>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb6:	d00f      	beq.n	8003cd8 <TIM_Base_SetConfig+0x40>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a3d      	ldr	r2, [pc, #244]	; (8003db0 <TIM_Base_SetConfig+0x118>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00b      	beq.n	8003cd8 <TIM_Base_SetConfig+0x40>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a3c      	ldr	r2, [pc, #240]	; (8003db4 <TIM_Base_SetConfig+0x11c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d007      	beq.n	8003cd8 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a3b      	ldr	r2, [pc, #236]	; (8003db8 <TIM_Base_SetConfig+0x120>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <TIM_Base_SetConfig+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a3a      	ldr	r2, [pc, #232]	; (8003dbc <TIM_Base_SetConfig+0x124>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d108      	bne.n	8003cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a2f      	ldr	r2, [pc, #188]	; (8003dac <TIM_Base_SetConfig+0x114>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d01f      	beq.n	8003d32 <TIM_Base_SetConfig+0x9a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf8:	d01b      	beq.n	8003d32 <TIM_Base_SetConfig+0x9a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a2c      	ldr	r2, [pc, #176]	; (8003db0 <TIM_Base_SetConfig+0x118>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d017      	beq.n	8003d32 <TIM_Base_SetConfig+0x9a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2b      	ldr	r2, [pc, #172]	; (8003db4 <TIM_Base_SetConfig+0x11c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <TIM_Base_SetConfig+0x9a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a2a      	ldr	r2, [pc, #168]	; (8003db8 <TIM_Base_SetConfig+0x120>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00f      	beq.n	8003d32 <TIM_Base_SetConfig+0x9a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a29      	ldr	r2, [pc, #164]	; (8003dbc <TIM_Base_SetConfig+0x124>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00b      	beq.n	8003d32 <TIM_Base_SetConfig+0x9a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a28      	ldr	r2, [pc, #160]	; (8003dc0 <TIM_Base_SetConfig+0x128>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d007      	beq.n	8003d32 <TIM_Base_SetConfig+0x9a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a27      	ldr	r2, [pc, #156]	; (8003dc4 <TIM_Base_SetConfig+0x12c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d003      	beq.n	8003d32 <TIM_Base_SetConfig+0x9a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a26      	ldr	r2, [pc, #152]	; (8003dc8 <TIM_Base_SetConfig+0x130>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d108      	bne.n	8003d44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <TIM_Base_SetConfig+0x114>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00f      	beq.n	8003d90 <TIM_Base_SetConfig+0xf8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a12      	ldr	r2, [pc, #72]	; (8003dbc <TIM_Base_SetConfig+0x124>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_Base_SetConfig+0xf8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a11      	ldr	r2, [pc, #68]	; (8003dc0 <TIM_Base_SetConfig+0x128>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_Base_SetConfig+0xf8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a10      	ldr	r2, [pc, #64]	; (8003dc4 <TIM_Base_SetConfig+0x12c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_Base_SetConfig+0xf8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a0f      	ldr	r2, [pc, #60]	; (8003dc8 <TIM_Base_SetConfig+0x130>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d103      	bne.n	8003d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	615a      	str	r2, [r3, #20]
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800
 8003db8:	40000c00 	.word	0x40000c00
 8003dbc:	40013400 	.word	0x40013400
 8003dc0:	40014000 	.word	0x40014000
 8003dc4:	40014400 	.word	0x40014400
 8003dc8:	40014800 	.word	0x40014800

08003dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0201 	bic.w	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f023 030a 	bic.w	r3, r3, #10
 8003e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b087      	sub	sp, #28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f023 0210 	bic.w	r2, r3, #16
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	031b      	lsls	r3, r3, #12
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f043 0307 	orr.w	r3, r3, #7
 8003eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	609a      	str	r2, [r3, #8]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	609a      	str	r2, [r3, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e068      	b.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a2e      	ldr	r2, [pc, #184]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d004      	beq.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a2d      	ldr	r2, [pc, #180]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d108      	bne.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1e      	ldr	r2, [pc, #120]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01d      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8a:	d018      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00e      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a18      	ldr	r2, [pc, #96]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40013400 	.word	0x40013400
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40014000 	.word	0x40014000

08004010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e042      	b.n	80040e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f002 ff05 	bl	8006e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2224      	movs	r2, #36	; 0x24
 800407a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fce4 	bl	8004a5c <UART_SetConfig>
 8004094:	4603      	mov	r3, r0
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e022      	b.n	80040e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 ffd4 	bl	8005054 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f001 f85b 	bl	8005198 <UART_CheckIdleState>
 80040e2:	4603      	mov	r3, r0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004102:	2b20      	cmp	r3, #32
 8004104:	f040 8084 	bne.w	8004210 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_UART_Transmit+0x28>
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e07c      	b.n	8004212 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_UART_Transmit+0x3a>
 8004122:	2302      	movs	r3, #2
 8004124:	e075      	b.n	8004212 <HAL_UART_Transmit+0x126>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2221      	movs	r2, #33	; 0x21
 800413a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413e:	f7fc fab1 	bl	80006a4 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	88fa      	ldrh	r2, [r7, #6]
 8004150:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415c:	d108      	bne.n	8004170 <HAL_UART_Transmit+0x84>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d104      	bne.n	8004170 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	e003      	b.n	8004178 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004180:	e02d      	b.n	80041de <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2200      	movs	r2, #0
 800418a:	2180      	movs	r1, #128	; 0x80
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f001 f84e 	bl	800522e <UART_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e03a      	b.n	8004212 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10b      	bne.n	80041ba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	881a      	ldrh	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ae:	b292      	uxth	r2, r2
 80041b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	3302      	adds	r3, #2
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	e008      	b.n	80041cc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	781a      	ldrb	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	b292      	uxth	r2, r2
 80041c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3301      	adds	r3, #1
 80041ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1cb      	bne.n	8004182 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2200      	movs	r2, #0
 80041f2:	2140      	movs	r1, #64	; 0x40
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f001 f81a 	bl	800522e <UART_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e006      	b.n	8004212 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	2b20      	cmp	r3, #32
 8004232:	d142      	bne.n	80042ba <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_UART_Receive_IT+0x24>
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e03b      	b.n	80042bc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_UART_Receive_IT+0x36>
 800424e:	2302      	movs	r3, #2
 8004250:	e034      	b.n	80042bc <HAL_UART_Receive_IT+0xa0>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <HAL_UART_Receive_IT+0xa8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01f      	beq.n	80042aa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d018      	beq.n	80042aa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	613b      	str	r3, [r7, #16]
   return(result);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	69f9      	ldr	r1, [r7, #28]
 800429c:	6a3a      	ldr	r2, [r7, #32]
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e6      	bne.n	8004278 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	461a      	mov	r2, r3
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f001 f885 	bl	80053c0 <UART_Start_Receive_IT>
 80042b6:	4603      	mov	r3, r0
 80042b8:	e000      	b.n	80042bc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80042ba:	2302      	movs	r3, #2
  }
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3728      	adds	r7, #40	; 0x28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40008000 	.word	0x40008000

080042c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	4613      	mov	r3, r2
 80042d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d17a      	bne.n	80043d6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_UART_Transmit_DMA+0x24>
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e073      	b.n	80043d8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_UART_Transmit_DMA+0x36>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e06c      	b.n	80043d8 <HAL_UART_Transmit_DMA+0x110>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2221      	movs	r2, #33	; 0x21
 8004328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02c      	beq.n	800438e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004338:	4a29      	ldr	r2, [pc, #164]	; (80043e0 <HAL_UART_Transmit_DMA+0x118>)
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004340:	4a28      	ldr	r2, [pc, #160]	; (80043e4 <HAL_UART_Transmit_DMA+0x11c>)
 8004342:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004348:	4a27      	ldr	r2, [pc, #156]	; (80043e8 <HAL_UART_Transmit_DMA+0x120>)
 800434a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004350:	2200      	movs	r2, #0
 8004352:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	4619      	mov	r1, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3328      	adds	r3, #40	; 0x28
 8004364:	461a      	mov	r2, r3
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	f7fc fb86 	bl	8000a78 <HAL_DMA_Start_IT>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2210      	movs	r2, #16
 8004376:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e024      	b.n	80043d8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2240      	movs	r2, #64	; 0x40
 8004394:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3308      	adds	r3, #8
 80043a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	613b      	str	r3, [r7, #16]
   return(result);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3308      	adds	r3, #8
 80043bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043be:	623a      	str	r2, [r7, #32]
 80043c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	69f9      	ldr	r1, [r7, #28]
 80043c4:	6a3a      	ldr	r2, [r7, #32]
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e5      	bne.n	800439e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3728      	adds	r7, #40	; 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	08005763 	.word	0x08005763
 80043e4:	080057fd 	.word	0x080057fd
 80043e8:	08005819 	.word	0x08005819

080043ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b0ba      	sub	sp, #232	; 0xe8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004412:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004416:	f640 030f 	movw	r3, #2063	; 0x80f
 800441a:	4013      	ands	r3, r2
 800441c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d11b      	bne.n	8004460 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d015      	beq.n	8004460 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 82d6 	beq.w	8004a02 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
      }
      return;
 800445e:	e2d0      	b.n	8004a02 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8004460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 811f 	beq.w	80046a8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800446a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800446e:	4b8b      	ldr	r3, [pc, #556]	; (800469c <HAL_UART_IRQHandler+0x2b0>)
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004476:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800447a:	4b89      	ldr	r3, [pc, #548]	; (80046a0 <HAL_UART_IRQHandler+0x2b4>)
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8112 	beq.w	80046a8 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d011      	beq.n	80044b4 <HAL_UART_IRQHandler+0xc8>
 8004490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2201      	movs	r2, #1
 80044a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d011      	beq.n	80044e4 <HAL_UART_IRQHandler+0xf8>
 80044c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2202      	movs	r2, #2
 80044d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044da:	f043 0204 	orr.w	r2, r3, #4
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d011      	beq.n	8004514 <HAL_UART_IRQHandler+0x128>
 80044f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2204      	movs	r2, #4
 8004502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800450a:	f043 0202 	orr.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d017      	beq.n	8004550 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800452c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004530:	4b5a      	ldr	r3, [pc, #360]	; (800469c <HAL_UART_IRQHandler+0x2b0>)
 8004532:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2208      	movs	r2, #8
 800453e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004546:	f043 0208 	orr.w	r2, r3, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004558:	2b00      	cmp	r3, #0
 800455a:	d012      	beq.n	8004582 <HAL_UART_IRQHandler+0x196>
 800455c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00c      	beq.n	8004582 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 823c 	beq.w	8004a06 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d013      	beq.n	80045c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800459a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d105      	bne.n	80045b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d005      	beq.n	80045e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d04f      	beq.n	8004686 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 f855 	bl	8005696 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d141      	bne.n	800467e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3308      	adds	r3, #8
 8004600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004626:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800462a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004632:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800463e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1d9      	bne.n	80045fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d013      	beq.n	8004676 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004652:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <HAL_UART_IRQHandler+0x2b8>)
 8004654:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465a:	4618      	mov	r0, r3
 800465c:	f7fc fae3 	bl	8000c26 <HAL_DMA_Abort_IT>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d017      	beq.n	8004696 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004670:	4610      	mov	r0, r2
 8004672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	e00f      	b.n	8004696 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9da 	bl	8004a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467c:	e00b      	b.n	8004696 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f9d6 	bl	8004a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004684:	e007      	b.n	8004696 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f9d2 	bl	8004a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004694:	e1b7      	b.n	8004a06 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004696:	bf00      	nop
    return;
 8004698:	e1b5      	b.n	8004a06 <HAL_UART_IRQHandler+0x61a>
 800469a:	bf00      	nop
 800469c:	10000001 	.word	0x10000001
 80046a0:	04000120 	.word	0x04000120
 80046a4:	08005899 	.word	0x08005899

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	f040 814a 	bne.w	8004946 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8143 	beq.w	8004946 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 813c 	beq.w	8004946 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2210      	movs	r2, #16
 80046d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	f040 80b5 	bne.w	8004850 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8187 	beq.w	8004a0a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004706:	429a      	cmp	r2, r3
 8004708:	f080 817f 	bcs.w	8004a0a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004712:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 8086 	bne.w	8004834 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800473c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004756:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800475e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800476a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1da      	bne.n	8004728 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3308      	adds	r3, #8
 8004778:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3308      	adds	r3, #8
 8004792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004796:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800479a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800479e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e1      	bne.n	8004772 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3308      	adds	r3, #8
 80047b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e3      	bne.n	80047ae <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004804:	f023 0310 	bic.w	r3, r3, #16
 8004808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004816:	65bb      	str	r3, [r7, #88]	; 0x58
 8004818:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800481c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e4      	bne.n	80047f4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482e:	4618      	mov	r0, r3
 8004830:	f7fc f99d 	bl	8000b6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004840:	b29b      	uxth	r3, r3
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	b29b      	uxth	r3, r3
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f8fb 	bl	8004a44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800484e:	e0dc      	b.n	8004a0a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800485c:	b29b      	uxth	r3, r3
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80ce 	beq.w	8004a0e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004872:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80c9 	beq.w	8004a0e <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800489e:	647b      	str	r3, [r7, #68]	; 0x44
 80048a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e4      	bne.n	800487c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	623b      	str	r3, [r7, #32]
   return(result);
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3308      	adds	r3, #8
 80048d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048da:	633a      	str	r2, [r7, #48]	; 0x30
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e1      	bne.n	80048b2 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0310 	bic.w	r3, r3, #16
 8004916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	69b9      	ldr	r1, [r7, #24]
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	e841 2300 	strex	r3, r2, [r1]
 8004930:	617b      	str	r3, [r7, #20]
   return(result);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e4      	bne.n	8004902 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f880 	bl	8004a44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004944:	e063      	b.n	8004a0e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00e      	beq.n	8004970 <HAL_UART_IRQHandler+0x584>
 8004952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004966:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f001 fc3b 	bl	80061e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800496e:	e051      	b.n	8004a14 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	2b00      	cmp	r3, #0
 800497a:	d014      	beq.n	80049a6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800497c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800498c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004998:	2b00      	cmp	r3, #0
 800499a:	d03a      	beq.n	8004a12 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	4798      	blx	r3
    }
    return;
 80049a4:	e035      	b.n	8004a12 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_UART_IRQHandler+0x5da>
 80049b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 ff80 	bl	80058c4 <UART_EndTransmit_IT>
    return;
 80049c4:	e026      	b.n	8004a14 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_UART_IRQHandler+0x5fa>
 80049d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f001 fc14 	bl	800620c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049e4:	e016      	b.n	8004a14 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d010      	beq.n	8004a14 <HAL_UART_IRQHandler+0x628>
 80049f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	da0c      	bge.n	8004a14 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f001 fbfc 	bl	80061f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a00:	e008      	b.n	8004a14 <HAL_UART_IRQHandler+0x628>
      return;
 8004a02:	bf00      	nop
 8004a04:	e006      	b.n	8004a14 <HAL_UART_IRQHandler+0x628>
    return;
 8004a06:	bf00      	nop
 8004a08:	e004      	b.n	8004a14 <HAL_UART_IRQHandler+0x628>
      return;
 8004a0a:	bf00      	nop
 8004a0c:	e002      	b.n	8004a14 <HAL_UART_IRQHandler+0x628>
      return;
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <HAL_UART_IRQHandler+0x628>
    return;
 8004a12:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a14:	37e8      	adds	r7, #232	; 0xe8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop

08004a1c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a60:	b08c      	sub	sp, #48	; 0x30
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4baa      	ldr	r3, [pc, #680]	; (8004d34 <UART_SetConfig+0x2d8>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a9f      	ldr	r2, [pc, #636]	; (8004d38 <UART_SetConfig+0x2dc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ad2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	f023 010f 	bic.w	r1, r3, #15
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a90      	ldr	r2, [pc, #576]	; (8004d3c <UART_SetConfig+0x2e0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d125      	bne.n	8004b4c <UART_SetConfig+0xf0>
 8004b00:	4b8f      	ldr	r3, [pc, #572]	; (8004d40 <UART_SetConfig+0x2e4>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d81a      	bhi.n	8004b44 <UART_SetConfig+0xe8>
 8004b0e:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <UART_SetConfig+0xb8>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b25 	.word	0x08004b25
 8004b18:	08004b35 	.word	0x08004b35
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b3d 	.word	0x08004b3d
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2a:	e116      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b32:	e112      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004b34:	2304      	movs	r3, #4
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3a:	e10e      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b42:	e10a      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004b44:	2310      	movs	r3, #16
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4a:	e106      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a7c      	ldr	r2, [pc, #496]	; (8004d44 <UART_SetConfig+0x2e8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d138      	bne.n	8004bc8 <UART_SetConfig+0x16c>
 8004b56:	4b7a      	ldr	r3, [pc, #488]	; (8004d40 <UART_SetConfig+0x2e4>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f003 030c 	and.w	r3, r3, #12
 8004b60:	2b0c      	cmp	r3, #12
 8004b62:	d82d      	bhi.n	8004bc0 <UART_SetConfig+0x164>
 8004b64:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <UART_SetConfig+0x110>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004bc1 	.word	0x08004bc1
 8004b74:	08004bc1 	.word	0x08004bc1
 8004b78:	08004bc1 	.word	0x08004bc1
 8004b7c:	08004bb1 	.word	0x08004bb1
 8004b80:	08004bc1 	.word	0x08004bc1
 8004b84:	08004bc1 	.word	0x08004bc1
 8004b88:	08004bc1 	.word	0x08004bc1
 8004b8c:	08004ba9 	.word	0x08004ba9
 8004b90:	08004bc1 	.word	0x08004bc1
 8004b94:	08004bc1 	.word	0x08004bc1
 8004b98:	08004bc1 	.word	0x08004bc1
 8004b9c:	08004bb9 	.word	0x08004bb9
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba6:	e0d8      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bae:	e0d4      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb6:	e0d0      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004bb8:	2308      	movs	r3, #8
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bbe:	e0cc      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc6:	e0c8      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a5e      	ldr	r2, [pc, #376]	; (8004d48 <UART_SetConfig+0x2ec>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d125      	bne.n	8004c1e <UART_SetConfig+0x1c2>
 8004bd2:	4b5b      	ldr	r3, [pc, #364]	; (8004d40 <UART_SetConfig+0x2e4>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bdc:	2b30      	cmp	r3, #48	; 0x30
 8004bde:	d016      	beq.n	8004c0e <UART_SetConfig+0x1b2>
 8004be0:	2b30      	cmp	r3, #48	; 0x30
 8004be2:	d818      	bhi.n	8004c16 <UART_SetConfig+0x1ba>
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d00a      	beq.n	8004bfe <UART_SetConfig+0x1a2>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d814      	bhi.n	8004c16 <UART_SetConfig+0x1ba>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <UART_SetConfig+0x19a>
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d008      	beq.n	8004c06 <UART_SetConfig+0x1aa>
 8004bf4:	e00f      	b.n	8004c16 <UART_SetConfig+0x1ba>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfc:	e0ad      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c04:	e0a9      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c06:	2304      	movs	r3, #4
 8004c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c0c:	e0a5      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c0e:	2308      	movs	r3, #8
 8004c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c14:	e0a1      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c16:	2310      	movs	r3, #16
 8004c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c1c:	e09d      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a4a      	ldr	r2, [pc, #296]	; (8004d4c <UART_SetConfig+0x2f0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d125      	bne.n	8004c74 <UART_SetConfig+0x218>
 8004c28:	4b45      	ldr	r3, [pc, #276]	; (8004d40 <UART_SetConfig+0x2e4>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c32:	2bc0      	cmp	r3, #192	; 0xc0
 8004c34:	d016      	beq.n	8004c64 <UART_SetConfig+0x208>
 8004c36:	2bc0      	cmp	r3, #192	; 0xc0
 8004c38:	d818      	bhi.n	8004c6c <UART_SetConfig+0x210>
 8004c3a:	2b80      	cmp	r3, #128	; 0x80
 8004c3c:	d00a      	beq.n	8004c54 <UART_SetConfig+0x1f8>
 8004c3e:	2b80      	cmp	r3, #128	; 0x80
 8004c40:	d814      	bhi.n	8004c6c <UART_SetConfig+0x210>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <UART_SetConfig+0x1f0>
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d008      	beq.n	8004c5c <UART_SetConfig+0x200>
 8004c4a:	e00f      	b.n	8004c6c <UART_SetConfig+0x210>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c52:	e082      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c54:	2302      	movs	r3, #2
 8004c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5a:	e07e      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c62:	e07a      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c64:	2308      	movs	r3, #8
 8004c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c6a:	e076      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c72:	e072      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a35      	ldr	r2, [pc, #212]	; (8004d50 <UART_SetConfig+0x2f4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d12a      	bne.n	8004cd4 <UART_SetConfig+0x278>
 8004c7e:	4b30      	ldr	r3, [pc, #192]	; (8004d40 <UART_SetConfig+0x2e4>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c8c:	d01a      	beq.n	8004cc4 <UART_SetConfig+0x268>
 8004c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c92:	d81b      	bhi.n	8004ccc <UART_SetConfig+0x270>
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c98:	d00c      	beq.n	8004cb4 <UART_SetConfig+0x258>
 8004c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9e:	d815      	bhi.n	8004ccc <UART_SetConfig+0x270>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <UART_SetConfig+0x250>
 8004ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca8:	d008      	beq.n	8004cbc <UART_SetConfig+0x260>
 8004caa:	e00f      	b.n	8004ccc <UART_SetConfig+0x270>
 8004cac:	2300      	movs	r3, #0
 8004cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb2:	e052      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cba:	e04e      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc2:	e04a      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cca:	e046      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd2:	e042      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <UART_SetConfig+0x2dc>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d13a      	bne.n	8004d54 <UART_SetConfig+0x2f8>
 8004cde:	4b18      	ldr	r3, [pc, #96]	; (8004d40 <UART_SetConfig+0x2e4>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ce8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cec:	d01a      	beq.n	8004d24 <UART_SetConfig+0x2c8>
 8004cee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cf2:	d81b      	bhi.n	8004d2c <UART_SetConfig+0x2d0>
 8004cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf8:	d00c      	beq.n	8004d14 <UART_SetConfig+0x2b8>
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfe:	d815      	bhi.n	8004d2c <UART_SetConfig+0x2d0>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <UART_SetConfig+0x2b0>
 8004d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d08:	d008      	beq.n	8004d1c <UART_SetConfig+0x2c0>
 8004d0a:	e00f      	b.n	8004d2c <UART_SetConfig+0x2d0>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d12:	e022      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004d14:	2302      	movs	r3, #2
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1a:	e01e      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d22:	e01a      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004d24:	2308      	movs	r3, #8
 8004d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2a:	e016      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d32:	e012      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004d34:	cfff69f3 	.word	0xcfff69f3
 8004d38:	40008000 	.word	0x40008000
 8004d3c:	40013800 	.word	0x40013800
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40004400 	.word	0x40004400
 8004d48:	40004800 	.word	0x40004800
 8004d4c:	40004c00 	.word	0x40004c00
 8004d50:	40005000 	.word	0x40005000
 8004d54:	2310      	movs	r3, #16
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4aae      	ldr	r2, [pc, #696]	; (8005018 <UART_SetConfig+0x5bc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	f040 8097 	bne.w	8004e94 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d823      	bhi.n	8004db6 <UART_SetConfig+0x35a>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <UART_SetConfig+0x318>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004db7 	.word	0x08004db7
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004db7 	.word	0x08004db7
 8004d84:	08004da7 	.word	0x08004da7
 8004d88:	08004db7 	.word	0x08004db7
 8004d8c:	08004db7 	.word	0x08004db7
 8004d90:	08004db7 	.word	0x08004db7
 8004d94:	08004daf 	.word	0x08004daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d98:	f7fd ff08 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004d9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d9e:	e010      	b.n	8004dc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da0:	4b9e      	ldr	r3, [pc, #632]	; (800501c <UART_SetConfig+0x5c0>)
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004da4:	e00d      	b.n	8004dc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da6:	f7fd fe69 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8004daa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dac:	e009      	b.n	8004dc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004db4:	e005      	b.n	8004dc2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004dc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8130 	beq.w	800502a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	4a94      	ldr	r2, [pc, #592]	; (8005020 <UART_SetConfig+0x5c4>)
 8004dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d305      	bcc.n	8004dfa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d903      	bls.n	8004e02 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e00:	e113      	b.n	800502a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	2200      	movs	r2, #0
 8004e06:	60bb      	str	r3, [r7, #8]
 8004e08:	60fa      	str	r2, [r7, #12]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	4a84      	ldr	r2, [pc, #528]	; (8005020 <UART_SetConfig+0x5c4>)
 8004e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2200      	movs	r2, #0
 8004e18:	603b      	str	r3, [r7, #0]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e24:	f7fb fa54 	bl	80002d0 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4619      	mov	r1, r3
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	020b      	lsls	r3, r1, #8
 8004e3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e3e:	0202      	lsls	r2, r0, #8
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	6849      	ldr	r1, [r1, #4]
 8004e44:	0849      	lsrs	r1, r1, #1
 8004e46:	2000      	movs	r0, #0
 8004e48:	460c      	mov	r4, r1
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	eb12 0804 	adds.w	r8, r2, r4
 8004e50:	eb43 0905 	adc.w	r9, r3, r5
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	469a      	mov	sl, r3
 8004e5c:	4693      	mov	fp, r2
 8004e5e:	4652      	mov	r2, sl
 8004e60:	465b      	mov	r3, fp
 8004e62:	4640      	mov	r0, r8
 8004e64:	4649      	mov	r1, r9
 8004e66:	f7fb fa33 	bl	80002d0 <__aeabi_uldivmod>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4613      	mov	r3, r2
 8004e70:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e78:	d308      	bcc.n	8004e8c <UART_SetConfig+0x430>
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e80:	d204      	bcs.n	8004e8c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a3a      	ldr	r2, [r7, #32]
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	e0ce      	b.n	800502a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e92:	e0ca      	b.n	800502a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9c:	d166      	bne.n	8004f6c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d827      	bhi.n	8004ef6 <UART_SetConfig+0x49a>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <UART_SetConfig+0x450>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ed1 	.word	0x08004ed1
 8004eb0:	08004ed9 	.word	0x08004ed9
 8004eb4:	08004ee1 	.word	0x08004ee1
 8004eb8:	08004ef7 	.word	0x08004ef7
 8004ebc:	08004ee7 	.word	0x08004ee7
 8004ec0:	08004ef7 	.word	0x08004ef7
 8004ec4:	08004ef7 	.word	0x08004ef7
 8004ec8:	08004ef7 	.word	0x08004ef7
 8004ecc:	08004eef 	.word	0x08004eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed0:	f7fd fe6c 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004ed4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ed6:	e014      	b.n	8004f02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ed8:	f7fd fe7e 	bl	8002bd8 <HAL_RCC_GetPCLK2Freq>
 8004edc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ede:	e010      	b.n	8004f02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee0:	4b4e      	ldr	r3, [pc, #312]	; (800501c <UART_SetConfig+0x5c0>)
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ee4:	e00d      	b.n	8004f02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee6:	f7fd fdc9 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8004eea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eec:	e009      	b.n	8004f02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ef4:	e005      	b.n	8004f02 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8090 	beq.w	800502a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	4a44      	ldr	r2, [pc, #272]	; (8005020 <UART_SetConfig+0x5c4>)
 8004f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f14:	461a      	mov	r2, r3
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f1c:	005a      	lsls	r2, r3, #1
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	441a      	add	r2, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	2b0f      	cmp	r3, #15
 8004f34:	d916      	bls.n	8004f64 <UART_SetConfig+0x508>
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3c:	d212      	bcs.n	8004f64 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f023 030f 	bic.w	r3, r3, #15
 8004f46:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	085b      	lsrs	r3, r3, #1
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	8bfb      	ldrh	r3, [r7, #30]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	8bfa      	ldrh	r2, [r7, #30]
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	e062      	b.n	800502a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f6a:	e05e      	b.n	800502a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d828      	bhi.n	8004fc6 <UART_SetConfig+0x56a>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x520>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fb1 	.word	0x08004fb1
 8004f88:	08004fc7 	.word	0x08004fc7
 8004f8c:	08004fb7 	.word	0x08004fb7
 8004f90:	08004fc7 	.word	0x08004fc7
 8004f94:	08004fc7 	.word	0x08004fc7
 8004f98:	08004fc7 	.word	0x08004fc7
 8004f9c:	08004fbf 	.word	0x08004fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7fd fe04 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004fa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fa6:	e014      	b.n	8004fd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fa8:	f7fd fe16 	bl	8002bd8 <HAL_RCC_GetPCLK2Freq>
 8004fac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fae:	e010      	b.n	8004fd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb0:	4b1a      	ldr	r3, [pc, #104]	; (800501c <UART_SetConfig+0x5c0>)
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fb4:	e00d      	b.n	8004fd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fb6:	f7fd fd61 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8004fba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fbc:	e009      	b.n	8004fd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fc4:	e005      	b.n	8004fd2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fd0:	bf00      	nop
    }

    if (pclk != 0U)
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d028      	beq.n	800502a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	4a10      	ldr	r2, [pc, #64]	; (8005020 <UART_SetConfig+0x5c4>)
 8004fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	085b      	lsrs	r3, r3, #1
 8004ff0:	441a      	add	r2, r3
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	2b0f      	cmp	r3, #15
 8005000:	d910      	bls.n	8005024 <UART_SetConfig+0x5c8>
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005008:	d20c      	bcs.n	8005024 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	b29a      	uxth	r2, r3
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60da      	str	r2, [r3, #12]
 8005014:	e009      	b.n	800502a <UART_SetConfig+0x5ce>
 8005016:	bf00      	nop
 8005018:	40008000 	.word	0x40008000
 800501c:	00f42400 	.word	0x00f42400
 8005020:	0800c8b8 	.word	0x0800c8b8
      }
      else
      {
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2201      	movs	r2, #1
 800502e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2201      	movs	r2, #1
 8005036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2200      	movs	r2, #0
 800503e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2200      	movs	r2, #0
 8005044:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005046:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800504a:	4618      	mov	r0, r3
 800504c:	3730      	adds	r7, #48	; 0x30
 800504e:	46bd      	mov	sp, r7
 8005050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01a      	beq.n	800516a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005152:	d10a      	bne.n	800516a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	605a      	str	r2, [r3, #4]
  }
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af02      	add	r7, sp, #8
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051a8:	f7fb fa7c 	bl	80006a4 <HAL_GetTick>
 80051ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d10e      	bne.n	80051da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f82f 	bl	800522e <UART_WaitOnFlagUntilTimeout>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e025      	b.n	8005226 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d10e      	bne.n	8005206 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f819 	bl	800522e <UART_WaitOnFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e00f      	b.n	8005226 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b09c      	sub	sp, #112	; 0x70
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	4613      	mov	r3, r2
 800523c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523e:	e0a9      	b.n	8005394 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	f000 80a5 	beq.w	8005394 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524a:	f7fb fa2b 	bl	80006a4 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <UART_WaitOnFlagUntilTimeout+0x32>
 800525a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800525c:	2b00      	cmp	r3, #0
 800525e:	d140      	bne.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800526e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005270:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005274:	667b      	str	r3, [r7, #100]	; 0x64
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800527e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005280:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800528c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e6      	bne.n	8005260 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3308      	adds	r3, #8
 8005298:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	663b      	str	r3, [r7, #96]	; 0x60
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80052b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e069      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d051      	beq.n	8005394 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fe:	d149      	bne.n	8005394 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005308:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800531e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
 800532a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800532e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e6      	bne.n	800530a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3308      	adds	r3, #8
 8005342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	613b      	str	r3, [r7, #16]
   return(result);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	66bb      	str	r3, [r7, #104]	; 0x68
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3308      	adds	r3, #8
 800535a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800535c:	623a      	str	r2, [r7, #32]
 800535e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	69f9      	ldr	r1, [r7, #28]
 8005362:	6a3a      	ldr	r2, [r7, #32]
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	61bb      	str	r3, [r7, #24]
   return(result);
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e5      	bne.n	800533c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e010      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69da      	ldr	r2, [r3, #28]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4013      	ands	r3, r2
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	bf0c      	ite	eq
 80053a4:	2301      	moveq	r3, #1
 80053a6:	2300      	movne	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	f43f af46 	beq.w	8005240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3770      	adds	r7, #112	; 0x70
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b0a3      	sub	sp, #140	; 0x8c
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	4613      	mov	r3, r2
 80053cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f2:	d10e      	bne.n	8005412 <UART_Start_Receive_IT+0x52>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <UART_Start_Receive_IT+0x48>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005402:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005406:	e02d      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	22ff      	movs	r2, #255	; 0xff
 800540c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005410:	e028      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10d      	bne.n	8005436 <UART_Start_Receive_IT+0x76>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <UART_Start_Receive_IT+0x6c>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	22ff      	movs	r2, #255	; 0xff
 8005426:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800542a:	e01b      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	227f      	movs	r2, #127	; 0x7f
 8005430:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005434:	e016      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800543e:	d10d      	bne.n	800545c <UART_Start_Receive_IT+0x9c>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <UART_Start_Receive_IT+0x92>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	227f      	movs	r2, #127	; 0x7f
 800544c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005450:	e008      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	223f      	movs	r2, #63	; 0x3f
 8005456:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800545a:	e003      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2222      	movs	r2, #34	; 0x22
 8005470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3308      	adds	r3, #8
 800547a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005498:	673a      	str	r2, [r7, #112]	; 0x70
 800549a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800549e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80054a0:	e841 2300 	strex	r3, r2, [r1]
 80054a4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80054a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e3      	bne.n	8005474 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054b4:	d153      	bne.n	800555e <UART_Start_Receive_IT+0x19e>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d34d      	bcc.n	800555e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ca:	d107      	bne.n	80054dc <UART_Start_Receive_IT+0x11c>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d103      	bne.n	80054dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4a4b      	ldr	r2, [pc, #300]	; (8005604 <UART_Start_Receive_IT+0x244>)
 80054d8:	671a      	str	r2, [r3, #112]	; 0x70
 80054da:	e002      	b.n	80054e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a4a      	ldr	r2, [pc, #296]	; (8005608 <UART_Start_Receive_IT+0x248>)
 80054e0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01a      	beq.n	8005528 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005516:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800551a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800551c:	e841 2300 	strex	r3, r2, [r1]
 8005520:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e4      	bne.n	80054f2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3308      	adds	r3, #8
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800553e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3308      	adds	r3, #8
 8005546:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005548:	64ba      	str	r2, [r7, #72]	; 0x48
 800554a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800554e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <UART_Start_Receive_IT+0x168>
 800555c:	e04a      	b.n	80055f4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005566:	d107      	bne.n	8005578 <UART_Start_Receive_IT+0x1b8>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d103      	bne.n	8005578 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4a26      	ldr	r2, [pc, #152]	; (800560c <UART_Start_Receive_IT+0x24c>)
 8005574:	671a      	str	r2, [r3, #112]	; 0x70
 8005576:	e002      	b.n	800557e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4a25      	ldr	r2, [pc, #148]	; (8005610 <UART_Start_Receive_IT+0x250>)
 800557c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d019      	beq.n	80055c2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80055a2:	677b      	str	r3, [r7, #116]	; 0x74
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
 80055ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e6      	bne.n	800558e <UART_Start_Receive_IT+0x1ce>
 80055c0:	e018      	b.n	80055f4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	613b      	str	r3, [r7, #16]
   return(result);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f043 0320 	orr.w	r3, r3, #32
 80055d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	69f9      	ldr	r1, [r7, #28]
 80055e6:	6a3a      	ldr	r2, [r7, #32]
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e6      	bne.n	80055c2 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	378c      	adds	r7, #140	; 0x8c
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	08005ee1 	.word	0x08005ee1
 8005608:	08005be5 	.word	0x08005be5
 800560c:	08005a7f 	.word	0x08005a7f
 8005610:	0800591b 	.word	0x0800591b

08005614 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005614:	b480      	push	{r7}
 8005616:	b08f      	sub	sp, #60	; 0x3c
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	61fb      	str	r3, [r7, #28]
   return(result);
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800563c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e6      	bne.n	800561c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	60bb      	str	r3, [r7, #8]
   return(result);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005664:	633b      	str	r3, [r7, #48]	; 0x30
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3308      	adds	r3, #8
 800566c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800566e:	61ba      	str	r2, [r7, #24]
 8005670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6979      	ldr	r1, [r7, #20]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	613b      	str	r3, [r7, #16]
   return(result);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e5      	bne.n	800564e <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800568a:	bf00      	nop
 800568c:	373c      	adds	r7, #60	; 0x3c
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005696:	b480      	push	{r7}
 8005698:	b095      	sub	sp, #84	; 0x54
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056bc:	643b      	str	r3, [r7, #64]	; 0x40
 80056be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056c4:	e841 2300 	strex	r3, r2, [r1]
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e6      	bne.n	800569e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3308      	adds	r3, #8
 80056f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e3      	bne.n	80056d0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d118      	bne.n	8005742 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	60bb      	str	r3, [r7, #8]
   return(result);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f023 0310 	bic.w	r3, r3, #16
 8005724:	647b      	str	r3, [r7, #68]	; 0x44
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6979      	ldr	r1, [r7, #20]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	613b      	str	r3, [r7, #16]
   return(result);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e6      	bne.n	8005710 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005756:	bf00      	nop
 8005758:	3754      	adds	r7, #84	; 0x54
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b090      	sub	sp, #64	; 0x40
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0320 	and.w	r3, r3, #32
 800577a:	2b00      	cmp	r3, #0
 800577c:	d137      	bne.n	80057ee <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800577e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005780:	2200      	movs	r2, #0
 8005782:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3308      	adds	r3, #8
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	623b      	str	r3, [r7, #32]
   return(result);
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800579c:	63bb      	str	r3, [r7, #56]	; 0x38
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3308      	adds	r3, #8
 80057a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057a6:	633a      	str	r2, [r7, #48]	; 0x30
 80057a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e5      	bne.n	8005786 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ce:	637b      	str	r3, [r7, #52]	; 0x34
 80057d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	617b      	str	r3, [r7, #20]
   return(result);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e6      	bne.n	80057ba <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057ec:	e002      	b.n	80057f4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80057ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80057f0:	f001 fa90 	bl	8006d14 <HAL_UART_TxCpltCallback>
}
 80057f4:	bf00      	nop
 80057f6:	3740      	adds	r7, #64	; 0x40
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff f906 	bl	8004a1c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800582c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005834:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005840:	2b80      	cmp	r3, #128	; 0x80
 8005842:	d109      	bne.n	8005858 <UART_DMAError+0x40>
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b21      	cmp	r3, #33	; 0x21
 8005848:	d106      	bne.n	8005858 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2200      	movs	r2, #0
 800584e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f7ff fede 	bl	8005614 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b40      	cmp	r3, #64	; 0x40
 8005864:	d109      	bne.n	800587a <UART_DMAError+0x62>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b22      	cmp	r3, #34	; 0x22
 800586a:	d106      	bne.n	800587a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2200      	movs	r2, #0
 8005870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005874:	6978      	ldr	r0, [r7, #20]
 8005876:	f7ff ff0e 	bl	8005696 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005880:	f043 0210 	orr.w	r2, r3, #16
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800588a:	6978      	ldr	r0, [r7, #20]
 800588c:	f7ff f8d0 	bl	8004a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005890:	bf00      	nop
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7ff f8ba 	bl	8004a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	61bb      	str	r3, [r7, #24]
 80058ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6979      	ldr	r1, [r7, #20]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	613b      	str	r3, [r7, #16]
   return(result);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e6      	bne.n	80058cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 fa01 	bl	8006d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005912:	bf00      	nop
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b096      	sub	sp, #88	; 0x58
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005928:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	2b22      	cmp	r3, #34	; 0x22
 8005934:	f040 8095 	bne.w	8005a62 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800593e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005942:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005946:	b2d9      	uxtb	r1, r3
 8005948:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800594c:	b2da      	uxtb	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005952:	400a      	ands	r2, r1
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d17a      	bne.n	8005a76 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800598e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005994:	653b      	str	r3, [r7, #80]	; 0x50
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599e:	647b      	str	r3, [r7, #68]	; 0x44
 80059a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e6      	bne.n	8005980 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	623b      	str	r3, [r7, #32]
   return(result);
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3308      	adds	r3, #8
 80059d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059d2:	633a      	str	r2, [r7, #48]	; 0x30
 80059d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e5      	bne.n	80059b2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d12e      	bne.n	8005a5a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0310 	bic.w	r3, r3, #16
 8005a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	69b9      	ldr	r1, [r7, #24]
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e6      	bne.n	8005a02 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f003 0310 	and.w	r3, r3, #16
 8005a3e:	2b10      	cmp	r3, #16
 8005a40:	d103      	bne.n	8005a4a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2210      	movs	r2, #16
 8005a48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fe fff6 	bl	8004a44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a58:	e00d      	b.n	8005a76 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 f926 	bl	8006cac <HAL_UART_RxCpltCallback>
}
 8005a60:	e009      	b.n	8005a76 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	8b1b      	ldrh	r3, [r3, #24]
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0208 	orr.w	r2, r2, #8
 8005a72:	b292      	uxth	r2, r2
 8005a74:	831a      	strh	r2, [r3, #24]
}
 8005a76:	bf00      	nop
 8005a78:	3758      	adds	r7, #88	; 0x58
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b096      	sub	sp, #88	; 0x58
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a96:	2b22      	cmp	r3, #34	; 0x22
 8005a98:	f040 8095 	bne.w	8005bc6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005aa2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aaa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005aac:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005ab0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac0:	1c9a      	adds	r2, r3, #2
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d17a      	bne.n	8005bda <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b02:	643b      	str	r3, [r7, #64]	; 0x40
 8005b04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e6      	bne.n	8005ae4 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3308      	adds	r3, #8
 8005b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e5      	bne.n	8005b16 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d12e      	bne.n	8005bbe <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f023 0310 	bic.w	r3, r3, #16
 8005b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6979      	ldr	r1, [r7, #20]
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	613b      	str	r3, [r7, #16]
   return(result);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e6      	bne.n	8005b66 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	f003 0310 	and.w	r3, r3, #16
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d103      	bne.n	8005bae <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2210      	movs	r2, #16
 8005bac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fe ff44 	bl	8004a44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bbc:	e00d      	b.n	8005bda <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 f874 	bl	8006cac <HAL_UART_RxCpltCallback>
}
 8005bc4:	e009      	b.n	8005bda <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	8b1b      	ldrh	r3, [r3, #24]
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0208 	orr.w	r2, r2, #8
 8005bd6:	b292      	uxth	r2, r2
 8005bd8:	831a      	strh	r2, [r3, #24]
}
 8005bda:	bf00      	nop
 8005bdc:	3758      	adds	r7, #88	; 0x58
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b0a6      	sub	sp, #152	; 0x98
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005bf2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1a:	2b22      	cmp	r3, #34	; 0x22
 8005c1c:	f040 814f 	bne.w	8005ebe <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c26:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c2a:	e0f6      	b.n	8005e1a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c32:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c36:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005c3a:	b2d9      	uxtb	r1, r3
 8005c3c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c46:	400a      	ands	r2, r1
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d053      	beq.n	8005d26 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d011      	beq.n	8005cae <UART_RxISR_8BIT_FIFOEN+0xca>
 8005c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00b      	beq.n	8005cae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ca4:	f043 0201 	orr.w	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d011      	beq.n	8005cde <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00b      	beq.n	8005cde <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd4:	f043 0204 	orr.w	r2, r3, #4
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d011      	beq.n	8005d0e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d04:	f043 0202 	orr.w	r2, r3, #2
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d006      	beq.n	8005d26 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7fe fe89 	bl	8004a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d173      	bne.n	8005e1a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d54:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d56:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005d5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e4      	bne.n	8005d32 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	f023 0301 	bic.w	r3, r3, #1
 8005d82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005d8c:	657a      	str	r2, [r7, #84]	; 0x54
 8005d8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e3      	bne.n	8005d68 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d12e      	bne.n	8005e14 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	f023 0310 	bic.w	r3, r3, #16
 8005dd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dda:	643b      	str	r3, [r7, #64]	; 0x40
 8005ddc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005de0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e6      	bne.n	8005dbc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d103      	bne.n	8005e04 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2210      	movs	r2, #16
 8005e02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7fe fe19 	bl	8004a44 <HAL_UARTEx_RxEventCallback>
 8005e12:	e002      	b.n	8005e1a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 ff49 	bl	8006cac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d006      	beq.n	8005e30 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f47f aefe 	bne.w	8005c2c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e36:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005e3a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d047      	beq.n	8005ed2 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d240      	bcs.n	8005ed2 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3308      	adds	r3, #8
 8005e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e66:	673b      	str	r3, [r7, #112]	; 0x70
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005e70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e5      	bne.n	8005e50 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a15      	ldr	r2, [pc, #84]	; (8005edc <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8005e88:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f043 0320 	orr.w	r3, r3, #32
 8005e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	6979      	ldr	r1, [r7, #20]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e6      	bne.n	8005e8a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ebc:	e009      	b.n	8005ed2 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	8b1b      	ldrh	r3, [r3, #24]
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0208 	orr.w	r2, r2, #8
 8005ece:	b292      	uxth	r2, r2
 8005ed0:	831a      	strh	r2, [r3, #24]
}
 8005ed2:	bf00      	nop
 8005ed4:	3798      	adds	r7, #152	; 0x98
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	0800591b 	.word	0x0800591b

08005ee0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b0a8      	sub	sp, #160	; 0xa0
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005eee:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f16:	2b22      	cmp	r3, #34	; 0x22
 8005f18:	f040 8153 	bne.w	80061c2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f22:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f26:	e0fa      	b.n	800611e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f2e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005f3a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005f3e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005f42:	4013      	ands	r3, r2
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f50:	1c9a      	adds	r2, r3, #2
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d053      	beq.n	8006026 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d011      	beq.n	8005fae <UART_RxISR_16BIT_FIFOEN+0xce>
 8005f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa4:	f043 0201 	orr.w	r2, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d011      	beq.n	8005fde <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005fba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00b      	beq.n	8005fde <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd4:	f043 0204 	orr.w	r2, r3, #4
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d011      	beq.n	800600e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2204      	movs	r2, #4
 8005ffc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006004:	f043 0202 	orr.w	r2, r3, #2
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7fe fd09 	bl	8004a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d175      	bne.n	800611e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006054:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006056:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800605a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e4      	bne.n	8006032 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3308      	adds	r3, #8
 800606e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800607a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800607e:	f023 0301 	bic.w	r3, r3, #1
 8006082:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3308      	adds	r3, #8
 800608c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006090:	65ba      	str	r2, [r7, #88]	; 0x58
 8006092:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006096:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800609e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e1      	bne.n	8006068 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d12e      	bne.n	8006118 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d0:	f023 0310 	bic.w	r3, r3, #16
 80060d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060de:	647b      	str	r3, [r7, #68]	; 0x44
 80060e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e6      	bne.n	80060c0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d103      	bne.n	8006108 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2210      	movs	r2, #16
 8006106:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7fe fc97 	bl	8004a44 <HAL_UARTEx_RxEventCallback>
 8006116:	e002      	b.n	800611e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fdc7 	bl	8006cac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800611e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006122:	2b00      	cmp	r3, #0
 8006124:	d006      	beq.n	8006134 <UART_RxISR_16BIT_FIFOEN+0x254>
 8006126:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800612a:	f003 0320 	and.w	r3, r3, #32
 800612e:	2b00      	cmp	r3, #0
 8006130:	f47f aefa 	bne.w	8005f28 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800613a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800613e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006142:	2b00      	cmp	r3, #0
 8006144:	d047      	beq.n	80061d6 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800614c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006150:	429a      	cmp	r2, r3
 8006152:	d240      	bcs.n	80061d6 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3308      	adds	r3, #8
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	623b      	str	r3, [r7, #32]
   return(result);
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800616a:	677b      	str	r3, [r7, #116]	; 0x74
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3308      	adds	r3, #8
 8006172:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006174:	633a      	str	r2, [r7, #48]	; 0x30
 8006176:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006178:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800617a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617c:	e841 2300 	strex	r3, r2, [r1]
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e5      	bne.n	8006154 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a15      	ldr	r2, [pc, #84]	; (80061e0 <UART_RxISR_16BIT_FIFOEN+0x300>)
 800618c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	60fb      	str	r3, [r7, #12]
   return(result);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f043 0320 	orr.w	r3, r3, #32
 80061a2:	673b      	str	r3, [r7, #112]	; 0x70
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	69b9      	ldr	r1, [r7, #24]
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	617b      	str	r3, [r7, #20]
   return(result);
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e6      	bne.n	800618e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061c0:	e009      	b.n	80061d6 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	8b1b      	ldrh	r3, [r3, #24]
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0208 	orr.w	r2, r2, #8
 80061d2:	b292      	uxth	r2, r2
 80061d4:	831a      	strh	r2, [r3, #24]
}
 80061d6:	bf00      	nop
 80061d8:	37a0      	adds	r7, #160	; 0xa0
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	08005a7f 	.word	0x08005a7f

080061e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_UARTEx_DisableFifoMode+0x16>
 8006232:	2302      	movs	r3, #2
 8006234:	e027      	b.n	8006286 <HAL_UARTEx_DisableFifoMode+0x66>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2224      	movs	r2, #36	; 0x24
 8006242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006264:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e02d      	b.n	8006306 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2224      	movs	r2, #36	; 0x24
 80062b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f850 	bl	800638c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006322:	2302      	movs	r3, #2
 8006324:	e02d      	b.n	8006382 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2224      	movs	r2, #36	; 0x24
 8006332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f812 	bl	800638c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006398:	2b00      	cmp	r3, #0
 800639a:	d108      	bne.n	80063ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063ac:	e031      	b.n	8006412 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063ae:	2308      	movs	r3, #8
 80063b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063b2:	2308      	movs	r3, #8
 80063b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	0e5b      	lsrs	r3, r3, #25
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	0f5b      	lsrs	r3, r3, #29
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	7b3a      	ldrb	r2, [r7, #12]
 80063da:	4911      	ldr	r1, [pc, #68]	; (8006420 <UARTEx_SetNbDataToProcess+0x94>)
 80063dc:	5c8a      	ldrb	r2, [r1, r2]
 80063de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063e2:	7b3a      	ldrb	r2, [r7, #12]
 80063e4:	490f      	ldr	r1, [pc, #60]	; (8006424 <UARTEx_SetNbDataToProcess+0x98>)
 80063e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	7b7a      	ldrb	r2, [r7, #13]
 80063f8:	4909      	ldr	r1, [pc, #36]	; (8006420 <UARTEx_SetNbDataToProcess+0x94>)
 80063fa:	5c8a      	ldrb	r2, [r1, r2]
 80063fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006400:	7b7a      	ldrb	r2, [r7, #13]
 8006402:	4908      	ldr	r1, [pc, #32]	; (8006424 <UARTEx_SetNbDataToProcess+0x98>)
 8006404:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006406:	fb93 f3f2 	sdiv	r3, r3, r2
 800640a:	b29a      	uxth	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	0800c8d0 	.word	0x0800c8d0
 8006424:	0800c8d8 	.word	0x0800c8d8

08006428 <findIndexByElement>:

/*
Find the index of an array in an array of char array 
*/
int findIndexByElement(char **arr, int size, char *elem)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b088      	sub	sp, #32
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
    // for debugging purposes
    char *b = elem;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < size; i++)
 8006438:	2300      	movs	r3, #0
 800643a:	61fb      	str	r3, [r7, #28]
 800643c:	e011      	b.n	8006462 <findIndexByElement+0x3a>
    {
        char *a = arr[i];
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	617b      	str	r3, [r7, #20]
        if (strcmp(a, b) == 0)
 800644a:	69b9      	ldr	r1, [r7, #24]
 800644c:	6978      	ldr	r0, [r7, #20]
 800644e:	f7f9 fed7 	bl	8000200 <strcmp>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <findIndexByElement+0x34>
        {
            return i;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	e008      	b.n	800646e <findIndexByElement+0x46>
    for (int i = 0; i < size; i++)
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	3301      	adds	r3, #1
 8006460:	61fb      	str	r3, [r7, #28]
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	429a      	cmp	r2, r3
 8006468:	dbe9      	blt.n	800643e <findIndexByElement+0x16>
        }
    }
    return -1; // element does not exist
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800646e:	4618      	mov	r0, r3
 8006470:	3720      	adds	r7, #32
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <convertMorseToText>:
int size: size of the morse code array (mArr)

Note: Ideally, buff and mArr have the same size.
*/
void convertMorseToText(char **mArr, char *buff, int size)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 8006484:	2300      	movs	r3, #0
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	e02d      	b.n	80064e6 <convertMorseToText+0x6e>
    {
        int idx = findIndexByElement(alphabeticalMorse, 26, mArr[i]);
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	211a      	movs	r1, #26
 8006498:	4817      	ldr	r0, [pc, #92]	; (80064f8 <convertMorseToText+0x80>)
 800649a:	f7ff ffc5 	bl	8006428 <findIndexByElement>
 800649e:	61b8      	str	r0, [r7, #24]
        if (idx == -1) {
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a6:	d113      	bne.n	80064d0 <convertMorseToText+0x58>
            int idx = findIndexByElement(numericalMorse, 10, mArr[i]);
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	210a      	movs	r1, #10
 80064b6:	4811      	ldr	r0, [pc, #68]	; (80064fc <convertMorseToText+0x84>)
 80064b8:	f7ff ffb6 	bl	8006428 <findIndexByElement>
 80064bc:	6178      	str	r0, [r7, #20]
            buff[i] = '0' + idx;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	440b      	add	r3, r1
 80064c8:	3230      	adds	r2, #48	; 0x30
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	e007      	b.n	80064e0 <convertMorseToText+0x68>
        } else{
            buff[i] = 'a' + idx;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	440b      	add	r3, r1
 80064da:	3261      	adds	r2, #97	; 0x61
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	3301      	adds	r3, #1
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	dbcd      	blt.n	800648a <convertMorseToText+0x12>
        }
    }
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	3720      	adds	r7, #32
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20000008 	.word	0x20000008
 80064fc:	20000070 	.word	0x20000070

08006500 <convertTextToMorse>:
int size: size of text to concer (mArr)

Note: Ideally, buff and mArr have the same size.
*/
void convertTextToMorse(char *cArr, char **buff, int size)
{
 8006500:	b480      	push	{r7}
 8006502:	b089      	sub	sp, #36	; 0x24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]

    for (int i = 0; i < size; i++)
 800650c:	2300      	movs	r3, #0
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	e04b      	b.n	80065aa <convertTextToMorse+0xaa>
    {
        char c = cArr[i];
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	75fb      	strb	r3, [r7, #23]
        char *morse;
        c = tolower(c);
 800651c:	7dfb      	ldrb	r3, [r7, #23]
 800651e:	75bb      	strb	r3, [r7, #22]
 8006520:	7dbb      	ldrb	r3, [r7, #22]
 8006522:	3301      	adds	r3, #1
 8006524:	4a26      	ldr	r2, [pc, #152]	; (80065c0 <convertTextToMorse+0xc0>)
 8006526:	4413      	add	r3, r2
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	2b01      	cmp	r3, #1
 8006530:	d102      	bne.n	8006538 <convertTextToMorse+0x38>
 8006532:	7dbb      	ldrb	r3, [r7, #22]
 8006534:	3320      	adds	r3, #32
 8006536:	e000      	b.n	800653a <convertTextToMorse+0x3a>
 8006538:	7dbb      	ldrb	r3, [r7, #22]
 800653a:	75fb      	strb	r3, [r7, #23]
        if (islower(c))
 800653c:	7dfb      	ldrb	r3, [r7, #23]
 800653e:	3301      	adds	r3, #1
 8006540:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <convertTextToMorse+0xc0>)
 8006542:	4413      	add	r3, r2
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d106      	bne.n	800655c <convertTextToMorse+0x5c>
        {
            morse = alphabeticalMorse[c - 'a'];
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	3b61      	subs	r3, #97	; 0x61
 8006552:	4a1c      	ldr	r2, [pc, #112]	; (80065c4 <convertTextToMorse+0xc4>)
 8006554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	e01d      	b.n	8006598 <convertTextToMorse+0x98>
        }
        else if (isdigit(c))
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	3301      	adds	r3, #1
 8006560:	4a17      	ldr	r2, [pc, #92]	; (80065c0 <convertTextToMorse+0xc0>)
 8006562:	4413      	add	r3, r2
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d006      	beq.n	800657c <convertTextToMorse+0x7c>
        {
            morse = numericalMorse[c - '0'];
 800656e:	7dfb      	ldrb	r3, [r7, #23]
 8006570:	3b30      	subs	r3, #48	; 0x30
 8006572:	4a15      	ldr	r2, [pc, #84]	; (80065c8 <convertTextToMorse+0xc8>)
 8006574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	e00d      	b.n	8006598 <convertTextToMorse+0x98>
        }
        else if (isspace(c))
 800657c:	7dfb      	ldrb	r3, [r7, #23]
 800657e:	3301      	adds	r3, #1
 8006580:	4a0f      	ldr	r2, [pc, #60]	; (80065c0 <convertTextToMorse+0xc0>)
 8006582:	4413      	add	r3, r2
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <convertTextToMorse+0x94>
        {
            morse = ' ';
 800658e:	2320      	movs	r3, #32
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	e001      	b.n	8006598 <convertTextToMorse+0x98>
        }
        else
        {
            morse = ' ';
 8006594:	2320      	movs	r3, #32
 8006596:	61bb      	str	r3, [r7, #24]
        }

        buff[i] = morse;
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	4413      	add	r3, r2
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	3301      	adds	r3, #1
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	dbaf      	blt.n	8006512 <convertTextToMorse+0x12>
    }
}
 80065b2:	bf00      	nop
 80065b4:	bf00      	nop
 80065b6:	3724      	adds	r7, #36	; 0x24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	0800c928 	.word	0x0800c928
 80065c4:	20000008 	.word	0x20000008
 80065c8:	20000070 	.word	0x20000070

080065cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80065cc:	b5b0      	push	{r4, r5, r7, lr}
 80065ce:	b08c      	sub	sp, #48	; 0x30
 80065d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char Message[] = "Write anything on Serial Terminal\r\n";
 80065d2:	4b78      	ldr	r3, [pc, #480]	; (80067b4 <main+0x1e8>)
 80065d4:	f107 0408 	add.w	r4, r7, #8
 80065d8:	461d      	mov	r5, r3
 80065da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065e2:	682b      	ldr	r3, [r5, #0]
 80065e4:	6023      	str	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80065e6:	f7f9 fff5 	bl	80005d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80065ea:	f000 f905 	bl	80067f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80065ee:	f000 fa61 	bl	8006ab4 <MX_GPIO_Init>
  MX_DMA_Init();
 80065f2:	f000 fa2d 	bl	8006a50 <MX_DMA_Init>
  MX_I2C2_Init();
 80065f6:	f000 f951 	bl	800689c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80065fa:	f000 f9dd 	bl	80069b8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80065fe:	f000 f98d 	bl	800691c <MX_TIM2_Init>

//  HAL_UART_Receive_DMA (&huart1, rxData, 4);
//  flag = 1;

  //HAL_UART_Transmit(&huart1, (uint8_t *)Message, strlen(Message), 10);
  HAL_UART_Receive_IT(&huart1, UART2_rxBuffer, 1);
 8006602:	2201      	movs	r2, #1
 8006604:	496c      	ldr	r1, [pc, #432]	; (80067b8 <main+0x1ec>)
 8006606:	486d      	ldr	r0, [pc, #436]	; (80067bc <main+0x1f0>)
 8006608:	f7fd fe08 	bl	800421c <HAL_UART_Receive_IT>

  //********************************************
  pMyDevice->I2cHandle = &hi2c2;
 800660c:	4b6c      	ldr	r3, [pc, #432]	; (80067c0 <main+0x1f4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a6c      	ldr	r2, [pc, #432]	; (80067c4 <main+0x1f8>)
 8006612:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  pMyDevice->I2cDevAddr      = 0x52;
 8006616:	4b6a      	ldr	r3, [pc, #424]	; (80067c0 <main+0x1f4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2252      	movs	r2, #82	; 0x52
 800661c:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
  pMyDevice->comms_type      =  1;
 8006620:	4b67      	ldr	r3, [pc, #412]	; (80067c0 <main+0x1f4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
  pMyDevice->comms_speed_khz =  400;
 800662a:	4b65      	ldr	r3, [pc, #404]	; (80067c0 <main+0x1f4>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006632:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
  VL53L0X_ResetDevice(&MyDevice);
 8006636:	4864      	ldr	r0, [pc, #400]	; (80067c8 <main+0x1fc>)
 8006638:	f001 f8a2 	bl	8007780 <VL53L0X_ResetDevice>
  status = VL53L0X_DataInit(&MyDevice);
 800663c:	4862      	ldr	r0, [pc, #392]	; (80067c8 <main+0x1fc>)
 800663e:	f000 fd95 	bl	800716c <VL53L0X_DataInit>
 8006642:	4603      	mov	r3, r0
 8006644:	461a      	mov	r2, r3
 8006646:	4b61      	ldr	r3, [pc, #388]	; (80067cc <main+0x200>)
 8006648:	701a      	strb	r2, [r3, #0]
  status = VL53L0X_StaticInit(pMyDevice);
 800664a:	4b5d      	ldr	r3, [pc, #372]	; (80067c0 <main+0x1f4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 ff12 	bl	8007478 <VL53L0X_StaticInit>
 8006654:	4603      	mov	r3, r0
 8006656:	461a      	mov	r2, r3
 8006658:	4b5c      	ldr	r3, [pc, #368]	; (80067cc <main+0x200>)
 800665a:	701a      	strb	r2, [r3, #0]
  status = VL53L0X_PerformRefCalibration(pMyDevice,
 800665c:	4b58      	ldr	r3, [pc, #352]	; (80067c0 <main+0x1f4>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5b      	ldr	r2, [pc, #364]	; (80067d0 <main+0x204>)
 8006662:	495c      	ldr	r1, [pc, #368]	; (80067d4 <main+0x208>)
 8006664:	4618      	mov	r0, r3
 8006666:	f001 fdf3 	bl	8008250 <VL53L0X_PerformRefCalibration>
 800666a:	4603      	mov	r3, r0
 800666c:	461a      	mov	r2, r3
 800666e:	4b57      	ldr	r3, [pc, #348]	; (80067cc <main+0x200>)
 8006670:	701a      	strb	r2, [r3, #0]
          		&VhvSettings, &PhaseCal);
  status = VL53L0X_PerformRefSpadManagement(pMyDevice,
 8006672:	4b53      	ldr	r3, [pc, #332]	; (80067c0 <main+0x1f4>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a58      	ldr	r2, [pc, #352]	; (80067d8 <main+0x20c>)
 8006678:	4958      	ldr	r1, [pc, #352]	; (80067dc <main+0x210>)
 800667a:	4618      	mov	r0, r3
 800667c:	f002 fb02 	bl	8008c84 <VL53L0X_PerformRefSpadManagement>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	4b51      	ldr	r3, [pc, #324]	; (80067cc <main+0x200>)
 8006686:	701a      	strb	r2, [r3, #0]
          		&refSpadCount, &isApertureSpads);
  status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006688:	4b4d      	ldr	r3, [pc, #308]	; (80067c0 <main+0x1f4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2100      	movs	r1, #0
 800668e:	4618      	mov	r0, r3
 8006690:	f001 f974 	bl	800797c <VL53L0X_SetDeviceMode>
 8006694:	4603      	mov	r3, r0
 8006696:	461a      	mov	r2, r3
 8006698:	4b4c      	ldr	r3, [pc, #304]	; (80067cc <main+0x200>)
 800669a:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(strcmp(i, "-..-") == 0) {
 800669c:	4b50      	ldr	r3, [pc, #320]	; (80067e0 <main+0x214>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4950      	ldr	r1, [pc, #320]	; (80067e4 <main+0x218>)
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7f9 fdac 	bl	8000200 <strcmp>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d152      	bne.n	8006754 <main+0x188>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 80066ae:	2201      	movs	r2, #1
 80066b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066b4:	484c      	ldr	r0, [pc, #304]	; (80067e8 <main+0x21c>)
 80066b6:	f7fa fe0f 	bl	80012d8 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 80066ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80066be:	f7f9 fffd 	bl	80006bc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 80066c2:	2200      	movs	r2, #0
 80066c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066c8:	4847      	ldr	r0, [pc, #284]	; (80067e8 <main+0x21c>)
 80066ca:	f7fa fe05 	bl	80012d8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80066ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80066d2:	f7f9 fff3 	bl	80006bc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 80066d6:	2201      	movs	r2, #1
 80066d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066dc:	4842      	ldr	r0, [pc, #264]	; (80067e8 <main+0x21c>)
 80066de:	f7fa fdfb 	bl	80012d8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80066e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066e6:	f7f9 ffe9 	bl	80006bc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 80066ea:	2200      	movs	r2, #0
 80066ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066f0:	483d      	ldr	r0, [pc, #244]	; (80067e8 <main+0x21c>)
 80066f2:	f7fa fdf1 	bl	80012d8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80066f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80066fa:	f7f9 ffdf 	bl	80006bc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 80066fe:	2201      	movs	r2, #1
 8006700:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006704:	4838      	ldr	r0, [pc, #224]	; (80067e8 <main+0x21c>)
 8006706:	f7fa fde7 	bl	80012d8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800670a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800670e:	f7f9 ffd5 	bl	80006bc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 8006712:	2200      	movs	r2, #0
 8006714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006718:	4833      	ldr	r0, [pc, #204]	; (80067e8 <main+0x21c>)
 800671a:	f7fa fddd 	bl	80012d8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800671e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006722:	f7f9 ffcb 	bl	80006bc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 8006726:	2201      	movs	r2, #1
 8006728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800672c:	482e      	ldr	r0, [pc, #184]	; (80067e8 <main+0x21c>)
 800672e:	f7fa fdd3 	bl	80012d8 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8006732:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006736:	f7f9 ffc1 	bl	80006bc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 800673a:	2200      	movs	r2, #0
 800673c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006740:	4829      	ldr	r0, [pc, #164]	; (80067e8 <main+0x21c>)
 8006742:	f7fa fdc9 	bl	80012d8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8006746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800674a:	f7f9 ffb7 	bl	80006bc <HAL_Delay>
		i = morse;
 800674e:	4b24      	ldr	r3, [pc, #144]	; (80067e0 <main+0x214>)
 8006750:	4a26      	ldr	r2, [pc, #152]	; (80067ec <main+0x220>)
 8006752:	601a      	str	r2, [r3, #0]
	  }



	  char* array[1];
	  read_char_morse();
 8006754:	f000 fa06 	bl	8006b64 <read_char_morse>
	  array[0] = morse;
 8006758:	4b24      	ldr	r3, [pc, #144]	; (80067ec <main+0x220>)
 800675a:	603b      	str	r3, [r7, #0]
	  convertMorseToText(array, ascii_char, 1);
 800675c:	1d39      	adds	r1, r7, #4
 800675e:	463b      	mov	r3, r7
 8006760:	2201      	movs	r2, #1
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff fe88 	bl	8006478 <convertMorseToText>
	  ascii_char[1]='\0';
 8006768:	2300      	movs	r3, #0
 800676a:	717b      	strb	r3, [r7, #5]
	  snprintf(output, sizeof(output), "%s\n\r", ascii_char);
 800676c:	1d3b      	adds	r3, r7, #4
 800676e:	4a20      	ldr	r2, [pc, #128]	; (80067f0 <main+0x224>)
 8006770:	2132      	movs	r1, #50	; 0x32
 8006772:	4820      	ldr	r0, [pc, #128]	; (80067f4 <main+0x228>)
 8006774:	f005 fb5a 	bl	800be2c <sniprintf>
	  HAL_UART_Transmit(&huart1, output, strlen(output), 100);
 8006778:	481e      	ldr	r0, [pc, #120]	; (80067f4 <main+0x228>)
 800677a:	f7f9 fd4b 	bl	8000214 <strlen>
 800677e:	4603      	mov	r3, r0
 8006780:	b29a      	uxth	r2, r3
 8006782:	2364      	movs	r3, #100	; 0x64
 8006784:	491b      	ldr	r1, [pc, #108]	; (80067f4 <main+0x228>)
 8006786:	480d      	ldr	r0, [pc, #52]	; (80067bc <main+0x1f0>)
 8006788:	f7fd fcb0 	bl	80040ec <HAL_UART_Transmit>
	  snprintf(output, sizeof(output), "%s\n\r", morse);
 800678c:	4b17      	ldr	r3, [pc, #92]	; (80067ec <main+0x220>)
 800678e:	4a18      	ldr	r2, [pc, #96]	; (80067f0 <main+0x224>)
 8006790:	2132      	movs	r1, #50	; 0x32
 8006792:	4818      	ldr	r0, [pc, #96]	; (80067f4 <main+0x228>)
 8006794:	f005 fb4a 	bl	800be2c <sniprintf>
	  HAL_UART_Transmit(&huart1, output, strlen(output), 100);
 8006798:	4816      	ldr	r0, [pc, #88]	; (80067f4 <main+0x228>)
 800679a:	f7f9 fd3b 	bl	8000214 <strlen>
 800679e:	4603      	mov	r3, r0
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	2364      	movs	r3, #100	; 0x64
 80067a4:	4913      	ldr	r1, [pc, #76]	; (80067f4 <main+0x228>)
 80067a6:	4805      	ldr	r0, [pc, #20]	; (80067bc <main+0x1f0>)
 80067a8:	f7fd fca0 	bl	80040ec <HAL_UART_Transmit>

	  int i = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  {
 80067b0:	e774      	b.n	800669c <main+0xd0>
 80067b2:	bf00      	nop
 80067b4:	0800c874 	.word	0x0800c874
 80067b8:	20000be4 	.word	0x20000be4
 80067bc:	20000488 	.word	0x20000488
 80067c0:	20000098 	.word	0x20000098
 80067c4:	200003e8 	.word	0x200003e8
 80067c8:	2000060c 	.word	0x2000060c
 80067cc:	200007c0 	.word	0x200007c0
 80067d0:	200007c2 	.word	0x200007c2
 80067d4:	200007c1 	.word	0x200007c1
 80067d8:	200007c8 	.word	0x200007c8
 80067dc:	200007c4 	.word	0x200007c4
 80067e0:	200007f8 	.word	0x200007f8
 80067e4:	0800c864 	.word	0x0800c864
 80067e8:	48000400 	.word	0x48000400
 80067ec:	200007e8 	.word	0x200007e8
 80067f0:	0800c86c 	.word	0x0800c86c
 80067f4:	200005d8 	.word	0x200005d8

080067f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b096      	sub	sp, #88	; 0x58
 80067fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067fe:	f107 0314 	add.w	r3, r7, #20
 8006802:	2244      	movs	r2, #68	; 0x44
 8006804:	2100      	movs	r1, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f005 fb08 	bl	800be1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800680c:	463b      	mov	r3, r7
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	605a      	str	r2, [r3, #4]
 8006814:	609a      	str	r2, [r3, #8]
 8006816:	60da      	str	r2, [r3, #12]
 8006818:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800681a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800681e:	f7fb fb35 	bl	8001e8c <HAL_PWREx_ControlVoltageScaling>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8006828:	f000 fa7e 	bl	8006d28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800682c:	2310      	movs	r3, #16
 800682e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006830:	2301      	movs	r3, #1
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006838:	2360      	movs	r3, #96	; 0x60
 800683a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800683c:	2302      	movs	r3, #2
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006840:	2301      	movs	r3, #1
 8006842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006844:	2301      	movs	r3, #1
 8006846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006848:	2328      	movs	r3, #40	; 0x28
 800684a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800684c:	2302      	movs	r3, #2
 800684e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006850:	2302      	movs	r3, #2
 8006852:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006854:	2302      	movs	r3, #2
 8006856:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006858:	f107 0314 	add.w	r3, r7, #20
 800685c:	4618      	mov	r0, r3
 800685e:	f7fb fbb9 	bl	8001fd4 <HAL_RCC_OscConfig>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8006868:	f000 fa5e 	bl	8006d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800686c:	230f      	movs	r3, #15
 800686e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006870:	2303      	movs	r3, #3
 8006872:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006874:	2300      	movs	r3, #0
 8006876:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800687c:	2300      	movs	r3, #0
 800687e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006880:	463b      	mov	r3, r7
 8006882:	2103      	movs	r1, #3
 8006884:	4618      	mov	r0, r3
 8006886:	f7fb ffbf 	bl	8002808 <HAL_RCC_ClockConfig>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8006890:	f000 fa4a 	bl	8006d28 <Error_Handler>
  }
}
 8006894:	bf00      	nop
 8006896:	3758      	adds	r7, #88	; 0x58
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80068a0:	4b1b      	ldr	r3, [pc, #108]	; (8006910 <MX_I2C2_Init+0x74>)
 80068a2:	4a1c      	ldr	r2, [pc, #112]	; (8006914 <MX_I2C2_Init+0x78>)
 80068a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80068a6:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <MX_I2C2_Init+0x74>)
 80068a8:	4a1b      	ldr	r2, [pc, #108]	; (8006918 <MX_I2C2_Init+0x7c>)
 80068aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80068ac:	4b18      	ldr	r3, [pc, #96]	; (8006910 <MX_I2C2_Init+0x74>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80068b2:	4b17      	ldr	r3, [pc, #92]	; (8006910 <MX_I2C2_Init+0x74>)
 80068b4:	2201      	movs	r2, #1
 80068b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80068b8:	4b15      	ldr	r3, [pc, #84]	; (8006910 <MX_I2C2_Init+0x74>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80068be:	4b14      	ldr	r3, [pc, #80]	; (8006910 <MX_I2C2_Init+0x74>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80068c4:	4b12      	ldr	r3, [pc, #72]	; (8006910 <MX_I2C2_Init+0x74>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80068ca:	4b11      	ldr	r3, [pc, #68]	; (8006910 <MX_I2C2_Init+0x74>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80068d0:	4b0f      	ldr	r3, [pc, #60]	; (8006910 <MX_I2C2_Init+0x74>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80068d6:	480e      	ldr	r0, [pc, #56]	; (8006910 <MX_I2C2_Init+0x74>)
 80068d8:	f7fa fd2e 	bl	8001338 <HAL_I2C_Init>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80068e2:	f000 fa21 	bl	8006d28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80068e6:	2100      	movs	r1, #0
 80068e8:	4809      	ldr	r0, [pc, #36]	; (8006910 <MX_I2C2_Init+0x74>)
 80068ea:	f7fb fa17 	bl	8001d1c <HAL_I2CEx_ConfigAnalogFilter>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80068f4:	f000 fa18 	bl	8006d28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80068f8:	2100      	movs	r1, #0
 80068fa:	4805      	ldr	r0, [pc, #20]	; (8006910 <MX_I2C2_Init+0x74>)
 80068fc:	f7fb fa59 	bl	8001db2 <HAL_I2CEx_ConfigDigitalFilter>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006906:	f000 fa0f 	bl	8006d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800690a:	bf00      	nop
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	200003e8 	.word	0x200003e8
 8006914:	40005800 	.word	0x40005800
 8006918:	10909cec 	.word	0x10909cec

0800691c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006922:	f107 0310 	add.w	r3, r7, #16
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	605a      	str	r2, [r3, #4]
 800692c:	609a      	str	r2, [r3, #8]
 800692e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006930:	1d3b      	adds	r3, r7, #4
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	605a      	str	r2, [r3, #4]
 8006938:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800693a:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <MX_TIM2_Init+0x98>)
 800693c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006940:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006942:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <MX_TIM2_Init+0x98>)
 8006944:	2200      	movs	r2, #0
 8006946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006948:	4b1a      	ldr	r3, [pc, #104]	; (80069b4 <MX_TIM2_Init+0x98>)
 800694a:	2200      	movs	r2, #0
 800694c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800694e:	4b19      	ldr	r3, [pc, #100]	; (80069b4 <MX_TIM2_Init+0x98>)
 8006950:	f04f 32ff 	mov.w	r2, #4294967295
 8006954:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006956:	4b17      	ldr	r3, [pc, #92]	; (80069b4 <MX_TIM2_Init+0x98>)
 8006958:	2200      	movs	r2, #0
 800695a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800695c:	4b15      	ldr	r3, [pc, #84]	; (80069b4 <MX_TIM2_Init+0x98>)
 800695e:	2200      	movs	r2, #0
 8006960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006962:	4814      	ldr	r0, [pc, #80]	; (80069b4 <MX_TIM2_Init+0x98>)
 8006964:	f7fc ff26 	bl	80037b4 <HAL_TIM_Base_Init>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800696e:	f000 f9db 	bl	8006d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006976:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006978:	f107 0310 	add.w	r3, r7, #16
 800697c:	4619      	mov	r1, r3
 800697e:	480d      	ldr	r0, [pc, #52]	; (80069b4 <MX_TIM2_Init+0x98>)
 8006980:	f7fd f88e 	bl	8003aa0 <HAL_TIM_ConfigClockSource>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800698a:	f000 f9cd 	bl	8006d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800698e:	2300      	movs	r3, #0
 8006990:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006996:	1d3b      	adds	r3, r7, #4
 8006998:	4619      	mov	r1, r3
 800699a:	4806      	ldr	r0, [pc, #24]	; (80069b4 <MX_TIM2_Init+0x98>)
 800699c:	f7fd fab0 	bl	8003f00 <HAL_TIMEx_MasterConfigSynchronization>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80069a6:	f000 f9bf 	bl	8006d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80069aa:	bf00      	nop
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	2000043c 	.word	0x2000043c

080069b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80069bc:	4b22      	ldr	r3, [pc, #136]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 80069be:	4a23      	ldr	r2, [pc, #140]	; (8006a4c <MX_USART1_UART_Init+0x94>)
 80069c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80069c2:	4b21      	ldr	r3, [pc, #132]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 80069c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80069c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80069ca:	4b1f      	ldr	r3, [pc, #124]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80069d0:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80069d6:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 80069d8:	2200      	movs	r2, #0
 80069da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80069dc:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 80069de:	220c      	movs	r2, #12
 80069e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069e2:	4b19      	ldr	r3, [pc, #100]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80069e8:	4b17      	ldr	r3, [pc, #92]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80069ee:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80069f4:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006a00:	4811      	ldr	r0, [pc, #68]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 8006a02:	f7fd fb23 	bl	800404c <HAL_UART_Init>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006a0c:	f000 f98c 	bl	8006d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006a10:	2100      	movs	r1, #0
 8006a12:	480d      	ldr	r0, [pc, #52]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 8006a14:	f7ff fc3d 	bl	8006292 <HAL_UARTEx_SetTxFifoThreshold>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006a1e:	f000 f983 	bl	8006d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006a22:	2100      	movs	r1, #0
 8006a24:	4808      	ldr	r0, [pc, #32]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 8006a26:	f7ff fc72 	bl	800630e <HAL_UARTEx_SetRxFifoThreshold>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006a30:	f000 f97a 	bl	8006d28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006a34:	4804      	ldr	r0, [pc, #16]	; (8006a48 <MX_USART1_UART_Init+0x90>)
 8006a36:	f7ff fbf3 	bl	8006220 <HAL_UARTEx_DisableFifoMode>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006a40:	f000 f972 	bl	8006d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006a44:	bf00      	nop
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20000488 	.word	0x20000488
 8006a4c:	40013800 	.word	0x40013800

08006a50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006a56:	4b16      	ldr	r3, [pc, #88]	; (8006ab0 <MX_DMA_Init+0x60>)
 8006a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a5a:	4a15      	ldr	r2, [pc, #84]	; (8006ab0 <MX_DMA_Init+0x60>)
 8006a5c:	f043 0304 	orr.w	r3, r3, #4
 8006a60:	6493      	str	r3, [r2, #72]	; 0x48
 8006a62:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <MX_DMA_Init+0x60>)
 8006a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a6e:	4b10      	ldr	r3, [pc, #64]	; (8006ab0 <MX_DMA_Init+0x60>)
 8006a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a72:	4a0f      	ldr	r2, [pc, #60]	; (8006ab0 <MX_DMA_Init+0x60>)
 8006a74:	f043 0301 	orr.w	r3, r3, #1
 8006a78:	6493      	str	r3, [r2, #72]	; 0x48
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	; (8006ab0 <MX_DMA_Init+0x60>)
 8006a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	603b      	str	r3, [r7, #0]
 8006a84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006a86:	2200      	movs	r2, #0
 8006a88:	2100      	movs	r1, #0
 8006a8a:	200b      	movs	r0, #11
 8006a8c:	f7f9 ff15 	bl	80008ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006a90:	200b      	movs	r0, #11
 8006a92:	f7f9 ff2e 	bl	80008f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006a96:	2200      	movs	r2, #0
 8006a98:	2100      	movs	r1, #0
 8006a9a:	200c      	movs	r0, #12
 8006a9c:	f7f9 ff0d 	bl	80008ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006aa0:	200c      	movs	r0, #12
 8006aa2:	f7f9 ff26 	bl	80008f2 <HAL_NVIC_EnableIRQ>

}
 8006aa6:	bf00      	nop
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	40021000 	.word	0x40021000

08006ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aba:	f107 030c 	add.w	r3, r7, #12
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	605a      	str	r2, [r3, #4]
 8006ac4:	609a      	str	r2, [r3, #8]
 8006ac6:	60da      	str	r2, [r3, #12]
 8006ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006aca:	4b23      	ldr	r3, [pc, #140]	; (8006b58 <MX_GPIO_Init+0xa4>)
 8006acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ace:	4a22      	ldr	r2, [pc, #136]	; (8006b58 <MX_GPIO_Init+0xa4>)
 8006ad0:	f043 0304 	orr.w	r3, r3, #4
 8006ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ad6:	4b20      	ldr	r3, [pc, #128]	; (8006b58 <MX_GPIO_Init+0xa4>)
 8006ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	60bb      	str	r3, [r7, #8]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ae2:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <MX_GPIO_Init+0xa4>)
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	4a1c      	ldr	r2, [pc, #112]	; (8006b58 <MX_GPIO_Init+0xa4>)
 8006ae8:	f043 0302 	orr.w	r3, r3, #2
 8006aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006aee:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <MX_GPIO_Init+0xa4>)
 8006af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	607b      	str	r3, [r7, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8006afa:	2200      	movs	r2, #0
 8006afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b00:	4816      	ldr	r0, [pc, #88]	; (8006b5c <MX_GPIO_Init+0xa8>)
 8006b02:	f7fa fbe9 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUEBUTTON_Pin */
  GPIO_InitStruct.Pin = BLUEBUTTON_Pin;
 8006b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUEBUTTON_GPIO_Port, &GPIO_InitStruct);
 8006b16:	f107 030c 	add.w	r3, r7, #12
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4810      	ldr	r0, [pc, #64]	; (8006b60 <MX_GPIO_Init+0xac>)
 8006b1e:	f7fa fa31 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8006b22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006b34:	f107 030c 	add.w	r3, r7, #12
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4808      	ldr	r0, [pc, #32]	; (8006b5c <MX_GPIO_Init+0xa8>)
 8006b3c:	f7fa fa22 	bl	8000f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006b40:	2200      	movs	r2, #0
 8006b42:	2100      	movs	r1, #0
 8006b44:	2028      	movs	r0, #40	; 0x28
 8006b46:	f7f9 feb8 	bl	80008ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006b4a:	2028      	movs	r0, #40	; 0x28
 8006b4c:	f7f9 fed1 	bl	80008f2 <HAL_NVIC_EnableIRQ>

}
 8006b50:	bf00      	nop
 8006b52:	3720      	adds	r7, #32
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	48000400 	.word	0x48000400
 8006b60:	48000800 	.word	0x48000800

08006b64 <read_char_morse>:
    VL53L0X_GetPalErrorString(status, buffer);
    printf("API Status: %i : %s\n", status, buffer);
}

void read_char_morse() // reads a single ascii character (multiple morse codes)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
	int mode = 0; // 0=not started reading. 1=reading(waiting for hand to leave sensor). 2=waiting for additional morse code
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60bb      	str	r3, [r7, #8]
	int counter = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
	while(1)
	{
		  status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice, &rangeData);
 8006b76:	4b2d      	ldr	r3, [pc, #180]	; (8006c2c <read_char_morse+0xc8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	492d      	ldr	r1, [pc, #180]	; (8006c30 <read_char_morse+0xcc>)
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 fe95 	bl	80088ac <VL53L0X_PerformSingleRangingMeasurement>
 8006b82:	4603      	mov	r3, r0
 8006b84:	461a      	mov	r2, r3
 8006b86:	4b2b      	ldr	r3, [pc, #172]	; (8006c34 <read_char_morse+0xd0>)
 8006b88:	701a      	strb	r2, [r3, #0]
		  distance_output = pRangeData->RangeMilliMeter;
 8006b8a:	4b2b      	ldr	r3, [pc, #172]	; (8006c38 <read_char_morse+0xd4>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	891a      	ldrh	r2, [r3, #8]
 8006b90:	4b2a      	ldr	r3, [pc, #168]	; (8006c3c <read_char_morse+0xd8>)
 8006b92:	801a      	strh	r2, [r3, #0]
		  if (distance_output>THRES_DISTANCE)
 8006b94:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <read_char_morse+0xd8>)
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	2b64      	cmp	r3, #100	; 0x64
 8006b9a:	d924      	bls.n	8006be6 <read_char_morse+0x82>
		  {
			  if (mode==1){
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d112      	bne.n	8006bc8 <read_char_morse+0x64>
				  mode = 2;
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	60fb      	str	r3, [r7, #12]
				  morse[i] = (counter>=DURATION_THRES) ? '-' : '.';
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b07      	cmp	r3, #7
 8006baa:	dd01      	ble.n	8006bb0 <read_char_morse+0x4c>
 8006bac:	212d      	movs	r1, #45	; 0x2d
 8006bae:	e000      	b.n	8006bb2 <read_char_morse+0x4e>
 8006bb0:	212e      	movs	r1, #46	; 0x2e
 8006bb2:	4a23      	ldr	r2, [pc, #140]	; (8006c40 <read_char_morse+0xdc>)
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	460a      	mov	r2, r1
 8006bba:	701a      	strb	r2, [r3, #0]
				  i++;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60bb      	str	r3, [r7, #8]
				  counter = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	607b      	str	r3, [r7, #4]
 8006bc6:	e028      	b.n	8006c1a <read_char_morse+0xb6>
			  } else if (mode==2){
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d125      	bne.n	8006c1a <read_char_morse+0xb6>
				  counter++;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	607b      	str	r3, [r7, #4]
				  if (counter>14){
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b0e      	cmp	r3, #14
 8006bd8:	dd1f      	ble.n	8006c1a <read_char_morse+0xb6>
					  morse[i]='\0';
 8006bda:	4a19      	ldr	r2, [pc, #100]	; (8006c40 <read_char_morse+0xdc>)
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4413      	add	r3, r2
 8006be0:	2200      	movs	r2, #0
 8006be2:	701a      	strb	r2, [r3, #0]
					  break;
 8006be4:	e01d      	b.n	8006c22 <read_char_morse+0xbe>
				  }
			  }


		  } else  if (distance_output<THRES_DISTANCE && (mode==0||mode==2)) {
 8006be6:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <read_char_morse+0xd8>)
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	2b63      	cmp	r3, #99	; 0x63
 8006bec:	d80b      	bhi.n	8006c06 <read_char_morse+0xa2>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <read_char_morse+0x96>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d105      	bne.n	8006c06 <read_char_morse+0xa2>
			  counter++;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	607b      	str	r3, [r7, #4]
			  mode = 1;
 8006c00:	2301      	movs	r3, #1
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e009      	b.n	8006c1a <read_char_morse+0xb6>
		  } else if (distance_output<THRES_DISTANCE && mode==1) {
 8006c06:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <read_char_morse+0xd8>)
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	2b63      	cmp	r3, #99	; 0x63
 8006c0c:	d805      	bhi.n	8006c1a <read_char_morse+0xb6>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d102      	bne.n	8006c1a <read_char_morse+0xb6>
			  counter++;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3301      	adds	r3, #1
 8006c18:	607b      	str	r3, [r7, #4]
		  }
		  HAL_Delay(WAITTIME);
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	f7f9 fd4e 	bl	80006bc <HAL_Delay>
		  status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice, &rangeData);
 8006c20:	e7a9      	b.n	8006b76 <read_char_morse+0x12>
	}



}
 8006c22:	bf00      	nop
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000098 	.word	0x20000098
 8006c30:	200007cc 	.word	0x200007cc
 8006c34:	200007c0 	.word	0x200007c0
 8006c38:	2000009c 	.word	0x2000009c
 8006c3c:	200000a0 	.word	0x200000a0
 8006c40:	200007e8 	.word	0x200007e8

08006c44 <HAL_GPIO_EXTI_Callback>:
//*******************************************************

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	80fb      	strh	r3, [r7, #6]
    if(HAL_GPIO_ReadPin(GPIOB, LED_Pin) == GPIO_PIN_SET) {
 8006c4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c52:	4812      	ldr	r0, [pc, #72]	; (8006c9c <HAL_GPIO_EXTI_Callback+0x58>)
 8006c54:	f7fa fb28 	bl	80012a8 <HAL_GPIO_ReadPin>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d106      	bne.n	8006c6c <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c64:	480d      	ldr	r0, [pc, #52]	; (8006c9c <HAL_GPIO_EXTI_Callback+0x58>)
 8006c66:	f7fa fb37 	bl	80012d8 <HAL_GPIO_WritePin>
 8006c6a:	e005      	b.n	8006c78 <HAL_GPIO_EXTI_Callback+0x34>
    } else {
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c72:	480a      	ldr	r0, [pc, #40]	; (8006c9c <HAL_GPIO_EXTI_Callback+0x58>)
 8006c74:	f7fa fb30 	bl	80012d8 <HAL_GPIO_WritePin>
	}
    sprintf(buff, "Board\n\r");
 8006c78:	4909      	ldr	r1, [pc, #36]	; (8006ca0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8006c7a:	480a      	ldr	r0, [pc, #40]	; (8006ca4 <HAL_GPIO_EXTI_Callback+0x60>)
 8006c7c:	f005 f90a 	bl	800be94 <siprintf>
    HAL_UART_Transmit_DMA(&huart1, &buff, strlen(buff));
 8006c80:	4808      	ldr	r0, [pc, #32]	; (8006ca4 <HAL_GPIO_EXTI_Callback+0x60>)
 8006c82:	f7f9 fac7 	bl	8000214 <strlen>
 8006c86:	4603      	mov	r3, r0
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	4905      	ldr	r1, [pc, #20]	; (8006ca4 <HAL_GPIO_EXTI_Callback+0x60>)
 8006c8e:	4806      	ldr	r0, [pc, #24]	; (8006ca8 <HAL_GPIO_EXTI_Callback+0x64>)
 8006c90:	f7fd fb1a 	bl	80042c8 <HAL_UART_Transmit_DMA>
}
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	48000400 	.word	0x48000400
 8006ca0:	0800c8b0 	.word	0x0800c8b0
 8006ca4:	200007fc 	.word	0x200007fc
 8006ca8:	20000488 	.word	0x20000488

08006cac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, UART2_rxBuffer, 1, 100);
 8006cb4:	2364      	movs	r3, #100	; 0x64
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	4912      	ldr	r1, [pc, #72]	; (8006d04 <HAL_UART_RxCpltCallback+0x58>)
 8006cba:	4813      	ldr	r0, [pc, #76]	; (8006d08 <HAL_UART_RxCpltCallback+0x5c>)
 8006cbc:	f7fd fa16 	bl	80040ec <HAL_UART_Transmit>
	char* character[1];
	character[0] = morseBuffer;
 8006cc0:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <HAL_UART_RxCpltCallback+0x60>)
 8006cc2:	60fb      	str	r3, [r7, #12]
	convertTextToMorse(UART2_rxBuffer, character, 1);
 8006cc4:	f107 030c 	add.w	r3, r7, #12
 8006cc8:	2201      	movs	r2, #1
 8006cca:	4619      	mov	r1, r3
 8006ccc:	480d      	ldr	r0, [pc, #52]	; (8006d04 <HAL_UART_RxCpltCallback+0x58>)
 8006cce:	f7ff fc17 	bl	8006500 <convertTextToMorse>

	i= character[0];
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4a0e      	ldr	r2, [pc, #56]	; (8006d10 <HAL_UART_RxCpltCallback+0x64>)
 8006cd6:	6013      	str	r3, [r2, #0]


	HAL_UART_Transmit(&huart1, character, strlen(character), 100);
 8006cd8:	f107 030c 	add.w	r3, r7, #12
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7f9 fa99 	bl	8000214 <strlen>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	f107 010c 	add.w	r1, r7, #12
 8006cea:	2364      	movs	r3, #100	; 0x64
 8006cec:	4806      	ldr	r0, [pc, #24]	; (8006d08 <HAL_UART_RxCpltCallback+0x5c>)
 8006cee:	f7fd f9fd 	bl	80040ec <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, UART2_rxBuffer, 1);
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	4903      	ldr	r1, [pc, #12]	; (8006d04 <HAL_UART_RxCpltCallback+0x58>)
 8006cf6:	4804      	ldr	r0, [pc, #16]	; (8006d08 <HAL_UART_RxCpltCallback+0x5c>)
 8006cf8:	f7fd fa90 	bl	800421c <HAL_UART_Receive_IT>
}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	20000be4 	.word	0x20000be4
 8006d08:	20000488 	.word	0x20000488
 8006d0c:	200007f0 	.word	0x200007f0
 8006d10:	200007f8 	.word	0x200007f8

08006d14 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA (&huart1, rxData, 4);
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006d2c:	b672      	cpsid	i
}
 8006d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006d30:	e7fe      	b.n	8006d30 <Error_Handler+0x8>
	...

08006d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d3a:	4b0f      	ldr	r3, [pc, #60]	; (8006d78 <HAL_MspInit+0x44>)
 8006d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3e:	4a0e      	ldr	r2, [pc, #56]	; (8006d78 <HAL_MspInit+0x44>)
 8006d40:	f043 0301 	orr.w	r3, r3, #1
 8006d44:	6613      	str	r3, [r2, #96]	; 0x60
 8006d46:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <HAL_MspInit+0x44>)
 8006d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	607b      	str	r3, [r7, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d52:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <HAL_MspInit+0x44>)
 8006d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d56:	4a08      	ldr	r2, [pc, #32]	; (8006d78 <HAL_MspInit+0x44>)
 8006d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8006d5e:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <HAL_MspInit+0x44>)
 8006d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	40021000 	.word	0x40021000

08006d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b0ae      	sub	sp, #184	; 0xb8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	605a      	str	r2, [r3, #4]
 8006d8e:	609a      	str	r2, [r3, #8]
 8006d90:	60da      	str	r2, [r3, #12]
 8006d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d94:	f107 0310 	add.w	r3, r7, #16
 8006d98:	2294      	movs	r2, #148	; 0x94
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f005 f83d 	bl	800be1c <memset>
  if(hi2c->Instance==I2C2)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a21      	ldr	r2, [pc, #132]	; (8006e2c <HAL_I2C_MspInit+0xb0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d13b      	bne.n	8006e24 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006dac:	2380      	movs	r3, #128	; 0x80
 8006dae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006db0:	2300      	movs	r3, #0
 8006db2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006db4:	f107 0310 	add.w	r3, r7, #16
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fb ffe3 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006dc4:	f7ff ffb0 	bl	8006d28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dc8:	4b19      	ldr	r3, [pc, #100]	; (8006e30 <HAL_I2C_MspInit+0xb4>)
 8006dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dcc:	4a18      	ldr	r2, [pc, #96]	; (8006e30 <HAL_I2C_MspInit+0xb4>)
 8006dce:	f043 0302 	orr.w	r3, r3, #2
 8006dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dd4:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <HAL_I2C_MspInit+0xb4>)
 8006dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006de0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006de4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006de8:	2312      	movs	r3, #18
 8006dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006df4:	2303      	movs	r3, #3
 8006df6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006dfa:	2304      	movs	r3, #4
 8006dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e04:	4619      	mov	r1, r3
 8006e06:	480b      	ldr	r0, [pc, #44]	; (8006e34 <HAL_I2C_MspInit+0xb8>)
 8006e08:	f7fa f8bc 	bl	8000f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006e0c:	4b08      	ldr	r3, [pc, #32]	; (8006e30 <HAL_I2C_MspInit+0xb4>)
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e10:	4a07      	ldr	r2, [pc, #28]	; (8006e30 <HAL_I2C_MspInit+0xb4>)
 8006e12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e16:	6593      	str	r3, [r2, #88]	; 0x58
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <HAL_I2C_MspInit+0xb4>)
 8006e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006e24:	bf00      	nop
 8006e26:	37b8      	adds	r7, #184	; 0xb8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	40005800 	.word	0x40005800
 8006e30:	40021000 	.word	0x40021000
 8006e34:	48000400 	.word	0x48000400

08006e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e48:	d113      	bne.n	8006e72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <HAL_TIM_Base_MspInit+0x44>)
 8006e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4e:	4a0b      	ldr	r2, [pc, #44]	; (8006e7c <HAL_TIM_Base_MspInit+0x44>)
 8006e50:	f043 0301 	orr.w	r3, r3, #1
 8006e54:	6593      	str	r3, [r2, #88]	; 0x58
 8006e56:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <HAL_TIM_Base_MspInit+0x44>)
 8006e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006e62:	2200      	movs	r2, #0
 8006e64:	2100      	movs	r1, #0
 8006e66:	201c      	movs	r0, #28
 8006e68:	f7f9 fd27 	bl	80008ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006e6c:	201c      	movs	r0, #28
 8006e6e:	f7f9 fd40 	bl	80008f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006e72:	bf00      	nop
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40021000 	.word	0x40021000

08006e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b0ae      	sub	sp, #184	; 0xb8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	605a      	str	r2, [r3, #4]
 8006e92:	609a      	str	r2, [r3, #8]
 8006e94:	60da      	str	r2, [r3, #12]
 8006e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e98:	f107 0310 	add.w	r3, r7, #16
 8006e9c:	2294      	movs	r2, #148	; 0x94
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f004 ffbb 	bl	800be1c <memset>
  if(huart->Instance==USART1)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a4e      	ldr	r2, [pc, #312]	; (8006fe4 <HAL_UART_MspInit+0x164>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	f040 8095 	bne.w	8006fdc <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006eba:	f107 0310 	add.w	r3, r7, #16
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fb ff60 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006eca:	f7ff ff2d 	bl	8006d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006ece:	4b46      	ldr	r3, [pc, #280]	; (8006fe8 <HAL_UART_MspInit+0x168>)
 8006ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed2:	4a45      	ldr	r2, [pc, #276]	; (8006fe8 <HAL_UART_MspInit+0x168>)
 8006ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8006eda:	4b43      	ldr	r3, [pc, #268]	; (8006fe8 <HAL_UART_MspInit+0x168>)
 8006edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ee6:	4b40      	ldr	r3, [pc, #256]	; (8006fe8 <HAL_UART_MspInit+0x168>)
 8006ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eea:	4a3f      	ldr	r2, [pc, #252]	; (8006fe8 <HAL_UART_MspInit+0x168>)
 8006eec:	f043 0302 	orr.w	r3, r3, #2
 8006ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ef2:	4b3d      	ldr	r3, [pc, #244]	; (8006fe8 <HAL_UART_MspInit+0x168>)
 8006ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	60bb      	str	r3, [r7, #8]
 8006efc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006efe:	23c0      	movs	r3, #192	; 0xc0
 8006f00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f04:	2302      	movs	r3, #2
 8006f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f10:	2303      	movs	r3, #3
 8006f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006f16:	2307      	movs	r3, #7
 8006f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f20:	4619      	mov	r1, r3
 8006f22:	4832      	ldr	r0, [pc, #200]	; (8006fec <HAL_UART_MspInit+0x16c>)
 8006f24:	f7fa f82e 	bl	8000f84 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8006f28:	4b31      	ldr	r3, [pc, #196]	; (8006ff0 <HAL_UART_MspInit+0x170>)
 8006f2a:	4a32      	ldr	r2, [pc, #200]	; (8006ff4 <HAL_UART_MspInit+0x174>)
 8006f2c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8006f2e:	4b30      	ldr	r3, [pc, #192]	; (8006ff0 <HAL_UART_MspInit+0x170>)
 8006f30:	2218      	movs	r2, #24
 8006f32:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f34:	4b2e      	ldr	r3, [pc, #184]	; (8006ff0 <HAL_UART_MspInit+0x170>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f3a:	4b2d      	ldr	r3, [pc, #180]	; (8006ff0 <HAL_UART_MspInit+0x170>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f40:	4b2b      	ldr	r3, [pc, #172]	; (8006ff0 <HAL_UART_MspInit+0x170>)
 8006f42:	2280      	movs	r2, #128	; 0x80
 8006f44:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f46:	4b2a      	ldr	r3, [pc, #168]	; (8006ff0 <HAL_UART_MspInit+0x170>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f4c:	4b28      	ldr	r3, [pc, #160]	; (8006ff0 <HAL_UART_MspInit+0x170>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006f52:	4b27      	ldr	r3, [pc, #156]	; (8006ff0 <HAL_UART_MspInit+0x170>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f58:	4b25      	ldr	r3, [pc, #148]	; (8006ff0 <HAL_UART_MspInit+0x170>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006f5e:	4824      	ldr	r0, [pc, #144]	; (8006ff0 <HAL_UART_MspInit+0x170>)
 8006f60:	f7f9 fce2 	bl	8000928 <HAL_DMA_Init>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8006f6a:	f7ff fedd 	bl	8006d28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a1f      	ldr	r2, [pc, #124]	; (8006ff0 <HAL_UART_MspInit+0x170>)
 8006f72:	67da      	str	r2, [r3, #124]	; 0x7c
 8006f74:	4a1e      	ldr	r2, [pc, #120]	; (8006ff0 <HAL_UART_MspInit+0x170>)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8006f7a:	4b1f      	ldr	r3, [pc, #124]	; (8006ff8 <HAL_UART_MspInit+0x178>)
 8006f7c:	4a1f      	ldr	r2, [pc, #124]	; (8006ffc <HAL_UART_MspInit+0x17c>)
 8006f7e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8006f80:	4b1d      	ldr	r3, [pc, #116]	; (8006ff8 <HAL_UART_MspInit+0x178>)
 8006f82:	2219      	movs	r2, #25
 8006f84:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f86:	4b1c      	ldr	r3, [pc, #112]	; (8006ff8 <HAL_UART_MspInit+0x178>)
 8006f88:	2210      	movs	r2, #16
 8006f8a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f8c:	4b1a      	ldr	r3, [pc, #104]	; (8006ff8 <HAL_UART_MspInit+0x178>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f92:	4b19      	ldr	r3, [pc, #100]	; (8006ff8 <HAL_UART_MspInit+0x178>)
 8006f94:	2280      	movs	r2, #128	; 0x80
 8006f96:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f98:	4b17      	ldr	r3, [pc, #92]	; (8006ff8 <HAL_UART_MspInit+0x178>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f9e:	4b16      	ldr	r3, [pc, #88]	; (8006ff8 <HAL_UART_MspInit+0x178>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006fa4:	4b14      	ldr	r3, [pc, #80]	; (8006ff8 <HAL_UART_MspInit+0x178>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006faa:	4b13      	ldr	r3, [pc, #76]	; (8006ff8 <HAL_UART_MspInit+0x178>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006fb0:	4811      	ldr	r0, [pc, #68]	; (8006ff8 <HAL_UART_MspInit+0x178>)
 8006fb2:	f7f9 fcb9 	bl	8000928 <HAL_DMA_Init>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8006fbc:	f7ff feb4 	bl	8006d28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a0d      	ldr	r2, [pc, #52]	; (8006ff8 <HAL_UART_MspInit+0x178>)
 8006fc4:	679a      	str	r2, [r3, #120]	; 0x78
 8006fc6:	4a0c      	ldr	r2, [pc, #48]	; (8006ff8 <HAL_UART_MspInit+0x178>)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2100      	movs	r1, #0
 8006fd0:	2025      	movs	r0, #37	; 0x25
 8006fd2:	f7f9 fc72 	bl	80008ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006fd6:	2025      	movs	r0, #37	; 0x25
 8006fd8:	f7f9 fc8b 	bl	80008f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006fdc:	bf00      	nop
 8006fde:	37b8      	adds	r7, #184	; 0xb8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	40013800 	.word	0x40013800
 8006fe8:	40021000 	.word	0x40021000
 8006fec:	48000400 	.word	0x48000400
 8006ff0:	20000518 	.word	0x20000518
 8006ff4:	40020008 	.word	0x40020008
 8006ff8:	20000578 	.word	0x20000578
 8006ffc:	4002001c 	.word	0x4002001c

08007000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007004:	e7fe      	b.n	8007004 <NMI_Handler+0x4>

08007006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007006:	b480      	push	{r7}
 8007008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800700a:	e7fe      	b.n	800700a <HardFault_Handler+0x4>

0800700c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800700c:	b480      	push	{r7}
 800700e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007010:	e7fe      	b.n	8007010 <MemManage_Handler+0x4>

08007012 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007012:	b480      	push	{r7}
 8007014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007016:	e7fe      	b.n	8007016 <BusFault_Handler+0x4>

08007018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800701c:	e7fe      	b.n	800701c <UsageFault_Handler+0x4>

0800701e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800701e:	b480      	push	{r7}
 8007020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007022:	bf00      	nop
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007030:	bf00      	nop
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800703a:	b480      	push	{r7}
 800703c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800703e:	bf00      	nop
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800704c:	f7f9 fb16 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007050:	bf00      	nop
 8007052:	bd80      	pop	{r7, pc}

08007054 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007058:	4802      	ldr	r0, [pc, #8]	; (8007064 <DMA1_Channel1_IRQHandler+0x10>)
 800705a:	f7f9 fe43 	bl	8000ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800705e:	bf00      	nop
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000518 	.word	0x20000518

08007068 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800706c:	4802      	ldr	r0, [pc, #8]	; (8007078 <DMA1_Channel2_IRQHandler+0x10>)
 800706e:	f7f9 fe39 	bl	8000ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007072:	bf00      	nop
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000578 	.word	0x20000578

0800707c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007080:	4802      	ldr	r0, [pc, #8]	; (800708c <TIM2_IRQHandler+0x10>)
 8007082:	f7fc fbee 	bl	8003862 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007086:	bf00      	nop
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	2000043c 	.word	0x2000043c

08007090 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007094:	4802      	ldr	r0, [pc, #8]	; (80070a0 <USART1_IRQHandler+0x10>)
 8007096:	f7fd f9a9 	bl	80043ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800709a:	bf00      	nop
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000488 	.word	0x20000488

080070a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUEBUTTON_Pin);
 80070a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80070ac:	f7fa f92c 	bl	8001308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80070b0:	bf00      	nop
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80070bc:	4a14      	ldr	r2, [pc, #80]	; (8007110 <_sbrk+0x5c>)
 80070be:	4b15      	ldr	r3, [pc, #84]	; (8007114 <_sbrk+0x60>)
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80070c8:	4b13      	ldr	r3, [pc, #76]	; (8007118 <_sbrk+0x64>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80070d0:	4b11      	ldr	r3, [pc, #68]	; (8007118 <_sbrk+0x64>)
 80070d2:	4a12      	ldr	r2, [pc, #72]	; (800711c <_sbrk+0x68>)
 80070d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80070d6:	4b10      	ldr	r3, [pc, #64]	; (8007118 <_sbrk+0x64>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4413      	add	r3, r2
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d207      	bcs.n	80070f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80070e4:	f004 fe62 	bl	800bdac <__errno>
 80070e8:	4603      	mov	r3, r0
 80070ea:	220c      	movs	r2, #12
 80070ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80070ee:	f04f 33ff 	mov.w	r3, #4294967295
 80070f2:	e009      	b.n	8007108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80070f4:	4b08      	ldr	r3, [pc, #32]	; (8007118 <_sbrk+0x64>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80070fa:	4b07      	ldr	r3, [pc, #28]	; (8007118 <_sbrk+0x64>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4413      	add	r3, r2
 8007102:	4a05      	ldr	r2, [pc, #20]	; (8007118 <_sbrk+0x64>)
 8007104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007106:	68fb      	ldr	r3, [r7, #12]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	200a0000 	.word	0x200a0000
 8007114:	00000400 	.word	0x00000400
 8007118:	20000be8 	.word	0x20000be8
 800711c:	20000c40 	.word	0x20000c40

08007120 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007124:	4b06      	ldr	r3, [pc, #24]	; (8007140 <SystemInit+0x20>)
 8007126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712a:	4a05      	ldr	r2, [pc, #20]	; (8007140 <SystemInit+0x20>)
 800712c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8007134:	bf00      	nop
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	e000ed00 	.word	0xe000ed00

08007144 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 fdaa 	bl	8008cae <VL53L0X_get_offset_calibration_data_micro_meter>
 800715a:	4603      	mov	r3, r0
 800715c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800715e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b0a4      	sub	sp, #144	; 0x90
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007174:	2300      	movs	r3, #0
 8007176:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800717a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800717e:	2b00      	cmp	r3, #0
 8007180:	d107      	bne.n	8007192 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007182:	2200      	movs	r2, #0
 8007184:	2188      	movs	r1, #136	; 0x88
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f004 fcb6 	bl	800baf8 <VL53L0X_WrByte>
 800718c:	4603      	mov	r3, r0
 800718e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071a0:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4aae      	ldr	r2, [pc, #696]	; (8007460 <VL53L0X_DataInit+0x2f4>)
 80071a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80071b2:	f107 0310 	add.w	r3, r7, #16
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fb29 	bl	8007810 <VL53L0X_GetDeviceParameters>
 80071be:	4603      	mov	r3, r0
 80071c0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 80071c4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d130      	bne.n	800722e <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 80071cc:	2300      	movs	r3, #0
 80071ce:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 80071d0:	2300      	movs	r3, #0
 80071d2:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 80071d4:	2300      	movs	r3, #0
 80071d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 80071d8:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 80071dc:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 80071de:	f24b 3333 	movw	r3, #45875	; 0xb333
 80071e2:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 80071e4:	4b9f      	ldr	r3, [pc, #636]	; (8007464 <VL53L0X_DataInit+0x2f8>)
 80071e6:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 80071e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071ec:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 80071ee:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 80071f2:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 80071f4:	4b9c      	ldr	r3, [pc, #624]	; (8007468 <VL53L0X_DataInit+0x2fc>)
 80071f6:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 80071f8:	4b9c      	ldr	r3, [pc, #624]	; (800746c <VL53L0X_DataInit+0x300>)
 80071fa:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 80071fc:	4b9c      	ldr	r3, [pc, #624]	; (8007470 <VL53L0X_DataInit+0x304>)
 80071fe:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 8007200:	4b9c      	ldr	r3, [pc, #624]	; (8007474 <VL53L0X_DataInit+0x308>)
 8007202:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 8007204:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8007208:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 800720a:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 800720e:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 8007210:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8007214:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 8007216:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 800721a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3308      	adds	r3, #8
 8007222:	f107 0110 	add.w	r1, r7, #16
 8007226:	2278      	movs	r2, #120	; 0x78
 8007228:	4618      	mov	r0, r3
 800722a:	f004 fde9 	bl	800be00 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2264      	movs	r2, #100	; 0x64
 8007232:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f44f 7261 	mov.w	r2, #900	; 0x384
 800723c:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007246:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007250:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800725c:	2201      	movs	r2, #1
 800725e:	2180      	movs	r1, #128	; 0x80
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f004 fc49 	bl	800baf8 <VL53L0X_WrByte>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800726e:	4313      	orrs	r3, r2
 8007270:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007274:	2201      	movs	r2, #1
 8007276:	21ff      	movs	r1, #255	; 0xff
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f004 fc3d 	bl	800baf8 <VL53L0X_WrByte>
 800727e:	4603      	mov	r3, r0
 8007280:	461a      	mov	r2, r3
 8007282:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007286:	4313      	orrs	r3, r2
 8007288:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800728c:	2200      	movs	r2, #0
 800728e:	2100      	movs	r1, #0
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f004 fc31 	bl	800baf8 <VL53L0X_WrByte>
 8007296:	4603      	mov	r3, r0
 8007298:	461a      	mov	r2, r3
 800729a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800729e:	4313      	orrs	r3, r2
 80072a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80072a4:	f107 030f 	add.w	r3, r7, #15
 80072a8:	461a      	mov	r2, r3
 80072aa:	2191      	movs	r1, #145	; 0x91
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f004 fca5 	bl	800bbfc <VL53L0X_RdByte>
 80072b2:	4603      	mov	r3, r0
 80072b4:	461a      	mov	r2, r3
 80072b6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80072c0:	7bfa      	ldrb	r2, [r7, #15]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80072c8:	2201      	movs	r2, #1
 80072ca:	2100      	movs	r1, #0
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f004 fc13 	bl	800baf8 <VL53L0X_WrByte>
 80072d2:	4603      	mov	r3, r0
 80072d4:	461a      	mov	r2, r3
 80072d6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80072da:	4313      	orrs	r3, r2
 80072dc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80072e0:	2200      	movs	r2, #0
 80072e2:	21ff      	movs	r1, #255	; 0xff
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f004 fc07 	bl	800baf8 <VL53L0X_WrByte>
 80072ea:	4603      	mov	r3, r0
 80072ec:	461a      	mov	r2, r3
 80072ee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80072f2:	4313      	orrs	r3, r2
 80072f4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80072f8:	2200      	movs	r2, #0
 80072fa:	2180      	movs	r1, #128	; 0x80
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f004 fbfb 	bl	800baf8 <VL53L0X_WrByte>
 8007302:	4603      	mov	r3, r0
 8007304:	461a      	mov	r2, r3
 8007306:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800730a:	4313      	orrs	r3, r2
 800730c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007310:	2300      	movs	r3, #0
 8007312:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007316:	e017      	b.n	8007348 <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 8007318:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800731c:	2b00      	cmp	r3, #0
 800731e:	d118      	bne.n	8007352 <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007324:	b29b      	uxth	r3, r3
 8007326:	2201      	movs	r2, #1
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fd8a 	bl	8007e44 <VL53L0X_SetLimitCheckEnable>
 8007330:	4603      	mov	r3, r0
 8007332:	461a      	mov	r2, r3
 8007334:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007338:	4313      	orrs	r3, r2
 800733a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800733e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007342:	3301      	adds	r3, #1
 8007344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007348:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800734c:	2b05      	cmp	r3, #5
 800734e:	dde3      	ble.n	8007318 <VL53L0X_DataInit+0x1ac>
 8007350:	e000      	b.n	8007354 <VL53L0X_DataInit+0x1e8>
		else
			break;
 8007352:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007354:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8007358:	2b00      	cmp	r3, #0
 800735a:	d107      	bne.n	800736c <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800735c:	2200      	movs	r2, #0
 800735e:	2102      	movs	r1, #2
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fd6f 	bl	8007e44 <VL53L0X_SetLimitCheckEnable>
 8007366:	4603      	mov	r3, r0
 8007368:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800736c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8007370:	2b00      	cmp	r3, #0
 8007372:	d107      	bne.n	8007384 <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007374:	2200      	movs	r2, #0
 8007376:	2103      	movs	r1, #3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fd63 	bl	8007e44 <VL53L0X_SetLimitCheckEnable>
 800737e:	4603      	mov	r3, r0
 8007380:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007384:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8007388:	2b00      	cmp	r3, #0
 800738a:	d107      	bne.n	800739c <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800738c:	2200      	movs	r2, #0
 800738e:	2104      	movs	r1, #4
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fd57 	bl	8007e44 <VL53L0X_SetLimitCheckEnable>
 8007396:	4603      	mov	r3, r0
 8007398:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800739c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d107      	bne.n	80073b4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80073a4:	2200      	movs	r2, #0
 80073a6:	2105      	movs	r1, #5
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fd4b 	bl	8007e44 <VL53L0X_SetLimitCheckEnable>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80073b4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d108      	bne.n	80073ce <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80073bc:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80073c0:	2100      	movs	r1, #0
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fdee 	bl	8007fa4 <VL53L0X_SetLimitCheckValue>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80073ce:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d108      	bne.n	80073e8 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80073d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80073da:	2101      	movs	r1, #1
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fde1 	bl	8007fa4 <VL53L0X_SetLimitCheckValue>
 80073e2:	4603      	mov	r3, r0
 80073e4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073e8:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d108      	bne.n	8007402 <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80073f0:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80073f4:	2102      	movs	r1, #2
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fdd4 	bl	8007fa4 <VL53L0X_SetLimitCheckValue>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007402:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8007406:	2b00      	cmp	r3, #0
 8007408:	d107      	bne.n	800741a <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800740a:	2200      	movs	r2, #0
 800740c:	2103      	movs	r1, #3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fdc8 	bl	8007fa4 <VL53L0X_SetLimitCheckValue>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800741a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10f      	bne.n	8007442 <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	22ff      	movs	r2, #255	; 0xff
 8007426:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800742a:	22ff      	movs	r2, #255	; 0xff
 800742c:	2101      	movs	r1, #1
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f004 fb62 	bl	800baf8 <VL53L0X_WrByte>
 8007434:	4603      	mov	r3, r0
 8007436:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007442:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8007446:	2b00      	cmp	r3, #0
 8007448:	d103      	bne.n	8007452 <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 8007452:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8007456:	4618      	mov	r0, r3
 8007458:	3790      	adds	r7, #144	; 0x90
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	000970a4 	.word	0x000970a4
 8007464:	044c0000 	.word	0x044c0000
 8007468:	0003cccc 	.word	0x0003cccc
 800746c:	02ee0000 	.word	0x02ee0000
 8007470:	00074ccc 	.word	0x00074ccc
 8007474:	02260000 	.word	0x02260000

08007478 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b0ac      	sub	sp, #176	; 0xb0
 800747c:	af02      	add	r7, sp, #8
 800747e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007480:	2300      	movs	r3, #0
 8007482:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8007486:	f107 031c 	add.w	r3, r7, #28
 800748a:	2278      	movs	r2, #120	; 0x78
 800748c:	2100      	movs	r1, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f004 fcc4 	bl	800be1c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80074b6:	2101      	movs	r1, #1
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f002 fb3b 	bl	8009b34 <VL53L0X_get_info_from_device>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80074ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80074d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80074d8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d80f      	bhi.n	8007500 <VL53L0X_StaticInit+0x88>
 80074e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d103      	bne.n	80074f0 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 80074e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d807      	bhi.n	8007500 <VL53L0X_StaticInit+0x88>
 80074f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10f      	bne.n	8007518 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 80074f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074fc:	2b0c      	cmp	r3, #12
 80074fe:	d90b      	bls.n	8007518 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8007500:	f107 0218 	add.w	r2, r7, #24
 8007504:	f107 0314 	add.w	r3, r7, #20
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 fdca 	bl	80090a4 <VL53L0X_perform_ref_spad_management>
 8007510:	4603      	mov	r3, r0
 8007512:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8007516:	e00a      	b.n	800752e <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007518:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800751c:	461a      	mov	r2, r3
 800751e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 ffca 	bl	80094bc <VL53L0X_set_reference_spads>
 8007528:	4603      	mov	r3, r0
 800752a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800752e:	4b93      	ldr	r3, [pc, #588]	; (800777c <VL53L0X_StaticInit+0x304>)
 8007530:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007534:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8007538:	2b00      	cmp	r3, #0
 800753a:	d111      	bne.n	8007560 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8007542:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007546:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800754a:	2b00      	cmp	r3, #0
 800754c:	d105      	bne.n	800755a <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007554:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007558:	e002      	b.n	8007560 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800755a:	4b88      	ldr	r3, [pc, #544]	; (800777c <VL53L0X_StaticInit+0x304>)
 800755c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007560:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8007564:	2b00      	cmp	r3, #0
 8007566:	d107      	bne.n	8007578 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 8007568:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f003 fbf1 	bl	800ad54 <VL53L0X_load_tuning_settings>
 8007572:	4603      	mov	r3, r0
 8007574:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8007578:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8007580:	2300      	movs	r3, #0
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	2304      	movs	r3, #4
 8007586:	2200      	movs	r2, #0
 8007588:	2100      	movs	r1, #0
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 f9be 	bl	800890c <VL53L0X_SetGpioConfig>
 8007590:	4603      	mov	r3, r0
 8007592:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007596:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800759a:	2b00      	cmp	r3, #0
 800759c:	d121      	bne.n	80075e2 <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800759e:	2201      	movs	r2, #1
 80075a0:	21ff      	movs	r1, #255	; 0xff
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f004 faa8 	bl	800baf8 <VL53L0X_WrByte>
 80075a8:	4603      	mov	r3, r0
 80075aa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80075ae:	f107 031a 	add.w	r3, r7, #26
 80075b2:	461a      	mov	r2, r3
 80075b4:	2184      	movs	r1, #132	; 0x84
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f004 fb4a 	bl	800bc50 <VL53L0X_RdWord>
 80075bc:	4603      	mov	r3, r0
 80075be:	461a      	mov	r2, r3
 80075c0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80075ca:	2200      	movs	r2, #0
 80075cc:	21ff      	movs	r1, #255	; 0xff
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f004 fa92 	bl	800baf8 <VL53L0X_WrByte>
 80075d4:	4603      	mov	r3, r0
 80075d6:	461a      	mov	r2, r3
 80075d8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80075dc:	4313      	orrs	r3, r2
 80075de:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80075e2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d105      	bne.n	80075f6 <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80075ea:	8b7b      	ldrh	r3, [r7, #26]
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	461a      	mov	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80075f6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d108      	bne.n	8007610 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80075fe:	f107 031c 	add.w	r3, r7, #28
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f903 	bl	8007810 <VL53L0X_GetDeviceParameters>
 800760a:	4603      	mov	r3, r0
 800760c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 8007610:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8007614:	2b00      	cmp	r3, #0
 8007616:	d110      	bne.n	800763a <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8007618:	f107 0319 	add.w	r3, r7, #25
 800761c:	4619      	mov	r1, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9eb 	bl	80079fa <VL53L0X_GetFractionEnable>
 8007624:	4603      	mov	r3, r0
 8007626:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 800762a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800762e:	2b00      	cmp	r3, #0
 8007630:	d103      	bne.n	800763a <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007632:	7e7a      	ldrb	r2, [r7, #25]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 800763a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800763e:	2b00      	cmp	r3, #0
 8007640:	d107      	bne.n	8007652 <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3308      	adds	r3, #8
 8007646:	f107 011c 	add.w	r1, r7, #28
 800764a:	2278      	movs	r2, #120	; 0x78
 800764c:	4618      	mov	r0, r3
 800764e:	f004 fbd7 	bl	800be00 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8007652:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8007656:	2b00      	cmp	r3, #0
 8007658:	d111      	bne.n	800767e <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 800765a:	f107 0319 	add.w	r3, r7, #25
 800765e:	461a      	mov	r2, r3
 8007660:	2101      	movs	r1, #1
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f004 faca 	bl	800bbfc <VL53L0X_RdByte>
 8007668:	4603      	mov	r3, r0
 800766a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800766e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8007672:	2b00      	cmp	r3, #0
 8007674:	d103      	bne.n	800767e <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8007676:	7e7a      	ldrb	r2, [r7, #25]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800767e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8007682:	2b00      	cmp	r3, #0
 8007684:	d107      	bne.n	8007696 <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007686:	2200      	movs	r2, #0
 8007688:	2100      	movs	r1, #0
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fa12 	bl	8007ab4 <VL53L0X_SetSequenceStepEnable>
 8007690:	4603      	mov	r3, r0
 8007692:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007696:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800769a:	2b00      	cmp	r3, #0
 800769c:	d107      	bne.n	80076ae <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800769e:	2200      	movs	r2, #0
 80076a0:	2102      	movs	r1, #2
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa06 	bl	8007ab4 <VL53L0X_SetSequenceStepEnable>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80076ae:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d103      	bne.n	80076be <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2203      	movs	r2, #3
 80076ba:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80076be:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 80076c6:	f107 0313 	add.w	r3, r7, #19
 80076ca:	461a      	mov	r2, r3
 80076cc:	2100      	movs	r1, #0
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f9d8 	bl	8007a84 <VL53L0X_GetVcselPulsePeriod>
 80076d4:	4603      	mov	r3, r0
 80076d6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076da:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d103      	bne.n	80076ea <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80076e2:	7cfa      	ldrb	r2, [r7, #19]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80076ea:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d109      	bne.n	8007706 <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80076f2:	f107 0313 	add.w	r3, r7, #19
 80076f6:	461a      	mov	r2, r3
 80076f8:	2101      	movs	r1, #1
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f9c2 	bl	8007a84 <VL53L0X_GetVcselPulsePeriod>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007706:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800770a:	2b00      	cmp	r3, #0
 800770c:	d103      	bne.n	8007716 <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800770e:	7cfa      	ldrb	r2, [r7, #19]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007716:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800771a:	2b00      	cmp	r3, #0
 800771c:	d109      	bne.n	8007732 <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 800771e:	f107 030c 	add.w	r3, r7, #12
 8007722:	461a      	mov	r2, r3
 8007724:	2103      	movs	r1, #3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f002 ff86 	bl	800a638 <get_sequence_step_timeout>
 800772c:	4603      	mov	r3, r0
 800772e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007732:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8007736:	2b00      	cmp	r3, #0
 8007738:	d103      	bne.n	8007742 <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007742:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 800774a:	f107 030c 	add.w	r3, r7, #12
 800774e:	461a      	mov	r2, r3
 8007750:	2104      	movs	r1, #4
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f002 ff70 	bl	800a638 <get_sequence_step_timeout>
 8007758:	4603      	mov	r3, r0
 800775a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800775e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8007762:	2b00      	cmp	r3, #0
 8007764:	d103      	bne.n	800776e <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800776e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 8007772:	4618      	mov	r0, r3
 8007774:	37a8      	adds	r7, #168	; 0xa8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	200000a8 	.word	0x200000a8

08007780 <VL53L0X_ResetDevice>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_ResetDevice(VL53L0X_DEV Dev)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007788:	2300      	movs	r3, #0
 800778a:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* Set reset bit */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 800778c:	2200      	movs	r2, #0
 800778e:	21bf      	movs	r1, #191	; 0xbf
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f004 f9b1 	bl	800baf8 <VL53L0X_WrByte>
 8007796:	4603      	mov	r3, r0
 8007798:	73fb      	strb	r3, [r7, #15]
		0x00);

	/* Wait for some time */
	if (Status == VL53L0X_ERROR_NONE) {
 800779a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10b      	bne.n	80077ba <VL53L0X_ResetDevice+0x3a>
		do {
			Status = VL53L0X_RdByte(Dev,
 80077a2:	f107 030e 	add.w	r3, r7, #14
 80077a6:	461a      	mov	r2, r3
 80077a8:	21c0      	movs	r1, #192	; 0xc0
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f004 fa26 	bl	800bbfc <VL53L0X_RdByte>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Byte);
		} while (Byte != 0x00);
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1f3      	bne.n	80077a2 <VL53L0X_ResetDevice+0x22>
	}

	VL53L0X_PollingDelay(Dev);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f004 fabc 	bl	800bd38 <VL53L0X_PollingDelay>

	/* Release reset */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 80077c0:	2201      	movs	r2, #1
 80077c2:	21bf      	movs	r1, #191	; 0xbf
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f004 f997 	bl	800baf8 <VL53L0X_WrByte>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]
		0x01);

	/* Wait until correct boot-up of the device */
	if (Status == VL53L0X_ERROR_NONE) {
 80077ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10b      	bne.n	80077ee <VL53L0X_ResetDevice+0x6e>
		do {
			Status = VL53L0X_RdByte(Dev,
 80077d6:	f107 030e 	add.w	r3, r7, #14
 80077da:	461a      	mov	r2, r3
 80077dc:	21c0      	movs	r1, #192	; 0xc0
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f004 fa0c 	bl	800bbfc <VL53L0X_RdByte>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Byte);
		} while (Byte == 0x00);
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0f3      	beq.n	80077d6 <VL53L0X_ResetDevice+0x56>
	}

	VL53L0X_PollingDelay(Dev);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f004 faa2 	bl	800bd38 <VL53L0X_PollingDelay>

	/* Set PAL State to VL53L0X_STATE_POWERDOWN */
	if (Status == VL53L0X_ERROR_NONE)
 80077f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d103      	bne.n	8007804 <VL53L0X_ResetDevice+0x84>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_POWERDOWN);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 8007804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f8d6 	bl	80079d4 <VL53L0X_GetDeviceMode>
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800782c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d107      	bne.n	8007844 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	3308      	adds	r3, #8
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa86 	bl	8007d4c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8007844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2200      	movs	r2, #0
 8007850:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8007852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d107      	bne.n	800786a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	3310      	adds	r3, #16
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fabc 	bl	8007dde <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007866:	4603      	mov	r3, r0
 8007868:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800786a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d107      	bne.n	8007882 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	3314      	adds	r3, #20
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff fc63 	bl	8007144 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800787e:	4603      	mov	r3, r0
 8007880:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d134      	bne.n	80078f4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800788a:	2300      	movs	r3, #0
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	e02a      	b.n	80078e6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d12a      	bne.n	80078ee <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	b299      	uxth	r1, r3
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	3308      	adds	r3, #8
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	4413      	add	r3, r2
 80078a6:	3304      	adds	r3, #4
 80078a8:	461a      	mov	r2, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fbdc 	bl	8008068 <VL53L0X_GetLimitCheckValue>
 80078b0:	4603      	mov	r3, r0
 80078b2:	461a      	mov	r2, r3
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80078ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d117      	bne.n	80078f2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	b299      	uxth	r1, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	3318      	adds	r3, #24
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	4413      	add	r3, r2
 80078ce:	461a      	mov	r2, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fb43 	bl	8007f5c <VL53L0X_GetLimitCheckEnable>
 80078d6:	4603      	mov	r3, r0
 80078d8:	461a      	mov	r2, r3
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	4313      	orrs	r3, r2
 80078de:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	3301      	adds	r3, #1
 80078e4:	60bb      	str	r3, [r7, #8]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2b05      	cmp	r3, #5
 80078ea:	ddd1      	ble.n	8007890 <VL53L0X_GetDeviceParameters+0x80>
 80078ec:	e002      	b.n	80078f4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80078ee:	bf00      	nop
 80078f0:	e000      	b.n	80078f4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80078f2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80078f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d107      	bne.n	800790c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	3374      	adds	r3, #116	; 0x74
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fc3e 	bl	8008184 <VL53L0X_GetWrapAroundCheckEnable>
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800790c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d107      	bne.n	8007924 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	3304      	adds	r3, #4
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f89f 	bl	8007a5e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d120      	bne.n	800796e <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 800792c:	2300      	movs	r3, #0
 800792e:	60bb      	str	r3, [r7, #8]
 8007930:	e01a      	b.n	8007968 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3310      	adds	r3, #16
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	330e      	adds	r3, #14
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	440b      	add	r3, r1
 8007948:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	3316      	adds	r3, #22
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	3314      	adds	r3, #20
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	440b      	add	r3, r1
 8007960:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	3301      	adds	r3, #1
 8007966:	60bb      	str	r3, [r7, #8]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2b06      	cmp	r3, #6
 800796c:	dde1      	ble.n	8007932 <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800796e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007988:	2300      	movs	r3, #0
 800798a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	2b15      	cmp	r3, #21
 8007990:	bf8c      	ite	hi
 8007992:	2201      	movhi	r2, #1
 8007994:	2200      	movls	r2, #0
 8007996:	b2d2      	uxtb	r2, r2
 8007998:	2a00      	cmp	r2, #0
 800799a:	d10e      	bne.n	80079ba <VL53L0X_SetDeviceMode+0x3e>
 800799c:	2201      	movs	r2, #1
 800799e:	409a      	lsls	r2, r3
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <VL53L0X_SetDeviceMode+0x54>)
 80079a2:	4013      	ands	r3, r2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bf14      	ite	ne
 80079a8:	2301      	movne	r3, #1
 80079aa:	2300      	moveq	r3, #0
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	78fa      	ldrb	r2, [r7, #3]
 80079b6:	721a      	strb	r2, [r3, #8]
		break;
 80079b8:	e001      	b.n	80079be <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80079ba:	23f8      	movs	r3, #248	; 0xf8
 80079bc:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	0030000b 	.word	0x0030000b

080079d4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	7a1a      	ldrb	r2, [r3, #8]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80079ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	2109      	movs	r1, #9
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f004 f8f5 	bl	800bbfc <VL53L0X_RdByte>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f002 ffff 	bl	800aa4c <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8007a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f003 f8bf 	bl	800abf2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	607a      	str	r2, [r7, #4]
 8007a90:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8007a96:	7afb      	ldrb	r3, [r7, #11]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f002 ff9e 	bl	800a9de <VL53L0X_get_vcsel_pulse_period>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007ad0:	f107 030f 	add.w	r3, r7, #15
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f004 f88f 	bl	800bbfc <VL53L0X_RdByte>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8007ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d15a      	bne.n	8007ba4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8007aee:	78bb      	ldrb	r3, [r7, #2]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d12b      	bne.n	8007b4c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d825      	bhi.n	8007b46 <VL53L0X_SetSequenceStepEnable+0x92>
 8007afa:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b00:	08007b15 	.word	0x08007b15
 8007b04:	08007b1f 	.word	0x08007b1f
 8007b08:	08007b29 	.word	0x08007b29
 8007b0c:	08007b33 	.word	0x08007b33
 8007b10:	08007b3d 	.word	0x08007b3d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8007b14:	7dbb      	ldrb	r3, [r7, #22]
 8007b16:	f043 0310 	orr.w	r3, r3, #16
 8007b1a:	75bb      	strb	r3, [r7, #22]
				break;
 8007b1c:	e043      	b.n	8007ba6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007b1e:	7dbb      	ldrb	r3, [r7, #22]
 8007b20:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007b24:	75bb      	strb	r3, [r7, #22]
				break;
 8007b26:	e03e      	b.n	8007ba6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007b28:	7dbb      	ldrb	r3, [r7, #22]
 8007b2a:	f043 0304 	orr.w	r3, r3, #4
 8007b2e:	75bb      	strb	r3, [r7, #22]
				break;
 8007b30:	e039      	b.n	8007ba6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8007b32:	7dbb      	ldrb	r3, [r7, #22]
 8007b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b38:	75bb      	strb	r3, [r7, #22]
				break;
 8007b3a:	e034      	b.n	8007ba6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007b3c:	7dbb      	ldrb	r3, [r7, #22]
 8007b3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b42:	75bb      	strb	r3, [r7, #22]
				break;
 8007b44:	e02f      	b.n	8007ba6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b46:	23fc      	movs	r3, #252	; 0xfc
 8007b48:	75fb      	strb	r3, [r7, #23]
 8007b4a:	e02c      	b.n	8007ba6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d825      	bhi.n	8007b9e <VL53L0X_SetSequenceStepEnable+0xea>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b6d 	.word	0x08007b6d
 8007b5c:	08007b77 	.word	0x08007b77
 8007b60:	08007b81 	.word	0x08007b81
 8007b64:	08007b8b 	.word	0x08007b8b
 8007b68:	08007b95 	.word	0x08007b95
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007b6c:	7dbb      	ldrb	r3, [r7, #22]
 8007b6e:	f023 0310 	bic.w	r3, r3, #16
 8007b72:	75bb      	strb	r3, [r7, #22]
				break;
 8007b74:	e017      	b.n	8007ba6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007b76:	7dbb      	ldrb	r3, [r7, #22]
 8007b78:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007b7c:	75bb      	strb	r3, [r7, #22]
				break;
 8007b7e:	e012      	b.n	8007ba6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007b80:	7dbb      	ldrb	r3, [r7, #22]
 8007b82:	f023 0304 	bic.w	r3, r3, #4
 8007b86:	75bb      	strb	r3, [r7, #22]
				break;
 8007b88:	e00d      	b.n	8007ba6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007b8a:	7dbb      	ldrb	r3, [r7, #22]
 8007b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b90:	75bb      	strb	r3, [r7, #22]
				break;
 8007b92:	e008      	b.n	8007ba6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007b94:	7dbb      	ldrb	r3, [r7, #22]
 8007b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b9a:	75bb      	strb	r3, [r7, #22]
				break;
 8007b9c:	e003      	b.n	8007ba6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b9e:	23fc      	movs	r3, #252	; 0xfc
 8007ba0:	75fb      	strb	r3, [r7, #23]
 8007ba2:	e000      	b.n	8007ba6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007ba4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	7dba      	ldrb	r2, [r7, #22]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d01e      	beq.n	8007bec <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d107      	bne.n	8007bc6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007bb6:	7dbb      	ldrb	r3, [r7, #22]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	2101      	movs	r1, #1
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f003 ff9b 	bl	800baf8 <VL53L0X_WrByte>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8007bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d103      	bne.n	8007bd6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	7dba      	ldrb	r2, [r7, #22]
 8007bd2:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8007bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007be4:	6939      	ldr	r1, [r7, #16]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff ff26 	bl	8007a38 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	607b      	str	r3, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	72fb      	strb	r3, [r7, #11]
 8007c06:	4613      	mov	r3, r2
 8007c08:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007c14:	7afb      	ldrb	r3, [r7, #11]
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d836      	bhi.n	8007c88 <sequence_step_enabled+0x90>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <sequence_step_enabled+0x28>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c35 	.word	0x08007c35
 8007c24:	08007c47 	.word	0x08007c47
 8007c28:	08007c59 	.word	0x08007c59
 8007c2c:	08007c6b 	.word	0x08007c6b
 8007c30:	08007c7d 	.word	0x08007c7d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007c34:	7abb      	ldrb	r3, [r7, #10]
 8007c36:	111b      	asrs	r3, r3, #4
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	701a      	strb	r2, [r3, #0]
		break;
 8007c44:	e022      	b.n	8007c8c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007c46:	7abb      	ldrb	r3, [r7, #10]
 8007c48:	10db      	asrs	r3, r3, #3
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	701a      	strb	r2, [r3, #0]
		break;
 8007c56:	e019      	b.n	8007c8c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007c58:	7abb      	ldrb	r3, [r7, #10]
 8007c5a:	109b      	asrs	r3, r3, #2
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	701a      	strb	r2, [r3, #0]
		break;
 8007c68:	e010      	b.n	8007c8c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8007c6a:	7abb      	ldrb	r3, [r7, #10]
 8007c6c:	119b      	asrs	r3, r3, #6
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	701a      	strb	r2, [r3, #0]
		break;
 8007c7a:	e007      	b.n	8007c8c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007c7c:	7abb      	ldrb	r3, [r7, #10]
 8007c7e:	09db      	lsrs	r3, r3, #7
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	701a      	strb	r2, [r3, #0]
		break;
 8007c86:	e001      	b.n	8007c8c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c88:	23fc      	movs	r3, #252	; 0xfc
 8007c8a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007cae:	f107 030e 	add.w	r3, r7, #14
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f003 ffa0 	bl	800bbfc <VL53L0X_RdByte>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d107      	bne.n	8007cd8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007cc8:	7bba      	ldrb	r2, [r7, #14]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2100      	movs	r1, #0
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff ff92 	bl	8007bf8 <sequence_step_enabled>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d108      	bne.n	8007cf2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007ce0:	7bba      	ldrb	r2, [r7, #14]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff ff85 	bl	8007bf8 <sequence_step_enabled>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d108      	bne.n	8007d0c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8007cfa:	7bba      	ldrb	r2, [r7, #14]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	2102      	movs	r1, #2
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff ff78 	bl	8007bf8 <sequence_step_enabled>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d108      	bne.n	8007d26 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007d14:	7bba      	ldrb	r2, [r7, #14]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	3303      	adds	r3, #3
 8007d1a:	2103      	movs	r1, #3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ff6b 	bl	8007bf8 <sequence_step_enabled>
 8007d22:	4603      	mov	r3, r0
 8007d24:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d108      	bne.n	8007d40 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8007d2e:	7bba      	ldrb	r2, [r7, #14]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	3304      	adds	r3, #4
 8007d34:	2104      	movs	r1, #4
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff ff5e 	bl	8007bf8 <sequence_step_enabled>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8007d5a:	f107 030c 	add.w	r3, r7, #12
 8007d5e:	461a      	mov	r2, r3
 8007d60:	21f8      	movs	r1, #248	; 0xf8
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f003 ff74 	bl	800bc50 <VL53L0X_RdWord>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d108      	bne.n	8007d86 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007d74:	f107 0308 	add.w	r3, r7, #8
 8007d78:	461a      	mov	r2, r3
 8007d7a:	2104      	movs	r1, #4
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f003 ff9f 	bl	800bcc0 <VL53L0X_RdDWord>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10c      	bne.n	8007da8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8007d8e:	89bb      	ldrh	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	89ba      	ldrh	r2, [r7, #12]
 8007d98:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	7d1b      	ldrb	r3, [r3, #20]
 8007dc6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	7bba      	ldrb	r2, [r7, #14]
 8007dcc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b086      	sub	sp, #24
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007de8:	2300      	movs	r3, #0
 8007dea:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007dec:	f107 030e 	add.w	r3, r7, #14
 8007df0:	461a      	mov	r2, r3
 8007df2:	2120      	movs	r1, #32
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f003 ff2b 	bl	800bc50 <VL53L0X_RdWord>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007dfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d118      	bne.n	8007e38 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8007e06:	89fb      	ldrh	r3, [r7, #14]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d109      	bne.n	8007e20 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	751a      	strb	r2, [r3, #20]
 8007e1e:	e00b      	b.n	8007e38 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007e20:	89fb      	ldrh	r3, [r7, #14]
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	807b      	strh	r3, [r7, #2]
 8007e50:	4613      	mov	r3, r2
 8007e52:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e54:	2300      	movs	r3, #0
 8007e56:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007e64:	887b      	ldrh	r3, [r7, #2]
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	d902      	bls.n	8007e70 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e6a:	23fc      	movs	r3, #252	; 0xfc
 8007e6c:	75fb      	strb	r3, [r7, #23]
 8007e6e:	e05b      	b.n	8007f28 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007e70:	787b      	ldrb	r3, [r7, #1]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	73bb      	strb	r3, [r7, #14]
 8007e82:	e00a      	b.n	8007e9a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007e84:	887b      	ldrh	r3, [r7, #2]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	330a      	adds	r3, #10
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007e96:	2301      	movs	r3, #1
 8007e98:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007e9a:	887b      	ldrh	r3, [r7, #2]
 8007e9c:	2b05      	cmp	r3, #5
 8007e9e:	d841      	bhi.n	8007f24 <VL53L0X_SetLimitCheckEnable+0xe0>
 8007ea0:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <VL53L0X_SetLimitCheckEnable+0x64>)
 8007ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea6:	bf00      	nop
 8007ea8:	08007ec1 	.word	0x08007ec1
 8007eac:	08007ecb 	.word	0x08007ecb
 8007eb0:	08007ee1 	.word	0x08007ee1
 8007eb4:	08007eeb 	.word	0x08007eeb
 8007eb8:	08007ef5 	.word	0x08007ef5
 8007ebc:	08007f0d 	.word	0x08007f0d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	7bfa      	ldrb	r2, [r7, #15]
 8007ec4:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007ec8:	e02e      	b.n	8007f28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	2144      	movs	r1, #68	; 0x44
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f003 fe33 	bl	800bb40 <VL53L0X_WrWord>
 8007eda:	4603      	mov	r3, r0
 8007edc:	75fb      	strb	r3, [r7, #23]

			break;
 8007ede:	e023      	b.n	8007f28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	7bfa      	ldrb	r2, [r7, #15]
 8007ee4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007ee8:	e01e      	b.n	8007f28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	7bfa      	ldrb	r2, [r7, #15]
 8007eee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007ef2:	e019      	b.n	8007f28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007efa:	7b7b      	ldrb	r3, [r7, #13]
 8007efc:	22fe      	movs	r2, #254	; 0xfe
 8007efe:	2160      	movs	r1, #96	; 0x60
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f003 fe47 	bl	800bb94 <VL53L0X_UpdateByte>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007f0a:	e00d      	b.n	8007f28 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007f12:	7b7b      	ldrb	r3, [r7, #13]
 8007f14:	22ef      	movs	r2, #239	; 0xef
 8007f16:	2160      	movs	r1, #96	; 0x60
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f003 fe3b 	bl	800bb94 <VL53L0X_UpdateByte>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007f22:	e001      	b.n	8007f28 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f24:	23fc      	movs	r3, #252	; 0xfc
 8007f26:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10f      	bne.n	8007f50 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007f30:	787b      	ldrb	r3, [r7, #1]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007f36:	887b      	ldrh	r3, [r7, #2]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2020 	strb.w	r2, [r3, #32]
 8007f42:	e005      	b.n	8007f50 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007f44:	887b      	ldrh	r3, [r7, #2]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	4413      	add	r3, r2
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	460b      	mov	r3, r1
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007f6e:	897b      	ldrh	r3, [r7, #10]
 8007f70:	2b05      	cmp	r3, #5
 8007f72:	d905      	bls.n	8007f80 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f74:	23fc      	movs	r3, #252	; 0xfc
 8007f76:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	701a      	strb	r2, [r3, #0]
 8007f7e:	e008      	b.n	8007f92 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007f80:	897b      	ldrh	r3, [r7, #10]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4413      	add	r3, r2
 8007f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f8a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	7dba      	ldrb	r2, [r7, #22]
 8007f90:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	371c      	adds	r7, #28
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
	...

08007fa4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	460b      	mov	r3, r1
 8007fae:	607a      	str	r2, [r7, #4]
 8007fb0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007fb6:	897b      	ldrh	r3, [r7, #10]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007fc0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8007fc2:	7dbb      	ldrb	r3, [r7, #22]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d107      	bne.n	8007fd8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007fc8:	897b      	ldrh	r3, [r7, #10]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	330a      	adds	r3, #10
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	605a      	str	r2, [r3, #4]
 8007fd6:	e040      	b.n	800805a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007fd8:	897b      	ldrh	r3, [r7, #10]
 8007fda:	2b05      	cmp	r3, #5
 8007fdc:	d830      	bhi.n	8008040 <VL53L0X_SetLimitCheckValue+0x9c>
 8007fde:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <VL53L0X_SetLimitCheckValue+0x40>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	08007ffd 	.word	0x08007ffd
 8007fe8:	08008005 	.word	0x08008005
 8007fec:	0800801b 	.word	0x0800801b
 8007ff0:	08008023 	.word	0x08008023
 8007ff4:	0800802b 	.word	0x0800802b
 8007ff8:	0800802b 	.word	0x0800802b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8008002:	e01f      	b.n	8008044 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008008:	b29b      	uxth	r3, r3
 800800a:	461a      	mov	r2, r3
 800800c:	2144      	movs	r1, #68	; 0x44
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f003 fd96 	bl	800bb40 <VL53L0X_WrWord>
 8008014:	4603      	mov	r3, r0
 8008016:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008018:	e014      	b.n	8008044 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8008020:	e010      	b.n	8008044 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8008028:	e00c      	b.n	8008044 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800802e:	b29b      	uxth	r3, r3
 8008030:	461a      	mov	r2, r3
 8008032:	2164      	movs	r1, #100	; 0x64
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f003 fd83 	bl	800bb40 <VL53L0X_WrWord>
 800803a:	4603      	mov	r3, r0
 800803c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800803e:	e001      	b.n	8008044 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008040:	23fc      	movs	r3, #252	; 0xfc
 8008042:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008044:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d106      	bne.n	800805a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800804c:	897b      	ldrh	r3, [r7, #10]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	330a      	adds	r3, #10
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800805a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop

08008068 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	460b      	mov	r3, r1
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008076:	2300      	movs	r3, #0
 8008078:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800807e:	897b      	ldrh	r3, [r7, #10]
 8008080:	2b05      	cmp	r3, #5
 8008082:	d847      	bhi.n	8008114 <VL53L0X_GetLimitCheckValue+0xac>
 8008084:	a201      	add	r2, pc, #4	; (adr r2, 800808c <VL53L0X_GetLimitCheckValue+0x24>)
 8008086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808a:	bf00      	nop
 800808c:	080080a5 	.word	0x080080a5
 8008090:	080080b1 	.word	0x080080b1
 8008094:	080080d7 	.word	0x080080d7
 8008098:	080080e3 	.word	0x080080e3
 800809c:	080080ef 	.word	0x080080ef
 80080a0:	080080ef 	.word	0x080080ef

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	77bb      	strb	r3, [r7, #30]
		break;
 80080ae:	e033      	b.n	8008118 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80080b0:	f107 0316 	add.w	r3, r7, #22
 80080b4:	461a      	mov	r2, r3
 80080b6:	2144      	movs	r1, #68	; 0x44
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f003 fdc9 	bl	800bc50 <VL53L0X_RdWord>
 80080be:	4603      	mov	r3, r0
 80080c0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80080c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80080ca:	8afb      	ldrh	r3, [r7, #22]
 80080cc:	025b      	lsls	r3, r3, #9
 80080ce:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80080d0:	2301      	movs	r3, #1
 80080d2:	77bb      	strb	r3, [r7, #30]
		break;
 80080d4:	e020      	b.n	8008118 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080da:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	77bb      	strb	r3, [r7, #30]
		break;
 80080e0:	e01a      	b.n	8008118 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	77bb      	strb	r3, [r7, #30]
		break;
 80080ec:	e014      	b.n	8008118 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80080ee:	f107 0316 	add.w	r3, r7, #22
 80080f2:	461a      	mov	r2, r3
 80080f4:	2164      	movs	r1, #100	; 0x64
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f003 fdaa 	bl	800bc50 <VL53L0X_RdWord>
 80080fc:	4603      	mov	r3, r0
 80080fe:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008100:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008108:	8afb      	ldrh	r3, [r7, #22]
 800810a:	025b      	lsls	r3, r3, #9
 800810c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	77bb      	strb	r3, [r7, #30]
		break;
 8008112:	e001      	b.n	8008118 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008114:	23fc      	movs	r3, #252	; 0xfc
 8008116:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008118:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d12a      	bne.n	8008176 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8008120:	7fbb      	ldrb	r3, [r7, #30]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d124      	bne.n	8008170 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d110      	bne.n	800814e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800812c:	897b      	ldrh	r3, [r7, #10]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	330a      	adds	r3, #10
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008140:	897b      	ldrh	r3, [r7, #10]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2020 	strb.w	r2, [r3, #32]
 800814c:	e013      	b.n	8008176 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008154:	897b      	ldrh	r3, [r7, #10]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	330a      	adds	r3, #10
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008162:	897b      	ldrh	r3, [r7, #10]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2020 	strb.w	r2, [r3, #32]
 800816e:	e002      	b.n	8008176 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008176:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800817a:	4618      	mov	r0, r3
 800817c:	3720      	adds	r7, #32
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop

08008184 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008192:	f107 030e 	add.w	r3, r7, #14
 8008196:	461a      	mov	r2, r3
 8008198:	2101      	movs	r1, #1
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f003 fd2e 	bl	800bbfc <VL53L0X_RdByte>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80081a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10e      	bne.n	80081ca <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80081ac:	7bba      	ldrb	r2, [r7, #14]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	b25b      	sxtb	r3, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	da03      	bge.n	80081c4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2201      	movs	r2, #1
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	e002      	b.n	80081ca <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2200      	movs	r2, #0
 80081c8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80081ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d104      	bne.n	80081dc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781a      	ldrb	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80081f4:	f107 030e 	add.w	r3, r7, #14
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff fbea 	bl	80079d4 <VL53L0X_GetDeviceMode>
 8008200:	4603      	mov	r3, r0
 8008202:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 8008204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d107      	bne.n	800821c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d104      	bne.n	800821c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f924 	bl	8008460 <VL53L0X_StartMeasurement>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800821c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 fbcb 	bl	80099c0 <VL53L0X_measurement_poll_for_completion>
 800822a:	4603      	mov	r3, r0
 800822c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800822e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d106      	bne.n	8008244 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d103      	bne.n	8008244 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2203      	movs	r2, #3
 8008240:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 8008244:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800825c:	2300      	movs	r3, #0
 800825e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8008260:	2301      	movs	r3, #1
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f001 fb6d 	bl	8009946 <VL53L0X_perform_ref_calibration>
 800826c:	4603      	mov	r3, r0
 800826e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008270:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008288:	2300      	movs	r3, #0
 800828a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8008292:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 8008294:	7dbb      	ldrb	r3, [r7, #22]
 8008296:	2b03      	cmp	r3, #3
 8008298:	f000 8093 	beq.w	80083c2 <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 800829c:	2b03      	cmp	r3, #3
 800829e:	f300 80d6 	bgt.w	800844e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d002      	beq.n	80082ac <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d047      	beq.n	800833a <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 80082aa:	e0d0      	b.n	800844e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80082ac:	f107 030c 	add.w	r3, r7, #12
 80082b0:	f107 0210 	add.w	r2, r7, #16
 80082b4:	2101      	movs	r1, #1
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fc4c 	bl	8008b54 <VL53L0X_GetInterruptThresholds>
 80082bc:	4603      	mov	r3, r0
 80082be:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80082c6:	f240 80bd 	bls.w	8008444 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 80082ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f040 80b8 	bne.w	8008444 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d006      	beq.n	80082e8 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 80082da:	4960      	ldr	r1, [pc, #384]	; (800845c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f002 fd39 	bl	800ad54 <VL53L0X_load_tuning_settings>
 80082e2:	4603      	mov	r3, r0
 80082e4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 80082e6:	e0ad      	b.n	8008444 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80082e8:	2204      	movs	r2, #4
 80082ea:	21ff      	movs	r1, #255	; 0xff
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f003 fc03 	bl	800baf8 <VL53L0X_WrByte>
 80082f2:	4603      	mov	r3, r0
 80082f4:	461a      	mov	r2, r3
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80082fc:	2200      	movs	r2, #0
 80082fe:	2170      	movs	r1, #112	; 0x70
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f003 fbf9 	bl	800baf8 <VL53L0X_WrByte>
 8008306:	4603      	mov	r3, r0
 8008308:	461a      	mov	r2, r3
 800830a:	7dfb      	ldrb	r3, [r7, #23]
 800830c:	4313      	orrs	r3, r2
 800830e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008310:	2200      	movs	r2, #0
 8008312:	21ff      	movs	r1, #255	; 0xff
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f003 fbef 	bl	800baf8 <VL53L0X_WrByte>
 800831a:	4603      	mov	r3, r0
 800831c:	461a      	mov	r2, r3
 800831e:	7dfb      	ldrb	r3, [r7, #23]
 8008320:	4313      	orrs	r3, r2
 8008322:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008324:	2200      	movs	r2, #0
 8008326:	2180      	movs	r1, #128	; 0x80
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f003 fbe5 	bl	800baf8 <VL53L0X_WrByte>
 800832e:	4603      	mov	r3, r0
 8008330:	461a      	mov	r2, r3
 8008332:	7dfb      	ldrb	r3, [r7, #23]
 8008334:	4313      	orrs	r3, r2
 8008336:	75fb      	strb	r3, [r7, #23]
		break;
 8008338:	e084      	b.n	8008444 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800833a:	f107 030c 	add.w	r3, r7, #12
 800833e:	f107 0210 	add.w	r2, r7, #16
 8008342:	2101      	movs	r1, #1
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fc05 	bl	8008b54 <VL53L0X_GetInterruptThresholds>
 800834a:	4603      	mov	r3, r0
 800834c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d079      	beq.n	8008448 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 8008354:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d175      	bne.n	8008448 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800835c:	78fb      	ldrb	r3, [r7, #3]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d006      	beq.n	8008370 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008362:	493e      	ldr	r1, [pc, #248]	; (800845c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f002 fcf5 	bl	800ad54 <VL53L0X_load_tuning_settings>
 800836a:	4603      	mov	r3, r0
 800836c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800836e:	e06b      	b.n	8008448 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8008370:	2204      	movs	r2, #4
 8008372:	21ff      	movs	r1, #255	; 0xff
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f003 fbbf 	bl	800baf8 <VL53L0X_WrByte>
 800837a:	4603      	mov	r3, r0
 800837c:	461a      	mov	r2, r3
 800837e:	7dfb      	ldrb	r3, [r7, #23]
 8008380:	4313      	orrs	r3, r2
 8008382:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008384:	2200      	movs	r2, #0
 8008386:	2170      	movs	r1, #112	; 0x70
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f003 fbb5 	bl	800baf8 <VL53L0X_WrByte>
 800838e:	4603      	mov	r3, r0
 8008390:	461a      	mov	r2, r3
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	4313      	orrs	r3, r2
 8008396:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008398:	2200      	movs	r2, #0
 800839a:	21ff      	movs	r1, #255	; 0xff
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f003 fbab 	bl	800baf8 <VL53L0X_WrByte>
 80083a2:	4603      	mov	r3, r0
 80083a4:	461a      	mov	r2, r3
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80083ac:	2200      	movs	r2, #0
 80083ae:	2180      	movs	r1, #128	; 0x80
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f003 fba1 	bl	800baf8 <VL53L0X_WrByte>
 80083b6:	4603      	mov	r3, r0
 80083b8:	461a      	mov	r2, r3
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	4313      	orrs	r3, r2
 80083be:	75fb      	strb	r3, [r7, #23]
		break;
 80083c0:	e042      	b.n	8008448 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80083c2:	f107 030c 	add.w	r3, r7, #12
 80083c6:	f107 0210 	add.w	r2, r7, #16
 80083ca:	2101      	movs	r1, #1
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fbc1 	bl	8008b54 <VL53L0X_GetInterruptThresholds>
 80083d2:	4603      	mov	r3, r0
 80083d4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 80083d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d136      	bne.n	800844c <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 80083de:	78fb      	ldrb	r3, [r7, #3]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d006      	beq.n	80083f2 <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 80083e4:	491d      	ldr	r1, [pc, #116]	; (800845c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f002 fcb4 	bl	800ad54 <VL53L0X_load_tuning_settings>
 80083ec:	4603      	mov	r3, r0
 80083ee:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 80083f0:	e02c      	b.n	800844c <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80083f2:	2204      	movs	r2, #4
 80083f4:	21ff      	movs	r1, #255	; 0xff
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f003 fb7e 	bl	800baf8 <VL53L0X_WrByte>
 80083fc:	4603      	mov	r3, r0
 80083fe:	461a      	mov	r2, r3
 8008400:	7dfb      	ldrb	r3, [r7, #23]
 8008402:	4313      	orrs	r3, r2
 8008404:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008406:	2200      	movs	r2, #0
 8008408:	2170      	movs	r1, #112	; 0x70
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f003 fb74 	bl	800baf8 <VL53L0X_WrByte>
 8008410:	4603      	mov	r3, r0
 8008412:	461a      	mov	r2, r3
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	4313      	orrs	r3, r2
 8008418:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800841a:	2200      	movs	r2, #0
 800841c:	21ff      	movs	r1, #255	; 0xff
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f003 fb6a 	bl	800baf8 <VL53L0X_WrByte>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	4313      	orrs	r3, r2
 800842c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800842e:	2200      	movs	r2, #0
 8008430:	2180      	movs	r1, #128	; 0x80
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f003 fb60 	bl	800baf8 <VL53L0X_WrByte>
 8008438:	4603      	mov	r3, r0
 800843a:	461a      	mov	r2, r3
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	4313      	orrs	r3, r2
 8008440:	75fb      	strb	r3, [r7, #23]
		break;
 8008442:	e003      	b.n	800844c <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 8008444:	bf00      	nop
 8008446:	e002      	b.n	800844e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8008448:	bf00      	nop
 800844a:	e000      	b.n	800844e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 800844c:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800844e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	2000019c 	.word	0x2000019c

08008460 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008468:	2300      	movs	r3, #0
 800846a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800846c:	2301      	movs	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008470:	f107 030e 	add.w	r3, r7, #14
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff faac 	bl	80079d4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800847c:	2201      	movs	r2, #1
 800847e:	2180      	movs	r1, #128	; 0x80
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f003 fb39 	bl	800baf8 <VL53L0X_WrByte>
 8008486:	4603      	mov	r3, r0
 8008488:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800848a:	2201      	movs	r2, #1
 800848c:	21ff      	movs	r1, #255	; 0xff
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f003 fb32 	bl	800baf8 <VL53L0X_WrByte>
 8008494:	4603      	mov	r3, r0
 8008496:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008498:	2200      	movs	r2, #0
 800849a:	2100      	movs	r1, #0
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f003 fb2b 	bl	800baf8 <VL53L0X_WrByte>
 80084a2:	4603      	mov	r3, r0
 80084a4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 80084ac:	461a      	mov	r2, r3
 80084ae:	2191      	movs	r1, #145	; 0x91
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f003 fb21 	bl	800baf8 <VL53L0X_WrByte>
 80084b6:	4603      	mov	r3, r0
 80084b8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80084ba:	2201      	movs	r2, #1
 80084bc:	2100      	movs	r1, #0
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f003 fb1a 	bl	800baf8 <VL53L0X_WrByte>
 80084c4:	4603      	mov	r3, r0
 80084c6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80084c8:	2200      	movs	r2, #0
 80084ca:	21ff      	movs	r1, #255	; 0xff
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f003 fb13 	bl	800baf8 <VL53L0X_WrByte>
 80084d2:	4603      	mov	r3, r0
 80084d4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80084d6:	2200      	movs	r2, #0
 80084d8:	2180      	movs	r1, #128	; 0x80
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f003 fb0c 	bl	800baf8 <VL53L0X_WrByte>
 80084e0:	4603      	mov	r3, r0
 80084e2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d054      	beq.n	8008594 <VL53L0X_StartMeasurement+0x134>
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	dc6c      	bgt.n	80085c8 <VL53L0X_StartMeasurement+0x168>
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <VL53L0X_StartMeasurement+0x98>
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d034      	beq.n	8008560 <VL53L0X_StartMeasurement+0x100>
 80084f6:	e067      	b.n	80085c8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80084f8:	2201      	movs	r2, #1
 80084fa:	2100      	movs	r1, #0
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f003 fafb 	bl	800baf8 <VL53L0X_WrByte>
 8008502:	4603      	mov	r3, r0
 8008504:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800850a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d15d      	bne.n	80085ce <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d008      	beq.n	800852e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800851c:	f107 030d 	add.w	r3, r7, #13
 8008520:	461a      	mov	r2, r3
 8008522:	2100      	movs	r1, #0
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f003 fb69 	bl	800bbfc <VL53L0X_RdByte>
 800852a:	4603      	mov	r3, r0
 800852c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	3301      	adds	r3, #1
 8008532:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8008534:	7b7a      	ldrb	r2, [r7, #13]
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	4013      	ands	r3, r2
 800853a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800853c:	7bfa      	ldrb	r2, [r7, #15]
 800853e:	429a      	cmp	r2, r3
 8008540:	d107      	bne.n	8008552 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8008542:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d103      	bne.n	8008552 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008550:	d3e1      	bcc.n	8008516 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008558:	d339      	bcc.n	80085ce <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800855a:	23f9      	movs	r3, #249	; 0xf9
 800855c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800855e:	e036      	b.n	80085ce <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d105      	bne.n	8008574 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008568:	2101      	movs	r1, #1
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff fe86 	bl	800827c <VL53L0X_CheckAndLoadInterruptSettings>
 8008570:	4603      	mov	r3, r0
 8008572:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008574:	2202      	movs	r2, #2
 8008576:	2100      	movs	r1, #0
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f003 fabd 	bl	800baf8 <VL53L0X_WrByte>
 800857e:	4603      	mov	r3, r0
 8008580:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8008582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d123      	bne.n	80085d2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2204      	movs	r2, #4
 800858e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8008592:	e01e      	b.n	80085d2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008594:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d105      	bne.n	80085a8 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800859c:	2101      	movs	r1, #1
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff fe6c 	bl	800827c <VL53L0X_CheckAndLoadInterruptSettings>
 80085a4:	4603      	mov	r3, r0
 80085a6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80085a8:	2204      	movs	r2, #4
 80085aa:	2100      	movs	r1, #0
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f003 faa3 	bl	800baf8 <VL53L0X_WrByte>
 80085b2:	4603      	mov	r3, r0
 80085b4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80085b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10b      	bne.n	80085d6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2204      	movs	r2, #4
 80085c2:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 80085c6:	e006      	b.n	80085d6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80085c8:	23f8      	movs	r3, #248	; 0xf8
 80085ca:	75fb      	strb	r3, [r7, #23]
 80085cc:	e004      	b.n	80085d8 <VL53L0X_StartMeasurement+0x178>
		break;
 80085ce:	bf00      	nop
 80085d0:	e002      	b.n	80085d8 <VL53L0X_StartMeasurement+0x178>
		break;
 80085d2:	bf00      	nop
 80085d4:	e000      	b.n	80085d8 <VL53L0X_StartMeasurement+0x178>
		break;
 80085d6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80085d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085ee:	2300      	movs	r3, #0
 80085f0:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80085f8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d112      	bne.n	8008626 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008600:	f107 0308 	add.w	r3, r7, #8
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fb1a 	bl	8008c40 <VL53L0X_GetInterruptMaskStatus>
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2b04      	cmp	r3, #4
 8008614:	d103      	bne.n	800861e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2201      	movs	r2, #1
 800861a:	701a      	strb	r2, [r3, #0]
 800861c:	e01c      	b.n	8008658 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	2200      	movs	r2, #0
 8008622:	701a      	strb	r2, [r3, #0]
 8008624:	e018      	b.n	8008658 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8008626:	f107 030d 	add.w	r3, r7, #13
 800862a:	461a      	mov	r2, r3
 800862c:	2114      	movs	r1, #20
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f003 fae4 	bl	800bbfc <VL53L0X_RdByte>
 8008634:	4603      	mov	r3, r0
 8008636:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8008638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10b      	bne.n	8008658 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8008640:	7b7b      	ldrb	r3, [r7, #13]
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2201      	movs	r2, #1
 800864e:	701a      	strb	r2, [r3, #0]
 8008650:	e002      	b.n	8008658 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2200      	movs	r2, #0
 8008656:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008658:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008664:	b5b0      	push	{r4, r5, r7, lr}
 8008666:	b096      	sub	sp, #88	; 0x58
 8008668:	af02      	add	r7, sp, #8
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800866e:	2300      	movs	r3, #0
 8008670:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8008674:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008678:	230c      	movs	r3, #12
 800867a:	2114      	movs	r1, #20
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f003 fa0f 	bl	800baa0 <VL53L0X_ReadMulti>
 8008682:	4603      	mov	r3, r0
 8008684:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8008688:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800868c:	2b00      	cmp	r3, #0
 800868e:	f040 80d1 	bne.w	8008834 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2200      	movs	r2, #0
 8008696:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2200      	movs	r2, #0
 800869c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 800869e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	4413      	add	r3, r2
 80086b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2200      	movs	r2, #0
 80086b8:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80086ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80086be:	b29b      	uxth	r3, r3
 80086c0:	021b      	lsls	r3, r3, #8
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	4413      	add	r3, r2
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	025b      	lsls	r3, r3, #9
 80086d0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086d6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 80086d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80086dc:	b29b      	uxth	r3, r3
 80086de:	021b      	lsls	r3, r3, #8
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	4413      	add	r3, r2
 80086ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80086ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80086f2:	025b      	lsls	r3, r3, #9
 80086f4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80086fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80086fe:	b29b      	uxth	r3, r3
 8008700:	021b      	lsls	r3, r3, #8
 8008702:	b29a      	uxth	r2, r3
 8008704:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008708:	b29b      	uxth	r3, r3
 800870a:	4413      	add	r3, r2
 800870c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008716:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008718:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800871c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 8008726:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 800872e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8008732:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008738:	d046      	beq.n	80087c8 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800873a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800873c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008740:	fb02 f303 	mul.w	r3, r2, r3
 8008744:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008748:	4a57      	ldr	r2, [pc, #348]	; (80088a8 <VL53L0X_GetRangingMeasurementData+0x244>)
 800874a:	fb82 1203 	smull	r1, r2, r2, r3
 800874e:	1192      	asrs	r2, r2, #6
 8008750:	17db      	asrs	r3, r3, #31
 8008752:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8008754:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	7d1b      	ldrb	r3, [r3, #20]
 8008762:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8008766:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800876a:	2b00      	cmp	r3, #0
 800876c:	d02c      	beq.n	80087c8 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800876e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008770:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008774:	fb02 f303 	mul.w	r3, r2, r3
 8008778:	121a      	asrs	r2, r3, #8
					<= 0) {
 800877a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800877c:	429a      	cmp	r2, r3
 800877e:	d10d      	bne.n	800879c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8008780:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008784:	2b00      	cmp	r3, #0
 8008786:	d004      	beq.n	8008792 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8008788:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800878c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008790:	e016      	b.n	80087c0 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8008792:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008796:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800879a:	e011      	b.n	80087c0 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800879c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80087a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087a2:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80087a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80087a8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80087ac:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80087b0:	121b      	asrs	r3, r3, #8
 80087b2:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80087b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087b6:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80087b8:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80087bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80087c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80087c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80087c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00d      	beq.n	80087ec <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80087d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80087d4:	089b      	lsrs	r3, r3, #2
 80087d6:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80087dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	019b      	lsls	r3, r3, #6
 80087e4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	75da      	strb	r2, [r3, #23]
 80087ea:	e006      	b.n	80087fa <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80087f2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2200      	movs	r2, #0
 80087f8:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80087fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80087fe:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008802:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	4613      	mov	r3, r2
 800880e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f002 fef1 	bl	800b5f8 <VL53L0X_get_pal_range_status>
 8008816:	4603      	mov	r3, r0
 8008818:	461a      	mov	r2, r3
 800881a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800881e:	4313      	orrs	r3, r2
 8008820:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8008824:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008828:	2b00      	cmp	r3, #0
 800882a:	d103      	bne.n	8008834 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800882c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008834:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008838:	2b00      	cmp	r3, #0
 800883a:	d12f      	bne.n	800889c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f107 040c 	add.w	r4, r7, #12
 8008842:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8008846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800884a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800884e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008856:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800885c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8008864:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800886a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8008870:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8008876:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800887c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8008882:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800888c:	f107 050c 	add.w	r5, r7, #12
 8008890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008894:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008898:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800889c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3750      	adds	r7, #80	; 0x50
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bdb0      	pop	{r4, r5, r7, pc}
 80088a8:	10624dd3 	.word	0x10624dd3

080088ac <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088b6:	2300      	movs	r3, #0
 80088b8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80088ba:	2100      	movs	r1, #0
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff f85d 	bl	800797c <VL53L0X_SetDeviceMode>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80088c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff fc8a 	bl	80081e8 <VL53L0X_PerformSingleMeasurement>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80088d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d105      	bne.n	80088ec <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff febe 	bl	8008664 <VL53L0X_GetRangingMeasurementData>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80088ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d105      	bne.n	8008900 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80088f4:	2100      	movs	r1, #0
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f962 	bl	8008bc0 <VL53L0X_ClearInterruptMask>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8008900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	4608      	mov	r0, r1
 8008916:	4611      	mov	r1, r2
 8008918:	461a      	mov	r2, r3
 800891a:	4603      	mov	r3, r0
 800891c:	70fb      	strb	r3, [r7, #3]
 800891e:	460b      	mov	r3, r1
 8008920:	70bb      	strb	r3, [r7, #2]
 8008922:	4613      	mov	r3, r2
 8008924:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008930:	23f6      	movs	r3, #246	; 0xf6
 8008932:	73fb      	strb	r3, [r7, #15]
 8008934:	e107      	b.n	8008b46 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8008936:	78bb      	ldrb	r3, [r7, #2]
 8008938:	2b14      	cmp	r3, #20
 800893a:	d110      	bne.n	800895e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800893c:	7e3b      	ldrb	r3, [r7, #24]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d102      	bne.n	8008948 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008942:	2310      	movs	r3, #16
 8008944:	73bb      	strb	r3, [r7, #14]
 8008946:	e001      	b.n	800894c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8008948:	2301      	movs	r3, #1
 800894a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	461a      	mov	r2, r3
 8008950:	2184      	movs	r1, #132	; 0x84
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f003 f8d0 	bl	800baf8 <VL53L0X_WrByte>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]
 800895c:	e0f3      	b.n	8008b46 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800895e:	78bb      	ldrb	r3, [r7, #2]
 8008960:	2b15      	cmp	r3, #21
 8008962:	f040 8097 	bne.w	8008a94 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008966:	2201      	movs	r2, #1
 8008968:	21ff      	movs	r1, #255	; 0xff
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f003 f8c4 	bl	800baf8 <VL53L0X_WrByte>
 8008970:	4603      	mov	r3, r0
 8008972:	461a      	mov	r2, r3
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	4313      	orrs	r3, r2
 8008978:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800897a:	2200      	movs	r2, #0
 800897c:	2100      	movs	r1, #0
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f003 f8ba 	bl	800baf8 <VL53L0X_WrByte>
 8008984:	4603      	mov	r3, r0
 8008986:	461a      	mov	r2, r3
 8008988:	7bfb      	ldrb	r3, [r7, #15]
 800898a:	4313      	orrs	r3, r2
 800898c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800898e:	2200      	movs	r2, #0
 8008990:	21ff      	movs	r1, #255	; 0xff
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f003 f8b0 	bl	800baf8 <VL53L0X_WrByte>
 8008998:	4603      	mov	r3, r0
 800899a:	461a      	mov	r2, r3
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	4313      	orrs	r3, r2
 80089a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80089a2:	2201      	movs	r2, #1
 80089a4:	2180      	movs	r1, #128	; 0x80
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f003 f8a6 	bl	800baf8 <VL53L0X_WrByte>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461a      	mov	r2, r3
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80089b6:	2202      	movs	r2, #2
 80089b8:	2185      	movs	r1, #133	; 0x85
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f003 f89c 	bl	800baf8 <VL53L0X_WrByte>
 80089c0:	4603      	mov	r3, r0
 80089c2:	461a      	mov	r2, r3
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80089ca:	2204      	movs	r2, #4
 80089cc:	21ff      	movs	r1, #255	; 0xff
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f003 f892 	bl	800baf8 <VL53L0X_WrByte>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4313      	orrs	r3, r2
 80089dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80089de:	2200      	movs	r2, #0
 80089e0:	21cd      	movs	r1, #205	; 0xcd
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f003 f888 	bl	800baf8 <VL53L0X_WrByte>
 80089e8:	4603      	mov	r3, r0
 80089ea:	461a      	mov	r2, r3
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80089f2:	2211      	movs	r2, #17
 80089f4:	21cc      	movs	r1, #204	; 0xcc
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f003 f87e 	bl	800baf8 <VL53L0X_WrByte>
 80089fc:	4603      	mov	r3, r0
 80089fe:	461a      	mov	r2, r3
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008a06:	2207      	movs	r2, #7
 8008a08:	21ff      	movs	r1, #255	; 0xff
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f003 f874 	bl	800baf8 <VL53L0X_WrByte>
 8008a10:	4603      	mov	r3, r0
 8008a12:	461a      	mov	r2, r3
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	21be      	movs	r1, #190	; 0xbe
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f003 f86a 	bl	800baf8 <VL53L0X_WrByte>
 8008a24:	4603      	mov	r3, r0
 8008a26:	461a      	mov	r2, r3
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8008a2e:	2206      	movs	r2, #6
 8008a30:	21ff      	movs	r1, #255	; 0xff
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f003 f860 	bl	800baf8 <VL53L0X_WrByte>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008a42:	2209      	movs	r2, #9
 8008a44:	21cc      	movs	r1, #204	; 0xcc
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f003 f856 	bl	800baf8 <VL53L0X_WrByte>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	461a      	mov	r2, r3
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008a56:	2200      	movs	r2, #0
 8008a58:	21ff      	movs	r1, #255	; 0xff
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f003 f84c 	bl	800baf8 <VL53L0X_WrByte>
 8008a60:	4603      	mov	r3, r0
 8008a62:	461a      	mov	r2, r3
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	21ff      	movs	r1, #255	; 0xff
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f003 f842 	bl	800baf8 <VL53L0X_WrByte>
 8008a74:	4603      	mov	r3, r0
 8008a76:	461a      	mov	r2, r3
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2100      	movs	r1, #0
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f003 f838 	bl	800baf8 <VL53L0X_WrByte>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	73fb      	strb	r3, [r7, #15]
 8008a92:	e058      	b.n	8008b46 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d121      	bne.n	8008ae0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8008a9c:	787b      	ldrb	r3, [r7, #1]
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d81b      	bhi.n	8008ada <VL53L0X_SetGpioConfig+0x1ce>
 8008aa2:	a201      	add	r2, pc, #4	; (adr r2, 8008aa8 <VL53L0X_SetGpioConfig+0x19c>)
 8008aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa8:	08008abd 	.word	0x08008abd
 8008aac:	08008ac3 	.word	0x08008ac3
 8008ab0:	08008ac9 	.word	0x08008ac9
 8008ab4:	08008acf 	.word	0x08008acf
 8008ab8:	08008ad5 	.word	0x08008ad5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73bb      	strb	r3, [r7, #14]
				break;
 8008ac0:	e00f      	b.n	8008ae2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	73bb      	strb	r3, [r7, #14]
				break;
 8008ac6:	e00c      	b.n	8008ae2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008ac8:	2302      	movs	r3, #2
 8008aca:	73bb      	strb	r3, [r7, #14]
				break;
 8008acc:	e009      	b.n	8008ae2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	73bb      	strb	r3, [r7, #14]
				break;
 8008ad2:	e006      	b.n	8008ae2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	73bb      	strb	r3, [r7, #14]
				break;
 8008ad8:	e003      	b.n	8008ae2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8008ada:	23f5      	movs	r3, #245	; 0xf5
 8008adc:	73fb      	strb	r3, [r7, #15]
 8008ade:	e000      	b.n	8008ae2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008ae0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d107      	bne.n	8008afa <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	461a      	mov	r2, r3
 8008aee:	210a      	movs	r1, #10
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f003 f801 	bl	800baf8 <VL53L0X_WrByte>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8008afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10f      	bne.n	8008b22 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008b02:	7e3b      	ldrb	r3, [r7, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d102      	bne.n	8008b0e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73bb      	strb	r3, [r7, #14]
 8008b0c:	e001      	b.n	8008b12 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8008b0e:	2310      	movs	r3, #16
 8008b10:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	22ef      	movs	r2, #239	; 0xef
 8008b16:	2184      	movs	r1, #132	; 0x84
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f003 f83b 	bl	800bb94 <VL53L0X_UpdateByte>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d103      	bne.n	8008b32 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	787a      	ldrb	r2, [r7, #1]
 8008b2e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d105      	bne.n	8008b46 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f83f 	bl	8008bc0 <VL53L0X_ClearInterruptMask>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop

08008b54 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	607a      	str	r2, [r7, #4]
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	460b      	mov	r3, r1
 8008b62:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 8008b68:	f107 0314 	add.w	r3, r7, #20
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	210e      	movs	r1, #14
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f003 f86d 	bl	800bc50 <VL53L0X_RdWord>
 8008b76:	4603      	mov	r3, r0
 8008b78:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008b7a:	8abb      	ldrh	r3, [r7, #20]
 8008b7c:	045b      	lsls	r3, r3, #17
 8008b7e:	461a      	mov	r2, r3
 8008b80:	4b0e      	ldr	r3, [pc, #56]	; (8008bbc <VL53L0X_GetInterruptThresholds+0x68>)
 8008b82:	4013      	ands	r3, r2
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008b88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10f      	bne.n	8008bb0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008b90:	f107 0314 	add.w	r3, r7, #20
 8008b94:	461a      	mov	r2, r3
 8008b96:	210c      	movs	r1, #12
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f003 f859 	bl	800bc50 <VL53L0X_RdWord>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008ba2:	8abb      	ldrh	r3, [r7, #20]
 8008ba4:	045b      	lsls	r3, r3, #17
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	4b04      	ldr	r3, [pc, #16]	; (8008bbc <VL53L0X_GetInterruptThresholds+0x68>)
 8008baa:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	1ffe0000 	.word	0x1ffe0000

08008bc0 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	210b      	movs	r1, #11
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f002 ff8e 	bl	800baf8 <VL53L0X_WrByte>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008be0:	2200      	movs	r2, #0
 8008be2:	210b      	movs	r1, #11
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f002 ff87 	bl	800baf8 <VL53L0X_WrByte>
 8008bea:	4603      	mov	r3, r0
 8008bec:	461a      	mov	r2, r3
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008bf4:	f107 030d 	add.w	r3, r7, #13
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	2113      	movs	r1, #19
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f002 fffd 	bl	800bbfc <VL53L0X_RdByte>
 8008c02:	4603      	mov	r3, r0
 8008c04:	461a      	mov	r2, r3
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008c12:	7b7b      	ldrb	r3, [r7, #13]
 8008c14:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d006      	beq.n	8008c2a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d803      	bhi.n	8008c2a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d0d3      	beq.n	8008bd2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d901      	bls.n	8008c34 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008c30:	23f4      	movs	r3, #244	; 0xf4
 8008c32:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 8008c4e:	f107 030e 	add.w	r3, r7, #14
 8008c52:	461a      	mov	r2, r3
 8008c54:	2113      	movs	r1, #19
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f002 ffd0 	bl	800bbfc <VL53L0X_RdByte>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	f003 0207 	and.w	r2, r3, #7
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	f003 0318 	and.w	r3, r3, #24
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008c74:	23fa      	movs	r3, #250	; 0xfa
 8008c76:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	68b9      	ldr	r1, [r7, #8]
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 fa03 	bl	80090a4 <VL53L0X_perform_ref_spad_management>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008cbc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008cc0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cc6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008cc8:	f107 0308 	add.w	r3, r7, #8
 8008ccc:	461a      	mov	r2, r3
 8008cce:	2128      	movs	r1, #40	; 0x28
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f002 ffbd 	bl	800bc50 <VL53L0X_RdWord>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d11e      	bne.n	8008d20 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008ce2:	893b      	ldrh	r3, [r7, #8]
 8008ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008cec:	893b      	ldrh	r3, [r7, #8]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	dd0b      	ble.n	8008d10 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008cf8:	893a      	ldrh	r2, [r7, #8]
 8008cfa:	897b      	ldrh	r3, [r7, #10]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	b21b      	sxth	r3, r3
 8008d02:	461a      	mov	r2, r3
					* 250;
 8008d04:	23fa      	movs	r3, #250	; 0xfa
 8008d06:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	e007      	b.n	8008d20 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008d10:	893b      	ldrh	r3, [r7, #8]
 8008d12:	b21b      	sxth	r3, r3
 8008d14:	461a      	mov	r2, r3
 8008d16:	23fa      	movs	r3, #250	; 0xfa
 8008d18:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b08b      	sub	sp, #44	; 0x2c
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008d3a:	2308      	movs	r3, #8
 8008d3c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	f04f 32ff 	mov.w	r2, #4294967295
 8008d48:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d52:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d5c:	69b9      	ldr	r1, [r7, #24]
 8008d5e:	fb01 f202 	mul.w	r2, r1, r2
 8008d62:	1a9b      	subs	r3, r3, r2
 8008d64:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	627b      	str	r3, [r7, #36]	; 0x24
 8008d6a:	e030      	b.n	8008dce <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	4413      	add	r3, r2
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d11e      	bne.n	8008dc0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 8008d82:	7ffa      	ldrb	r2, [r7, #31]
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	fa42 f303 	asr.w	r3, r2, r3
 8008d8a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008d90:	e016      	b.n	8008dc0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008d92:	7ffb      	ldrb	r3, [r7, #31]
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00b      	beq.n	8008db4 <get_next_good_spad+0x88>
				success = 1;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	fb03 f202 	mul.w	r2, r3, r2
 8008da8:	6a3b      	ldr	r3, [r7, #32]
 8008daa:	4413      	add	r3, r2
 8008dac:	461a      	mov	r2, r3
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	601a      	str	r2, [r3, #0]
				break;
 8008db2:	e009      	b.n	8008dc8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008db4:	7ffb      	ldrb	r3, [r7, #31]
 8008db6:	085b      	lsrs	r3, r3, #1
 8008db8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008dc0:	6a3a      	ldr	r2, [r7, #32]
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d3e4      	bcc.n	8008d92 <get_next_good_spad+0x66>
				coarseIndex++) {
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	3301      	adds	r3, #1
 8008dcc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d202      	bcs.n	8008ddc <get_next_good_spad+0xb0>
 8008dd6:	7fbb      	ldrb	r3, [r7, #30]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0c7      	beq.n	8008d6c <get_next_good_spad+0x40>
		}
	}
}
 8008ddc:	bf00      	nop
 8008dde:	372c      	adds	r7, #44	; 0x2c
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008df0:	2301      	movs	r3, #1
 8008df2:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	099b      	lsrs	r3, r3, #6
 8008df8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008dfa:	4a07      	ldr	r2, [pc, #28]	; (8008e18 <is_aperture+0x30>)
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <is_aperture+0x22>
		isAperture = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	20000354 	.word	0x20000354

08008e1c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b089      	sub	sp, #36	; 0x24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008e2c:	2308      	movs	r3, #8
 8008e2e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e38:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e42:	69b9      	ldr	r1, [r7, #24]
 8008e44:	fb01 f202 	mul.w	r2, r1, r2
 8008e48:	1a9b      	subs	r3, r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d302      	bcc.n	8008e5a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008e54:	23ce      	movs	r3, #206	; 0xce
 8008e56:	77fb      	strb	r3, [r7, #31]
 8008e58:	e010      	b.n	8008e7c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	4413      	add	r3, r2
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	b25a      	sxtb	r2, r3
 8008e64:	2101      	movs	r1, #1
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	fa01 f303 	lsl.w	r3, r1, r3
 8008e6c:	b25b      	sxtb	r3, r3
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	b259      	sxtb	r1, r3
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	4413      	add	r3, r2
 8008e78:	b2ca      	uxtb	r2, r1
 8008e7a:	701a      	strb	r2, [r3, #0]

	return status;
 8008e7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3724      	adds	r7, #36	; 0x24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8008e96:	2306      	movs	r3, #6
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	21b0      	movs	r1, #176	; 0xb0
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f002 fdcf 	bl	800ba40 <VL53L0X_WriteMulti>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8008ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8008ebc:	2306      	movs	r3, #6
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	21b0      	movs	r1, #176	; 0xb0
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f002 fdec 	bl	800baa0 <VL53L0X_ReadMulti>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08c      	sub	sp, #48	; 0x30
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	607a      	str	r2, [r7, #4]
 8008ee2:	603b      	str	r3, [r7, #0]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008efa:	e02b      	b.n	8008f54 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008efc:	f107 031c 	add.w	r3, r7, #28
 8008f00:	6a3a      	ldr	r2, [r7, #32]
 8008f02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7ff ff11 	bl	8008d2c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f10:	d103      	bne.n	8008f1a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008f12:	23ce      	movs	r3, #206	; 0xce
 8008f14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008f18:	e020      	b.n	8008f5c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f20:	4413      	add	r3, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7ff ff60 	bl	8008de8 <is_aperture>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	7afb      	ldrb	r3, [r7, #11]
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d003      	beq.n	8008f3a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008f32:	23ce      	movs	r3, #206	; 0xce
 8008f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008f38:	e010      	b.n	8008f5c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008f3e:	6a3a      	ldr	r2, [r7, #32]
 8008f40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f42:	6838      	ldr	r0, [r7, #0]
 8008f44:	f7ff ff6a 	bl	8008e1c <enable_spad_bit>
		currentSpad++;
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	3301      	adds	r3, #1
 8008f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d3cf      	bcc.n	8008efc <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f5e:	6a3a      	ldr	r2, [r7, #32]
 8008f60:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008f62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d106      	bne.n	8008f78 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7ff ff8d 	bl	8008e8c <set_ref_spad_map>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008f78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d121      	bne.n	8008fc4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008f80:	f107 0314 	add.w	r3, r7, #20
 8008f84:	4619      	mov	r1, r3
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f7ff ff93 	bl	8008eb2 <get_ref_spad_map>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8008f92:	2300      	movs	r3, #0
 8008f94:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8008f96:	e011      	b.n	8008fbc <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	4413      	add	r3, r2
 8008f9e:	781a      	ldrb	r2, [r3, #0]
 8008fa0:	f107 0114 	add.w	r1, r7, #20
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	440b      	add	r3, r1
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d003      	beq.n	8008fb6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008fae:	23ce      	movs	r3, #206	; 0xce
 8008fb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8008fb4:	e006      	b.n	8008fc4 <enable_ref_spads+0xec>
			}
			i++;
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	3301      	adds	r3, #1
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8008fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d3e9      	bcc.n	8008f98 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8008fc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3730      	adds	r7, #48	; 0x30
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	; 0x28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8008fec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008ff0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d107      	bne.n	8009008 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008ff8:	22c0      	movs	r2, #192	; 0xc0
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f002 fd7b 	bl	800baf8 <VL53L0X_WrByte>
 8009002:	4603      	mov	r3, r0
 8009004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009008:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800900c:	2b00      	cmp	r3, #0
 800900e:	d108      	bne.n	8009022 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009010:	f107 0308 	add.w	r3, r7, #8
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff fc48 	bl	80088ac <VL53L0X_PerformSingleRangingMeasurement>
 800901c:	4603      	mov	r3, r0
 800901e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009022:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009026:	2b00      	cmp	r3, #0
 8009028:	d107      	bne.n	800903a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800902a:	2201      	movs	r2, #1
 800902c:	21ff      	movs	r1, #255	; 0xff
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f002 fd62 	bl	800baf8 <VL53L0X_WrByte>
 8009034:	4603      	mov	r3, r0
 8009036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800903a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800903e:	2b00      	cmp	r3, #0
 8009040:	d107      	bne.n	8009052 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	21b6      	movs	r1, #182	; 0xb6
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f002 fe02 	bl	800bc50 <VL53L0X_RdWord>
 800904c:	4603      	mov	r3, r0
 800904e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8009052:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009056:	2b00      	cmp	r3, #0
 8009058:	d107      	bne.n	800906a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800905a:	2200      	movs	r2, #0
 800905c:	21ff      	movs	r1, #255	; 0xff
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f002 fd4a 	bl	800baf8 <VL53L0X_WrByte>
 8009064:	4603      	mov	r3, r0
 8009066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800906a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800906e:	2b00      	cmp	r3, #0
 8009070:	d112      	bne.n	8009098 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009072:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009076:	461a      	mov	r2, r3
 8009078:	2101      	movs	r1, #1
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f002 fd3c 	bl	800baf8 <VL53L0X_WrByte>
 8009080:	4603      	mov	r3, r0
 8009082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8009086:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800908a:	2b00      	cmp	r3, #0
 800908c:	d104      	bne.n	8009098 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009094:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 8009098:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800909c:	4618      	mov	r0, r3
 800909e:	3728      	adds	r7, #40	; 0x28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80090a4:	b590      	push	{r4, r7, lr}
 80090a6:	b09d      	sub	sp, #116	; 0x74
 80090a8:	af06      	add	r7, sp, #24
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090b0:	2300      	movs	r3, #0
 80090b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80090b6:	23b4      	movs	r3, #180	; 0xb4
 80090b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80090bc:	2303      	movs	r3, #3
 80090be:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80090c0:	232c      	movs	r3, #44	; 0x2c
 80090c2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80090c4:	2300      	movs	r3, #0
 80090c6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80090d0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80090d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80090de:	2306      	movs	r3, #6
 80090e0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8009108:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800910a:	2300      	movs	r3, #0
 800910c:	64bb      	str	r3, [r7, #72]	; 0x48
 800910e:	e009      	b.n	8009124 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009114:	4413      	add	r3, r2
 8009116:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800911a:	2200      	movs	r2, #0
 800911c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800911e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009120:	3301      	adds	r3, #1
 8009122:	64bb      	str	r3, [r7, #72]	; 0x48
 8009124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009128:	429a      	cmp	r2, r3
 800912a:	d3f1      	bcc.n	8009110 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800912c:	2201      	movs	r2, #1
 800912e:	21ff      	movs	r1, #255	; 0xff
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f002 fce1 	bl	800baf8 <VL53L0X_WrByte>
 8009136:	4603      	mov	r3, r0
 8009138:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800913c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009140:	2b00      	cmp	r3, #0
 8009142:	d107      	bne.n	8009154 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8009144:	2200      	movs	r2, #0
 8009146:	214f      	movs	r1, #79	; 0x4f
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f002 fcd5 	bl	800baf8 <VL53L0X_WrByte>
 800914e:	4603      	mov	r3, r0
 8009150:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009154:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009158:	2b00      	cmp	r3, #0
 800915a:	d107      	bne.n	800916c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800915c:	222c      	movs	r2, #44	; 0x2c
 800915e:	214e      	movs	r1, #78	; 0x4e
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f002 fcc9 	bl	800baf8 <VL53L0X_WrByte>
 8009166:	4603      	mov	r3, r0
 8009168:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800916c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009170:	2b00      	cmp	r3, #0
 8009172:	d107      	bne.n	8009184 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009174:	2200      	movs	r2, #0
 8009176:	21ff      	movs	r1, #255	; 0xff
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f002 fcbd 	bl	800baf8 <VL53L0X_WrByte>
 800917e:	4603      	mov	r3, r0
 8009180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009184:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009188:	2b00      	cmp	r3, #0
 800918a:	d109      	bne.n	80091a0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800918c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009190:	461a      	mov	r2, r3
 8009192:	21b6      	movs	r1, #182	; 0xb6
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f002 fcaf 	bl	800baf8 <VL53L0X_WrByte>
 800919a:	4603      	mov	r3, r0
 800919c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80091a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d107      	bne.n	80091b8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80091a8:	2200      	movs	r2, #0
 80091aa:	2180      	movs	r1, #128	; 0x80
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f002 fca3 	bl	800baf8 <VL53L0X_WrByte>
 80091b2:	4603      	mov	r3, r0
 80091b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80091b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10a      	bne.n	80091d6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80091c0:	f107 0210 	add.w	r2, r7, #16
 80091c4:	f107 0111 	add.w	r1, r7, #17
 80091c8:	2300      	movs	r3, #0
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 fbbb 	bl	8009946 <VL53L0X_perform_ref_calibration>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80091d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d121      	bne.n	8009222 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80091e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091e4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80091ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ec:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 80091fa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80091fe:	f107 0218 	add.w	r2, r7, #24
 8009202:	9204      	str	r2, [sp, #16]
 8009204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009206:	9203      	str	r2, [sp, #12]
 8009208:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800920a:	9202      	str	r2, [sp, #8]
 800920c:	9301      	str	r3, [sp, #4]
 800920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	4623      	mov	r3, r4
 8009214:	4602      	mov	r2, r0
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f7ff fe5e 	bl	8008ed8 <enable_ref_spads>
 800921c:	4603      	mov	r3, r0
 800921e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009222:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009226:	2b00      	cmp	r3, #0
 8009228:	d174      	bne.n	8009314 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800922e:	f107 0312 	add.w	r3, r7, #18
 8009232:	4619      	mov	r1, r3
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f7ff fecb 	bl	8008fd0 <perform_ref_signal_measurement>
 800923a:	4603      	mov	r3, r0
 800923c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009240:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009244:	2b00      	cmp	r3, #0
 8009246:	d161      	bne.n	800930c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8009248:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800924a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800924c:	429a      	cmp	r2, r3
 800924e:	d25d      	bcs.n	800930c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 8009250:	2300      	movs	r3, #0
 8009252:	64bb      	str	r3, [r7, #72]	; 0x48
 8009254:	e009      	b.n	800926a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800925a:	4413      	add	r3, r2
 800925c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009266:	3301      	adds	r3, #1
 8009268:	64bb      	str	r3, [r7, #72]	; 0x48
 800926a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	429a      	cmp	r2, r3
 8009270:	d3f1      	bcc.n	8009256 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8009272:	e002      	b.n	800927a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009276:	3301      	adds	r3, #1
 8009278:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800927a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800927e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009280:	4413      	add	r3, r2
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff fdb0 	bl	8008de8 <is_aperture>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d103      	bne.n	8009296 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800928e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009292:	429a      	cmp	r2, r3
 8009294:	d3ee      	bcc.n	8009274 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009296:	2301      	movs	r3, #1
 8009298:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800929a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800929c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 80092aa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80092ae:	f107 0218 	add.w	r2, r7, #24
 80092b2:	9204      	str	r2, [sp, #16]
 80092b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092b6:	9203      	str	r2, [sp, #12]
 80092b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092ba:	9202      	str	r2, [sp, #8]
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	4623      	mov	r3, r4
 80092c4:	4602      	mov	r2, r0
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f7ff fe06 	bl	8008ed8 <enable_ref_spads>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80092d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d11b      	bne.n	8009312 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80092de:	f107 0312 	add.w	r3, r7, #18
 80092e2:	4619      	mov	r1, r3
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f7ff fe73 	bl	8008fd0 <perform_ref_signal_measurement>
 80092ea:	4603      	mov	r3, r0
 80092ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80092f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10c      	bne.n	8009312 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80092f8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80092fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d208      	bcs.n	8009312 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009300:	2301      	movs	r3, #1
 8009302:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009308:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800930a:	e002      	b.n	8009312 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800930c:	2300      	movs	r3, #0
 800930e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009310:	e000      	b.n	8009314 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009312:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009314:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009318:	2b00      	cmp	r3, #0
 800931a:	f040 80af 	bne.w	800947c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800931e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009320:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009322:	429a      	cmp	r2, r3
 8009324:	f240 80aa 	bls.w	800947c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800932a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800932e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009330:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8009338:	f107 031c 	add.w	r3, r7, #28
 800933c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800933e:	4618      	mov	r0, r3
 8009340:	f002 fd5e 	bl	800be00 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009344:	8a7b      	ldrh	r3, [r7, #18]
 8009346:	461a      	mov	r2, r3
 8009348:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	2b00      	cmp	r3, #0
 800934e:	bfb8      	it	lt
 8009350:	425b      	neglt	r3, r3
 8009352:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800935a:	e086      	b.n	800946a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 8009362:	f107 0314 	add.w	r3, r7, #20
 8009366:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800936a:	f7ff fcdf 	bl	8008d2c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009374:	d103      	bne.n	800937e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009376:	23ce      	movs	r3, #206	; 0xce
 8009378:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800937c:	e07e      	b.n	800947c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800937e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	4413      	add	r3, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff fd2e 	bl	8008de8 <is_aperture>
 800938c:	4603      	mov	r3, r0
 800938e:	461a      	mov	r2, r3
 8009390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009392:	4293      	cmp	r3, r2
 8009394:	d003      	beq.n	800939e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8009396:	2301      	movs	r3, #1
 8009398:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800939c:	e06e      	b.n	800947c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800939e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a0:	3301      	adds	r3, #1
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 80093ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7ff fd32 	bl	8008e1c <enable_spad_bit>
 80093b8:	4603      	mov	r3, r0
 80093ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80093be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10c      	bne.n	80093e0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80093c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093c8:	3301      	adds	r3, #1
 80093ca:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 80093d2:	4619      	mov	r1, r3
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f7ff fd59 	bl	8008e8c <set_ref_spad_map>
 80093da:	4603      	mov	r3, r0
 80093dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80093e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d146      	bne.n	8009476 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80093e8:	f107 0312 	add.w	r3, r7, #18
 80093ec:	4619      	mov	r1, r3
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7ff fdee 	bl	8008fd0 <perform_ref_signal_measurement>
 80093f4:	4603      	mov	r3, r0
 80093f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80093fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d13b      	bne.n	800947a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009402:	8a7b      	ldrh	r3, [r7, #18]
 8009404:	461a      	mov	r2, r3
 8009406:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	bfb8      	it	lt
 800940e:	425b      	neglt	r3, r3
 8009410:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009412:	8a7b      	ldrh	r3, [r7, #18]
 8009414:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009416:	429a      	cmp	r2, r3
 8009418:	d21c      	bcs.n	8009454 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800941a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800941e:	429a      	cmp	r2, r3
 8009420:	d914      	bls.n	800944c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 8009422:	f107 031c 	add.w	r3, r7, #28
 8009426:	4619      	mov	r1, r3
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f7ff fd2f 	bl	8008e8c <set_ref_spad_map>
 800942e:	4603      	mov	r3, r0
 8009430:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 800943a:	f107 011c 	add.w	r1, r7, #28
 800943e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009440:	4618      	mov	r0, r3
 8009442:	f002 fcdd 	bl	800be00 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8009446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009448:	3b01      	subs	r3, #1
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800944c:	2301      	movs	r3, #1
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009452:	e00a      	b.n	800946a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009456:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 800945e:	f107 031c 	add.w	r3, r7, #28
 8009462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009464:	4618      	mov	r0, r3
 8009466:	f002 fccb 	bl	800be00 <memcpy>
		while (!complete) {
 800946a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800946e:	2b00      	cmp	r3, #0
 8009470:	f43f af74 	beq.w	800935c <VL53L0X_perform_ref_spad_management+0x2b8>
 8009474:	e002      	b.n	800947c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009476:	bf00      	nop
 8009478:	e000      	b.n	800947c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800947a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800947c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009480:	2b00      	cmp	r3, #0
 8009482:	d115      	bne.n	80094b0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009488:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8009490:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	781a      	ldrb	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80094b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	375c      	adds	r7, #92	; 0x5c
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd90      	pop	{r4, r7, pc}

080094bc <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80094bc:	b590      	push	{r4, r7, lr}
 80094be:	b093      	sub	sp, #76	; 0x4c
 80094c0:	af06      	add	r7, sp, #24
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	4613      	mov	r3, r2
 80094c8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094ca:	2300      	movs	r3, #0
 80094cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80094d4:	23b4      	movs	r3, #180	; 0xb4
 80094d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80094da:	2306      	movs	r3, #6
 80094dc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80094de:	232c      	movs	r3, #44	; 0x2c
 80094e0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80094e2:	2201      	movs	r2, #1
 80094e4:	21ff      	movs	r1, #255	; 0xff
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f002 fb06 	bl	800baf8 <VL53L0X_WrByte>
 80094ec:	4603      	mov	r3, r0
 80094ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80094f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d107      	bne.n	800950a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80094fa:	2200      	movs	r2, #0
 80094fc:	214f      	movs	r1, #79	; 0x4f
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f002 fafa 	bl	800baf8 <VL53L0X_WrByte>
 8009504:	4603      	mov	r3, r0
 8009506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800950a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800950e:	2b00      	cmp	r3, #0
 8009510:	d107      	bne.n	8009522 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8009512:	222c      	movs	r2, #44	; 0x2c
 8009514:	214e      	movs	r1, #78	; 0x4e
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f002 faee 	bl	800baf8 <VL53L0X_WrByte>
 800951c:	4603      	mov	r3, r0
 800951e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009522:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009526:	2b00      	cmp	r3, #0
 8009528:	d107      	bne.n	800953a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800952a:	2200      	movs	r2, #0
 800952c:	21ff      	movs	r1, #255	; 0xff
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f002 fae2 	bl	800baf8 <VL53L0X_WrByte>
 8009534:	4603      	mov	r3, r0
 8009536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800953a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800953e:	2b00      	cmp	r3, #0
 8009540:	d109      	bne.n	8009556 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8009542:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009546:	461a      	mov	r2, r3
 8009548:	21b6      	movs	r1, #182	; 0xb6
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f002 fad4 	bl	800baf8 <VL53L0X_WrByte>
 8009550:	4603      	mov	r3, r0
 8009552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8009556:	2300      	movs	r3, #0
 8009558:	627b      	str	r3, [r7, #36]	; 0x24
 800955a:	e009      	b.n	8009570 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	4413      	add	r3, r2
 8009562:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009566:	2200      	movs	r2, #0
 8009568:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	3301      	adds	r3, #1
 800956e:	627b      	str	r3, [r7, #36]	; 0x24
 8009570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	429a      	cmp	r2, r3
 8009576:	d3f1      	bcc.n	800955c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8009578:	79fb      	ldrb	r3, [r7, #7]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d011      	beq.n	80095a2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800957e:	e002      	b.n	8009586 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	3301      	adds	r3, #1
 8009584:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009586:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958c:	4413      	add	r3, r2
 800958e:	4618      	mov	r0, r3
 8009590:	f7ff fc2a 	bl	8008de8 <is_aperture>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d103      	bne.n	80095a2 <VL53L0X_set_reference_spads+0xe6>
 800959a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d3ee      	bcc.n	8009580 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 80095ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095b2:	79f9      	ldrb	r1, [r7, #7]
 80095b4:	f107 0214 	add.w	r2, r7, #20
 80095b8:	9204      	str	r2, [sp, #16]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	9203      	str	r2, [sp, #12]
 80095be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095c0:	9202      	str	r2, [sp, #8]
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	4623      	mov	r3, r4
 80095ca:	4602      	mov	r2, r0
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f7ff fc83 	bl	8008ed8 <enable_ref_spads>
 80095d2:	4603      	mov	r3, r0
 80095d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80095d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10c      	bne.n	80095fa <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	79fa      	ldrb	r2, [r7, #7]
 80095f6:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80095fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3734      	adds	r7, #52	; 0x34
 8009602:	46bd      	mov	sp, r7
 8009604:	bd90      	pop	{r4, r7, pc}

08009606 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	460b      	mov	r3, r1
 8009610:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009612:	2300      	movs	r3, #0
 8009614:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10a      	bne.n	8009634 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800961e:	78fb      	ldrb	r3, [r7, #3]
 8009620:	f043 0301 	orr.w	r3, r3, #1
 8009624:	b2db      	uxtb	r3, r3
 8009626:	461a      	mov	r2, r3
 8009628:	2100      	movs	r1, #0
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f002 fa64 	bl	800baf8 <VL53L0X_WrByte>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8009634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d104      	bne.n	8009646 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f9bf 	bl	80099c0 <VL53L0X_measurement_poll_for_completion>
 8009642:	4603      	mov	r3, r0
 8009644:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d105      	bne.n	800965a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800964e:	2100      	movs	r1, #0
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff fab5 	bl	8008bc0 <VL53L0X_ClearInterruptMask>
 8009656:	4603      	mov	r3, r0
 8009658:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800965a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d106      	bne.n	8009670 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8009662:	2200      	movs	r2, #0
 8009664:	2100      	movs	r1, #0
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f002 fa46 	bl	800baf8 <VL53L0X_WrByte>
 800966c:	4603      	mov	r3, r0
 800966e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8009670:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	4608      	mov	r0, r1
 8009686:	4611      	mov	r1, r2
 8009688:	461a      	mov	r2, r3
 800968a:	4603      	mov	r3, r0
 800968c:	70fb      	strb	r3, [r7, #3]
 800968e:	460b      	mov	r3, r1
 8009690:	70bb      	strb	r3, [r7, #2]
 8009692:	4613      	mov	r3, r2
 8009694:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800969a:	2300      	movs	r3, #0
 800969c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800969e:	2201      	movs	r2, #1
 80096a0:	21ff      	movs	r1, #255	; 0xff
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f002 fa28 	bl	800baf8 <VL53L0X_WrByte>
 80096a8:	4603      	mov	r3, r0
 80096aa:	461a      	mov	r2, r3
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80096b2:	2200      	movs	r2, #0
 80096b4:	2100      	movs	r1, #0
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f002 fa1e 	bl	800baf8 <VL53L0X_WrByte>
 80096bc:	4603      	mov	r3, r0
 80096be:	461a      	mov	r2, r3
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80096c6:	2200      	movs	r2, #0
 80096c8:	21ff      	movs	r1, #255	; 0xff
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f002 fa14 	bl	800baf8 <VL53L0X_WrByte>
 80096d0:	4603      	mov	r3, r0
 80096d2:	461a      	mov	r2, r3
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80096da:	78fb      	ldrb	r3, [r7, #3]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01e      	beq.n	800971e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80096e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d009      	beq.n	80096fc <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	21cb      	movs	r1, #203	; 0xcb
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f002 fa85 	bl	800bbfc <VL53L0X_RdByte>
 80096f2:	4603      	mov	r3, r0
 80096f4:	461a      	mov	r2, r3
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80096fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009700:	2b00      	cmp	r3, #0
 8009702:	d02a      	beq.n	800975a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009704:	f107 030e 	add.w	r3, r7, #14
 8009708:	461a      	mov	r2, r3
 800970a:	21ee      	movs	r1, #238	; 0xee
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f002 fa75 	bl	800bbfc <VL53L0X_RdByte>
 8009712:	4603      	mov	r3, r0
 8009714:	461a      	mov	r2, r3
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	4313      	orrs	r3, r2
 800971a:	73fb      	strb	r3, [r7, #15]
 800971c:	e01d      	b.n	800975a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800971e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00a      	beq.n	800973c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8009726:	78bb      	ldrb	r3, [r7, #2]
 8009728:	461a      	mov	r2, r3
 800972a:	21cb      	movs	r1, #203	; 0xcb
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f002 f9e3 	bl	800baf8 <VL53L0X_WrByte>
 8009732:	4603      	mov	r3, r0
 8009734:	461a      	mov	r2, r3
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	4313      	orrs	r3, r2
 800973a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800973c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00a      	beq.n	800975a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8009744:	787b      	ldrb	r3, [r7, #1]
 8009746:	2280      	movs	r2, #128	; 0x80
 8009748:	21ee      	movs	r1, #238	; 0xee
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f002 fa22 	bl	800bb94 <VL53L0X_UpdateByte>
 8009750:	4603      	mov	r3, r0
 8009752:	461a      	mov	r2, r3
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	4313      	orrs	r3, r2
 8009758:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800975a:	2201      	movs	r2, #1
 800975c:	21ff      	movs	r1, #255	; 0xff
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f002 f9ca 	bl	800baf8 <VL53L0X_WrByte>
 8009764:	4603      	mov	r3, r0
 8009766:	461a      	mov	r2, r3
 8009768:	7bfb      	ldrb	r3, [r7, #15]
 800976a:	4313      	orrs	r3, r2
 800976c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800976e:	2201      	movs	r2, #1
 8009770:	2100      	movs	r1, #0
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f002 f9c0 	bl	800baf8 <VL53L0X_WrByte>
 8009778:	4603      	mov	r3, r0
 800977a:	461a      	mov	r2, r3
 800977c:	7bfb      	ldrb	r3, [r7, #15]
 800977e:	4313      	orrs	r3, r2
 8009780:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009782:	2200      	movs	r2, #0
 8009784:	21ff      	movs	r1, #255	; 0xff
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f002 f9b6 	bl	800baf8 <VL53L0X_WrByte>
 800978c:	4603      	mov	r3, r0
 800978e:	461a      	mov	r2, r3
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	4313      	orrs	r3, r2
 8009794:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8009796:	7bbb      	ldrb	r3, [r7, #14]
 8009798:	f023 0310 	bic.w	r3, r3, #16
 800979c:	b2da      	uxtb	r2, r3
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	701a      	strb	r2, [r3, #0]

	return Status;
 80097a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b08a      	sub	sp, #40	; 0x28
 80097b2:	af04      	add	r7, sp, #16
 80097b4:	60f8      	str	r0, [r7, #12]
 80097b6:	60b9      	str	r1, [r7, #8]
 80097b8:	4611      	mov	r1, r2
 80097ba:	461a      	mov	r2, r3
 80097bc:	460b      	mov	r3, r1
 80097be:	71fb      	strb	r3, [r7, #7]
 80097c0:	4613      	mov	r3, r2
 80097c2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097c4:	2300      	movs	r3, #0
 80097c6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80097d8:	79bb      	ldrb	r3, [r7, #6]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80097e4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80097e6:	2201      	movs	r2, #1
 80097e8:	2101      	movs	r1, #1
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f002 f984 	bl	800baf8 <VL53L0X_WrByte>
 80097f0:	4603      	mov	r3, r0
 80097f2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80097f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d105      	bne.n	8009808 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80097fc:	2140      	movs	r1, #64	; 0x40
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f7ff ff01 	bl	8009606 <VL53L0X_perform_single_ref_calibration>
 8009804:	4603      	mov	r3, r0
 8009806:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d115      	bne.n	800983c <VL53L0X_perform_vhv_calibration+0x8e>
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d112      	bne.n	800983c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009816:	7d39      	ldrb	r1, [r7, #20]
 8009818:	7d7a      	ldrb	r2, [r7, #21]
 800981a:	2300      	movs	r3, #0
 800981c:	9303      	str	r3, [sp, #12]
 800981e:	2301      	movs	r3, #1
 8009820:	9302      	str	r3, [sp, #8]
 8009822:	f107 0313 	add.w	r3, r7, #19
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	460b      	mov	r3, r1
 800982e:	2101      	movs	r1, #1
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f7ff ff23 	bl	800967c <VL53L0X_ref_calibration_io>
 8009836:	4603      	mov	r3, r0
 8009838:	75fb      	strb	r3, [r7, #23]
 800983a:	e002      	b.n	8009842 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2200      	movs	r2, #0
 8009840:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d112      	bne.n	8009870 <VL53L0X_perform_vhv_calibration+0xc2>
 800984a:	79bb      	ldrb	r3, [r7, #6]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00f      	beq.n	8009870 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009850:	7dbb      	ldrb	r3, [r7, #22]
 8009852:	461a      	mov	r2, r3
 8009854:	2101      	movs	r1, #1
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f002 f94e 	bl	800baf8 <VL53L0X_WrByte>
 800985c:	4603      	mov	r3, r0
 800985e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009860:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d103      	bne.n	8009870 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	7dba      	ldrb	r2, [r7, #22]
 800986c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8009870:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08a      	sub	sp, #40	; 0x28
 8009880:	af04      	add	r7, sp, #16
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	4611      	mov	r1, r2
 8009888:	461a      	mov	r2, r3
 800988a:	460b      	mov	r3, r1
 800988c:	71fb      	strb	r3, [r7, #7]
 800988e:	4613      	mov	r3, r2
 8009890:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009892:	2300      	movs	r3, #0
 8009894:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80098a2:	79bb      	ldrb	r3, [r7, #6]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80098ae:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80098b0:	2202      	movs	r2, #2
 80098b2:	2101      	movs	r1, #1
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f002 f91f 	bl	800baf8 <VL53L0X_WrByte>
 80098ba:	4603      	mov	r3, r0
 80098bc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80098be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d105      	bne.n	80098d2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80098c6:	2100      	movs	r1, #0
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7ff fe9c 	bl	8009606 <VL53L0X_perform_single_ref_calibration>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80098d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d115      	bne.n	8009906 <VL53L0X_perform_phase_calibration+0x8a>
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d112      	bne.n	8009906 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80098e0:	7d39      	ldrb	r1, [r7, #20]
 80098e2:	7d7a      	ldrb	r2, [r7, #21]
 80098e4:	2301      	movs	r3, #1
 80098e6:	9303      	str	r3, [sp, #12]
 80098e8:	2300      	movs	r3, #0
 80098ea:	9302      	str	r3, [sp, #8]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	f107 0313 	add.w	r3, r7, #19
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	460b      	mov	r3, r1
 80098f8:	2101      	movs	r1, #1
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f7ff febe 	bl	800967c <VL53L0X_ref_calibration_io>
 8009900:	4603      	mov	r3, r0
 8009902:	75fb      	strb	r3, [r7, #23]
 8009904:	e002      	b.n	800990c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2200      	movs	r2, #0
 800990a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800990c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d112      	bne.n	800993a <VL53L0X_perform_phase_calibration+0xbe>
 8009914:	79bb      	ldrb	r3, [r7, #6]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00f      	beq.n	800993a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800991a:	7dbb      	ldrb	r3, [r7, #22]
 800991c:	461a      	mov	r2, r3
 800991e:	2101      	movs	r1, #1
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f002 f8e9 	bl	800baf8 <VL53L0X_WrByte>
 8009926:	4603      	mov	r3, r0
 8009928:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800992a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d103      	bne.n	800993a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	7dba      	ldrb	r2, [r7, #22]
 8009936:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800993a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b086      	sub	sp, #24
 800994a:	af00      	add	r7, sp, #0
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	607a      	str	r2, [r7, #4]
 8009952:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009954:	2300      	movs	r3, #0
 8009956:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009962:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 8009964:	78fa      	ldrb	r2, [r7, #3]
 8009966:	2300      	movs	r3, #0
 8009968:	68b9      	ldr	r1, [r7, #8]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f7ff ff1f 	bl	80097ae <VL53L0X_perform_vhv_calibration>
 8009970:	4603      	mov	r3, r0
 8009972:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009974:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d107      	bne.n	800998c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800997c:	78fa      	ldrb	r2, [r7, #3]
 800997e:	2300      	movs	r3, #0
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f7ff ff7a 	bl	800987c <VL53L0X_perform_phase_calibration>
 8009988:	4603      	mov	r3, r0
 800998a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800998c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10f      	bne.n	80099b4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009994:	7dbb      	ldrb	r3, [r7, #22]
 8009996:	461a      	mov	r2, r3
 8009998:	2101      	movs	r1, #1
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f002 f8ac 	bl	800baf8 <VL53L0X_WrByte>
 80099a0:	4603      	mov	r3, r0
 80099a2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80099a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d103      	bne.n	80099b4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	7dba      	ldrb	r2, [r7, #22]
 80099b0:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 80099b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3718      	adds	r7, #24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099c8:	2300      	movs	r3, #0
 80099ca:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80099d4:	f107 030f 	add.w	r3, r7, #15
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7fe fe02 	bl	80085e4 <VL53L0X_GetMeasurementDataReady>
 80099e0:	4603      	mov	r3, r0
 80099e2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80099e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d110      	bne.n	8009a0e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d00f      	beq.n	8009a12 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	3301      	adds	r3, #1
 80099f6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80099fe:	d302      	bcc.n	8009a06 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009a00:	23f9      	movs	r3, #249	; 0xf9
 8009a02:	75fb      	strb	r3, [r7, #23]
			break;
 8009a04:	e006      	b.n	8009a14 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f002 f996 	bl	800bd38 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009a0c:	e7e2      	b.n	80099d4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8009a0e:	bf00      	nop
 8009a10:	e000      	b.n	8009a14 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8009a12:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	3301      	adds	r3, #1
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b085      	sub	sp, #20
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a56:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8009a58:	e002      	b.n	8009a60 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	089b      	lsrs	r3, r3, #2
 8009a5e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d8f8      	bhi.n	8009a5a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8009a68:	e017      	b.n	8009a9a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	4413      	add	r3, r2
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d30b      	bcc.n	8009a8e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	085b      	lsrs	r3, r3, #1
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	4413      	add	r3, r2
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	e002      	b.n	8009a94 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	085b      	lsrs	r3, r3, #1
 8009a92:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	089b      	lsrs	r3, r3, #2
 8009a98:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e4      	bne.n	8009a6a <VL53L0X_isqrt+0x24>
	}

	return res;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b086      	sub	sp, #24
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009aba:	2200      	movs	r2, #0
 8009abc:	2183      	movs	r1, #131	; 0x83
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f002 f81a 	bl	800baf8 <VL53L0X_WrByte>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	7dfb      	ldrb	r3, [r7, #23]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 8009ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d11e      	bne.n	8009b14 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009ada:	f107 030f 	add.w	r3, r7, #15
 8009ade:	461a      	mov	r2, r3
 8009ae0:	2183      	movs	r1, #131	; 0x83
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f002 f88a 	bl	800bbfc <VL53L0X_RdByte>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10a      	bne.n	8009b08 <VL53L0X_device_read_strobe+0x5a>
 8009af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d106      	bne.n	8009b08 <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	3301      	adds	r3, #1
 8009afe:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009b06:	d3e8      	bcc.n	8009ada <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009b0e:	d301      	bcc.n	8009b14 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009b10:	23f9      	movs	r3, #249	; 0xf9
 8009b12:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8009b14:	2201      	movs	r2, #1
 8009b16:	2183      	movs	r1, #131	; 0x83
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f001 ffed 	bl	800baf8 <VL53L0X_WrByte>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	461a      	mov	r2, r3
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8009b28:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b098      	sub	sp, #96	; 0x60
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b40:	2300      	movs	r3, #0
 8009b42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009b64:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009b68:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009b7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 8009b80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b84:	2b07      	cmp	r3, #7
 8009b86:	f000 8408 	beq.w	800a39a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	2180      	movs	r1, #128	; 0x80
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f001 ffb2 	bl	800baf8 <VL53L0X_WrByte>
 8009b94:	4603      	mov	r3, r0
 8009b96:	461a      	mov	r2, r3
 8009b98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	21ff      	movs	r1, #255	; 0xff
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f001 ffa6 	bl	800baf8 <VL53L0X_WrByte>
 8009bac:	4603      	mov	r3, r0
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009bba:	2200      	movs	r2, #0
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f001 ff9a 	bl	800baf8 <VL53L0X_WrByte>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009bd2:	2206      	movs	r2, #6
 8009bd4:	21ff      	movs	r1, #255	; 0xff
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f001 ff8e 	bl	800baf8 <VL53L0X_WrByte>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	461a      	mov	r2, r3
 8009be0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009be4:	4313      	orrs	r3, r2
 8009be6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009bea:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009bee:	461a      	mov	r2, r3
 8009bf0:	2183      	movs	r1, #131	; 0x83
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f002 f802 	bl	800bbfc <VL53L0X_RdByte>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c00:	4313      	orrs	r3, r2
 8009c02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009c06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c0a:	f043 0304 	orr.w	r3, r3, #4
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	461a      	mov	r2, r3
 8009c12:	2183      	movs	r1, #131	; 0x83
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 ff6f 	bl	800baf8 <VL53L0X_WrByte>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c22:	4313      	orrs	r3, r2
 8009c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009c28:	2207      	movs	r2, #7
 8009c2a:	21ff      	movs	r1, #255	; 0xff
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 ff63 	bl	800baf8 <VL53L0X_WrByte>
 8009c32:	4603      	mov	r3, r0
 8009c34:	461a      	mov	r2, r3
 8009c36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009c40:	2201      	movs	r2, #1
 8009c42:	2181      	movs	r1, #129	; 0x81
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 ff57 	bl	800baf8 <VL53L0X_WrByte>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c52:	4313      	orrs	r3, r2
 8009c54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f002 f86d 	bl	800bd38 <VL53L0X_PollingDelay>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	461a      	mov	r2, r3
 8009c62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c66:	4313      	orrs	r3, r2
 8009c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	2180      	movs	r1, #128	; 0x80
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 ff41 	bl	800baf8 <VL53L0X_WrByte>
 8009c76:	4603      	mov	r3, r0
 8009c78:	461a      	mov	r2, r3
 8009c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 8098 	beq.w	8009dc0 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009c90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c94:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f040 8091 	bne.w	8009dc0 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009c9e:	226b      	movs	r2, #107	; 0x6b
 8009ca0:	2194      	movs	r1, #148	; 0x94
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f001 ff28 	bl	800baf8 <VL53L0X_WrByte>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	461a      	mov	r2, r3
 8009cac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff fef9 	bl	8009aae <VL53L0X_device_read_strobe>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009cca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cce:	461a      	mov	r2, r3
 8009cd0:	2190      	movs	r1, #144	; 0x90
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 fff4 	bl	800bcc0 <VL53L0X_RdDWord>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce8:	0a1b      	lsrs	r3, r3, #8
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cf0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf6:	0bdb      	lsrs	r3, r3, #15
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009d02:	2224      	movs	r2, #36	; 0x24
 8009d04:	2194      	movs	r1, #148	; 0x94
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f001 fef6 	bl	800baf8 <VL53L0X_WrByte>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	461a      	mov	r2, r3
 8009d10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d14:	4313      	orrs	r3, r2
 8009d16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff fec7 	bl	8009aae <VL53L0X_device_read_strobe>
 8009d20:	4603      	mov	r3, r0
 8009d22:	461a      	mov	r2, r3
 8009d24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009d2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d32:	461a      	mov	r2, r3
 8009d34:	2190      	movs	r1, #144	; 0x90
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f001 ffc2 	bl	800bcc0 <VL53L0X_RdDWord>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d44:	4313      	orrs	r3, r2
 8009d46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	0e1b      	lsrs	r3, r3, #24
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	0c1b      	lsrs	r3, r3, #16
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	0a1b      	lsrs	r3, r3, #8
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009d68:	2225      	movs	r2, #37	; 0x25
 8009d6a:	2194      	movs	r1, #148	; 0x94
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 fec3 	bl	800baf8 <VL53L0X_WrByte>
 8009d72:	4603      	mov	r3, r0
 8009d74:	461a      	mov	r2, r3
 8009d76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7ff fe94 	bl	8009aae <VL53L0X_device_read_strobe>
 8009d86:	4603      	mov	r3, r0
 8009d88:	461a      	mov	r2, r3
 8009d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009d94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d98:	461a      	mov	r2, r3
 8009d9a:	2190      	movs	r1, #144	; 0x90
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f001 ff8f 	bl	800bcc0 <VL53L0X_RdDWord>
 8009da2:	4603      	mov	r3, r0
 8009da4:	461a      	mov	r2, r3
 8009da6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009daa:	4313      	orrs	r3, r2
 8009dac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db2:	0e1b      	lsrs	r3, r3, #24
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	0c1b      	lsrs	r3, r3, #16
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	f003 0302 	and.w	r3, r3, #2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 8189 	beq.w	800a0de <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009dcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009dd0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f040 8182 	bne.w	800a0de <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009dda:	2202      	movs	r2, #2
 8009ddc:	2194      	movs	r1, #148	; 0x94
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 fe8a 	bl	800baf8 <VL53L0X_WrByte>
 8009de4:	4603      	mov	r3, r0
 8009de6:	461a      	mov	r2, r3
 8009de8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dec:	4313      	orrs	r3, r2
 8009dee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7ff fe5b 	bl	8009aae <VL53L0X_device_read_strobe>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e00:	4313      	orrs	r3, r2
 8009e02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009e06:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	2190      	movs	r1, #144	; 0x90
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f001 fef4 	bl	800bbfc <VL53L0X_RdByte>
 8009e14:	4603      	mov	r3, r0
 8009e16:	461a      	mov	r2, r3
 8009e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009e22:	227b      	movs	r2, #123	; 0x7b
 8009e24:	2194      	movs	r1, #148	; 0x94
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f001 fe66 	bl	800baf8 <VL53L0X_WrByte>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e34:	4313      	orrs	r3, r2
 8009e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7ff fe37 	bl	8009aae <VL53L0X_device_read_strobe>
 8009e40:	4603      	mov	r3, r0
 8009e42:	461a      	mov	r2, r3
 8009e44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009e4e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009e52:	461a      	mov	r2, r3
 8009e54:	2190      	movs	r1, #144	; 0x90
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 fed0 	bl	800bbfc <VL53L0X_RdByte>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e64:	4313      	orrs	r3, r2
 8009e66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009e6a:	2277      	movs	r2, #119	; 0x77
 8009e6c:	2194      	movs	r1, #148	; 0x94
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f001 fe42 	bl	800baf8 <VL53L0X_WrByte>
 8009e74:	4603      	mov	r3, r0
 8009e76:	461a      	mov	r2, r3
 8009e78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff fe13 	bl	8009aae <VL53L0X_device_read_strobe>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e90:	4313      	orrs	r3, r2
 8009e92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	2190      	movs	r1, #144	; 0x90
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f001 ff0e 	bl	800bcc0 <VL53L0X_RdDWord>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009eac:	4313      	orrs	r3, r2
 8009eae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb4:	0e5b      	lsrs	r3, r3, #25
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec2:	0c9b      	lsrs	r3, r3, #18
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	0adb      	lsrs	r3, r3, #11
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	091b      	lsrs	r3, r3, #4
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8009efc:	2278      	movs	r2, #120	; 0x78
 8009efe:	2194      	movs	r1, #148	; 0x94
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f001 fdf9 	bl	800baf8 <VL53L0X_WrByte>
 8009f06:	4603      	mov	r3, r0
 8009f08:	461a      	mov	r2, r3
 8009f0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7ff fdca 	bl	8009aae <VL53L0X_device_read_strobe>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f22:	4313      	orrs	r3, r2
 8009f24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009f28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	2190      	movs	r1, #144	; 0x90
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 fec5 	bl	800bcc0 <VL53L0X_RdDWord>
 8009f36:	4603      	mov	r3, r0
 8009f38:	461a      	mov	r2, r3
 8009f3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f46:	0f5b      	lsrs	r3, r3, #29
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f4e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009f50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f54:	4413      	add	r3, r2
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	0d9b      	lsrs	r3, r3, #22
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8009f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6a:	0bdb      	lsrs	r3, r3, #15
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	0a1b      	lsrs	r3, r3, #8
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f86:	085b      	lsrs	r3, r3, #1
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	019b      	lsls	r3, r3, #6
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8009fa4:	2279      	movs	r2, #121	; 0x79
 8009fa6:	2194      	movs	r1, #148	; 0x94
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f001 fda5 	bl	800baf8 <VL53L0X_WrByte>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7ff fd76 	bl	8009aae <VL53L0X_device_read_strobe>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009fd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	2190      	movs	r1, #144	; 0x90
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 fe71 	bl	800bcc0 <VL53L0X_RdDWord>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	0e9b      	lsrs	r3, r3, #26
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ff6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009ff8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ffc:	4413      	add	r3, r2
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800a002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a004:	0cdb      	lsrs	r3, r3, #19
 800a006:	b2db      	uxtb	r3, r3
 800a008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800a010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a012:	0b1b      	lsrs	r3, r3, #12
 800a014:	b2db      	uxtb	r3, r3
 800a016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	095b      	lsrs	r3, r3, #5
 800a022:	b2db      	uxtb	r3, r3
 800a024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	b2db      	uxtb	r3, r3
 800a034:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800a03e:	227a      	movs	r2, #122	; 0x7a
 800a040:	2194      	movs	r1, #148	; 0x94
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 fd58 	bl	800baf8 <VL53L0X_WrByte>
 800a048:	4603      	mov	r3, r0
 800a04a:	461a      	mov	r2, r3
 800a04c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a050:	4313      	orrs	r3, r2
 800a052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7ff fd29 	bl	8009aae <VL53L0X_device_read_strobe>
 800a05c:	4603      	mov	r3, r0
 800a05e:	461a      	mov	r2, r3
 800a060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a064:	4313      	orrs	r3, r2
 800a066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a06a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a06e:	461a      	mov	r2, r3
 800a070:	2190      	movs	r1, #144	; 0x90
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 fe24 	bl	800bcc0 <VL53L0X_RdDWord>
 800a078:	4603      	mov	r3, r0
 800a07a:	461a      	mov	r2, r3
 800a07c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a080:	4313      	orrs	r3, r2
 800a082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	0f9b      	lsrs	r3, r3, #30
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a090:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800a092:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a096:	4413      	add	r3, r2
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09e:	0ddb      	lsrs	r3, r3, #23
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	0c1b      	lsrs	r3, r3, #16
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	0a5b      	lsrs	r3, r3, #9
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ca:	089b      	lsrs	r3, r3, #2
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800a0de:	78fb      	ldrb	r3, [r7, #3]
 800a0e0:	f003 0304 	and.w	r3, r3, #4
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 80f1 	beq.w	800a2cc <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a0ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a0ee:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f040 80ea 	bne.w	800a2cc <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a0f8:	227b      	movs	r2, #123	; 0x7b
 800a0fa:	2194      	movs	r1, #148	; 0x94
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f001 fcfb 	bl	800baf8 <VL53L0X_WrByte>
 800a102:	4603      	mov	r3, r0
 800a104:	461a      	mov	r2, r3
 800a106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a10a:	4313      	orrs	r3, r2
 800a10c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff fccc 	bl	8009aae <VL53L0X_device_read_strobe>
 800a116:	4603      	mov	r3, r0
 800a118:	461a      	mov	r2, r3
 800a11a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a11e:	4313      	orrs	r3, r2
 800a120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800a124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a128:	461a      	mov	r2, r3
 800a12a:	2190      	movs	r1, #144	; 0x90
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f001 fdc7 	bl	800bcc0 <VL53L0X_RdDWord>
 800a132:	4603      	mov	r3, r0
 800a134:	461a      	mov	r2, r3
 800a136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a13a:	4313      	orrs	r3, r2
 800a13c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800a140:	227c      	movs	r2, #124	; 0x7c
 800a142:	2194      	movs	r1, #148	; 0x94
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f001 fcd7 	bl	800baf8 <VL53L0X_WrByte>
 800a14a:	4603      	mov	r3, r0
 800a14c:	461a      	mov	r2, r3
 800a14e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a152:	4313      	orrs	r3, r2
 800a154:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff fca8 	bl	8009aae <VL53L0X_device_read_strobe>
 800a15e:	4603      	mov	r3, r0
 800a160:	461a      	mov	r2, r3
 800a162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a166:	4313      	orrs	r3, r2
 800a168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800a16c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a170:	461a      	mov	r2, r3
 800a172:	2190      	movs	r1, #144	; 0x90
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 fda3 	bl	800bcc0 <VL53L0X_RdDWord>
 800a17a:	4603      	mov	r3, r0
 800a17c:	461a      	mov	r2, r3
 800a17e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a182:	4313      	orrs	r3, r2
 800a184:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800a188:	2273      	movs	r2, #115	; 0x73
 800a18a:	2194      	movs	r1, #148	; 0x94
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f001 fcb3 	bl	800baf8 <VL53L0X_WrByte>
 800a192:	4603      	mov	r3, r0
 800a194:	461a      	mov	r2, r3
 800a196:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a19a:	4313      	orrs	r3, r2
 800a19c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7ff fc84 	bl	8009aae <VL53L0X_device_read_strobe>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a1b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	2190      	movs	r1, #144	; 0x90
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f001 fd7f 	bl	800bcc0 <VL53L0X_RdDWord>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800a1d8:	2274      	movs	r2, #116	; 0x74
 800a1da:	2194      	movs	r1, #148	; 0x94
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 fc8b 	bl	800baf8 <VL53L0X_WrByte>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff fc5c 	bl	8009aae <VL53L0X_device_read_strobe>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1fe:	4313      	orrs	r3, r2
 800a200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a204:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a208:	461a      	mov	r2, r3
 800a20a:	2190      	movs	r1, #144	; 0x90
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f001 fd57 	bl	800bcc0 <VL53L0X_RdDWord>
 800a212:	4603      	mov	r3, r0
 800a214:	461a      	mov	r2, r3
 800a216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a21a:	4313      	orrs	r3, r2
 800a21c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800a220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a222:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800a224:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a226:	4313      	orrs	r3, r2
 800a228:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800a22a:	2275      	movs	r2, #117	; 0x75
 800a22c:	2194      	movs	r1, #148	; 0x94
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f001 fc62 	bl	800baf8 <VL53L0X_WrByte>
 800a234:	4603      	mov	r3, r0
 800a236:	461a      	mov	r2, r3
 800a238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a23c:	4313      	orrs	r3, r2
 800a23e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff fc33 	bl	8009aae <VL53L0X_device_read_strobe>
 800a248:	4603      	mov	r3, r0
 800a24a:	461a      	mov	r2, r3
 800a24c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a250:	4313      	orrs	r3, r2
 800a252:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a256:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a25a:	461a      	mov	r2, r3
 800a25c:	2190      	movs	r1, #144	; 0x90
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f001 fd2e 	bl	800bcc0 <VL53L0X_RdDWord>
 800a264:	4603      	mov	r3, r0
 800a266:	461a      	mov	r2, r3
 800a268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a26c:	4313      	orrs	r3, r2
 800a26e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800a272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a274:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800a276:	b29b      	uxth	r3, r3
 800a278:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a27a:	2276      	movs	r2, #118	; 0x76
 800a27c:	2194      	movs	r1, #148	; 0x94
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f001 fc3a 	bl	800baf8 <VL53L0X_WrByte>
 800a284:	4603      	mov	r3, r0
 800a286:	461a      	mov	r2, r3
 800a288:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a28c:	4313      	orrs	r3, r2
 800a28e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7ff fc0b 	bl	8009aae <VL53L0X_device_read_strobe>
 800a298:	4603      	mov	r3, r0
 800a29a:	461a      	mov	r2, r3
 800a29c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a2a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	2190      	movs	r1, #144	; 0x90
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f001 fd06 	bl	800bcc0 <VL53L0X_RdDWord>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a2c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2181      	movs	r1, #129	; 0x81
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f001 fc11 	bl	800baf8 <VL53L0X_WrByte>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	461a      	mov	r2, r3
 800a2da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a2e4:	2206      	movs	r2, #6
 800a2e6:	21ff      	movs	r1, #255	; 0xff
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 fc05 	bl	800baf8 <VL53L0X_WrByte>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a2fc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a300:	461a      	mov	r2, r3
 800a302:	2183      	movs	r1, #131	; 0x83
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f001 fc79 	bl	800bbfc <VL53L0X_RdByte>
 800a30a:	4603      	mov	r3, r0
 800a30c:	461a      	mov	r2, r3
 800a30e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a312:	4313      	orrs	r3, r2
 800a314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a31c:	f023 0304 	bic.w	r3, r3, #4
 800a320:	b2db      	uxtb	r3, r3
 800a322:	461a      	mov	r2, r3
 800a324:	2183      	movs	r1, #131	; 0x83
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f001 fbe6 	bl	800baf8 <VL53L0X_WrByte>
 800a32c:	4603      	mov	r3, r0
 800a32e:	461a      	mov	r2, r3
 800a330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a334:	4313      	orrs	r3, r2
 800a336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a33a:	2201      	movs	r2, #1
 800a33c:	21ff      	movs	r1, #255	; 0xff
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f001 fbda 	bl	800baf8 <VL53L0X_WrByte>
 800a344:	4603      	mov	r3, r0
 800a346:	461a      	mov	r2, r3
 800a348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a34c:	4313      	orrs	r3, r2
 800a34e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a352:	2201      	movs	r2, #1
 800a354:	2100      	movs	r1, #0
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f001 fbce 	bl	800baf8 <VL53L0X_WrByte>
 800a35c:	4603      	mov	r3, r0
 800a35e:	461a      	mov	r2, r3
 800a360:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a364:	4313      	orrs	r3, r2
 800a366:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a36a:	2200      	movs	r2, #0
 800a36c:	21ff      	movs	r1, #255	; 0xff
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f001 fbc2 	bl	800baf8 <VL53L0X_WrByte>
 800a374:	4603      	mov	r3, r0
 800a376:	461a      	mov	r2, r3
 800a378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a37c:	4313      	orrs	r3, r2
 800a37e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a382:	2200      	movs	r2, #0
 800a384:	2180      	movs	r1, #128	; 0x80
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f001 fbb6 	bl	800baf8 <VL53L0X_WrByte>
 800a38c:	4603      	mov	r3, r0
 800a38e:	461a      	mov	r2, r3
 800a390:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a394:	4313      	orrs	r3, r2
 800a396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a39a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f040 8090 	bne.w	800a4c4 <VL53L0X_get_info_from_device+0x990>
 800a3a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a3a8:	2b07      	cmp	r3, #7
 800a3aa:	f000 808b 	beq.w	800a4c4 <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a3ae:	78fb      	ldrb	r3, [r7, #3]
 800a3b0:	f003 0301 	and.w	r3, r3, #1
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d024      	beq.n	800a402 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a3b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a3bc:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d11e      	bne.n	800a402 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800a3ca:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800a3d4:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a3d8:	2300      	movs	r3, #0
 800a3da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3dc:	e00e      	b.n	800a3fc <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a3de:	f107 0208 	add.w	r2, r7, #8
 800a3e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3e4:	4413      	add	r3, r2
 800a3e6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 800a3f2:	460a      	mov	r2, r1
 800a3f4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a3f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3fe:	2b05      	cmp	r3, #5
 800a400:	dded      	ble.n	800a3de <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800a402:	78fb      	ldrb	r3, [r7, #3]
 800a404:	f003 0302 	and.w	r3, r3, #2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d019      	beq.n	800a440 <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a40c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a410:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a414:	2b00      	cmp	r3, #0
 800a416:	d113      	bne.n	800a440 <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a418:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a422:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f203 131f 	addw	r3, r3, #287	; 0x11f
 800a432:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a434:	f107 0310 	add.w	r3, r7, #16
 800a438:	4619      	mov	r1, r3
 800a43a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a43c:	f001 fd4a 	bl	800bed4 <strcpy>

		}

		if (((option & 4) == 4) &&
 800a440:	78fb      	ldrb	r3, [r7, #3]
 800a442:	f003 0304 	and.w	r3, r3, #4
 800a446:	2b00      	cmp	r3, #0
 800a448:	d030      	beq.n	800a4ac <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a44a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a44e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a452:	2b00      	cmp	r3, #0
 800a454:	d12a      	bne.n	800a4ac <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a45e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a468:	025b      	lsls	r3, r3, #9
 800a46a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a470:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800a47a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d011      	beq.n	800a4a4 <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 800a480:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a48a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a48e:	fb02 f303 	mul.w	r3, r2, r3
 800a492:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 800a494:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 800a498:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a49c:	425b      	negs	r3, r3
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800a4a4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a4ac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a4ba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a4c4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3760      	adds	r7, #96	; 0x60
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 800a4dc:	f240 6277 	movw	r2, #1655	; 0x677
 800a4e0:	f04f 0300 	mov.w	r3, #0
 800a4e4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800a4e8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800a4ec:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a4ee:	78fb      	ldrb	r3, [r7, #3]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	fb02 f303 	mul.w	r3, r2, r3
 800a4fc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
}
 800a500:	4618      	mov	r0, r3
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d017      	beq.n	800a556 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	3b01      	subs	r3, #1
 800a52a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a52c:	e005      	b.n	800a53a <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	085b      	lsrs	r3, r3, #1
 800a532:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a534:	89fb      	ldrh	r3, [r7, #14]
 800a536:	3301      	adds	r3, #1
 800a538:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1f4      	bne.n	800a52e <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a544:	89fb      	ldrh	r3, [r7, #14]
 800a546:	021b      	lsls	r3, r3, #8
 800a548:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a552:	4413      	add	r3, r2
 800a554:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a556:	8afb      	ldrh	r3, [r7, #22]

}
 800a558:	4618      	mov	r0, r3
 800a55a:	371c      	adds	r7, #28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a572:	88fb      	ldrh	r3, [r7, #6]
 800a574:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a576:	88fa      	ldrh	r2, [r7, #6]
 800a578:	0a12      	lsrs	r2, r2, #8
 800a57a:	b292      	uxth	r2, r2
 800a57c:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a57e:	3301      	adds	r3, #1
 800a580:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a582:	68fb      	ldr	r3, [r7, #12]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	4613      	mov	r3, r2
 800a59c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7ff ff92 	bl	800a4d0 <VL53L0X_calc_macro_period_ps>
 800a5ac:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a5b4:	4a0a      	ldr	r2, [pc, #40]	; (800a5e0 <VL53L0X_calc_timeout_mclks+0x50>)
 800a5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ba:	099b      	lsrs	r3, r3, #6
 800a5bc:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a5c4:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	085b      	lsrs	r3, r3, #1
 800a5cc:	441a      	add	r2, r3
	timeout_period_mclks =
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d4:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800a5d6:	69fb      	ldr	r3, [r7, #28]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3720      	adds	r7, #32
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	10624dd3 	.word	0x10624dd3

0800a5e4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	807b      	strh	r3, [r7, #2]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a5f8:	787b      	ldrb	r3, [r7, #1]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff ff67 	bl	800a4d0 <VL53L0X_calc_macro_period_ps>
 800a602:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a60a:	4a0a      	ldr	r2, [pc, #40]	; (800a634 <VL53L0X_calc_timeout_us+0x50>)
 800a60c:	fba2 2303 	umull	r2, r3, r2, r3
 800a610:	099b      	lsrs	r3, r3, #6
 800a612:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a614:	887b      	ldrh	r3, [r7, #2]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	fb02 f303 	mul.w	r3, r2, r3
 800a61c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800a620:	4a04      	ldr	r2, [pc, #16]	; (800a634 <VL53L0X_calc_timeout_us+0x50>)
 800a622:	fba2 2303 	umull	r2, r3, r2, r3
 800a626:	099b      	lsrs	r3, r3, #6
 800a628:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a62a:	697b      	ldr	r3, [r7, #20]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	10624dd3 	.word	0x10624dd3

0800a638 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08c      	sub	sp, #48	; 0x30
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	460b      	mov	r3, r1
 800a642:	607a      	str	r2, [r7, #4]
 800a644:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a646:	2300      	movs	r3, #0
 800a648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a656:	2300      	movs	r3, #0
 800a658:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a65e:	7afb      	ldrb	r3, [r7, #11]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d005      	beq.n	800a670 <get_sequence_step_timeout+0x38>
 800a664:	7afb      	ldrb	r3, [r7, #11]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d002      	beq.n	800a670 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a66a:	7afb      	ldrb	r3, [r7, #11]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d128      	bne.n	800a6c2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a670:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a674:	461a      	mov	r2, r3
 800a676:	2100      	movs	r1, #0
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f7fd fa03 	bl	8007a84 <VL53L0X_GetVcselPulsePeriod>
 800a67e:	4603      	mov	r3, r0
 800a680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a684:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d109      	bne.n	800a6a0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a68c:	f107 0320 	add.w	r3, r7, #32
 800a690:	461a      	mov	r2, r3
 800a692:	2146      	movs	r1, #70	; 0x46
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f001 fab1 	bl	800bbfc <VL53L0X_RdByte>
 800a69a:	4603      	mov	r3, r0
 800a69c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a6a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7ff ff5c 	bl	800a564 <VL53L0X_decode_timeout>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a6b0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a6b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f7ff ff93 	bl	800a5e4 <VL53L0X_calc_timeout_us>
 800a6be:	62b8      	str	r0, [r7, #40]	; 0x28
 800a6c0:	e092      	b.n	800a7e8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a6c2:	7afb      	ldrb	r3, [r7, #11]
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d135      	bne.n	800a734 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a6c8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f7fd f9d7 	bl	8007a84 <VL53L0X_GetVcselPulsePeriod>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a6dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f040 8081 	bne.w	800a7e8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a6e6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f7fd f9c8 	bl	8007a84 <VL53L0X_GetVcselPulsePeriod>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a6fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d109      	bne.n	800a716 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a702:	f107 031e 	add.w	r3, r7, #30
 800a706:	461a      	mov	r2, r3
 800a708:	2151      	movs	r1, #81	; 0x51
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f001 faa0 	bl	800bc50 <VL53L0X_RdWord>
 800a710:	4603      	mov	r3, r0
 800a712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a716:	8bfb      	ldrh	r3, [r7, #30]
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff ff23 	bl	800a564 <VL53L0X_decode_timeout>
 800a71e:	4603      	mov	r3, r0
 800a720:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a722:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a728:	4619      	mov	r1, r3
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f7ff ff5a 	bl	800a5e4 <VL53L0X_calc_timeout_us>
 800a730:	62b8      	str	r0, [r7, #40]	; 0x28
 800a732:	e059      	b.n	800a7e8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a734:	7afb      	ldrb	r3, [r7, #11]
 800a736:	2b04      	cmp	r3, #4
 800a738:	d156      	bne.n	800a7e8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a73a:	f107 0314 	add.w	r3, r7, #20
 800a73e:	4619      	mov	r1, r3
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f7fd faab 	bl	8007c9c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d01d      	beq.n	800a78c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a750:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a754:	461a      	mov	r2, r3
 800a756:	2100      	movs	r1, #0
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f7fd f993 	bl	8007a84 <VL53L0X_GetVcselPulsePeriod>
 800a75e:	4603      	mov	r3, r0
 800a760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a764:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10f      	bne.n	800a78c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a76c:	f107 031e 	add.w	r3, r7, #30
 800a770:	461a      	mov	r2, r3
 800a772:	2151      	movs	r1, #81	; 0x51
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f001 fa6b 	bl	800bc50 <VL53L0X_RdWord>
 800a77a:	4603      	mov	r3, r0
 800a77c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a780:	8bfb      	ldrh	r3, [r7, #30]
 800a782:	4618      	mov	r0, r3
 800a784:	f7ff feee 	bl	800a564 <VL53L0X_decode_timeout>
 800a788:	4603      	mov	r3, r0
 800a78a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a78c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a790:	2b00      	cmp	r3, #0
 800a792:	d109      	bne.n	800a7a8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a794:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a798:	461a      	mov	r2, r3
 800a79a:	2101      	movs	r1, #1
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7fd f971 	bl	8007a84 <VL53L0X_GetVcselPulsePeriod>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a7a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10f      	bne.n	800a7d0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a7b0:	f107 031c 	add.w	r3, r7, #28
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	2171      	movs	r1, #113	; 0x71
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f001 fa49 	bl	800bc50 <VL53L0X_RdWord>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a7c4:	8bbb      	ldrh	r3, [r7, #28]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7ff fecc 	bl	800a564 <VL53L0X_decode_timeout>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a7d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a7d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a7d8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a7dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7de:	4619      	mov	r1, r3
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f7ff feff 	bl	800a5e4 <VL53L0X_calc_timeout_us>
 800a7e6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ec:	601a      	str	r2, [r3, #0]

	return Status;
 800a7ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3730      	adds	r7, #48	; 0x30
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b08a      	sub	sp, #40	; 0x28
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	60f8      	str	r0, [r7, #12]
 800a802:	460b      	mov	r3, r1
 800a804:	607a      	str	r2, [r7, #4]
 800a806:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a808:	2300      	movs	r3, #0
 800a80a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a80e:	7afb      	ldrb	r3, [r7, #11]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d005      	beq.n	800a820 <set_sequence_step_timeout+0x26>
 800a814:	7afb      	ldrb	r3, [r7, #11]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d002      	beq.n	800a820 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a81a:	7afb      	ldrb	r3, [r7, #11]
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d138      	bne.n	800a892 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a820:	f107 031b 	add.w	r3, r7, #27
 800a824:	461a      	mov	r2, r3
 800a826:	2100      	movs	r1, #0
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f7fd f92b 	bl	8007a84 <VL53L0X_GetVcselPulsePeriod>
 800a82e:	4603      	mov	r3, r0
 800a830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d11a      	bne.n	800a872 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a83c:	7efb      	ldrb	r3, [r7, #27]
 800a83e:	461a      	mov	r2, r3
 800a840:	6879      	ldr	r1, [r7, #4]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7ff fea4 	bl	800a590 <VL53L0X_calc_timeout_mclks>
 800a848:	4603      	mov	r3, r0
 800a84a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a84c:	8bbb      	ldrh	r3, [r7, #28]
 800a84e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a852:	d903      	bls.n	800a85c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a854:	23ff      	movs	r3, #255	; 0xff
 800a856:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a85a:	e004      	b.n	800a866 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a85c:	8bbb      	ldrh	r3, [r7, #28]
 800a85e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a860:	3b01      	subs	r3, #1
 800a862:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a866:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a872:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a876:	2b00      	cmp	r3, #0
 800a878:	f040 80ab 	bne.w	800a9d2 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a87c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a880:	461a      	mov	r2, r3
 800a882:	2146      	movs	r1, #70	; 0x46
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f001 f937 	bl	800baf8 <VL53L0X_WrByte>
 800a88a:	4603      	mov	r3, r0
 800a88c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a890:	e09f      	b.n	800a9d2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a892:	7afb      	ldrb	r3, [r7, #11]
 800a894:	2b03      	cmp	r3, #3
 800a896:	d135      	bne.n	800a904 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a898:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d11b      	bne.n	800a8d8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a8a0:	f107 031b 	add.w	r3, r7, #27
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f7fd f8eb 	bl	8007a84 <VL53L0X_GetVcselPulsePeriod>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a8b4:	7efb      	ldrb	r3, [r7, #27]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	6879      	ldr	r1, [r7, #4]
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f7ff fe68 	bl	800a590 <VL53L0X_calc_timeout_mclks>
 800a8c0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a8c2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a8c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff fe20 	bl	800a50c <VL53L0X_encode_timeout>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a8d0:	8b3a      	ldrh	r2, [r7, #24]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a8d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d108      	bne.n	800a8f2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a8e0:	8b3b      	ldrh	r3, [r7, #24]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	2151      	movs	r1, #81	; 0x51
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f001 f92a 	bl	800bb40 <VL53L0X_WrWord>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a8f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d16b      	bne.n	800a9d2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800a902:	e066      	b.n	800a9d2 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a904:	7afb      	ldrb	r3, [r7, #11]
 800a906:	2b04      	cmp	r3, #4
 800a908:	d160      	bne.n	800a9cc <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a90a:	f107 0310 	add.w	r3, r7, #16
 800a90e:	4619      	mov	r1, r3
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f7fd f9c3 	bl	8007c9c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a91a:	7cfb      	ldrb	r3, [r7, #19]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d01d      	beq.n	800a95c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a920:	f107 031b 	add.w	r3, r7, #27
 800a924:	461a      	mov	r2, r3
 800a926:	2100      	movs	r1, #0
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f7fd f8ab 	bl	8007a84 <VL53L0X_GetVcselPulsePeriod>
 800a92e:	4603      	mov	r3, r0
 800a930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 800a934:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10f      	bne.n	800a95c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a93c:	f107 0318 	add.w	r3, r7, #24
 800a940:	461a      	mov	r2, r3
 800a942:	2151      	movs	r1, #81	; 0x51
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f001 f983 	bl	800bc50 <VL53L0X_RdWord>
 800a94a:	4603      	mov	r3, r0
 800a94c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a950:	8b3b      	ldrh	r3, [r7, #24]
 800a952:	4618      	mov	r0, r3
 800a954:	f7ff fe06 	bl	800a564 <VL53L0X_decode_timeout>
 800a958:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a95a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a95c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a960:	2b00      	cmp	r3, #0
 800a962:	d109      	bne.n	800a978 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a964:	f107 031b 	add.w	r3, r7, #27
 800a968:	461a      	mov	r2, r3
 800a96a:	2101      	movs	r1, #1
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f7fd f889 	bl	8007a84 <VL53L0X_GetVcselPulsePeriod>
 800a972:	4603      	mov	r3, r0
 800a974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a978:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d128      	bne.n	800a9d2 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a980:	7efb      	ldrb	r3, [r7, #27]
 800a982:	461a      	mov	r2, r3
 800a984:	6879      	ldr	r1, [r7, #4]
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff fe02 	bl	800a590 <VL53L0X_calc_timeout_mclks>
 800a98c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a98e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a990:	6a3a      	ldr	r2, [r7, #32]
 800a992:	4413      	add	r3, r2
 800a994:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a996:	6a38      	ldr	r0, [r7, #32]
 800a998:	f7ff fdb8 	bl	800a50c <VL53L0X_encode_timeout>
 800a99c:	4603      	mov	r3, r0
 800a99e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800a9a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d108      	bne.n	800a9ba <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a9a8:	8bfb      	ldrh	r3, [r7, #30]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	2171      	movs	r1, #113	; 0x71
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f001 f8c6 	bl	800bb40 <VL53L0X_WrWord>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a9ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d107      	bne.n	800a9d2 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800a9ca:	e002      	b.n	800a9d2 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9cc:	23fc      	movs	r3, #252	; 0xfc
 800a9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a9d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3728      	adds	r7, #40	; 0x28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b086      	sub	sp, #24
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	60f8      	str	r0, [r7, #12]
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	607a      	str	r2, [r7, #4]
 800a9ea:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a9f0:	7afb      	ldrb	r3, [r7, #11]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d002      	beq.n	800a9fc <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d00a      	beq.n	800aa10 <VL53L0X_get_vcsel_pulse_period+0x32>
 800a9fa:	e013      	b.n	800aa24 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a9fc:	f107 0316 	add.w	r3, r7, #22
 800aa00:	461a      	mov	r2, r3
 800aa02:	2150      	movs	r1, #80	; 0x50
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f001 f8f9 	bl	800bbfc <VL53L0X_RdByte>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800aa0e:	e00b      	b.n	800aa28 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800aa10:	f107 0316 	add.w	r3, r7, #22
 800aa14:	461a      	mov	r2, r3
 800aa16:	2170      	movs	r1, #112	; 0x70
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f001 f8ef 	bl	800bbfc <VL53L0X_RdByte>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800aa22:	e001      	b.n	800aa28 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa24:	23fc      	movs	r3, #252	; 0xfc
 800aa26:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800aa28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d107      	bne.n	800aa40 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800aa30:	7dbb      	ldrb	r3, [r7, #22]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fe fff4 	bl	8009a20 <VL53L0X_decode_vcsel_period>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	701a      	strb	r2, [r3, #0]

	return Status;
 800aa40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b090      	sub	sp, #64	; 0x40
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa56:	2300      	movs	r3, #0
 800aa58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800aa5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800aa60:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800aa62:	f240 7376 	movw	r3, #1910	; 0x776
 800aa66:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 800aa68:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800aa6c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800aa6e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800aa72:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 800aa74:	f240 234e 	movw	r3, #590	; 0x24e
 800aa78:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 800aa7a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800aa7e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800aa80:	f44f 7325 	mov.w	r3, #660	; 0x294
 800aa84:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800aa86:	f240 2326 	movw	r3, #550	; 0x226
 800aa8a:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800aa94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800aaa0:	f107 0310 	add.w	r3, r7, #16
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7fd f8f8 	bl	8007c9c <VL53L0X_GetSequenceStepEnables>
 800aaac:	4603      	mov	r3, r0
 800aaae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 800aab2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d15b      	bne.n	800ab72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 800aaba:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d105      	bne.n	800aacc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800aac0:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d102      	bne.n	800aacc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 800aac6:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d052      	beq.n	800ab72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800aacc:	f107 030c 	add.w	r3, r7, #12
 800aad0:	461a      	mov	r2, r3
 800aad2:	2102      	movs	r1, #2
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7ff fdaf 	bl	800a638 <get_sequence_step_timeout>
 800aada:	4603      	mov	r3, r0
 800aadc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 800aae0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 800aae8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aaec:	e07d      	b.n	800abea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800aaee:	7c3b      	ldrb	r3, [r7, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00f      	beq.n	800ab14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800aaf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaf8:	4413      	add	r3, r2
 800aafa:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 800aafc:	69ba      	ldr	r2, [r7, #24]
 800aafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d204      	bcs.n	800ab0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ab04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab0c:	e002      	b.n	800ab14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab0e:	23fc      	movs	r3, #252	; 0xfc
 800ab10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ab14:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 800ab1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab20:	e063      	b.n	800abea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ab22:	7cbb      	ldrb	r3, [r7, #18]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d011      	beq.n	800ab4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2c:	4413      	add	r3, r2
 800ab2e:	005b      	lsls	r3, r3, #1
 800ab30:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d204      	bcs.n	800ab44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ab3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab42:	e016      	b.n	800ab72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab44:	23fc      	movs	r3, #252	; 0xfc
 800ab46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ab4a:	e012      	b.n	800ab72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ab4c:	7c7b      	ldrb	r3, [r7, #17]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00f      	beq.n	800ab72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab56:	4413      	add	r3, r2
 800ab58:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ab5a:	69ba      	ldr	r2, [r7, #24]
 800ab5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d204      	bcs.n	800ab6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ab62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab6a:	e002      	b.n	800ab72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab6c:	23fc      	movs	r3, #252	; 0xfc
 800ab6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ab72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d002      	beq.n	800ab80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 800ab7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab7e:	e034      	b.n	800abea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ab80:	7cfb      	ldrb	r3, [r7, #19]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d019      	beq.n	800abba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ab86:	f107 0308 	add.w	r3, r7, #8
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	2103      	movs	r1, #3
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7ff fd52 	bl	800a638 <get_sequence_step_timeout>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	6a3a      	ldr	r2, [r7, #32]
 800ab9e:	4413      	add	r3, r2
 800aba0:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aba2:	69ba      	ldr	r2, [r7, #24]
 800aba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d204      	bcs.n	800abb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800abaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	63bb      	str	r3, [r7, #56]	; 0x38
 800abb2:	e002      	b.n	800abba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800abb4:	23fc      	movs	r3, #252	; 0xfc
 800abb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800abba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d111      	bne.n	800abe6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 800abc2:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00e      	beq.n	800abe6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 800abc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800abd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abd2:	2104      	movs	r1, #4
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff fe10 	bl	800a7fa <set_sequence_step_timeout>
 800abda:	4603      	mov	r3, r0
 800abdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800abe6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800abea:	4618      	mov	r0, r3
 800abec:	3740      	adds	r7, #64	; 0x40
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b090      	sub	sp, #64	; 0x40
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abfc:	2300      	movs	r3, #0
 800abfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ac02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ac06:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ac08:	f240 7376 	movw	r3, #1910	; 0x776
 800ac0c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800ac0e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ac12:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ac14:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ac18:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ac1a:	f240 234e 	movw	r3, #590	; 0x24e
 800ac1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ac20:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ac24:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ac26:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ac2a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ac2c:	f240 2326 	movw	r3, #550	; 0x226
 800ac30:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ac32:	2300      	movs	r3, #0
 800ac34:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ac36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3a:	441a      	add	r2, r3
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ac40:	f107 0318 	add.w	r3, r7, #24
 800ac44:	4619      	mov	r1, r3
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7fd f828 	bl	8007c9c <VL53L0X_GetSequenceStepEnables>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800ac52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ac5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac5e:	e075      	b.n	800ad4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ac60:	7e3b      	ldrb	r3, [r7, #24]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d105      	bne.n	800ac72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ac66:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d102      	bne.n	800ac72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ac6c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d030      	beq.n	800acd4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800ac72:	f107 0310 	add.w	r3, r7, #16
 800ac76:	461a      	mov	r2, r3
 800ac78:	2102      	movs	r1, #2
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7ff fcdc 	bl	800a638 <get_sequence_step_timeout>
 800ac80:	4603      	mov	r3, r0
 800ac82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800ac86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d122      	bne.n	800acd4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800ac8e:	7e3b      	ldrb	r3, [r7, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d007      	beq.n	800aca4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ac98:	6939      	ldr	r1, [r7, #16]
 800ac9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac9e:	441a      	add	r2, r3
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800aca4:	7ebb      	ldrb	r3, [r7, #26]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d009      	beq.n	800acbe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800acae:	6939      	ldr	r1, [r7, #16]
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	440b      	add	r3, r1
 800acb4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800acb6:	441a      	add	r2, r3
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	e00a      	b.n	800acd4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800acbe:	7e7b      	ldrb	r3, [r7, #25]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d007      	beq.n	800acd4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800acc8:	6939      	ldr	r1, [r7, #16]
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800acce:	441a      	add	r2, r3
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800acd4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d114      	bne.n	800ad06 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800acdc:	7efb      	ldrb	r3, [r7, #27]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d011      	beq.n	800ad06 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800ace2:	f107 030c 	add.w	r3, r7, #12
 800ace6:	461a      	mov	r2, r3
 800ace8:	2103      	movs	r1, #3
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff fca4 	bl	800a638 <get_sequence_step_timeout>
 800acf0:	4603      	mov	r3, r0
 800acf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800acfa:	68f9      	ldr	r1, [r7, #12]
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ad00:	441a      	add	r2, r3
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d114      	bne.n	800ad38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800ad0e:	7f3b      	ldrb	r3, [r7, #28]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d011      	beq.n	800ad38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ad14:	f107 0314 	add.w	r3, r7, #20
 800ad18:	461a      	mov	r2, r3
 800ad1a:	2104      	movs	r1, #4
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7ff fc8b 	bl	800a638 <get_sequence_step_timeout>
 800ad22:	4603      	mov	r3, r0
 800ad24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800ad2c:	6979      	ldr	r1, [r7, #20]
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ad32:	441a      	add	r2, r3
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d103      	bne.n	800ad48 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3740      	adds	r7, #64	; 0x40
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ad66:	e0c6      	b.n	800aef6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	74fb      	strb	r3, [r7, #19]
		Index++;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	3301      	adds	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800ad78:	7cfb      	ldrb	r3, [r7, #19]
 800ad7a:	2bff      	cmp	r3, #255	; 0xff
 800ad7c:	f040 808d 	bne.w	800ae9a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	4413      	add	r3, r2
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	747b      	strb	r3, [r7, #17]
			Index++;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800ad90:	7c7b      	ldrb	r3, [r7, #17]
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d87e      	bhi.n	800ae94 <VL53L0X_load_tuning_settings+0x140>
 800ad96:	a201      	add	r2, pc, #4	; (adr r2, 800ad9c <VL53L0X_load_tuning_settings+0x48>)
 800ad98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9c:	0800adad 	.word	0x0800adad
 800ada0:	0800ade7 	.word	0x0800ade7
 800ada4:	0800ae21 	.word	0x0800ae21
 800ada8:	0800ae5b 	.word	0x0800ae5b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	683a      	ldr	r2, [r7, #0]
 800adb0:	4413      	add	r3, r2
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	743b      	strb	r3, [r7, #16]
				Index++;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	3301      	adds	r3, #1
 800adba:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	4413      	add	r3, r2
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	3301      	adds	r3, #1
 800adca:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800adcc:	7c3b      	ldrb	r3, [r7, #16]
 800adce:	b29b      	uxth	r3, r3
 800add0:	021b      	lsls	r3, r3, #8
 800add2:	b29a      	uxth	r2, r3
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	b29b      	uxth	r3, r3
 800add8:	4413      	add	r3, r2
 800adda:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	89ba      	ldrh	r2, [r7, #12]
 800ade0:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 800ade4:	e087      	b.n	800aef6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	4413      	add	r3, r2
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	743b      	strb	r3, [r7, #16]
				Index++;
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	3301      	adds	r3, #1
 800adf4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	4413      	add	r3, r2
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	3301      	adds	r3, #1
 800ae04:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ae06:	7c3b      	ldrb	r3, [r7, #16]
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	021b      	lsls	r3, r3, #8
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	7bfb      	ldrb	r3, [r7, #15]
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	4413      	add	r3, r2
 800ae14:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	89ba      	ldrh	r2, [r7, #12]
 800ae1a:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 800ae1e:	e06a      	b.n	800aef6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	4413      	add	r3, r2
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	743b      	strb	r3, [r7, #16]
				Index++;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	4413      	add	r3, r2
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ae40:	7c3b      	ldrb	r3, [r7, #16]
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	021b      	lsls	r3, r3, #8
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	4413      	add	r3, r2
 800ae4e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	89ba      	ldrh	r2, [r7, #12]
 800ae54:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 800ae58:	e04d      	b.n	800aef6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	4413      	add	r3, r2
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	743b      	strb	r3, [r7, #16]
				Index++;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	3301      	adds	r3, #1
 800ae68:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	4413      	add	r3, r2
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	3301      	adds	r3, #1
 800ae78:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ae7a:	7c3b      	ldrb	r3, [r7, #16]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	021b      	lsls	r3, r3, #8
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	4413      	add	r3, r2
 800ae88:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	89ba      	ldrh	r2, [r7, #12]
 800ae8e:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 800ae92:	e030      	b.n	800aef6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae94:	23fc      	movs	r3, #252	; 0xfc
 800ae96:	77fb      	strb	r3, [r7, #31]
 800ae98:	e02d      	b.n	800aef6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800ae9a:	7cfb      	ldrb	r3, [r7, #19]
 800ae9c:	2b04      	cmp	r3, #4
 800ae9e:	d828      	bhi.n	800aef2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	4413      	add	r3, r2
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	3301      	adds	r3, #1
 800aeae:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61bb      	str	r3, [r7, #24]
 800aeb4:	e00f      	b.n	800aed6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	4413      	add	r3, r2
 800aebc:	7819      	ldrb	r1, [r3, #0]
 800aebe:	f107 0208 	add.w	r2, r7, #8
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	4413      	add	r3, r2
 800aec6:	460a      	mov	r2, r1
 800aec8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	3301      	adds	r3, #1
 800aece:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	3301      	adds	r3, #1
 800aed4:	61bb      	str	r3, [r7, #24]
 800aed6:	7cfb      	ldrb	r3, [r7, #19]
 800aed8:	69ba      	ldr	r2, [r7, #24]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	dbeb      	blt.n	800aeb6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800aede:	7cfb      	ldrb	r3, [r7, #19]
 800aee0:	f107 0208 	add.w	r2, r7, #8
 800aee4:	7cb9      	ldrb	r1, [r7, #18]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fdaa 	bl	800ba40 <VL53L0X_WriteMulti>
 800aeec:	4603      	mov	r3, r0
 800aeee:	77fb      	strb	r3, [r7, #31]
 800aef0:	e001      	b.n	800aef6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aef2:	23fc      	movs	r3, #252	; 0xfc
 800aef4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	4413      	add	r3, r2
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d004      	beq.n	800af0c <VL53L0X_load_tuning_settings+0x1b8>
 800af02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af06:	2b00      	cmp	r3, #0
 800af08:	f43f af2e 	beq.w	800ad68 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3720      	adds	r7, #32
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b088      	sub	sp, #32
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af24:	2300      	movs	r3, #0
 800af26:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800af2e:	f107 0313 	add.w	r3, r7, #19
 800af32:	4619      	mov	r1, r3
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f7fc ff3d 	bl	8007db4 <VL53L0X_GetXTalkCompensationEnable>
 800af3a:	4603      	mov	r3, r0
 800af3c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800af3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d111      	bne.n	800af6a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800af46:	7cfb      	ldrb	r3, [r7, #19]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00e      	beq.n	800af6a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	8a9b      	ldrh	r3, [r3, #20]
 800af56:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	fb02 f303 	mul.w	r3, r2, r3
 800af5e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	3380      	adds	r3, #128	; 0x80
 800af64:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800af6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3720      	adds	r7, #32
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b086      	sub	sp, #24
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	60f8      	str	r0, [r7, #12]
 800af7e:	60b9      	str	r1, [r7, #8]
 800af80:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af82:	2300      	movs	r3, #0
 800af84:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800af8e:	f107 0310 	add.w	r3, r7, #16
 800af92:	461a      	mov	r2, r3
 800af94:	68b9      	ldr	r1, [r7, #8]
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f7ff ffbe 	bl	800af18 <VL53L0X_get_total_xtalk_rate>
 800af9c:	4603      	mov	r3, r0
 800af9e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800afa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d105      	bne.n	800afb4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	441a      	add	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	601a      	str	r2, [r3, #0]

	return Status;
 800afb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 800afc0:	b084      	sub	sp, #16
 800afc2:	b480      	push	{r7}
 800afc4:	b085      	sub	sp, #20
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	f107 0c18 	add.w	ip, r7, #24
 800afcc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afd0:	2300      	movs	r3, #0
 800afd2:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 800afd8:	2300      	movs	r3, #0
 800afda:	60bb      	str	r3, [r7, #8]
	int index = 0;
 800afdc:	2300      	movs	r3, #0
 800afde:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 800afe0:	2300      	movs	r3, #0
 800afe2:	607b      	str	r3, [r7, #4]
 800afe4:	e00d      	b.n	800b002 <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f107 0218 	add.w	r2, r7, #24
 800afec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d802      	bhi.n	800affc <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	60bb      	str	r3, [r7, #8]
			break;
 800affa:	e006      	b.n	800b00a <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3301      	adds	r3, #1
 800b000:	607b      	str	r3, [r7, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b006:	429a      	cmp	r2, r3
 800b008:	d8ed      	bhi.n	800afe6 <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 800b00a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d105      	bne.n	800b01e <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 800b012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b014:	3b01      	subs	r3, #1
 800b016:	60bb      	str	r3, [r7, #8]
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	60fb      	str	r3, [r7, #12]
 800b01c:	e008      	b.n	800b030 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d102      	bne.n	800b02a <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 800b024:	2300      	movs	r3, #0
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	e002      	b.n	800b030 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b034:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b03a:	601a      	str	r2, [r3, #0]

	return Status;
 800b03c:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	b004      	add	sp, #16
 800b04c:	4770      	bx	lr

0800b04e <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 800b04e:	b5b0      	push	{r4, r5, r7, lr}
 800b050:	b0ba      	sub	sp, #232	; 0xe8
 800b052:	af0e      	add	r7, sp, #56	; 0x38
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b05a:	2300      	movs	r3, #0
 800b05c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b068:	f107 031c 	add.w	r3, r7, #28
 800b06c:	4619      	mov	r1, r3
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f7fc fbce 	bl	8007810 <VL53L0X_GetDeviceParameters>
 800b074:	4603      	mov	r3, r0
 800b076:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 800b07a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d803      	bhi.n	800b08a <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 800b082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b088:	e07c      	b.n	800b184 <VL53L0X_calc_dmax+0x136>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 800b08a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d304      	bcc.n	800b09c <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 800b092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b09a:	e073      	b.n	800b184 <VL53L0X_calc_dmax+0x136>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 800b09c:	f107 0314 	add.w	r3, r7, #20
 800b0a0:	930d      	str	r3, [sp, #52]	; 0x34
 800b0a2:	f107 0318 	add.w	r3, r7, #24
 800b0a6:	930c      	str	r3, [sp, #48]	; 0x30
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0ac:	2307      	movs	r3, #7
 800b0ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b0b0:	466d      	mov	r5, sp
 800b0b2:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800b0b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b0ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b0be:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b0c2:	e885 0003 	stmia.w	r5, {r0, r1}
 800b0c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b0ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b0cc:	f7ff ff78 	bl	800afc0 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d109      	bne.n	800b0ec <VL53L0X_calc_dmax+0x9e>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	3314      	adds	r3, #20
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	33b0      	adds	r3, #176	; 0xb0
 800b0e0:	443b      	add	r3, r7
 800b0e2:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800b0e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0ea:	e04b      	b.n	800b184 <VL53L0X_calc_dmax+0x136>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	330e      	adds	r3, #14
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	33b0      	adds	r3, #176	; 0xb0
 800b0f4:	443b      	add	r3, r7
 800b0f6:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800b0fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	330e      	adds	r3, #14
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	33b0      	adds	r3, #176	; 0xb0
 800b106:	443b      	add	r3, r7
 800b108:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800b10c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	3314      	adds	r3, #20
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	33b0      	adds	r3, #176	; 0xb0
 800b118:	443b      	add	r3, r7
 800b11a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800b11e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	3314      	adds	r3, #20
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	33b0      	adds	r3, #176	; 0xb0
 800b12a:	443b      	add	r3, r7
 800b12c:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800b130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 800b134:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b138:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d01d      	beq.n	800b17c <VL53L0X_calc_dmax+0x12e>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 800b140:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b148:	1ad2      	subs	r2, r2, r3
 800b14a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800b14e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b152:	1acb      	subs	r3, r1, r3
 800b154:	0a1b      	lsrs	r3, r3, #8
 800b156:	fbb2 f3f3 	udiv	r3, r2, r3
 800b15a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 800b15e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 800b166:	0a1b      	lsrs	r3, r3, #8
 800b168:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b16c:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 800b170:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b174:	4413      	add	r3, r2
 800b176:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b17a:	e003      	b.n	800b184 <VL53L0X_calc_dmax+0x136>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 800b17c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 800b184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b188:	0c1a      	lsrs	r2, r3, #16
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b18e:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 800b192:	4618      	mov	r0, r3
 800b194:	37b0      	adds	r7, #176	; 0xb0
 800b196:	46bd      	mov	sp, r7
 800b198:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b19c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b0b0      	sub	sp, #192	; 0xc0
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b1a8:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b1ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b1b0:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b1b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 800b1b8:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b1bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b1c0:	f241 235c 	movw	r3, #4700	; 0x125c
 800b1c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b1c8:	4b98      	ldr	r3, [pc, #608]	; (800b42c <VL53L0X_calc_sigma_estimate+0x290>)
 800b1ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b1ce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b1d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b1d6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b1da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b1e6:	4b92      	ldr	r3, [pc, #584]	; (800b430 <VL53L0X_calc_sigma_estimate+0x294>)
 800b1e8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b1ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1ee:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b1f0:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b1f4:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 800b1f6:	f240 6377 	movw	r3, #1655	; 0x677
 800b1fa:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b210:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b214:	0c1b      	lsrs	r3, r3, #16
 800b216:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 800b218:	f107 0314 	add.w	r3, r7, #20
 800b21c:	461a      	mov	r2, r3
 800b21e:	68b9      	ldr	r1, [r7, #8]
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f7ff fea8 	bl	800af76 <VL53L0X_get_total_signal_rate>
 800b226:	4603      	mov	r3, r0
 800b228:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b22c:	f107 0318 	add.w	r3, r7, #24
 800b230:	461a      	mov	r2, r3
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f7ff fe6f 	bl	800af18 <VL53L0X_get_total_xtalk_rate>
 800b23a:	4603      	mov	r3, r0
 800b23c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b246:	fb02 f303 	mul.w	r3, r2, r3
 800b24a:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b24c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b24e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b252:	0c1b      	lsrs	r3, r3, #16
 800b254:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b25c:	fb02 f303 	mul.w	r3, r2, r3
 800b260:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b264:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d902      	bls.n	800b274 <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b26e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b270:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b274:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d160      	bne.n	800b33e <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b282:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800b28c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b290:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b294:	461a      	mov	r2, r3
 800b296:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f7ff f978 	bl	800a590 <VL53L0X_calc_timeout_mclks>
 800b2a0:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b2a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b2b2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b2b6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7ff f965 	bl	800a590 <VL53L0X_calc_timeout_mclks>
 800b2c6:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800b2ce:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b2d2:	2b08      	cmp	r3, #8
 800b2d4:	d102      	bne.n	800b2dc <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b2dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2e0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b2e2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b2e6:	fb02 f303 	mul.w	r3, r2, r3
 800b2ea:	02db      	lsls	r3, r3, #11
 800b2ec:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b2ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b2f4:	4a4f      	ldr	r2, [pc, #316]	; (800b434 <VL53L0X_calc_sigma_estimate+0x298>)
 800b2f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b2fa:	099b      	lsrs	r3, r3, #6
 800b2fc:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 800b2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b300:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b302:	fb02 f303 	mul.w	r3, r2, r3
 800b306:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b30a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b30e:	4a49      	ldr	r2, [pc, #292]	; (800b434 <VL53L0X_calc_sigma_estimate+0x298>)
 800b310:	fba2 2303 	umull	r2, r3, r2, r3
 800b314:	099b      	lsrs	r3, r3, #6
 800b316:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	3380      	adds	r3, #128	; 0x80
 800b31c:	0a1b      	lsrs	r3, r3, #8
 800b31e:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b324:	fb02 f303 	mul.w	r3, r2, r3
 800b328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b32c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b330:	3380      	adds	r3, #128	; 0x80
 800b332:	0a1b      	lsrs	r3, r3, #8
 800b334:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	021b      	lsls	r3, r3, #8
 800b33c:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b33e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 800b346:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b34a:	e14a      	b.n	800b5e2 <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 800b34c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d109      	bne.n	800b366 <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b358:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b360:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b364:	e13b      	b.n	800b5de <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b366:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d102      	bne.n	800b374 <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 800b36e:	2301      	movs	r3, #1
 800b370:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b378:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b37a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b37c:	041a      	lsls	r2, r3, #16
 800b37e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b380:	fbb2 f3f3 	udiv	r3, r2, r3
 800b384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b388:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b38c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b390:	429a      	cmp	r2, r3
 800b392:	d903      	bls.n	800b39c <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b394:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b39c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b3a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b3a4:	fb02 f303 	mul.w	r3, r2, r3
 800b3a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b3ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	005b      	lsls	r3, r3, #1
 800b3b4:	4413      	add	r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fe fb44 	bl	8009a46 <VL53L0X_isqrt>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	891b      	ldrh	r3, [r3, #8]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b3cc:	fb02 f303 	mul.w	r3, r2, r3
 800b3d0:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b3d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3d4:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b3d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3da:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b3dc:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b3de:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b3e2:	4a14      	ldr	r2, [pc, #80]	; (800b434 <VL53L0X_calc_sigma_estimate+0x298>)
 800b3e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e8:	099b      	lsrs	r3, r3, #6
 800b3ea:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b3ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ee:	041b      	lsls	r3, r3, #16
 800b3f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b3f4:	4a0f      	ldr	r2, [pc, #60]	; (800b434 <VL53L0X_calc_sigma_estimate+0x298>)
 800b3f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3fa:	099b      	lsrs	r3, r3, #6
 800b3fc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 800b3fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b400:	021b      	lsls	r3, r3, #8
 800b402:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b408:	fbb2 f3f3 	udiv	r3, r2, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	bfb8      	it	lt
 800b410:	425b      	neglt	r3, r3
 800b412:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b416:	021b      	lsls	r3, r3, #8
 800b418:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	7e1b      	ldrb	r3, [r3, #24]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00a      	beq.n	800b438 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 800b422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b42a:	e032      	b.n	800b492 <VL53L0X_calc_sigma_estimate+0x2f6>
 800b42c:	028f87ae 	.word	0x028f87ae
 800b430:	0006999a 	.word	0x0006999a
 800b434:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 800b438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b43a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b43e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b448:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b44c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b450:	fb02 f303 	mul.w	r3, r2, r3
 800b454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b458:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b45c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b45e:	4413      	add	r3, r2
 800b460:	0c1b      	lsrs	r3, r3, #16
 800b462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b46a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b46e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 800b472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b476:	085b      	lsrs	r3, r3, #1
 800b478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b47c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b480:	fb03 f303 	mul.w	r3, r3, r3
 800b484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b48c:	0b9b      	lsrs	r3, r3, #14
 800b48e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b498:	fb02 f303 	mul.w	r3, r2, r3
 800b49c:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b4a4:	0c1b      	lsrs	r3, r3, #16
 800b4a6:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4aa:	fb03 f303 	mul.w	r3, r3, r3
 800b4ae:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 800b4b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b4b4:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b4bc:	0c1b      	lsrs	r3, r3, #16
 800b4be:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	fb03 f303 	mul.w	r3, r3, r3
 800b4c6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b4c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	4413      	add	r3, r2
 800b4ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b4d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4d2:	f7fe fab8 	bl	8009a46 <VL53L0X_isqrt>
 800b4d6:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4da:	041b      	lsls	r3, r3, #16
 800b4dc:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e0:	3332      	adds	r3, #50	; 0x32
 800b4e2:	4a42      	ldr	r2, [pc, #264]	; (800b5ec <VL53L0X_calc_sigma_estimate+0x450>)
 800b4e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e8:	095a      	lsrs	r2, r3, #5
 800b4ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b4f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4f8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b4fc:	fb02 f303 	mul.w	r3, r2, r3
 800b500:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b508:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b50c:	3308      	adds	r3, #8
 800b50e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b516:	4a36      	ldr	r2, [pc, #216]	; (800b5f0 <VL53L0X_calc_sigma_estimate+0x454>)
 800b518:	fba2 2303 	umull	r2, r3, r2, r3
 800b51c:	0b5b      	lsrs	r3, r3, #13
 800b51e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d903      	bls.n	800b536 <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b52e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b532:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 800b536:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b53a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b53e:	4413      	add	r3, r2
 800b540:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b544:	4a2b      	ldr	r2, [pc, #172]	; (800b5f4 <VL53L0X_calc_sigma_estimate+0x458>)
 800b546:	fba2 2303 	umull	r2, r3, r2, r3
 800b54a:	099b      	lsrs	r3, r3, #6
 800b54c:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b550:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b556:	441a      	add	r2, r3
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe fa71 	bl	8009a46 <VL53L0X_isqrt>
 800b564:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b566:	6a3b      	ldr	r3, [r7, #32]
 800b568:	021b      	lsls	r3, r3, #8
 800b56a:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b56c:	6a3b      	ldr	r3, [r7, #32]
 800b56e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b572:	4a20      	ldr	r2, [pc, #128]	; (800b5f4 <VL53L0X_calc_sigma_estimate+0x458>)
 800b574:	fba2 2303 	umull	r2, r3, r2, r3
 800b578:	099b      	lsrs	r3, r3, #6
 800b57a:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b57c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b580:	fb03 f303 	mul.w	r3, r3, r3
 800b584:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b586:	6a3b      	ldr	r3, [r7, #32]
 800b588:	fb03 f303 	mul.w	r3, r3, r3
 800b58c:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b58e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b592:	4413      	add	r3, r2
 800b594:	4618      	mov	r0, r3
 800b596:	f7fe fa56 	bl	8009a46 <VL53L0X_isqrt>
 800b59a:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5a2:	fb02 f303 	mul.w	r3, r2, r3
 800b5a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b5aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d009      	beq.n	800b5c4 <VL53L0X_calc_sigma_estimate+0x428>
 800b5b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d005      	beq.n	800b5c4 <VL53L0X_calc_sigma_estimate+0x428>
 800b5b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b5bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d903      	bls.n	800b5cc <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 800b5c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b5d2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b5de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	37c0      	adds	r7, #192	; 0xc0
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	51eb851f 	.word	0x51eb851f
 800b5f0:	d1b71759 	.word	0xd1b71759
 800b5f4:	10624dd3 	.word	0x10624dd3

0800b5f8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b090      	sub	sp, #64	; 0x40
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	607a      	str	r2, [r7, #4]
 800b602:	461a      	mov	r2, r3
 800b604:	460b      	mov	r3, r1
 800b606:	72fb      	strb	r3, [r7, #11]
 800b608:	4613      	mov	r3, r2
 800b60a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b60c:	2300      	movs	r3, #0
 800b60e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b612:	2300      	movs	r3, #0
 800b614:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b618:	2300      	movs	r3, #0
 800b61a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b61e:	2300      	movs	r3, #0
 800b620:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b624:	2300      	movs	r3, #0
 800b626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b636:	2300      	movs	r3, #0
 800b638:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b642:	2300      	movs	r3, #0
 800b644:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b64a:	7afb      	ldrb	r3, [r7, #11]
 800b64c:	10db      	asrs	r3, r3, #3
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	f003 030f 	and.w	r3, r3, #15
 800b654:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b658:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d017      	beq.n	800b690 <VL53L0X_get_pal_range_status+0x98>
 800b660:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b664:	2b05      	cmp	r3, #5
 800b666:	d013      	beq.n	800b690 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b668:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b66c:	2b07      	cmp	r3, #7
 800b66e:	d00f      	beq.n	800b690 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b670:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b674:	2b0c      	cmp	r3, #12
 800b676:	d00b      	beq.n	800b690 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b678:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b67c:	2b0d      	cmp	r3, #13
 800b67e:	d007      	beq.n	800b690 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b680:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b684:	2b0e      	cmp	r3, #14
 800b686:	d003      	beq.n	800b690 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b688:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b68c:	2b0f      	cmp	r3, #15
 800b68e:	d103      	bne.n	800b698 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b690:	2301      	movs	r3, #1
 800b692:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b696:	e002      	b.n	800b69e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b698:	2300      	movs	r3, #0
 800b69a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b69e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d109      	bne.n	800b6ba <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b6a6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7fc fc54 	bl	8007f5c <VL53L0X_GetLimitCheckEnable>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b6ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d03c      	beq.n	800b73c <VL53L0X_get_pal_range_status+0x144>
 800b6c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d138      	bne.n	800b73c <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b6ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f7ff fd62 	bl	800b19c <VL53L0X_calc_sigma_estimate>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 800b6de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10a      	bne.n	800b6fc <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 800b6e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	f107 0210 	add.w	r2, r7, #16
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f7ff fcac 	bl	800b04e <VL53L0X_calc_dmax>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b6fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b700:	2b00      	cmp	r3, #0
 800b702:	d103      	bne.n	800b70c <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	b29a      	uxth	r2, r3
 800b708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b70a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b70c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b710:	2b00      	cmp	r3, #0
 800b712:	d113      	bne.n	800b73c <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b714:	f107 0320 	add.w	r3, r7, #32
 800b718:	461a      	mov	r2, r3
 800b71a:	2100      	movs	r1, #0
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f7fc fca3 	bl	8008068 <VL53L0X_GetLimitCheckValue>
 800b722:	4603      	mov	r3, r0
 800b724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d006      	beq.n	800b73c <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 800b72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b730:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b732:	429a      	cmp	r2, r3
 800b734:	d902      	bls.n	800b73c <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 800b736:	2301      	movs	r3, #1
 800b738:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b73c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b740:	2b00      	cmp	r3, #0
 800b742:	d109      	bne.n	800b758 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b744:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b748:	461a      	mov	r2, r3
 800b74a:	2102      	movs	r1, #2
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f7fc fc05 	bl	8007f5c <VL53L0X_GetLimitCheckEnable>
 800b752:	4603      	mov	r3, r0
 800b754:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b758:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d044      	beq.n	800b7ea <VL53L0X_get_pal_range_status+0x1f2>
 800b760:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b764:	2b00      	cmp	r3, #0
 800b766:	d140      	bne.n	800b7ea <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b768:	f107 031c 	add.w	r3, r7, #28
 800b76c:	461a      	mov	r2, r3
 800b76e:	2102      	movs	r1, #2
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f7fc fc79 	bl	8008068 <VL53L0X_GetLimitCheckValue>
 800b776:	4603      	mov	r3, r0
 800b778:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b77c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b780:	2b00      	cmp	r3, #0
 800b782:	d107      	bne.n	800b794 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b784:	2201      	movs	r2, #1
 800b786:	21ff      	movs	r1, #255	; 0xff
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 f9b5 	bl	800baf8 <VL53L0X_WrByte>
 800b78e:	4603      	mov	r3, r0
 800b790:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b794:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d109      	bne.n	800b7b0 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 800b79c:	f107 0316 	add.w	r3, r7, #22
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	21b6      	movs	r1, #182	; 0xb6
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f000 fa53 	bl	800bc50 <VL53L0X_RdWord>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b7b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d107      	bne.n	800b7c8 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	21ff      	movs	r1, #255	; 0xff
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 f99b 	bl	800baf8 <VL53L0X_WrByte>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b7c8:	8afb      	ldrh	r3, [r7, #22]
 800b7ca:	025b      	lsls	r3, r3, #9
 800b7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7d2:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d006      	beq.n	800b7ea <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b7dc:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b7de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d902      	bls.n	800b7ea <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b7ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d109      	bne.n	800b806 <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b7f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	2103      	movs	r1, #3
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f7fc fbae 	bl	8007f5c <VL53L0X_GetLimitCheckEnable>
 800b800:	4603      	mov	r3, r0
 800b802:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b806:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d023      	beq.n	800b856 <VL53L0X_get_pal_range_status+0x25e>
 800b80e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b812:	2b00      	cmp	r3, #0
 800b814:	d11f      	bne.n	800b856 <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b816:	893b      	ldrh	r3, [r7, #8]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d102      	bne.n	800b822 <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	637b      	str	r3, [r7, #52]	; 0x34
 800b820:	e005      	b.n	800b82e <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	021a      	lsls	r2, r3, #8
 800b826:	893b      	ldrh	r3, [r7, #8]
 800b828:	fbb2 f3f3 	udiv	r3, r2, r3
 800b82c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b82e:	f107 0318 	add.w	r3, r7, #24
 800b832:	461a      	mov	r2, r3
 800b834:	2103      	movs	r1, #3
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f7fc fc16 	bl	8008068 <VL53L0X_GetLimitCheckValue>
 800b83c:	4603      	mov	r3, r0
 800b83e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d006      	beq.n	800b856 <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b848:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b84a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d202      	bcs.n	800b856 <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b850:	2301      	movs	r3, #1
 800b852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b856:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d14a      	bne.n	800b8f4 <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 800b85e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b862:	2b01      	cmp	r3, #1
 800b864:	d103      	bne.n	800b86e <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 800b866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b868:	22ff      	movs	r2, #255	; 0xff
 800b86a:	701a      	strb	r2, [r3, #0]
 800b86c:	e042      	b.n	800b8f4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b86e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b872:	2b01      	cmp	r3, #1
 800b874:	d007      	beq.n	800b886 <VL53L0X_get_pal_range_status+0x28e>
 800b876:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d003      	beq.n	800b886 <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 800b87e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b882:	2b03      	cmp	r3, #3
 800b884:	d103      	bne.n	800b88e <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b888:	2205      	movs	r2, #5
 800b88a:	701a      	strb	r2, [r3, #0]
 800b88c:	e032      	b.n	800b8f4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b88e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b892:	2b06      	cmp	r3, #6
 800b894:	d003      	beq.n	800b89e <VL53L0X_get_pal_range_status+0x2a6>
 800b896:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b89a:	2b09      	cmp	r3, #9
 800b89c:	d103      	bne.n	800b8a6 <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8a0:	2204      	movs	r2, #4
 800b8a2:	701a      	strb	r2, [r3, #0]
 800b8a4:	e026      	b.n	800b8f4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b8a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8aa:	2b08      	cmp	r3, #8
 800b8ac:	d007      	beq.n	800b8be <VL53L0X_get_pal_range_status+0x2c6>
 800b8ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8b2:	2b0a      	cmp	r3, #10
 800b8b4:	d003      	beq.n	800b8be <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 800b8b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d103      	bne.n	800b8c6 <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8c0:	2203      	movs	r2, #3
 800b8c2:	701a      	strb	r2, [r3, #0]
 800b8c4:	e016      	b.n	800b8f4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b8c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8ca:	2b04      	cmp	r3, #4
 800b8cc:	d003      	beq.n	800b8d6 <VL53L0X_get_pal_range_status+0x2de>
 800b8ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d103      	bne.n	800b8de <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b8d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8d8:	2202      	movs	r2, #2
 800b8da:	701a      	strb	r2, [r3, #0]
 800b8dc:	e00a      	b.n	800b8f4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 800b8de:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d103      	bne.n	800b8ee <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b8e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	701a      	strb	r2, [r3, #0]
 800b8ec:	e002      	b.n	800b8f4 <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b8f4:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	2101      	movs	r1, #1
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7fc fb2d 	bl	8007f5c <VL53L0X_GetLimitCheckEnable>
 800b902:	4603      	mov	r3, r0
 800b904:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b908:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d14f      	bne.n	800b9b0 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b910:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b914:	2b00      	cmp	r3, #0
 800b916:	d003      	beq.n	800b920 <VL53L0X_get_pal_range_status+0x328>
 800b918:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d103      	bne.n	800b928 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 800b920:	2301      	movs	r3, #1
 800b922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b926:	e002      	b.n	800b92e <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 800b928:	2300      	movs	r3, #0
 800b92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b934:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b938:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b93c:	2b04      	cmp	r3, #4
 800b93e:	d003      	beq.n	800b948 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b940:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b944:	2b00      	cmp	r3, #0
 800b946:	d103      	bne.n	800b950 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 800b948:	2301      	movs	r3, #1
 800b94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b94e:	e002      	b.n	800b956 <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 800b950:	2300      	movs	r3, #0
 800b952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b95c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b960:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b964:	2b00      	cmp	r3, #0
 800b966:	d003      	beq.n	800b970 <VL53L0X_get_pal_range_status+0x378>
 800b968:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d103      	bne.n	800b978 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b970:	2301      	movs	r3, #1
 800b972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b976:	e002      	b.n	800b97e <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 800b978:	2300      	movs	r3, #0
 800b97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b984:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b988:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <VL53L0X_get_pal_range_status+0x3a0>
 800b990:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b994:	2b01      	cmp	r3, #1
 800b996:	d103      	bne.n	800b9a0 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b998:	2301      	movs	r3, #1
 800b99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b99e:	e002      	b.n	800b9a6 <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b9ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b9b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3740      	adds	r7, #64	; 0x40
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b088      	sub	sp, #32
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	330a      	adds	r3, #10
 800b9cc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800b9da:	b299      	uxth	r1, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	68ba      	ldr	r2, [r7, #8]
 800b9e8:	f7f5 fd36 	bl	8001458 <HAL_I2C_Master_Transmit>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b9f0:	693b      	ldr	r3, [r7, #16]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3718      	adds	r7, #24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b088      	sub	sp, #32
 800b9fe:	af02      	add	r7, sp, #8
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	330a      	adds	r3, #10
 800ba0a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800ba18:	f043 0301 	orr.w	r3, r3, #1
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	b299      	uxth	r1, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	4613      	mov	r3, r2
 800ba2a:	68ba      	ldr	r2, [r7, #8]
 800ba2c:	f7f5 fe08 	bl	8001640 <HAL_I2C_Master_Receive>
 800ba30:	4603      	mov	r3, r0
 800ba32:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ba34:	693b      	ldr	r3, [r7, #16]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
	...

0800ba40 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	607a      	str	r2, [r7, #4]
 800ba4a:	603b      	str	r3, [r7, #0]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba50:	2300      	movs	r3, #0
 800ba52:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2b3f      	cmp	r3, #63	; 0x3f
 800ba58:	d902      	bls.n	800ba60 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800ba5a:	f06f 0303 	mvn.w	r3, #3
 800ba5e:	e016      	b.n	800ba8e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800ba60:	4a0d      	ldr	r2, [pc, #52]	; (800ba98 <VL53L0X_WriteMulti+0x58>)
 800ba62:	7afb      	ldrb	r3, [r7, #11]
 800ba64:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	6879      	ldr	r1, [r7, #4]
 800ba6a:	480c      	ldr	r0, [pc, #48]	; (800ba9c <VL53L0X_WriteMulti+0x5c>)
 800ba6c:	f000 f9c8 	bl	800be00 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	461a      	mov	r2, r3
 800ba76:	4908      	ldr	r1, [pc, #32]	; (800ba98 <VL53L0X_WriteMulti+0x58>)
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f7ff ff9f 	bl	800b9bc <_I2CWrite>
 800ba7e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba86:	23ec      	movs	r3, #236	; 0xec
 800ba88:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ba8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3718      	adds	r7, #24
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20000bec 	.word	0x20000bec
 800ba9c:	20000bed 	.word	0x20000bed

0800baa0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	607a      	str	r2, [r7, #4]
 800baaa:	603b      	str	r3, [r7, #0]
 800baac:	460b      	mov	r3, r1
 800baae:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bab0:	2300      	movs	r3, #0
 800bab2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bab4:	f107 030b 	add.w	r3, r7, #11
 800bab8:	2201      	movs	r2, #1
 800baba:	4619      	mov	r1, r3
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f7ff ff7d 	bl	800b9bc <_I2CWrite>
 800bac2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800baca:	23ec      	movs	r3, #236	; 0xec
 800bacc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bace:	e00c      	b.n	800baea <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800bad0:	683a      	ldr	r2, [r7, #0]
 800bad2:	6879      	ldr	r1, [r7, #4]
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f7ff ff90 	bl	800b9fa <_I2CRead>
 800bada:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d002      	beq.n	800bae8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bae2:	23ec      	movs	r3, #236	; 0xec
 800bae4:	75fb      	strb	r3, [r7, #23]
 800bae6:	e000      	b.n	800baea <VL53L0X_ReadMulti+0x4a>
    }
done:
 800bae8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800baea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3718      	adds	r7, #24
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
	...

0800baf8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	460b      	mov	r3, r1
 800bb02:	70fb      	strb	r3, [r7, #3]
 800bb04:	4613      	mov	r3, r2
 800bb06:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bb0c:	4a0b      	ldr	r2, [pc, #44]	; (800bb3c <VL53L0X_WrByte+0x44>)
 800bb0e:	78fb      	ldrb	r3, [r7, #3]
 800bb10:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800bb12:	4a0a      	ldr	r2, [pc, #40]	; (800bb3c <VL53L0X_WrByte+0x44>)
 800bb14:	78bb      	ldrb	r3, [r7, #2]
 800bb16:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800bb18:	2202      	movs	r2, #2
 800bb1a:	4908      	ldr	r1, [pc, #32]	; (800bb3c <VL53L0X_WrByte+0x44>)
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff ff4d 	bl	800b9bc <_I2CWrite>
 800bb22:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb2a:	23ec      	movs	r3, #236	; 0xec
 800bb2c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bb2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20000bec 	.word	0x20000bec

0800bb40 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	70fb      	strb	r3, [r7, #3]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb50:	2300      	movs	r3, #0
 800bb52:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bb54:	4a0e      	ldr	r2, [pc, #56]	; (800bb90 <VL53L0X_WrWord+0x50>)
 800bb56:	78fb      	ldrb	r3, [r7, #3]
 800bb58:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800bb5a:	883b      	ldrh	r3, [r7, #0]
 800bb5c:	0a1b      	lsrs	r3, r3, #8
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	4b0b      	ldr	r3, [pc, #44]	; (800bb90 <VL53L0X_WrWord+0x50>)
 800bb64:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800bb66:	883b      	ldrh	r3, [r7, #0]
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	4b09      	ldr	r3, [pc, #36]	; (800bb90 <VL53L0X_WrWord+0x50>)
 800bb6c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800bb6e:	2203      	movs	r2, #3
 800bb70:	4907      	ldr	r1, [pc, #28]	; (800bb90 <VL53L0X_WrWord+0x50>)
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7ff ff22 	bl	800b9bc <_I2CWrite>
 800bb78:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d001      	beq.n	800bb84 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb80:	23ec      	movs	r3, #236	; 0xec
 800bb82:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bb84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	20000bec 	.word	0x20000bec

0800bb94 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	4608      	mov	r0, r1
 800bb9e:	4611      	mov	r1, r2
 800bba0:	461a      	mov	r2, r3
 800bba2:	4603      	mov	r3, r0
 800bba4:	70fb      	strb	r3, [r7, #3]
 800bba6:	460b      	mov	r3, r1
 800bba8:	70bb      	strb	r3, [r7, #2]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800bbb2:	f107 020e 	add.w	r2, r7, #14
 800bbb6:	78fb      	ldrb	r3, [r7, #3]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f81e 	bl	800bbfc <VL53L0X_RdByte>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800bbc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d110      	bne.n	800bbee <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800bbcc:	7bba      	ldrb	r2, [r7, #14]
 800bbce:	78bb      	ldrb	r3, [r7, #2]
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	787b      	ldrb	r3, [r7, #1]
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800bbdc:	7bba      	ldrb	r2, [r7, #14]
 800bbde:	78fb      	ldrb	r3, [r7, #3]
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7ff ff88 	bl	800baf8 <VL53L0X_WrByte>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	73fb      	strb	r3, [r7, #15]
 800bbec:	e000      	b.n	800bbf0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800bbee:	bf00      	nop
done:
    return Status;
 800bbf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	460b      	mov	r3, r1
 800bc06:	607a      	str	r2, [r7, #4]
 800bc08:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bc0e:	f107 030b 	add.w	r3, r7, #11
 800bc12:	2201      	movs	r2, #1
 800bc14:	4619      	mov	r1, r3
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7ff fed0 	bl	800b9bc <_I2CWrite>
 800bc1c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d002      	beq.n	800bc2a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bc24:	23ec      	movs	r3, #236	; 0xec
 800bc26:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bc28:	e00c      	b.n	800bc44 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7ff fee3 	bl	800b9fa <_I2CRead>
 800bc34:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bc3c:	23ec      	movs	r3, #236	; 0xec
 800bc3e:	75fb      	strb	r3, [r7, #23]
 800bc40:	e000      	b.n	800bc44 <VL53L0X_RdByte+0x48>
    }
done:
 800bc42:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bc44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3718      	adds	r7, #24
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	460b      	mov	r3, r1
 800bc5a:	607a      	str	r2, [r7, #4]
 800bc5c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bc62:	f107 030b 	add.w	r3, r7, #11
 800bc66:	2201      	movs	r2, #1
 800bc68:	4619      	mov	r1, r3
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f7ff fea6 	bl	800b9bc <_I2CWrite>
 800bc70:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d002      	beq.n	800bc7e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bc78:	23ec      	movs	r3, #236	; 0xec
 800bc7a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bc7c:	e017      	b.n	800bcae <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800bc7e:	2202      	movs	r2, #2
 800bc80:	490e      	ldr	r1, [pc, #56]	; (800bcbc <VL53L0X_RdWord+0x6c>)
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f7ff feb9 	bl	800b9fa <_I2CRead>
 800bc88:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bc90:	23ec      	movs	r3, #236	; 0xec
 800bc92:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bc94:	e00b      	b.n	800bcae <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800bc96:	4b09      	ldr	r3, [pc, #36]	; (800bcbc <VL53L0X_RdWord+0x6c>)
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	021b      	lsls	r3, r3, #8
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	4b06      	ldr	r3, [pc, #24]	; (800bcbc <VL53L0X_RdWord+0x6c>)
 800bca2:	785b      	ldrb	r3, [r3, #1]
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	4413      	add	r3, r2
 800bca8:	b29a      	uxth	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800bcae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3718      	adds	r7, #24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	20000bec 	.word	0x20000bec

0800bcc0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	607a      	str	r2, [r7, #4]
 800bccc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bcd2:	f107 030b 	add.w	r3, r7, #11
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	4619      	mov	r1, r3
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f7ff fe6e 	bl	800b9bc <_I2CWrite>
 800bce0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bce8:	23ec      	movs	r3, #236	; 0xec
 800bcea:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bcec:	e01b      	b.n	800bd26 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800bcee:	2204      	movs	r2, #4
 800bcf0:	4910      	ldr	r1, [pc, #64]	; (800bd34 <VL53L0X_RdDWord+0x74>)
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f7ff fe81 	bl	800b9fa <_I2CRead>
 800bcf8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bd00:	23ec      	movs	r3, #236	; 0xec
 800bd02:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bd04:	e00f      	b.n	800bd26 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800bd06:	4b0b      	ldr	r3, [pc, #44]	; (800bd34 <VL53L0X_RdDWord+0x74>)
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	061a      	lsls	r2, r3, #24
 800bd0c:	4b09      	ldr	r3, [pc, #36]	; (800bd34 <VL53L0X_RdDWord+0x74>)
 800bd0e:	785b      	ldrb	r3, [r3, #1]
 800bd10:	041b      	lsls	r3, r3, #16
 800bd12:	441a      	add	r2, r3
 800bd14:	4b07      	ldr	r3, [pc, #28]	; (800bd34 <VL53L0X_RdDWord+0x74>)
 800bd16:	789b      	ldrb	r3, [r3, #2]
 800bd18:	021b      	lsls	r3, r3, #8
 800bd1a:	4413      	add	r3, r2
 800bd1c:	4a05      	ldr	r2, [pc, #20]	; (800bd34 <VL53L0X_RdDWord+0x74>)
 800bd1e:	78d2      	ldrb	r2, [r2, #3]
 800bd20:	441a      	add	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800bd26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3718      	adds	r7, #24
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	20000bec 	.word	0x20000bec

0800bd38 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bd40:	2300      	movs	r3, #0
 800bd42:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800bd44:	2002      	movs	r0, #2
 800bd46:	f7f4 fcb9 	bl	80006bc <HAL_Delay>
    return status;
 800bd4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
	...

0800bd58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800bd58:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bd90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800bd5c:	f7fb f9e0 	bl	8007120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bd60:	480c      	ldr	r0, [pc, #48]	; (800bd94 <LoopForever+0x6>)
  ldr r1, =_edata
 800bd62:	490d      	ldr	r1, [pc, #52]	; (800bd98 <LoopForever+0xa>)
  ldr r2, =_sidata
 800bd64:	4a0d      	ldr	r2, [pc, #52]	; (800bd9c <LoopForever+0xe>)
  movs r3, #0
 800bd66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bd68:	e002      	b.n	800bd70 <LoopCopyDataInit>

0800bd6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bd6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bd6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bd6e:	3304      	adds	r3, #4

0800bd70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bd70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bd72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bd74:	d3f9      	bcc.n	800bd6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bd76:	4a0a      	ldr	r2, [pc, #40]	; (800bda0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800bd78:	4c0a      	ldr	r4, [pc, #40]	; (800bda4 <LoopForever+0x16>)
  movs r3, #0
 800bd7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bd7c:	e001      	b.n	800bd82 <LoopFillZerobss>

0800bd7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bd7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bd80:	3204      	adds	r2, #4

0800bd82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bd82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bd84:	d3fb      	bcc.n	800bd7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bd86:	f000 f817 	bl	800bdb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800bd8a:	f7fa fc1f 	bl	80065cc <main>

0800bd8e <LoopForever>:

LoopForever:
    b LoopForever
 800bd8e:	e7fe      	b.n	800bd8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800bd90:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800bd94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bd98:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 800bd9c:	0800cad0 	.word	0x0800cad0
  ldr r2, =_sbss
 800bda0:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 800bda4:	20000c3c 	.word	0x20000c3c

0800bda8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800bda8:	e7fe      	b.n	800bda8 <ADC1_IRQHandler>
	...

0800bdac <__errno>:
 800bdac:	4b01      	ldr	r3, [pc, #4]	; (800bdb4 <__errno+0x8>)
 800bdae:	6818      	ldr	r0, [r3, #0]
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	20000364 	.word	0x20000364

0800bdb8 <__libc_init_array>:
 800bdb8:	b570      	push	{r4, r5, r6, lr}
 800bdba:	4d0d      	ldr	r5, [pc, #52]	; (800bdf0 <__libc_init_array+0x38>)
 800bdbc:	4c0d      	ldr	r4, [pc, #52]	; (800bdf4 <__libc_init_array+0x3c>)
 800bdbe:	1b64      	subs	r4, r4, r5
 800bdc0:	10a4      	asrs	r4, r4, #2
 800bdc2:	2600      	movs	r6, #0
 800bdc4:	42a6      	cmp	r6, r4
 800bdc6:	d109      	bne.n	800bddc <__libc_init_array+0x24>
 800bdc8:	4d0b      	ldr	r5, [pc, #44]	; (800bdf8 <__libc_init_array+0x40>)
 800bdca:	4c0c      	ldr	r4, [pc, #48]	; (800bdfc <__libc_init_array+0x44>)
 800bdcc:	f000 fcca 	bl	800c764 <_init>
 800bdd0:	1b64      	subs	r4, r4, r5
 800bdd2:	10a4      	asrs	r4, r4, #2
 800bdd4:	2600      	movs	r6, #0
 800bdd6:	42a6      	cmp	r6, r4
 800bdd8:	d105      	bne.n	800bde6 <__libc_init_array+0x2e>
 800bdda:	bd70      	pop	{r4, r5, r6, pc}
 800bddc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bde0:	4798      	blx	r3
 800bde2:	3601      	adds	r6, #1
 800bde4:	e7ee      	b.n	800bdc4 <__libc_init_array+0xc>
 800bde6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdea:	4798      	blx	r3
 800bdec:	3601      	adds	r6, #1
 800bdee:	e7f2      	b.n	800bdd6 <__libc_init_array+0x1e>
 800bdf0:	0800cac8 	.word	0x0800cac8
 800bdf4:	0800cac8 	.word	0x0800cac8
 800bdf8:	0800cac8 	.word	0x0800cac8
 800bdfc:	0800cacc 	.word	0x0800cacc

0800be00 <memcpy>:
 800be00:	440a      	add	r2, r1
 800be02:	4291      	cmp	r1, r2
 800be04:	f100 33ff 	add.w	r3, r0, #4294967295
 800be08:	d100      	bne.n	800be0c <memcpy+0xc>
 800be0a:	4770      	bx	lr
 800be0c:	b510      	push	{r4, lr}
 800be0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be16:	4291      	cmp	r1, r2
 800be18:	d1f9      	bne.n	800be0e <memcpy+0xe>
 800be1a:	bd10      	pop	{r4, pc}

0800be1c <memset>:
 800be1c:	4402      	add	r2, r0
 800be1e:	4603      	mov	r3, r0
 800be20:	4293      	cmp	r3, r2
 800be22:	d100      	bne.n	800be26 <memset+0xa>
 800be24:	4770      	bx	lr
 800be26:	f803 1b01 	strb.w	r1, [r3], #1
 800be2a:	e7f9      	b.n	800be20 <memset+0x4>

0800be2c <sniprintf>:
 800be2c:	b40c      	push	{r2, r3}
 800be2e:	b530      	push	{r4, r5, lr}
 800be30:	4b17      	ldr	r3, [pc, #92]	; (800be90 <sniprintf+0x64>)
 800be32:	1e0c      	subs	r4, r1, #0
 800be34:	681d      	ldr	r5, [r3, #0]
 800be36:	b09d      	sub	sp, #116	; 0x74
 800be38:	da08      	bge.n	800be4c <sniprintf+0x20>
 800be3a:	238b      	movs	r3, #139	; 0x8b
 800be3c:	602b      	str	r3, [r5, #0]
 800be3e:	f04f 30ff 	mov.w	r0, #4294967295
 800be42:	b01d      	add	sp, #116	; 0x74
 800be44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be48:	b002      	add	sp, #8
 800be4a:	4770      	bx	lr
 800be4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800be50:	f8ad 3014 	strh.w	r3, [sp, #20]
 800be54:	bf14      	ite	ne
 800be56:	f104 33ff 	addne.w	r3, r4, #4294967295
 800be5a:	4623      	moveq	r3, r4
 800be5c:	9304      	str	r3, [sp, #16]
 800be5e:	9307      	str	r3, [sp, #28]
 800be60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be64:	9002      	str	r0, [sp, #8]
 800be66:	9006      	str	r0, [sp, #24]
 800be68:	f8ad 3016 	strh.w	r3, [sp, #22]
 800be6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800be6e:	ab21      	add	r3, sp, #132	; 0x84
 800be70:	a902      	add	r1, sp, #8
 800be72:	4628      	mov	r0, r5
 800be74:	9301      	str	r3, [sp, #4]
 800be76:	f000 f927 	bl	800c0c8 <_svfiprintf_r>
 800be7a:	1c43      	adds	r3, r0, #1
 800be7c:	bfbc      	itt	lt
 800be7e:	238b      	movlt	r3, #139	; 0x8b
 800be80:	602b      	strlt	r3, [r5, #0]
 800be82:	2c00      	cmp	r4, #0
 800be84:	d0dd      	beq.n	800be42 <sniprintf+0x16>
 800be86:	9b02      	ldr	r3, [sp, #8]
 800be88:	2200      	movs	r2, #0
 800be8a:	701a      	strb	r2, [r3, #0]
 800be8c:	e7d9      	b.n	800be42 <sniprintf+0x16>
 800be8e:	bf00      	nop
 800be90:	20000364 	.word	0x20000364

0800be94 <siprintf>:
 800be94:	b40e      	push	{r1, r2, r3}
 800be96:	b500      	push	{lr}
 800be98:	b09c      	sub	sp, #112	; 0x70
 800be9a:	ab1d      	add	r3, sp, #116	; 0x74
 800be9c:	9002      	str	r0, [sp, #8]
 800be9e:	9006      	str	r0, [sp, #24]
 800bea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bea4:	4809      	ldr	r0, [pc, #36]	; (800becc <siprintf+0x38>)
 800bea6:	9107      	str	r1, [sp, #28]
 800bea8:	9104      	str	r1, [sp, #16]
 800beaa:	4909      	ldr	r1, [pc, #36]	; (800bed0 <siprintf+0x3c>)
 800beac:	f853 2b04 	ldr.w	r2, [r3], #4
 800beb0:	9105      	str	r1, [sp, #20]
 800beb2:	6800      	ldr	r0, [r0, #0]
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	a902      	add	r1, sp, #8
 800beb8:	f000 f906 	bl	800c0c8 <_svfiprintf_r>
 800bebc:	9b02      	ldr	r3, [sp, #8]
 800bebe:	2200      	movs	r2, #0
 800bec0:	701a      	strb	r2, [r3, #0]
 800bec2:	b01c      	add	sp, #112	; 0x70
 800bec4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bec8:	b003      	add	sp, #12
 800beca:	4770      	bx	lr
 800becc:	20000364 	.word	0x20000364
 800bed0:	ffff0208 	.word	0xffff0208

0800bed4 <strcpy>:
 800bed4:	4603      	mov	r3, r0
 800bed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beda:	f803 2b01 	strb.w	r2, [r3], #1
 800bede:	2a00      	cmp	r2, #0
 800bee0:	d1f9      	bne.n	800bed6 <strcpy+0x2>
 800bee2:	4770      	bx	lr

0800bee4 <__retarget_lock_acquire_recursive>:
 800bee4:	4770      	bx	lr

0800bee6 <__retarget_lock_release_recursive>:
 800bee6:	4770      	bx	lr

0800bee8 <sbrk_aligned>:
 800bee8:	b570      	push	{r4, r5, r6, lr}
 800beea:	4e0e      	ldr	r6, [pc, #56]	; (800bf24 <sbrk_aligned+0x3c>)
 800beec:	460c      	mov	r4, r1
 800beee:	6831      	ldr	r1, [r6, #0]
 800bef0:	4605      	mov	r5, r0
 800bef2:	b911      	cbnz	r1, 800befa <sbrk_aligned+0x12>
 800bef4:	f000 fb7c 	bl	800c5f0 <_sbrk_r>
 800bef8:	6030      	str	r0, [r6, #0]
 800befa:	4621      	mov	r1, r4
 800befc:	4628      	mov	r0, r5
 800befe:	f000 fb77 	bl	800c5f0 <_sbrk_r>
 800bf02:	1c43      	adds	r3, r0, #1
 800bf04:	d00a      	beq.n	800bf1c <sbrk_aligned+0x34>
 800bf06:	1cc4      	adds	r4, r0, #3
 800bf08:	f024 0403 	bic.w	r4, r4, #3
 800bf0c:	42a0      	cmp	r0, r4
 800bf0e:	d007      	beq.n	800bf20 <sbrk_aligned+0x38>
 800bf10:	1a21      	subs	r1, r4, r0
 800bf12:	4628      	mov	r0, r5
 800bf14:	f000 fb6c 	bl	800c5f0 <_sbrk_r>
 800bf18:	3001      	adds	r0, #1
 800bf1a:	d101      	bne.n	800bf20 <sbrk_aligned+0x38>
 800bf1c:	f04f 34ff 	mov.w	r4, #4294967295
 800bf20:	4620      	mov	r0, r4
 800bf22:	bd70      	pop	{r4, r5, r6, pc}
 800bf24:	20000c34 	.word	0x20000c34

0800bf28 <_malloc_r>:
 800bf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2c:	1ccd      	adds	r5, r1, #3
 800bf2e:	f025 0503 	bic.w	r5, r5, #3
 800bf32:	3508      	adds	r5, #8
 800bf34:	2d0c      	cmp	r5, #12
 800bf36:	bf38      	it	cc
 800bf38:	250c      	movcc	r5, #12
 800bf3a:	2d00      	cmp	r5, #0
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	db01      	blt.n	800bf44 <_malloc_r+0x1c>
 800bf40:	42a9      	cmp	r1, r5
 800bf42:	d905      	bls.n	800bf50 <_malloc_r+0x28>
 800bf44:	230c      	movs	r3, #12
 800bf46:	603b      	str	r3, [r7, #0]
 800bf48:	2600      	movs	r6, #0
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf50:	4e2e      	ldr	r6, [pc, #184]	; (800c00c <_malloc_r+0xe4>)
 800bf52:	f000 fb77 	bl	800c644 <__malloc_lock>
 800bf56:	6833      	ldr	r3, [r6, #0]
 800bf58:	461c      	mov	r4, r3
 800bf5a:	bb34      	cbnz	r4, 800bfaa <_malloc_r+0x82>
 800bf5c:	4629      	mov	r1, r5
 800bf5e:	4638      	mov	r0, r7
 800bf60:	f7ff ffc2 	bl	800bee8 <sbrk_aligned>
 800bf64:	1c43      	adds	r3, r0, #1
 800bf66:	4604      	mov	r4, r0
 800bf68:	d14d      	bne.n	800c006 <_malloc_r+0xde>
 800bf6a:	6834      	ldr	r4, [r6, #0]
 800bf6c:	4626      	mov	r6, r4
 800bf6e:	2e00      	cmp	r6, #0
 800bf70:	d140      	bne.n	800bff4 <_malloc_r+0xcc>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	4631      	mov	r1, r6
 800bf76:	4638      	mov	r0, r7
 800bf78:	eb04 0803 	add.w	r8, r4, r3
 800bf7c:	f000 fb38 	bl	800c5f0 <_sbrk_r>
 800bf80:	4580      	cmp	r8, r0
 800bf82:	d13a      	bne.n	800bffa <_malloc_r+0xd2>
 800bf84:	6821      	ldr	r1, [r4, #0]
 800bf86:	3503      	adds	r5, #3
 800bf88:	1a6d      	subs	r5, r5, r1
 800bf8a:	f025 0503 	bic.w	r5, r5, #3
 800bf8e:	3508      	adds	r5, #8
 800bf90:	2d0c      	cmp	r5, #12
 800bf92:	bf38      	it	cc
 800bf94:	250c      	movcc	r5, #12
 800bf96:	4629      	mov	r1, r5
 800bf98:	4638      	mov	r0, r7
 800bf9a:	f7ff ffa5 	bl	800bee8 <sbrk_aligned>
 800bf9e:	3001      	adds	r0, #1
 800bfa0:	d02b      	beq.n	800bffa <_malloc_r+0xd2>
 800bfa2:	6823      	ldr	r3, [r4, #0]
 800bfa4:	442b      	add	r3, r5
 800bfa6:	6023      	str	r3, [r4, #0]
 800bfa8:	e00e      	b.n	800bfc8 <_malloc_r+0xa0>
 800bfaa:	6822      	ldr	r2, [r4, #0]
 800bfac:	1b52      	subs	r2, r2, r5
 800bfae:	d41e      	bmi.n	800bfee <_malloc_r+0xc6>
 800bfb0:	2a0b      	cmp	r2, #11
 800bfb2:	d916      	bls.n	800bfe2 <_malloc_r+0xba>
 800bfb4:	1961      	adds	r1, r4, r5
 800bfb6:	42a3      	cmp	r3, r4
 800bfb8:	6025      	str	r5, [r4, #0]
 800bfba:	bf18      	it	ne
 800bfbc:	6059      	strne	r1, [r3, #4]
 800bfbe:	6863      	ldr	r3, [r4, #4]
 800bfc0:	bf08      	it	eq
 800bfc2:	6031      	streq	r1, [r6, #0]
 800bfc4:	5162      	str	r2, [r4, r5]
 800bfc6:	604b      	str	r3, [r1, #4]
 800bfc8:	4638      	mov	r0, r7
 800bfca:	f104 060b 	add.w	r6, r4, #11
 800bfce:	f000 fb3f 	bl	800c650 <__malloc_unlock>
 800bfd2:	f026 0607 	bic.w	r6, r6, #7
 800bfd6:	1d23      	adds	r3, r4, #4
 800bfd8:	1af2      	subs	r2, r6, r3
 800bfda:	d0b6      	beq.n	800bf4a <_malloc_r+0x22>
 800bfdc:	1b9b      	subs	r3, r3, r6
 800bfde:	50a3      	str	r3, [r4, r2]
 800bfe0:	e7b3      	b.n	800bf4a <_malloc_r+0x22>
 800bfe2:	6862      	ldr	r2, [r4, #4]
 800bfe4:	42a3      	cmp	r3, r4
 800bfe6:	bf0c      	ite	eq
 800bfe8:	6032      	streq	r2, [r6, #0]
 800bfea:	605a      	strne	r2, [r3, #4]
 800bfec:	e7ec      	b.n	800bfc8 <_malloc_r+0xa0>
 800bfee:	4623      	mov	r3, r4
 800bff0:	6864      	ldr	r4, [r4, #4]
 800bff2:	e7b2      	b.n	800bf5a <_malloc_r+0x32>
 800bff4:	4634      	mov	r4, r6
 800bff6:	6876      	ldr	r6, [r6, #4]
 800bff8:	e7b9      	b.n	800bf6e <_malloc_r+0x46>
 800bffa:	230c      	movs	r3, #12
 800bffc:	603b      	str	r3, [r7, #0]
 800bffe:	4638      	mov	r0, r7
 800c000:	f000 fb26 	bl	800c650 <__malloc_unlock>
 800c004:	e7a1      	b.n	800bf4a <_malloc_r+0x22>
 800c006:	6025      	str	r5, [r4, #0]
 800c008:	e7de      	b.n	800bfc8 <_malloc_r+0xa0>
 800c00a:	bf00      	nop
 800c00c:	20000c30 	.word	0x20000c30

0800c010 <__ssputs_r>:
 800c010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c014:	688e      	ldr	r6, [r1, #8]
 800c016:	429e      	cmp	r6, r3
 800c018:	4682      	mov	sl, r0
 800c01a:	460c      	mov	r4, r1
 800c01c:	4690      	mov	r8, r2
 800c01e:	461f      	mov	r7, r3
 800c020:	d838      	bhi.n	800c094 <__ssputs_r+0x84>
 800c022:	898a      	ldrh	r2, [r1, #12]
 800c024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c028:	d032      	beq.n	800c090 <__ssputs_r+0x80>
 800c02a:	6825      	ldr	r5, [r4, #0]
 800c02c:	6909      	ldr	r1, [r1, #16]
 800c02e:	eba5 0901 	sub.w	r9, r5, r1
 800c032:	6965      	ldr	r5, [r4, #20]
 800c034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c03c:	3301      	adds	r3, #1
 800c03e:	444b      	add	r3, r9
 800c040:	106d      	asrs	r5, r5, #1
 800c042:	429d      	cmp	r5, r3
 800c044:	bf38      	it	cc
 800c046:	461d      	movcc	r5, r3
 800c048:	0553      	lsls	r3, r2, #21
 800c04a:	d531      	bpl.n	800c0b0 <__ssputs_r+0xa0>
 800c04c:	4629      	mov	r1, r5
 800c04e:	f7ff ff6b 	bl	800bf28 <_malloc_r>
 800c052:	4606      	mov	r6, r0
 800c054:	b950      	cbnz	r0, 800c06c <__ssputs_r+0x5c>
 800c056:	230c      	movs	r3, #12
 800c058:	f8ca 3000 	str.w	r3, [sl]
 800c05c:	89a3      	ldrh	r3, [r4, #12]
 800c05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c062:	81a3      	strh	r3, [r4, #12]
 800c064:	f04f 30ff 	mov.w	r0, #4294967295
 800c068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c06c:	6921      	ldr	r1, [r4, #16]
 800c06e:	464a      	mov	r2, r9
 800c070:	f7ff fec6 	bl	800be00 <memcpy>
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c07e:	81a3      	strh	r3, [r4, #12]
 800c080:	6126      	str	r6, [r4, #16]
 800c082:	6165      	str	r5, [r4, #20]
 800c084:	444e      	add	r6, r9
 800c086:	eba5 0509 	sub.w	r5, r5, r9
 800c08a:	6026      	str	r6, [r4, #0]
 800c08c:	60a5      	str	r5, [r4, #8]
 800c08e:	463e      	mov	r6, r7
 800c090:	42be      	cmp	r6, r7
 800c092:	d900      	bls.n	800c096 <__ssputs_r+0x86>
 800c094:	463e      	mov	r6, r7
 800c096:	6820      	ldr	r0, [r4, #0]
 800c098:	4632      	mov	r2, r6
 800c09a:	4641      	mov	r1, r8
 800c09c:	f000 fab8 	bl	800c610 <memmove>
 800c0a0:	68a3      	ldr	r3, [r4, #8]
 800c0a2:	1b9b      	subs	r3, r3, r6
 800c0a4:	60a3      	str	r3, [r4, #8]
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	4433      	add	r3, r6
 800c0aa:	6023      	str	r3, [r4, #0]
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	e7db      	b.n	800c068 <__ssputs_r+0x58>
 800c0b0:	462a      	mov	r2, r5
 800c0b2:	f000 fb1f 	bl	800c6f4 <_realloc_r>
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d1e1      	bne.n	800c080 <__ssputs_r+0x70>
 800c0bc:	6921      	ldr	r1, [r4, #16]
 800c0be:	4650      	mov	r0, sl
 800c0c0:	f000 facc 	bl	800c65c <_free_r>
 800c0c4:	e7c7      	b.n	800c056 <__ssputs_r+0x46>
	...

0800c0c8 <_svfiprintf_r>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	4698      	mov	r8, r3
 800c0ce:	898b      	ldrh	r3, [r1, #12]
 800c0d0:	061b      	lsls	r3, r3, #24
 800c0d2:	b09d      	sub	sp, #116	; 0x74
 800c0d4:	4607      	mov	r7, r0
 800c0d6:	460d      	mov	r5, r1
 800c0d8:	4614      	mov	r4, r2
 800c0da:	d50e      	bpl.n	800c0fa <_svfiprintf_r+0x32>
 800c0dc:	690b      	ldr	r3, [r1, #16]
 800c0de:	b963      	cbnz	r3, 800c0fa <_svfiprintf_r+0x32>
 800c0e0:	2140      	movs	r1, #64	; 0x40
 800c0e2:	f7ff ff21 	bl	800bf28 <_malloc_r>
 800c0e6:	6028      	str	r0, [r5, #0]
 800c0e8:	6128      	str	r0, [r5, #16]
 800c0ea:	b920      	cbnz	r0, 800c0f6 <_svfiprintf_r+0x2e>
 800c0ec:	230c      	movs	r3, #12
 800c0ee:	603b      	str	r3, [r7, #0]
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f4:	e0d1      	b.n	800c29a <_svfiprintf_r+0x1d2>
 800c0f6:	2340      	movs	r3, #64	; 0x40
 800c0f8:	616b      	str	r3, [r5, #20]
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c0fe:	2320      	movs	r3, #32
 800c100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c104:	f8cd 800c 	str.w	r8, [sp, #12]
 800c108:	2330      	movs	r3, #48	; 0x30
 800c10a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c2b4 <_svfiprintf_r+0x1ec>
 800c10e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c112:	f04f 0901 	mov.w	r9, #1
 800c116:	4623      	mov	r3, r4
 800c118:	469a      	mov	sl, r3
 800c11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c11e:	b10a      	cbz	r2, 800c124 <_svfiprintf_r+0x5c>
 800c120:	2a25      	cmp	r2, #37	; 0x25
 800c122:	d1f9      	bne.n	800c118 <_svfiprintf_r+0x50>
 800c124:	ebba 0b04 	subs.w	fp, sl, r4
 800c128:	d00b      	beq.n	800c142 <_svfiprintf_r+0x7a>
 800c12a:	465b      	mov	r3, fp
 800c12c:	4622      	mov	r2, r4
 800c12e:	4629      	mov	r1, r5
 800c130:	4638      	mov	r0, r7
 800c132:	f7ff ff6d 	bl	800c010 <__ssputs_r>
 800c136:	3001      	adds	r0, #1
 800c138:	f000 80aa 	beq.w	800c290 <_svfiprintf_r+0x1c8>
 800c13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c13e:	445a      	add	r2, fp
 800c140:	9209      	str	r2, [sp, #36]	; 0x24
 800c142:	f89a 3000 	ldrb.w	r3, [sl]
 800c146:	2b00      	cmp	r3, #0
 800c148:	f000 80a2 	beq.w	800c290 <_svfiprintf_r+0x1c8>
 800c14c:	2300      	movs	r3, #0
 800c14e:	f04f 32ff 	mov.w	r2, #4294967295
 800c152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c156:	f10a 0a01 	add.w	sl, sl, #1
 800c15a:	9304      	str	r3, [sp, #16]
 800c15c:	9307      	str	r3, [sp, #28]
 800c15e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c162:	931a      	str	r3, [sp, #104]	; 0x68
 800c164:	4654      	mov	r4, sl
 800c166:	2205      	movs	r2, #5
 800c168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c16c:	4851      	ldr	r0, [pc, #324]	; (800c2b4 <_svfiprintf_r+0x1ec>)
 800c16e:	f7f4 f85f 	bl	8000230 <memchr>
 800c172:	9a04      	ldr	r2, [sp, #16]
 800c174:	b9d8      	cbnz	r0, 800c1ae <_svfiprintf_r+0xe6>
 800c176:	06d0      	lsls	r0, r2, #27
 800c178:	bf44      	itt	mi
 800c17a:	2320      	movmi	r3, #32
 800c17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c180:	0711      	lsls	r1, r2, #28
 800c182:	bf44      	itt	mi
 800c184:	232b      	movmi	r3, #43	; 0x2b
 800c186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c18a:	f89a 3000 	ldrb.w	r3, [sl]
 800c18e:	2b2a      	cmp	r3, #42	; 0x2a
 800c190:	d015      	beq.n	800c1be <_svfiprintf_r+0xf6>
 800c192:	9a07      	ldr	r2, [sp, #28]
 800c194:	4654      	mov	r4, sl
 800c196:	2000      	movs	r0, #0
 800c198:	f04f 0c0a 	mov.w	ip, #10
 800c19c:	4621      	mov	r1, r4
 800c19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1a2:	3b30      	subs	r3, #48	; 0x30
 800c1a4:	2b09      	cmp	r3, #9
 800c1a6:	d94e      	bls.n	800c246 <_svfiprintf_r+0x17e>
 800c1a8:	b1b0      	cbz	r0, 800c1d8 <_svfiprintf_r+0x110>
 800c1aa:	9207      	str	r2, [sp, #28]
 800c1ac:	e014      	b.n	800c1d8 <_svfiprintf_r+0x110>
 800c1ae:	eba0 0308 	sub.w	r3, r0, r8
 800c1b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	9304      	str	r3, [sp, #16]
 800c1ba:	46a2      	mov	sl, r4
 800c1bc:	e7d2      	b.n	800c164 <_svfiprintf_r+0x9c>
 800c1be:	9b03      	ldr	r3, [sp, #12]
 800c1c0:	1d19      	adds	r1, r3, #4
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	9103      	str	r1, [sp, #12]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	bfbb      	ittet	lt
 800c1ca:	425b      	neglt	r3, r3
 800c1cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d0:	9307      	strge	r3, [sp, #28]
 800c1d2:	9307      	strlt	r3, [sp, #28]
 800c1d4:	bfb8      	it	lt
 800c1d6:	9204      	strlt	r2, [sp, #16]
 800c1d8:	7823      	ldrb	r3, [r4, #0]
 800c1da:	2b2e      	cmp	r3, #46	; 0x2e
 800c1dc:	d10c      	bne.n	800c1f8 <_svfiprintf_r+0x130>
 800c1de:	7863      	ldrb	r3, [r4, #1]
 800c1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1e2:	d135      	bne.n	800c250 <_svfiprintf_r+0x188>
 800c1e4:	9b03      	ldr	r3, [sp, #12]
 800c1e6:	1d1a      	adds	r2, r3, #4
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	9203      	str	r2, [sp, #12]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	bfb8      	it	lt
 800c1f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1f4:	3402      	adds	r4, #2
 800c1f6:	9305      	str	r3, [sp, #20]
 800c1f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2c4 <_svfiprintf_r+0x1fc>
 800c1fc:	7821      	ldrb	r1, [r4, #0]
 800c1fe:	2203      	movs	r2, #3
 800c200:	4650      	mov	r0, sl
 800c202:	f7f4 f815 	bl	8000230 <memchr>
 800c206:	b140      	cbz	r0, 800c21a <_svfiprintf_r+0x152>
 800c208:	2340      	movs	r3, #64	; 0x40
 800c20a:	eba0 000a 	sub.w	r0, r0, sl
 800c20e:	fa03 f000 	lsl.w	r0, r3, r0
 800c212:	9b04      	ldr	r3, [sp, #16]
 800c214:	4303      	orrs	r3, r0
 800c216:	3401      	adds	r4, #1
 800c218:	9304      	str	r3, [sp, #16]
 800c21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c21e:	4826      	ldr	r0, [pc, #152]	; (800c2b8 <_svfiprintf_r+0x1f0>)
 800c220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c224:	2206      	movs	r2, #6
 800c226:	f7f4 f803 	bl	8000230 <memchr>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d038      	beq.n	800c2a0 <_svfiprintf_r+0x1d8>
 800c22e:	4b23      	ldr	r3, [pc, #140]	; (800c2bc <_svfiprintf_r+0x1f4>)
 800c230:	bb1b      	cbnz	r3, 800c27a <_svfiprintf_r+0x1b2>
 800c232:	9b03      	ldr	r3, [sp, #12]
 800c234:	3307      	adds	r3, #7
 800c236:	f023 0307 	bic.w	r3, r3, #7
 800c23a:	3308      	adds	r3, #8
 800c23c:	9303      	str	r3, [sp, #12]
 800c23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c240:	4433      	add	r3, r6
 800c242:	9309      	str	r3, [sp, #36]	; 0x24
 800c244:	e767      	b.n	800c116 <_svfiprintf_r+0x4e>
 800c246:	fb0c 3202 	mla	r2, ip, r2, r3
 800c24a:	460c      	mov	r4, r1
 800c24c:	2001      	movs	r0, #1
 800c24e:	e7a5      	b.n	800c19c <_svfiprintf_r+0xd4>
 800c250:	2300      	movs	r3, #0
 800c252:	3401      	adds	r4, #1
 800c254:	9305      	str	r3, [sp, #20]
 800c256:	4619      	mov	r1, r3
 800c258:	f04f 0c0a 	mov.w	ip, #10
 800c25c:	4620      	mov	r0, r4
 800c25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c262:	3a30      	subs	r2, #48	; 0x30
 800c264:	2a09      	cmp	r2, #9
 800c266:	d903      	bls.n	800c270 <_svfiprintf_r+0x1a8>
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d0c5      	beq.n	800c1f8 <_svfiprintf_r+0x130>
 800c26c:	9105      	str	r1, [sp, #20]
 800c26e:	e7c3      	b.n	800c1f8 <_svfiprintf_r+0x130>
 800c270:	fb0c 2101 	mla	r1, ip, r1, r2
 800c274:	4604      	mov	r4, r0
 800c276:	2301      	movs	r3, #1
 800c278:	e7f0      	b.n	800c25c <_svfiprintf_r+0x194>
 800c27a:	ab03      	add	r3, sp, #12
 800c27c:	9300      	str	r3, [sp, #0]
 800c27e:	462a      	mov	r2, r5
 800c280:	4b0f      	ldr	r3, [pc, #60]	; (800c2c0 <_svfiprintf_r+0x1f8>)
 800c282:	a904      	add	r1, sp, #16
 800c284:	4638      	mov	r0, r7
 800c286:	f3af 8000 	nop.w
 800c28a:	1c42      	adds	r2, r0, #1
 800c28c:	4606      	mov	r6, r0
 800c28e:	d1d6      	bne.n	800c23e <_svfiprintf_r+0x176>
 800c290:	89ab      	ldrh	r3, [r5, #12]
 800c292:	065b      	lsls	r3, r3, #25
 800c294:	f53f af2c 	bmi.w	800c0f0 <_svfiprintf_r+0x28>
 800c298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c29a:	b01d      	add	sp, #116	; 0x74
 800c29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a0:	ab03      	add	r3, sp, #12
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	462a      	mov	r2, r5
 800c2a6:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <_svfiprintf_r+0x1f8>)
 800c2a8:	a904      	add	r1, sp, #16
 800c2aa:	4638      	mov	r0, r7
 800c2ac:	f000 f87a 	bl	800c3a4 <_printf_i>
 800c2b0:	e7eb      	b.n	800c28a <_svfiprintf_r+0x1c2>
 800c2b2:	bf00      	nop
 800c2b4:	0800ca8c 	.word	0x0800ca8c
 800c2b8:	0800ca96 	.word	0x0800ca96
 800c2bc:	00000000 	.word	0x00000000
 800c2c0:	0800c011 	.word	0x0800c011
 800c2c4:	0800ca92 	.word	0x0800ca92

0800c2c8 <_printf_common>:
 800c2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2cc:	4616      	mov	r6, r2
 800c2ce:	4699      	mov	r9, r3
 800c2d0:	688a      	ldr	r2, [r1, #8]
 800c2d2:	690b      	ldr	r3, [r1, #16]
 800c2d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	bfb8      	it	lt
 800c2dc:	4613      	movlt	r3, r2
 800c2de:	6033      	str	r3, [r6, #0]
 800c2e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2e4:	4607      	mov	r7, r0
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	b10a      	cbz	r2, 800c2ee <_printf_common+0x26>
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	6033      	str	r3, [r6, #0]
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	0699      	lsls	r1, r3, #26
 800c2f2:	bf42      	ittt	mi
 800c2f4:	6833      	ldrmi	r3, [r6, #0]
 800c2f6:	3302      	addmi	r3, #2
 800c2f8:	6033      	strmi	r3, [r6, #0]
 800c2fa:	6825      	ldr	r5, [r4, #0]
 800c2fc:	f015 0506 	ands.w	r5, r5, #6
 800c300:	d106      	bne.n	800c310 <_printf_common+0x48>
 800c302:	f104 0a19 	add.w	sl, r4, #25
 800c306:	68e3      	ldr	r3, [r4, #12]
 800c308:	6832      	ldr	r2, [r6, #0]
 800c30a:	1a9b      	subs	r3, r3, r2
 800c30c:	42ab      	cmp	r3, r5
 800c30e:	dc26      	bgt.n	800c35e <_printf_common+0x96>
 800c310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c314:	1e13      	subs	r3, r2, #0
 800c316:	6822      	ldr	r2, [r4, #0]
 800c318:	bf18      	it	ne
 800c31a:	2301      	movne	r3, #1
 800c31c:	0692      	lsls	r2, r2, #26
 800c31e:	d42b      	bmi.n	800c378 <_printf_common+0xb0>
 800c320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c324:	4649      	mov	r1, r9
 800c326:	4638      	mov	r0, r7
 800c328:	47c0      	blx	r8
 800c32a:	3001      	adds	r0, #1
 800c32c:	d01e      	beq.n	800c36c <_printf_common+0xa4>
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	68e5      	ldr	r5, [r4, #12]
 800c332:	6832      	ldr	r2, [r6, #0]
 800c334:	f003 0306 	and.w	r3, r3, #6
 800c338:	2b04      	cmp	r3, #4
 800c33a:	bf08      	it	eq
 800c33c:	1aad      	subeq	r5, r5, r2
 800c33e:	68a3      	ldr	r3, [r4, #8]
 800c340:	6922      	ldr	r2, [r4, #16]
 800c342:	bf0c      	ite	eq
 800c344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c348:	2500      	movne	r5, #0
 800c34a:	4293      	cmp	r3, r2
 800c34c:	bfc4      	itt	gt
 800c34e:	1a9b      	subgt	r3, r3, r2
 800c350:	18ed      	addgt	r5, r5, r3
 800c352:	2600      	movs	r6, #0
 800c354:	341a      	adds	r4, #26
 800c356:	42b5      	cmp	r5, r6
 800c358:	d11a      	bne.n	800c390 <_printf_common+0xc8>
 800c35a:	2000      	movs	r0, #0
 800c35c:	e008      	b.n	800c370 <_printf_common+0xa8>
 800c35e:	2301      	movs	r3, #1
 800c360:	4652      	mov	r2, sl
 800c362:	4649      	mov	r1, r9
 800c364:	4638      	mov	r0, r7
 800c366:	47c0      	blx	r8
 800c368:	3001      	adds	r0, #1
 800c36a:	d103      	bne.n	800c374 <_printf_common+0xac>
 800c36c:	f04f 30ff 	mov.w	r0, #4294967295
 800c370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c374:	3501      	adds	r5, #1
 800c376:	e7c6      	b.n	800c306 <_printf_common+0x3e>
 800c378:	18e1      	adds	r1, r4, r3
 800c37a:	1c5a      	adds	r2, r3, #1
 800c37c:	2030      	movs	r0, #48	; 0x30
 800c37e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c382:	4422      	add	r2, r4
 800c384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c38c:	3302      	adds	r3, #2
 800c38e:	e7c7      	b.n	800c320 <_printf_common+0x58>
 800c390:	2301      	movs	r3, #1
 800c392:	4622      	mov	r2, r4
 800c394:	4649      	mov	r1, r9
 800c396:	4638      	mov	r0, r7
 800c398:	47c0      	blx	r8
 800c39a:	3001      	adds	r0, #1
 800c39c:	d0e6      	beq.n	800c36c <_printf_common+0xa4>
 800c39e:	3601      	adds	r6, #1
 800c3a0:	e7d9      	b.n	800c356 <_printf_common+0x8e>
	...

0800c3a4 <_printf_i>:
 800c3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a8:	7e0f      	ldrb	r7, [r1, #24]
 800c3aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3ac:	2f78      	cmp	r7, #120	; 0x78
 800c3ae:	4691      	mov	r9, r2
 800c3b0:	4680      	mov	r8, r0
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	469a      	mov	sl, r3
 800c3b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3ba:	d807      	bhi.n	800c3cc <_printf_i+0x28>
 800c3bc:	2f62      	cmp	r7, #98	; 0x62
 800c3be:	d80a      	bhi.n	800c3d6 <_printf_i+0x32>
 800c3c0:	2f00      	cmp	r7, #0
 800c3c2:	f000 80d8 	beq.w	800c576 <_printf_i+0x1d2>
 800c3c6:	2f58      	cmp	r7, #88	; 0x58
 800c3c8:	f000 80a3 	beq.w	800c512 <_printf_i+0x16e>
 800c3cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3d4:	e03a      	b.n	800c44c <_printf_i+0xa8>
 800c3d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3da:	2b15      	cmp	r3, #21
 800c3dc:	d8f6      	bhi.n	800c3cc <_printf_i+0x28>
 800c3de:	a101      	add	r1, pc, #4	; (adr r1, 800c3e4 <_printf_i+0x40>)
 800c3e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3e4:	0800c43d 	.word	0x0800c43d
 800c3e8:	0800c451 	.word	0x0800c451
 800c3ec:	0800c3cd 	.word	0x0800c3cd
 800c3f0:	0800c3cd 	.word	0x0800c3cd
 800c3f4:	0800c3cd 	.word	0x0800c3cd
 800c3f8:	0800c3cd 	.word	0x0800c3cd
 800c3fc:	0800c451 	.word	0x0800c451
 800c400:	0800c3cd 	.word	0x0800c3cd
 800c404:	0800c3cd 	.word	0x0800c3cd
 800c408:	0800c3cd 	.word	0x0800c3cd
 800c40c:	0800c3cd 	.word	0x0800c3cd
 800c410:	0800c55d 	.word	0x0800c55d
 800c414:	0800c481 	.word	0x0800c481
 800c418:	0800c53f 	.word	0x0800c53f
 800c41c:	0800c3cd 	.word	0x0800c3cd
 800c420:	0800c3cd 	.word	0x0800c3cd
 800c424:	0800c57f 	.word	0x0800c57f
 800c428:	0800c3cd 	.word	0x0800c3cd
 800c42c:	0800c481 	.word	0x0800c481
 800c430:	0800c3cd 	.word	0x0800c3cd
 800c434:	0800c3cd 	.word	0x0800c3cd
 800c438:	0800c547 	.word	0x0800c547
 800c43c:	682b      	ldr	r3, [r5, #0]
 800c43e:	1d1a      	adds	r2, r3, #4
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	602a      	str	r2, [r5, #0]
 800c444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c44c:	2301      	movs	r3, #1
 800c44e:	e0a3      	b.n	800c598 <_printf_i+0x1f4>
 800c450:	6820      	ldr	r0, [r4, #0]
 800c452:	6829      	ldr	r1, [r5, #0]
 800c454:	0606      	lsls	r6, r0, #24
 800c456:	f101 0304 	add.w	r3, r1, #4
 800c45a:	d50a      	bpl.n	800c472 <_printf_i+0xce>
 800c45c:	680e      	ldr	r6, [r1, #0]
 800c45e:	602b      	str	r3, [r5, #0]
 800c460:	2e00      	cmp	r6, #0
 800c462:	da03      	bge.n	800c46c <_printf_i+0xc8>
 800c464:	232d      	movs	r3, #45	; 0x2d
 800c466:	4276      	negs	r6, r6
 800c468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c46c:	485e      	ldr	r0, [pc, #376]	; (800c5e8 <_printf_i+0x244>)
 800c46e:	230a      	movs	r3, #10
 800c470:	e019      	b.n	800c4a6 <_printf_i+0x102>
 800c472:	680e      	ldr	r6, [r1, #0]
 800c474:	602b      	str	r3, [r5, #0]
 800c476:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c47a:	bf18      	it	ne
 800c47c:	b236      	sxthne	r6, r6
 800c47e:	e7ef      	b.n	800c460 <_printf_i+0xbc>
 800c480:	682b      	ldr	r3, [r5, #0]
 800c482:	6820      	ldr	r0, [r4, #0]
 800c484:	1d19      	adds	r1, r3, #4
 800c486:	6029      	str	r1, [r5, #0]
 800c488:	0601      	lsls	r1, r0, #24
 800c48a:	d501      	bpl.n	800c490 <_printf_i+0xec>
 800c48c:	681e      	ldr	r6, [r3, #0]
 800c48e:	e002      	b.n	800c496 <_printf_i+0xf2>
 800c490:	0646      	lsls	r6, r0, #25
 800c492:	d5fb      	bpl.n	800c48c <_printf_i+0xe8>
 800c494:	881e      	ldrh	r6, [r3, #0]
 800c496:	4854      	ldr	r0, [pc, #336]	; (800c5e8 <_printf_i+0x244>)
 800c498:	2f6f      	cmp	r7, #111	; 0x6f
 800c49a:	bf0c      	ite	eq
 800c49c:	2308      	moveq	r3, #8
 800c49e:	230a      	movne	r3, #10
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4a6:	6865      	ldr	r5, [r4, #4]
 800c4a8:	60a5      	str	r5, [r4, #8]
 800c4aa:	2d00      	cmp	r5, #0
 800c4ac:	bfa2      	ittt	ge
 800c4ae:	6821      	ldrge	r1, [r4, #0]
 800c4b0:	f021 0104 	bicge.w	r1, r1, #4
 800c4b4:	6021      	strge	r1, [r4, #0]
 800c4b6:	b90e      	cbnz	r6, 800c4bc <_printf_i+0x118>
 800c4b8:	2d00      	cmp	r5, #0
 800c4ba:	d04d      	beq.n	800c558 <_printf_i+0x1b4>
 800c4bc:	4615      	mov	r5, r2
 800c4be:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4c2:	fb03 6711 	mls	r7, r3, r1, r6
 800c4c6:	5dc7      	ldrb	r7, [r0, r7]
 800c4c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4cc:	4637      	mov	r7, r6
 800c4ce:	42bb      	cmp	r3, r7
 800c4d0:	460e      	mov	r6, r1
 800c4d2:	d9f4      	bls.n	800c4be <_printf_i+0x11a>
 800c4d4:	2b08      	cmp	r3, #8
 800c4d6:	d10b      	bne.n	800c4f0 <_printf_i+0x14c>
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	07de      	lsls	r6, r3, #31
 800c4dc:	d508      	bpl.n	800c4f0 <_printf_i+0x14c>
 800c4de:	6923      	ldr	r3, [r4, #16]
 800c4e0:	6861      	ldr	r1, [r4, #4]
 800c4e2:	4299      	cmp	r1, r3
 800c4e4:	bfde      	ittt	le
 800c4e6:	2330      	movle	r3, #48	; 0x30
 800c4e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4f0:	1b52      	subs	r2, r2, r5
 800c4f2:	6122      	str	r2, [r4, #16]
 800c4f4:	f8cd a000 	str.w	sl, [sp]
 800c4f8:	464b      	mov	r3, r9
 800c4fa:	aa03      	add	r2, sp, #12
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	4640      	mov	r0, r8
 800c500:	f7ff fee2 	bl	800c2c8 <_printf_common>
 800c504:	3001      	adds	r0, #1
 800c506:	d14c      	bne.n	800c5a2 <_printf_i+0x1fe>
 800c508:	f04f 30ff 	mov.w	r0, #4294967295
 800c50c:	b004      	add	sp, #16
 800c50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c512:	4835      	ldr	r0, [pc, #212]	; (800c5e8 <_printf_i+0x244>)
 800c514:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c518:	6829      	ldr	r1, [r5, #0]
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c520:	6029      	str	r1, [r5, #0]
 800c522:	061d      	lsls	r5, r3, #24
 800c524:	d514      	bpl.n	800c550 <_printf_i+0x1ac>
 800c526:	07df      	lsls	r7, r3, #31
 800c528:	bf44      	itt	mi
 800c52a:	f043 0320 	orrmi.w	r3, r3, #32
 800c52e:	6023      	strmi	r3, [r4, #0]
 800c530:	b91e      	cbnz	r6, 800c53a <_printf_i+0x196>
 800c532:	6823      	ldr	r3, [r4, #0]
 800c534:	f023 0320 	bic.w	r3, r3, #32
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	2310      	movs	r3, #16
 800c53c:	e7b0      	b.n	800c4a0 <_printf_i+0xfc>
 800c53e:	6823      	ldr	r3, [r4, #0]
 800c540:	f043 0320 	orr.w	r3, r3, #32
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	2378      	movs	r3, #120	; 0x78
 800c548:	4828      	ldr	r0, [pc, #160]	; (800c5ec <_printf_i+0x248>)
 800c54a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c54e:	e7e3      	b.n	800c518 <_printf_i+0x174>
 800c550:	0659      	lsls	r1, r3, #25
 800c552:	bf48      	it	mi
 800c554:	b2b6      	uxthmi	r6, r6
 800c556:	e7e6      	b.n	800c526 <_printf_i+0x182>
 800c558:	4615      	mov	r5, r2
 800c55a:	e7bb      	b.n	800c4d4 <_printf_i+0x130>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	6826      	ldr	r6, [r4, #0]
 800c560:	6961      	ldr	r1, [r4, #20]
 800c562:	1d18      	adds	r0, r3, #4
 800c564:	6028      	str	r0, [r5, #0]
 800c566:	0635      	lsls	r5, r6, #24
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	d501      	bpl.n	800c570 <_printf_i+0x1cc>
 800c56c:	6019      	str	r1, [r3, #0]
 800c56e:	e002      	b.n	800c576 <_printf_i+0x1d2>
 800c570:	0670      	lsls	r0, r6, #25
 800c572:	d5fb      	bpl.n	800c56c <_printf_i+0x1c8>
 800c574:	8019      	strh	r1, [r3, #0]
 800c576:	2300      	movs	r3, #0
 800c578:	6123      	str	r3, [r4, #16]
 800c57a:	4615      	mov	r5, r2
 800c57c:	e7ba      	b.n	800c4f4 <_printf_i+0x150>
 800c57e:	682b      	ldr	r3, [r5, #0]
 800c580:	1d1a      	adds	r2, r3, #4
 800c582:	602a      	str	r2, [r5, #0]
 800c584:	681d      	ldr	r5, [r3, #0]
 800c586:	6862      	ldr	r2, [r4, #4]
 800c588:	2100      	movs	r1, #0
 800c58a:	4628      	mov	r0, r5
 800c58c:	f7f3 fe50 	bl	8000230 <memchr>
 800c590:	b108      	cbz	r0, 800c596 <_printf_i+0x1f2>
 800c592:	1b40      	subs	r0, r0, r5
 800c594:	6060      	str	r0, [r4, #4]
 800c596:	6863      	ldr	r3, [r4, #4]
 800c598:	6123      	str	r3, [r4, #16]
 800c59a:	2300      	movs	r3, #0
 800c59c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5a0:	e7a8      	b.n	800c4f4 <_printf_i+0x150>
 800c5a2:	6923      	ldr	r3, [r4, #16]
 800c5a4:	462a      	mov	r2, r5
 800c5a6:	4649      	mov	r1, r9
 800c5a8:	4640      	mov	r0, r8
 800c5aa:	47d0      	blx	sl
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	d0ab      	beq.n	800c508 <_printf_i+0x164>
 800c5b0:	6823      	ldr	r3, [r4, #0]
 800c5b2:	079b      	lsls	r3, r3, #30
 800c5b4:	d413      	bmi.n	800c5de <_printf_i+0x23a>
 800c5b6:	68e0      	ldr	r0, [r4, #12]
 800c5b8:	9b03      	ldr	r3, [sp, #12]
 800c5ba:	4298      	cmp	r0, r3
 800c5bc:	bfb8      	it	lt
 800c5be:	4618      	movlt	r0, r3
 800c5c0:	e7a4      	b.n	800c50c <_printf_i+0x168>
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	4632      	mov	r2, r6
 800c5c6:	4649      	mov	r1, r9
 800c5c8:	4640      	mov	r0, r8
 800c5ca:	47d0      	blx	sl
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	d09b      	beq.n	800c508 <_printf_i+0x164>
 800c5d0:	3501      	adds	r5, #1
 800c5d2:	68e3      	ldr	r3, [r4, #12]
 800c5d4:	9903      	ldr	r1, [sp, #12]
 800c5d6:	1a5b      	subs	r3, r3, r1
 800c5d8:	42ab      	cmp	r3, r5
 800c5da:	dcf2      	bgt.n	800c5c2 <_printf_i+0x21e>
 800c5dc:	e7eb      	b.n	800c5b6 <_printf_i+0x212>
 800c5de:	2500      	movs	r5, #0
 800c5e0:	f104 0619 	add.w	r6, r4, #25
 800c5e4:	e7f5      	b.n	800c5d2 <_printf_i+0x22e>
 800c5e6:	bf00      	nop
 800c5e8:	0800ca9d 	.word	0x0800ca9d
 800c5ec:	0800caae 	.word	0x0800caae

0800c5f0 <_sbrk_r>:
 800c5f0:	b538      	push	{r3, r4, r5, lr}
 800c5f2:	4d06      	ldr	r5, [pc, #24]	; (800c60c <_sbrk_r+0x1c>)
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	4608      	mov	r0, r1
 800c5fa:	602b      	str	r3, [r5, #0]
 800c5fc:	f7fa fd5a 	bl	80070b4 <_sbrk>
 800c600:	1c43      	adds	r3, r0, #1
 800c602:	d102      	bne.n	800c60a <_sbrk_r+0x1a>
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	b103      	cbz	r3, 800c60a <_sbrk_r+0x1a>
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
 800c60c:	20000c38 	.word	0x20000c38

0800c610 <memmove>:
 800c610:	4288      	cmp	r0, r1
 800c612:	b510      	push	{r4, lr}
 800c614:	eb01 0402 	add.w	r4, r1, r2
 800c618:	d902      	bls.n	800c620 <memmove+0x10>
 800c61a:	4284      	cmp	r4, r0
 800c61c:	4623      	mov	r3, r4
 800c61e:	d807      	bhi.n	800c630 <memmove+0x20>
 800c620:	1e43      	subs	r3, r0, #1
 800c622:	42a1      	cmp	r1, r4
 800c624:	d008      	beq.n	800c638 <memmove+0x28>
 800c626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c62a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c62e:	e7f8      	b.n	800c622 <memmove+0x12>
 800c630:	4402      	add	r2, r0
 800c632:	4601      	mov	r1, r0
 800c634:	428a      	cmp	r2, r1
 800c636:	d100      	bne.n	800c63a <memmove+0x2a>
 800c638:	bd10      	pop	{r4, pc}
 800c63a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c63e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c642:	e7f7      	b.n	800c634 <memmove+0x24>

0800c644 <__malloc_lock>:
 800c644:	4801      	ldr	r0, [pc, #4]	; (800c64c <__malloc_lock+0x8>)
 800c646:	f7ff bc4d 	b.w	800bee4 <__retarget_lock_acquire_recursive>
 800c64a:	bf00      	nop
 800c64c:	20000c2c 	.word	0x20000c2c

0800c650 <__malloc_unlock>:
 800c650:	4801      	ldr	r0, [pc, #4]	; (800c658 <__malloc_unlock+0x8>)
 800c652:	f7ff bc48 	b.w	800bee6 <__retarget_lock_release_recursive>
 800c656:	bf00      	nop
 800c658:	20000c2c 	.word	0x20000c2c

0800c65c <_free_r>:
 800c65c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c65e:	2900      	cmp	r1, #0
 800c660:	d044      	beq.n	800c6ec <_free_r+0x90>
 800c662:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c666:	9001      	str	r0, [sp, #4]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f1a1 0404 	sub.w	r4, r1, #4
 800c66e:	bfb8      	it	lt
 800c670:	18e4      	addlt	r4, r4, r3
 800c672:	f7ff ffe7 	bl	800c644 <__malloc_lock>
 800c676:	4a1e      	ldr	r2, [pc, #120]	; (800c6f0 <_free_r+0x94>)
 800c678:	9801      	ldr	r0, [sp, #4]
 800c67a:	6813      	ldr	r3, [r2, #0]
 800c67c:	b933      	cbnz	r3, 800c68c <_free_r+0x30>
 800c67e:	6063      	str	r3, [r4, #4]
 800c680:	6014      	str	r4, [r2, #0]
 800c682:	b003      	add	sp, #12
 800c684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c688:	f7ff bfe2 	b.w	800c650 <__malloc_unlock>
 800c68c:	42a3      	cmp	r3, r4
 800c68e:	d908      	bls.n	800c6a2 <_free_r+0x46>
 800c690:	6825      	ldr	r5, [r4, #0]
 800c692:	1961      	adds	r1, r4, r5
 800c694:	428b      	cmp	r3, r1
 800c696:	bf01      	itttt	eq
 800c698:	6819      	ldreq	r1, [r3, #0]
 800c69a:	685b      	ldreq	r3, [r3, #4]
 800c69c:	1949      	addeq	r1, r1, r5
 800c69e:	6021      	streq	r1, [r4, #0]
 800c6a0:	e7ed      	b.n	800c67e <_free_r+0x22>
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	b10b      	cbz	r3, 800c6ac <_free_r+0x50>
 800c6a8:	42a3      	cmp	r3, r4
 800c6aa:	d9fa      	bls.n	800c6a2 <_free_r+0x46>
 800c6ac:	6811      	ldr	r1, [r2, #0]
 800c6ae:	1855      	adds	r5, r2, r1
 800c6b0:	42a5      	cmp	r5, r4
 800c6b2:	d10b      	bne.n	800c6cc <_free_r+0x70>
 800c6b4:	6824      	ldr	r4, [r4, #0]
 800c6b6:	4421      	add	r1, r4
 800c6b8:	1854      	adds	r4, r2, r1
 800c6ba:	42a3      	cmp	r3, r4
 800c6bc:	6011      	str	r1, [r2, #0]
 800c6be:	d1e0      	bne.n	800c682 <_free_r+0x26>
 800c6c0:	681c      	ldr	r4, [r3, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	6053      	str	r3, [r2, #4]
 800c6c6:	4421      	add	r1, r4
 800c6c8:	6011      	str	r1, [r2, #0]
 800c6ca:	e7da      	b.n	800c682 <_free_r+0x26>
 800c6cc:	d902      	bls.n	800c6d4 <_free_r+0x78>
 800c6ce:	230c      	movs	r3, #12
 800c6d0:	6003      	str	r3, [r0, #0]
 800c6d2:	e7d6      	b.n	800c682 <_free_r+0x26>
 800c6d4:	6825      	ldr	r5, [r4, #0]
 800c6d6:	1961      	adds	r1, r4, r5
 800c6d8:	428b      	cmp	r3, r1
 800c6da:	bf04      	itt	eq
 800c6dc:	6819      	ldreq	r1, [r3, #0]
 800c6de:	685b      	ldreq	r3, [r3, #4]
 800c6e0:	6063      	str	r3, [r4, #4]
 800c6e2:	bf04      	itt	eq
 800c6e4:	1949      	addeq	r1, r1, r5
 800c6e6:	6021      	streq	r1, [r4, #0]
 800c6e8:	6054      	str	r4, [r2, #4]
 800c6ea:	e7ca      	b.n	800c682 <_free_r+0x26>
 800c6ec:	b003      	add	sp, #12
 800c6ee:	bd30      	pop	{r4, r5, pc}
 800c6f0:	20000c30 	.word	0x20000c30

0800c6f4 <_realloc_r>:
 800c6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f8:	4680      	mov	r8, r0
 800c6fa:	4614      	mov	r4, r2
 800c6fc:	460e      	mov	r6, r1
 800c6fe:	b921      	cbnz	r1, 800c70a <_realloc_r+0x16>
 800c700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c704:	4611      	mov	r1, r2
 800c706:	f7ff bc0f 	b.w	800bf28 <_malloc_r>
 800c70a:	b92a      	cbnz	r2, 800c718 <_realloc_r+0x24>
 800c70c:	f7ff ffa6 	bl	800c65c <_free_r>
 800c710:	4625      	mov	r5, r4
 800c712:	4628      	mov	r0, r5
 800c714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c718:	f000 f81b 	bl	800c752 <_malloc_usable_size_r>
 800c71c:	4284      	cmp	r4, r0
 800c71e:	4607      	mov	r7, r0
 800c720:	d802      	bhi.n	800c728 <_realloc_r+0x34>
 800c722:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c726:	d812      	bhi.n	800c74e <_realloc_r+0x5a>
 800c728:	4621      	mov	r1, r4
 800c72a:	4640      	mov	r0, r8
 800c72c:	f7ff fbfc 	bl	800bf28 <_malloc_r>
 800c730:	4605      	mov	r5, r0
 800c732:	2800      	cmp	r0, #0
 800c734:	d0ed      	beq.n	800c712 <_realloc_r+0x1e>
 800c736:	42bc      	cmp	r4, r7
 800c738:	4622      	mov	r2, r4
 800c73a:	4631      	mov	r1, r6
 800c73c:	bf28      	it	cs
 800c73e:	463a      	movcs	r2, r7
 800c740:	f7ff fb5e 	bl	800be00 <memcpy>
 800c744:	4631      	mov	r1, r6
 800c746:	4640      	mov	r0, r8
 800c748:	f7ff ff88 	bl	800c65c <_free_r>
 800c74c:	e7e1      	b.n	800c712 <_realloc_r+0x1e>
 800c74e:	4635      	mov	r5, r6
 800c750:	e7df      	b.n	800c712 <_realloc_r+0x1e>

0800c752 <_malloc_usable_size_r>:
 800c752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c756:	1f18      	subs	r0, r3, #4
 800c758:	2b00      	cmp	r3, #0
 800c75a:	bfbc      	itt	lt
 800c75c:	580b      	ldrlt	r3, [r1, r0]
 800c75e:	18c0      	addlt	r0, r0, r3
 800c760:	4770      	bx	lr
	...

0800c764 <_init>:
 800c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c766:	bf00      	nop
 800c768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c76a:	bc08      	pop	{r3}
 800c76c:	469e      	mov	lr, r3
 800c76e:	4770      	bx	lr

0800c770 <_fini>:
 800c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c772:	bf00      	nop
 800c774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c776:	bc08      	pop	{r3}
 800c778:	469e      	mov	lr, r3
 800c77a:	4770      	bx	lr
